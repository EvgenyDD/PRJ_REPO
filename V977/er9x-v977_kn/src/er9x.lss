
er9x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000fe44  0000fed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000fe44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d3b  0080012c  0080012c  0000ff04  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  0000ff04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001991  00000000  00000000  00010084  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001bd8b  00000000  00000000  00011a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c8b  00000000  00000000  0002d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b5d7  00000000  00000000  0003042b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000013b0  00000000  00000000  0003ba04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004cb6  00000000  00000000  0003cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c91b  00000000  00000000  00041a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000440  00000000  00000000  0004e385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__ctors_end>
       4:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
       8:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
       c:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      10:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      14:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      18:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      1c:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      20:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      24:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      28:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_10>
      2c:	0c 94 e9 72 	jmp	0xe5d2	; 0xe5d2 <__vector_11>
      30:	0c 94 00 77 	jmp	0xee00	; 0xee00 <__vector_12>
      34:	0c 94 16 73 	jmp	0xe62c	; 0xe62c <__vector_13>
      38:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      3c:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__vector_15>
      40:	0c 94 97 10 	jmp	0x212e	; 0x212e <__vector_16>
      44:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      48:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      4c:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      50:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      54:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      58:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      5c:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      60:	0c 94 a9 76 	jmp	0xed52	; 0xed52 <__vector_24>
      64:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__vector_25>
      68:	0c 94 7d 73 	jmp	0xe6fa	; 0xe6fa <__vector_26>
      6c:	0c 94 6f 76 	jmp	0xecde	; 0xecde <__vector_27>
      70:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      74:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      78:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      7c:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      80:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      84:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      88:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__bad_interrupt>
      8c:	a9 78       	andi	r26, 0x89	; 137
      8e:	ad 78       	andi	r26, 0x8D	; 141
      90:	b1 78       	andi	r27, 0x81	; 129
      92:	b7 78       	andi	r27, 0x87	; 135
      94:	ca 78       	andi	r28, 0x8A	; 138
      96:	de 78       	andi	r29, 0x8E	; 142
      98:	f0 78       	andi	r31, 0x80	; 128
      9a:	fc 78       	andi	r31, 0x8C	; 140
      9c:	0f 79       	andi	r16, 0x9F	; 159
      9e:	21 79       	andi	r18, 0x91	; 145
      a0:	27 79       	andi	r18, 0x97	; 151
      a2:	41 79       	andi	r20, 0x91	; 145
      a4:	47 79       	andi	r20, 0x97	; 151
      a6:	4c 79       	andi	r20, 0x9C	; 156
      a8:	52 79       	andi	r21, 0x92	; 146
      aa:	58 79       	andi	r21, 0x98	; 152
      ac:	5e 79       	andi	r21, 0x9E	; 158
      ae:	64 79       	andi	r22, 0x94	; 148
      b0:	71 79       	andi	r23, 0x91	; 145
      b2:	75 79       	andi	r23, 0x95	; 149
      b4:	7b 79       	andi	r23, 0x9B	; 155
      b6:	81 79       	andi	r24, 0x91	; 145
      b8:	85 79       	andi	r24, 0x95	; 149
      ba:	8a 79       	andi	r24, 0x9A	; 154
      bc:	92 79       	andi	r25, 0x92	; 146
      be:	98 79       	andi	r25, 0x98	; 152
      c0:	9d 79       	andi	r25, 0x9D	; 157
      c2:	a2 79       	andi	r26, 0x92	; 146
      c4:	a7 79       	andi	r26, 0x97	; 151
      c6:	ac 79       	andi	r26, 0x9C	; 156
      c8:	b2 79       	andi	r27, 0x92	; 146
      ca:	b8 79       	andi	r27, 0x98	; 152
      cc:	be 79       	andi	r27, 0x9E	; 158
      ce:	c4 79       	andi	r28, 0x94	; 148
      d0:	ca 79       	andi	r28, 0x9A	; 154

000000d2 <bchout_ar>:
      d2:	1b 1e 27 2d 36 39 4b 4e 63 6c 72 78 87 8d 93 9c     ..'-69KNclrx....
      e2:	b1 b4 c6 c9 d2 d8 e1 e4                             ........

000000ea <Str_Switches>:
      ea:	03 54 48 52 52 55 44 45 4c 45 49 44 30 49 44 31     .THRRUDELEID0ID1
      fa:	49 44 32 41 49 4c 47 45 41 54 52 4e 4c 31 20 4c     ID2AILGEATRNL1 L
     10a:	32 20 4c 33 20 4c 34 20 4c 35 20 4c 36 20 4c 37     2 L3 L4 L5 L6 L7
     11a:	20 4c 38 20 4c 39 20 4c 41 20 4c 42 20 4c 43 20      L8 L9 LA LB LC 
	...

0000012b <Str_OFF>:
     12b:	4f 46 46 00                                         OFF.

0000012f <Str_ON>:
     12f:	4f 4e 20 00                                         ON .

00000133 <modi12x3>:
     133:	04 52 75 64 20 45 6c 65 20 54 68 72 20 41 69 6c     .Rud Ele Thr Ail
     143:	20 00                                                .

00000145 <stickScramble>:
     145:	00 01 02 03 00 02 01 03 03 01 02 00 03 02 01 00     ................

00000155 <_ZZL16checkQuickSelectvE3__c>:
     155:	4c 4f 41 44 49 4e 47 00                             LOADING.

0000015d <_ZZL8checkMemvE3__c>:
     15d:	45 45 50 52 4f 4d 20 6c 6f 77 20 6d 65 6d 00        EEPROM low mem.

0000016c <_ZZL10checkAlarmvE3__c>:
     16c:	41 6c 61 72 6d 73 20 44 69 73 61 62 6c 65 64 00     Alarms Disabled.

0000017c <_ZZL13checkWarningsvE3__c>:
     17c:	20 4f 6c 64 20 56 65 72 73 69 6f 6e 20 45 45 50      Old Version EEP
     18c:	52 4f 4d 20 20 20 43 48 45 43 4b 20 53 45 54 54     ROM   CHECK SETT
     19c:	49 4e 47 53 2f 43 41 4c 49 42 00                    INGS/CALIB.

000001a7 <_ZL4rate>:
     1a7:	00 00 64 28 10 07 03 01                             ..d(....

000001af <_ZZ8pushMenuPFvhEE3__c>:
     1af:	6d 53 74 61 63 6b 20 6f 66 6c 6f 77 00              mStack oflow.

000001bc <_ZZ7popMenubE3__c>:
     1bc:	6d 53 74 61 63 6b 20 75 66 6c 6f 77 00              mStack uflow.

000001c9 <_ZL9Str_Alert>:
     1c9:	20 41 4c 45 52 54 00                                 ALERT.

000001d0 <_ZZ6almessPKchE3__c_0>:
     1d0:	4d 45 53 53 41 47 45 00                             MESSAGE.

000001d8 <_ZZ6almessPKchE3__c>:
     1d8:	70 72 65 73 73 20 61 6e 79 20 4b 65 79 00           press any Key.

000001e6 <_ZZ13checkSwitchesvE3__c_0>:
     1e6:	50 6c 65 61 73 65 20 52 65 73 65 74 20 53 77 69     Please Reset Swi
     1f6:	74 63 68 65 73 00                                   tches.

000001fc <_ZZ13checkSwitchesvE3__c>:
     1fc:	53 77 69 74 63 68 20 57 61 72 6e 69 6e 67 00        Switch Warning.

0000020b <_ZZ8checkTHRvE3__c_0>:
     20b:	52 65 73 65 74 20 74 68 72 6f 74 74 6c 65 00        Reset throttle.

0000021a <_ZZ8checkTHRvE3__c>:
     21a:	54 68 72 6f 74 74 6c 65 20 6e 6f 74 20 69 64 6c     Throttle not idl
     22a:	65 00                                               e.

0000022c <_ZZ13alertMessagesPKcS0_E3__c>:
     22c:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f     Press any key to
     23c:	20 73 6b 69 70 00                                    skip.

00000242 <_ZZ11putsTmrModehhhhE3__c>:
     242:	4f 46 46 4f 4e 20 54 48 73 54 48 25 00              OFFON THsTH%.

0000024f <_ZZ14putsDrSwitcheshhahE3__c>:
     24f:	2d 2d 2d 00                                         ---.

00000253 <_ZZ10putsChnRawhhhhE3__c>:
     253:	2d 2d 2d 2d 00                                      ----.

00000258 <_ZL11csTypeTable>:
     258:	00 00 00 00 01 01 01 02 02 02 02 01 01 03 00        ...............

00000267 <Stamps>:
     267:	56 45 52 53 3a 20 56 31 2e 32 34 33 39 2d 4d 69     VERS: V1.2439-Mi
     277:	6b 65 1f 44 41 54 45 3a 20 31 30 2e 30 31 2e 32     ke.DATE: 10.01.2
     287:	30 31 35 1f 54 49 4d 45 3a 20 32 30 3a 30 39 3a     015.TIME: 20:09:
     297:	31 37 1f 20 53 56 4e 3a 20 65 72 39 78 2d 72 38     17. SVN: er9x-r8
     2a7:	31 36 1f 20 4d 4f 44 3a 20 20 20 00                 16. MOD:   .

000002b3 <Str_Switch_warn>:
     2b3:	53 77 69 74 63 68 20 57 61 72 6e 69 6e 67 00        Switch Warning.

000002c2 <Str_Chans_Gv>:
     2c2:	04 50 31 20 20 50 32 20 20 50 33 20 20 48 41 4c     .P1  P2  P3  HAL
     2d2:	46 46 55 4c 4c 43 59 43 31 43 59 43 32 43 59 43     FFULLCYC1CYC2CYC
     2e2:	33 50 50 4d 31 50 50 4d 32 50 50 4d 33 50 50 4d     3PPM1PPM2PPM3PPM
     2f2:	34 50 50 4d 35 50 50 4d 36 50 50 4d 37 50 50 4d     4PPM5PPM6PPM7PPM
     302:	38 43 48 31 20 43 48 32 20 43 48 33 20 43 48 34     8CH1 CH2 CH3 CH4
     312:	20 43 48 35 20 43 48 36 20 43 48 37 20 43 48 38      CH5 CH6 CH7 CH8
     322:	20 43 48 39 20 43 48 31 30 43 48 31 31 43 48 31      CH9 CH10CH11CH1
     332:	32 43 48 31 33 43 48 31 34 43 48 31 35 43 48 31     2CH13CH14CH15CH1
     342:	36 53 57 43 48 47 56 31 20 47 56 32 20 47 56 33     6SWCHGV1 GV2 GV3
     352:	20 47 56 34 20 47 56 35 20 47 56 36 20 47 56 37      GV4 GV5 GV6 GV7
     362:	20 54 48 49 53 00                                    THIS.

00000368 <Curve_Str>:
     368:	03 2d 2d 2d 78 3e 30 78 3c 30 7c 78 7c 66 3e 30     .---x>0x<0|x|f>0
     378:	66 3c 30 7c 66 7c 63 31 20 63 32 20 63 33 20 63     f<0|f|c1 c2 c3 c
     388:	34 20 63 35 20 63 36 20 63 37 20 63 38 20 63 39     4 c5 c6 c7 c8 c9
     398:	20 63 31 30 63 31 31 63 31 32 63 31 33 63 31 34      c10c11c12c13c14
     3a8:	63 31 35 63 31 36 00                                c15c16.

000003af <Str_telemItems>:
     3af:	04 2d 2d 2d 2d 54 49 4d 31 54 49 4d 32 42 41 54     .----TIM1TIM2BAT
     3bf:	54 47 76 72 31 47 76 72 32 47 76 72 33 47 76 72     TGvr1Gvr2Gvr3Gvr
     3cf:	34 47 76 72 35 47 76 72 36 47 76 72 37 00           4Gvr5Gvr6Gvr7.

000003dd <TelemIndex>:
     3dd:	fe ff fd f6 f7 f8 f9 fa fb fc                       ..........

000003e7 <_ZL14Str_Main_Popup>:
     3e7:	4d 6f 64 65 6c 20 53 65 6c 65 63 74 00 4d 6f 64     Model Select.Mod
     3f7:	65 6c 20 53 65 74 75 70 00 4c 61 73 74 20 4d 65     el Setup.Last Me
     407:	6e 75 00 52 61 64 69 6f 20 53 65 74 75 70 00 53     nu.Radio Setup.S
     417:	74 61 74 69 73 74 69 63 73 00                       tatistics.

00000421 <_ZL11Str_General>:
     421:	47 65 6e 65 72 61 6c 00                             General.

00000429 <_ZL11ProgColumns>:
     429:	00 02 03 04 06 09                                   ......

0000042f <_ZL12Str_TRE012AG>:
     42f:	54 52 45 30 31 32 41 47 00                          TRE012AG.

00000438 <_ZL9Str_Timer>:
     438:	54 69 6d 65 72 00                                   Timer.

0000043e <_ZL14Str_heli_setup>:
     43e:	48 65 6c 69 20 53 65 74 75 70 00                    Heli Setup.

00000449 <_ZL8Str_Expo>:
     449:	45 78 70 6f 2f 44 72 00                             Expo/Dr.

00000451 <_ZL12Str_Protocol>:
     451:	50 72 6f 74 6f 63 6f 6c 00                          Protocol.

0000045a <_ZZ18menuProcModelIndexhE3__c_23>:
     45a:	03 41 6d 65 4a 61 70 45 75 72 00                    .AmeJapEur.

00000465 <_ZZ18menuProcModelIndexhE3__c_22>:
     465:	03 44 31 36 44 38 20 4c 52 50 00                    .D16D8 LRP.

00000470 <_ZZ18menuProcModelIndexhE3__c_21>:
     470:	20 54 79 70 65 1f 20 43 6f 75 6e 74 72 79 1f 42      Type. Country.B
     480:	69 6e 64 1f 52 61 6e 67 65 00                       ind.Range.

0000048a <_ZZ18menuProcModelIndexhE3__c_20>:
     48a:	09 4c 50 34 2f 4c 50 35 20 20 44 53 4d 32 6f 6e     .LP4/LP5  DSM2on
     49a:	6c 79 20 44 53 4d 32 2f 44 53 4d 58 00              ly DSM2/DSMX.

000004a7 <_ZZ18menuProcModelIndexhE3__c_19>:
     4a7:	44 53 4d 20 54 79 70 65 00                          DSM Type.

000004b0 <_ZZ18menuProcModelIndexhE3__c_18>:
     4b0:	03 50 4f 53 4e 45 47 00                             .POSNEG.

000004b8 <_ZZ18menuProcModelIndexhE3__c_17>:
     4b8:	53 68 69 66 74 20 53 65 6c 00                       Shift Sel.

000004c2 <_ZZ18menuProcModelIndexhE3__c_16>:
     4c2:	50 50 4d 20 46 72 4c 65 6e 0d 6d 53 65 63 00        PPM FrLen.mSec.

000004d1 <_ZZ18menuProcModelIndexhE3__c_15>:
     4d1:	0b 52 78 4e 75 6d 00                                .RxNum.

000004d8 <_ZZ18menuProcModelIndexhE3__c_14>:
     4d8:	04 34 43 48 20 36 43 48 20 38 43 48 20 31 30 43     .4CH 6CH 8CH 10C
     4e8:	48 31 32 43 48 31 34 43 48 31 36 43 48 00           H12CH14CH16CH.

000004f6 <_ZZ18menuProcModelIndexhE3__c_13>:
     4f6:	13 75 53 00                                         .uS.

000004fa <_ZZ18menuProcModelIndexhE3__c_12>:
     4fa:	06 50 50 4d 20 20 20 50 58 58 20 20 20 44 53 4d     .PPM   PXX   DSM
     50a:	32 20 20 50 50 4d 31 36 20 4e 52 46 20 20 20 50     2  PPM16 NRF   P
     51a:	50 4d 53 49 4d 00                                   PMSIM.

00000520 <_ZZ18menuProcModelIndexhE3__c_11>:
     520:	31 73 74 20 43 68 61 6e 1f 50 72 6f 74 6f 00        1st Chan.Proto.

0000052f <_ZZ18menuProcModelIndexhE3__c_10>:
     52f:	02 45 78 70 6f 1f 1f 01 57 65 69 67 68 74 1f 1f     .Expo...Weight..
     53f:	44 72 53 77 31 1f 44 72 53 77 32 00                 DrSw1.DrSw2.

0000054b <_ZZ18menuProcModelIndexhE3__c_9>:
     54b:	07 04 44 52 20 48 69 20 04 44 52 20 4d 69 64 04     ..DR Hi .DR Mid.
     55b:	44 52 20 4c 6f 77 00                                DR Low.

00000562 <_ZZ18menuProcModelIndexhE3__c_8>:
     562:	04 2d 2d 2d 2d 31 32 30 20 31 32 30 58 31 34 30     .----120 120X140
     572:	20 39 30 20 20 00                                    90  .

00000578 <_ZZ18menuProcModelIndexhE3__c_7>:
     578:	53 77 61 73 68 20 54 79 70 65 1f 43 6f 6c 6c 65     Swash Type.Colle
     588:	63 74 69 76 65 1f 53 77 61 73 68 20 52 69 6e 67     ctive.Swash Ring
     598:	1f 45 4c 45 20 44 69 72 65 63 74 69 6f 6e 1f 41     .ELE Direction.A
     5a8:	49 4c 20 44 69 72 65 63 74 69 6f 6e 1f 43 4f 4c     IL Direction.COL
     5b8:	20 44 69 72 65 63 74 69 6f 6e 00                     Direction.

000005c3 <_ZZ18menuProcModelIndexhE3__c_6>:
     5c3:	52 45 54 41 31 32 33 00                             RETA123.

000005cb <_ZZ18menuProcModelIndexhE3__c_5>:
     5cb:	54 72 69 6d 20 53 77 1f 48 69 2e 52 65 73 20 53     Trim Sw.Hi.Res S
     5db:	6c 6f 77 2f 44 65 6c 61 79 1f 42 65 65 70 20 43     low/Delay.Beep C
     5eb:	6e 74 00                                            nt.

000005ee <_ZZ18menuProcModelIndexhE3__c_4>:
     5ee:	06 45 78 70 20 20 20 45 78 46 69 6e 65 46 69 6e     .Exp   ExFineFin
     5fe:	65 20 20 4d 65 64 69 75 6d 43 6f 61 72 73 65 00     e  MediumCoarse.

0000060e <_ZZ18menuProcModelIndexhE3__c_3>:
     60e:	03 2d 2d 2d 50 31 20 50 32 20 50 33 20 47 56 34     .---P1 P2 P3 GV4
     61e:	47 56 35 47 56 36 47 56 37 00                       GV5GV6GV7.

00000628 <_ZZ18menuProcModelIndexhE3__c_2>:
     628:	56 6f 6c 75 6d 65 20 43 6f 6e 74 72 6f 6c 1f 45     Volume Control.E
     638:	2e 20 4c 69 6d 69 74 73 1f 54 72 61 69 6e 65 72     . Limits.Trainer
     648:	1f 54 2d 54 72 69 6d 1f 54 2d 45 78 70 6f 1f 54     .T-Trim.T-Expo.T
     658:	72 69 6d 20 49 6e 63 00                             rim Inc.

00000660 <_ZZ18menuProcModelIndexhE3__c_1>:
     660:	05 2d 31 30 30 25 20 20 20 30 25 00                 .-100%   0%.

0000066c <_ZZ18menuProcModelIndexhE3__c_0>:
     66c:	44 65 66 61 75 6c 74 20 53 77 1f 43 75 73 74 6f     Default Sw.Custo
     67c:	6d 53 74 6b 4e 61 6d 65 73 1f 41 75 74 6f 20 4c     mStkNames.Auto L
     68c:	69 6d 69 74 73 1f 54 68 72 6f 74 74 6c 65 20 44     imits.Throttle D
     69c:	65 66 61 75 6c 74 00                                efault.

000006a3 <_ZZ18menuProcModelIndexhE3__c>:
     6a3:	56 6f 69 63 65 20 49 6e 64 65 78 11 4d 45 4e 55     Voice Index.MENU
	...

000006b4 <_ZZ18menuProcModelIndexhE9n_Strings>:
     6b4:	bb 10 3e 04 ce 06 49 04 d5 06 db 06 c1 10 cc 10     ..>...I.........
     6c4:	e2 06 d7 10 38 04 21 04 51 04                       ....8.!.Q.

000006ce <_ZL10Str_limits>:
     6ce:	4c 69 6d 69 74 73 00                                Limits.

000006d5 <_ZL9Str_Modes>:
     6d5:	4d 6f 64 65 73 00                                   Modes.

000006db <_ZL10Str_Curves>:
     6db:	43 75 72 76 65 73 00                                Curves.

000006e2 <_ZL11Str_Globals>:
     6e2:	47 6c 6f 62 61 6c 56 61 72 73 00                    GlobalVars.

000006ed <_ZZL9editTimerhE3__c_0>:
     6ed:	0a 43 6f 75 6e 74 20 44 6f 77 6e 43 6f 75 6e 74     .Count DownCount
     6fd:	20 55 70 20 20 00                                    Up  .

00000703 <_ZZL9editTimerhE3__c>:
     703:	54 69 6d 65 72 1f 54 72 69 67 67 65 72 41 1f 54     Timer.TriggerA.T
     713:	72 69 67 67 65 72 42 1f 54 69 6d 65 72 1f 52 65     riggerB.Timer.Re
     723:	73 65 74 20 53 77 69 74 63 68 00                    set Switch.

0000072e <_ZL11Str_Cswitch>:
     72e:	07 2d 2d 2d 2d 20 20 20 76 3e 76 61 6c 20 20 76     .----   v>val  v
     73e:	3c 76 61 6c 20 20 7c 76 7c 3e 76 61 6c 7c 76 7c     <val  |v|>val|v|
     74e:	3c 76 61 6c 41 4e 44 20 20 20 20 4f 52 20 20 20     <valAND    OR   
     75e:	20 20 58 4f 52 20 20 20 20 76 31 3d 3d 76 32 20       XOR    v1==v2 
     76e:	76 31 21 3d 76 32 20 76 31 3e 76 32 20 20 76 31     v1!=v2 v1>v2  v1
     77e:	3c 76 32 20 20 4c 61 74 63 68 20 20 46 2d 46 6c     <v2  Latch  F-Fl
     78e:	6f 70 20 54 69 6d 65 4f 66 66 76 31 60 3d 76 61     op TimeOffv1`=va
     79e:	6c 00                                               l.

000007a0 <_ZZL16menuProcSwitcheshE3__c_0>:
     7a0:	0d 4f 6e 00                                         .On.

000007a4 <_ZZL16menuProcSwitcheshE3__c>:
     7a4:	4c 4f 47 49 43 41 4c 20 53 57 49 54 43 48 45 53     LOGICAL SWITCHES
	...

000007b5 <_ZZL14menuProcLimitshE3__c>:
     7b5:	43 4f 50 59 20 54 52 49 4d 20 5b 4d 45 4e 55 5d     COPY TRIM [MENU]
	...

000007c6 <_ZL10Str_Sounds>:
     7c6:	06 57 61 72 6e 31 20 57 61 72 6e 32 20 43 68 65     .Warn1 Warn2 Che
     7d6:	61 70 20 52 69 6e 67 20 20 53 63 69 46 69 20 52     ap Ring  SciFi R
     7e6:	6f 62 6f 74 20 43 68 69 72 70 20 54 61 64 61 20     obot Chirp Tada 
     7f6:	20 43 72 69 63 6b 74 53 69 72 65 6e 20 41 6c 6d      CricktSiren Alm
     806:	43 6c 6b 52 61 74 61 74 61 54 69 63 6b 20 20 48     ClkRatataTick  H
     816:	61 70 74 63 31 48 61 70 74 63 32 48 61 70 74 63     aptc1Haptc2Haptc
     826:	33 00                                               3.

00000828 <_ZZL22menuProcSafetySwitcheshE3__c_4>:
     828:	06 4f 4e 20 20 20 20 4f 46 46 20 20 20 42 4f 54     .ON    OFF   BOT
     838:	48 20 20 31 35 53 65 63 73 33 30 53 65 63 73 36     H  15Secs30Secs6
     848:	30 53 65 63 73 56 61 72 69 62 6c 00                 0SecsVaribl.

00000854 <_ZZL22menuProcSafetySwitcheshE3__c_3>:
     854:	56 53 00                                            VS.

00000857 <_ZZL22menuProcSafetySwitcheshE3__c_2>:
     857:	07 20 38 20 53 65 63 73 31 32 20 53 65 63 73 31     . 8 Secs12 Secs1
     867:	36 20 53 65 63 73 00                                6 Secs.

0000086e <_ZZL22menuProcSafetySwitcheshE3__c_1>:
     86e:	01 53 41 56 58 00                                   .SAVX.

00000874 <_ZZL22menuProcSafetySwitcheshE3__c_0>:
     874:	4e 75 6d 62 65 72 20 56 6f 69 63 65 20 53 77 00     Number Voice Sw.

00000884 <_ZZL22menuProcSafetySwitcheshE3__c>:
     884:	53 61 66 65 74 79 20 53 77 69 74 63 68 65 73 00     Safety Switches.

00000894 <_ZL15Str_On_Off_Both>:
     894:	04 20 20 4f 4e 20 4f 46 46 42 4f 54 48 00           .  ON OFFBOTH.

000008a2 <_ZZ18menuProcVoiceAlarmhE3__c_0>:
     8a2:	56 41 00                                            VA.

000008a5 <_ZZ18menuProcVoiceAlarmhE3__c>:
     8a5:	56 6f 69 63 65 20 41 6c 61 72 6d 73 00              Voice Alarms.

000008b2 <_ZZ16menuProcVoiceOnehE3__c_10>:
     8b2:	4d 45 4e 55 20 4c 4f 4e 47 00                       MENU LONG.

000008bc <_ZZ16menuProcVoiceOnehE3__c_9>:
     8bc:	44 65 6c 65 74 65 00                                Delete.

000008c3 <_ZZ16menuProcVoiceOnehE3__c_8>:
     8c3:	56 6f 69 63 65 20 46 69 6c 65 00                    Voice File.

000008ce <_ZZ16menuProcVoiceOnehE3__c_7>:
     8ce:	06 2d 2d 2d 2d 2d 2d 4e 75 6d 62 65 72 20 41 75     .------Number Au
     8de:	64 69 6f 00                                         dio.

000008e2 <_ZZ16menuProcVoiceOnehE3__c_6>:
     8e2:	04 50 6c 61 79 4d 75 74 65 00                       .PlayMute.

000008ec <_ZZ16menuProcVoiceOnehE3__c_5>:
     8ec:	06 4e 6f 20 20 20 20 42 65 66 6f 72 65 41 66 74     .No    BeforeAft
     8fc:	65 72 20 00                                         er .

00000900 <_ZZ16menuProcVoiceOnehE3__c_4>:
     900:	07 2d 2d 2d 2d 2d 2d 2d 48 61 70 74 69 63 31 48     .-------Haptic1H
     910:	61 70 74 69 63 32 48 61 70 74 69 63 33 00           aptic2Haptic3.

0000091e <_ZZ16menuProcVoiceOnehE3__c_3>:
     91e:	07 76 60 3d 76 61 6c 20 76 3d 76 61 6c 20 20 00     .v`=val v=val  .

0000092e <_ZZ16menuProcVoiceOnehE3__c_2>:
     92e:	07 28 0d 29 00                                      .(.).

00000933 <_ZZ16menuProcVoiceOnehE3__c_1>:
     933:	50 6c 61 79 20 53 6f 75 72 63 65 1f 4f 6e 20 6e     Play Source.On n
     943:	6f 20 54 65 6c 65 6d 65 74 72 79 1f 46 69 6c 65     o Telemetry.File
     953:	54 79 70 65 00                                      Type.

00000958 <_ZZ16menuProcVoiceOnehE3__c_0>:
     958:	53 6f 75 72 63 65 1f 46 75 6e 63 74 69 6f 6e 1f     Source.Function.
     968:	56 61 6c 75 65 1f 53 77 69 74 63 68 1f 52 61 74     Value.Switch.Rat
     978:	65 1f 48 61 70 74 69 63 00                          e.Haptic.

00000981 <_ZZ16menuProcVoiceOnehE3__c>:
     981:	56 6f 69 63 65 20 41 6c 61 72 6d 00                 Voice Alarm.

0000098d <_ZL11Str_Display>:
     98d:	44 69 73 70 6c 61 79 00                             Display.

00000995 <_ZL15Str_AudioHaptic>:
     995:	41 75 64 69 6f 48 61 70 74 69 63 00                 AudioHaptic.

000009a1 <_ZL15Str_minute_Beep>:
     9a1:	4d 69 6e 75 74 65 20 62 65 65 70 00                 Minute beep.

000009ad <_ZL12Str_Controls>:
     9ad:	43 6f 6e 74 72 6f 6c 73 00                          Controls.

000009b6 <_ZL10Str_1_RETA>:
     9b6:	01 52 45 54 41 00                                   .RETA.

000009bc <_ZL6sticks>:
     9bc:	12 08 12 00 08 1c 08 08 08 1c 08 00 00 08 22 00     ..............".
     9cc:	49 00 22 08 00 00 00 00 00 22 7f 22 00 00 00 08     I."......"."....
     9dc:	22 00 49 00 22 08 00 00 08 22 00 49 00 22 08 00     ".I."....".I."..
     9ec:	00 00 22 7f 22 00 00 00 00 00 08 22 00 49 00 22     .."."......".I."
     9fc:	08 00 00 08 1c 08 08 08 1c 08 00                    ...........

00000a07 <_ZL10Str_Alarms>:
     a07:	41 6c 61 72 6d 73 00                                Alarms.

00000a0e <_ZL18Str_Beep_Countdown>:
     a0e:	42 65 65 70 20 63 6f 75 6e 74 64 6f 77 6e 00        Beep countdown.

00000a1d <_ZL11Str_Version>:
     a1d:	56 65 72 73 69 6f 6e 00                             Version.

00000a25 <_ZL11Str_Trainer>:
     a25:	54 72 61 69 6e 65 72 00                             Trainer.

00000a2d <_ZL12Str_Hardware>:
     a2d:	48 61 72 64 77 61 72 65 00                          Hardware.

00000a36 <_ZL15Str_Calibration>:
     a36:	43 61 6c 69 62 72 61 74 69 6f 6e 00                 Calibration.

00000a42 <_ZL12menuWhenDone>:
     a42:	5b 4d 45 4e 55 5d 20 57 48 45 4e 20 44 4f 4e 45     [MENU] WHEN DONE
	...

00000a53 <_ZZ13menuProcIndexhE3__c_32>:
     a53:	03 4d 4f 56 45 20 53 54 49 43 4b 53 2f 50 4f 54     .MOVE STICKS/POT
     a63:	53 00                                               S.

00000a65 <_ZZ13menuProcIndexhE3__c_31>:
     a65:	05 53 45 54 20 4d 49 44 50 4f 49 4e 54 00           .SET MIDPOINT.

00000a73 <_ZZ13menuProcIndexhE3__c_30>:
     a73:	03 5b 4d 45 4e 55 5d 20 54 4f 20 53 54 41 52 54     .[MENU] TO START
	...

00000a84 <_ZZ13menuProcIndexhE3__c_29>:
     a84:	42 61 6e 64 47 61 70 00                             BandGap.

00000a8c <_ZZ13menuProcIndexhE3__c_28>:
     a8c:	43 61 6c 00                                         Cal.

00000a90 <_ZZ13menuProcIndexhE3__c_27>:
     a90:	4d 75 6c 74 69 70 6c 69 65 72 00                    Multiplier.

00000a9b <_ZZ13menuProcIndexhE3__c_26>:
     a9b:	03 6f 66 66 20 2b 3d 20 3a 3d 00                    .off += :=.

00000aa6 <_ZZ13menuProcIndexhE3__c_25>:
     aa6:	03 6d 6f 64 65 0a 25 20 73 72 63 20 20 73 77 00     .mode.% src  sw.

00000ab6 <_ZZ13menuProcIndexhE3__c_24>:
     ab6:	07 53 6c 61 76 65 00                                .Slave.

00000abd <_ZZ13menuProcIndexhE3__c_23>:
     abd:	12 42 47 00                                         .BG.

00000ac1 <_ZZ13menuProcIndexhE3__c_22>:
     ac1:	41 4e 41 00                                         ANA.

00000ac5 <_ZZ13menuProcIndexhE3__c_21>:
     ac5:	54 72 69 6d 2d 20 2b 00                             Trim- +.

00000acd <_ZZ13menuProcIndexhE3__c_20>:
     acd:	20 4c 65 66 74 1f 52 69 67 68 74 1f 03 55 70 1f      Left.Right..Up.
     add:	20 44 6f 77 6e 1f 20 45 78 69 74 1f 20 4d 65 6e      Down. Exit. Men
     aed:	75 00                                               u.

00000aef <_ZZ13menuProcIndexhE3__c_19>:
     aef:	44 49 41 47 00                                      DIAG.

00000af4 <_ZZ13menuProcIndexhE3__c_18>:
     af4:	53 74 69 63 6b 53 63 72 6f 6c 6c 00                 StickScroll.

00000b00 <_ZZ13menuProcIndexhE3__c_17>:
     b00:	50 6f 74 53 63 72 6f 6c 6c 00                       PotScroll.

00000b0a <_ZZ13menuProcIndexhE3__c_16>:
     b0a:	53 70 6c 61 73 68 20 4e 61 6d 65 00                 Splash Name.

00000b16 <_ZZ13menuProcIndexhE3__c_15>:
     b16:	53 70 6c 61 73 68 20 73 63 72 65 65 6e 00           Splash screen.

00000b24 <_ZZ13menuProcIndexhE3__c_14>:
     b24:	41 6c 61 72 6d 20 57 61 72 6e 69 6e 67 00           Alarm Warning.

00000b32 <_ZZ13menuProcIndexhE3__c_13>:
     b32:	4d 65 6d 6f 72 79 20 57 61 72 6e 69 6e 67 00        Memory Warning.

00000b41 <_ZZ13menuProcIndexhE3__c_12>:
     b41:	54 68 72 6f 74 74 6c 65 20 57 61 72 6e 69 6e 67     Throttle Warning
	...

00000b52 <_ZZ13menuProcIndexhE3__c_11>:
     b52:	42 61 74 74 65 72 79 20 77 61 72 6e 69 6e 67 1f     Battery warning.
     b62:	49 6e 61 63 74 69 76 69 74 79 20 61 6c 61 72 6d     Inactivity alarm
     b72:	13 6d 00                                            .m.

00000b75 <_ZZ13menuProcIndexhE3__c_10>:
     b75:	01 43 68 61 6e 6e 65 6c 20 4f 72 64 65 72 1f 4d     .Channel Order.M
     b85:	6f 64 65 00                                         ode.

00000b89 <_ZZ13menuProcIndexhE3__c_9>:
     b89:	45 6e 61 62 6c 65 20 50 50 4d 53 49 4d 00           Enable PPMSIM.

00000b97 <_ZZ13menuProcIndexhE3__c_8>:
     b97:	54 68 72 6f 74 74 6c 65 20 72 65 76 65 72 73 65     Throttle reverse
	...

00000ba8 <_ZZ13menuProcIndexhE3__c_7>:
     ba8:	43 72 6f 73 73 54 72 69 6d 00                       CrossTrim.

00000bb2 <_ZZ13menuProcIndexhE3__c_6>:
     bb2:	20 48 61 70 74 69 63 20 53 74 72 65 6e 67 74 68      Haptic Strength
	...

00000bc3 <_ZZ13menuProcIndexhE3__c_5>:
     bc3:	0a 42 65 65 70 65 72 20 20 20 20 50 69 53 70 6b     .Beeper    PiSpk
     bd3:	72 20 20 20 20 42 65 65 70 72 56 6f 69 63 65 50     r    BeeprVoiceP
     be3:	69 53 70 6b 56 6f 69 63 65 4d 65 67 61 53 6f 75     iSpkVoiceMegaSou
     bf3:	6e 64 20 00                                         nd .

00000bf7 <_ZZ13menuProcIndexhE3__c_4>:
     bf7:	06 51 75 69 65 74 20 4e 6f 4b 65 79 20 78 53 68     .Quiet NoKey xSh
     c07:	6f 72 74 53 68 6f 72 74 20 4e 6f 72 6d 20 20 4c     ortShort Norm  L
     c17:	6f 6e 67 20 20 78 4c 6f 6e 67 20 00                 ong  xLong .

00000c23 <_ZZ13menuProcIndexhE3__c_3>:
     c23:	56 6f 6c 75 6d 65 1f 42 65 65 70 65 72 1f 53 6f     Volume.Beeper.So
     c33:	75 6e 64 20 4d 6f 64 65 1f 20 53 70 65 61 6b 65     und Mode. Speake
     c43:	72 20 50 69 74 63 68 00                             r Pitch.

00000c4b <_ZZ13menuProcIndexhE3__c_2>:
     c4b:	46 6c 61 73 68 20 6f 6e 20 62 65 65 70 00           Flash on beep.

00000c59 <_ZZ13menuProcIndexhE3__c_1>:
     c59:	42 61 63 6b 6c 69 67 68 74 20 69 6e 76 65 72 74     Backlight invert
	...

00000c6a <_ZZ13menuProcIndexhE3__c_0>:
     c6a:	4c 69 67 68 74 20 73 77 69 74 63 68 1f 1f 4c 69     Light switch..Li
     c7a:	67 68 74 20 6f 66 66 20 61 66 74 65 72 13 73 1f     ght off after.s.
     c8a:	4c 69 67 68 74 20 6f 6e 20 53 74 6b 20 4d 76 13     Light on Stk Mv.
     c9a:	73 00                                               s.

00000c9c <_ZZ13menuProcIndexhE3__c>:
     c9c:	43 6f 6e 74 72 61 73 74 00                          Contrast.

00000ca5 <_ZZ13menuProcIndexhE9n_Strings>:
     ca5:	8d 09 95 09 07 0a 21 04 ad 09 2d 0a 36 0a 25 0a     ......!...-.6.%.
     cb5:	1d 0a dd 10 e7 10                                   ......

00000cbb <_ZZ9menuProc0hE2xt>:
     cbb:	22 04 7c 5e                                         ".|^

00000cbf <_ZZ9menuProc0hE3__c_0>:
     cbf:	54 54 6d 00                                         TTm.

00000cc3 <_ZZ9menuProc0hE3__c>:
     cc3:	03 45 78 70 45 78 46 46 6e 65 4d 65 64 43 72 73     .ExpExFFneMedCrs
	...

00000cd4 <_ZZ17menuProcStatistichE3__c_2>:
     cd4:	11 54 4f 54 1f 01 54 4d 45 11 54 53 57 1f 01 53     .TOT..TME.TSW..S
     ce4:	54 4b 11 53 54 25 00                                TK.ST%.

00000ceb <_ZZ17menuProcStatistichE3__c_1>:
     ceb:	03 5b 4d 45 4e 55 5d 20 74 6f 20 72 65 66 72 65     .[MENU] to refre
     cfb:	73 68 00                                            sh.

00000cfe <_ZZ17menuProcStatistichE3__c_0>:
     cfe:	74 6d 72 31 4c 61 74 20 6d 61 78 12 75 73 1f 74     tmr1Lat max.us.t
     d0e:	6d 72 31 4c 61 74 20 6d 69 6e 12 75 73 1f 74 6d     mr1Lat min.us.tm
     d1e:	72 31 20 4a 69 74 74 65 72 12 75 73 1f 74 6d 61     r1 Jitter.us.tma
     d2e:	69 6e 12 6d 73 00                                   in.ms.

00000d34 <_ZZ17menuProcStatistichE3__c>:
     d34:	53 54 41 54 00                                      STAT.

00000d39 <_ZL12ModelPopList>:
     d39:	45 44 49 54 00 53 45 4c 45 43 54 00 53 45 4c 2f     EDIT.SELECT.SEL/
     d49:	45 44 49 54 00 43 4f 50 59 00 4d 4f 56 45 00 44     EDIT.COPY.MOVE.D
     d59:	45 4c 45 54 45 00                                   ELETE.

00000d5f <_ZZ19menuProcModelSelecthE3__c_0>:
     d5f:	09 66 72 65 65 00                                   .free.

00000d65 <_ZZ19menuProcModelSelecthE3__c>:
     d65:	4d 4f 44 45 4c 53 45 4c 00                          MODELSEL.

00000d6e <_ZZ15menuModelPhaseshE3__c>:
     d6e:	20 46 4d 30 0a 52 45 54 41 00                        FM0.RETA.

00000d78 <_ZZ18dispFlightModenamehhhE3__c>:
     d78:	20 46 4d 00                                          FM.

00000d7c <_ZZ12menuPhaseOnehE3__c_0>:
     d7c:	53 77 69 74 63 68 1f 54 72 69 6d 73 1f 46 61 64     Switch.Trims.Fad
     d8c:	65 20 49 6e 1f 46 61 64 65 20 4f 75 74 00           e In.Fade Out.

00000d9a <_ZZ12menuPhaseOnehE3__c>:
     d9a:	46 4c 20 4d 4f 44 45 00                             FL MODE.

00000da2 <_ZZ12menuPhaseOnehE10mstate_tab>:
     da2:	00 03 00                                            ...

00000da5 <_ZZ13menuRangeBindhE3__c_0>:
     da5:	52 41 4e 47 45 20 43 48 45 43 4b 20 52 53 53 49     RANGE CHECK RSSI
     db5:	3a 00                                               :.

00000db7 <_ZZ13menuRangeBindhE3__c>:
     db7:	06 42 49 4e 44 49 4e 47 00                          .BINDING.

00000dc0 <_ZZ18menuDeleteDupModelhE3__c_1>:
     dc0:	44 75 70 6c 69 63 61 74 69 6e 67 20 6d 6f 64 65     Duplicating mode
     dd0:	6c 00                                               l.

00000dd2 <_ZZ18menuDeleteDupModelhE3__c_0>:
     dd2:	44 45 4c 45 54 45 20 4d 4f 44 45 4c 00              DELETE MODEL.

00000ddf <_ZZ18menuDeleteDupModelhE3__c>:
     ddf:	44 55 50 4c 49 43 41 54 45 20 4d 4f 44 45 4c 00     DUPLICATE MODEL.

00000def <_ZL9s_charTab>:
     def:	20 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f      ABCDEFGHIJKLMNO
     dff:	50 51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65     PQRSTUVWXYZabcde
     e0f:	66 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75     fghijklmnopqrstu
     e1f:	76 77 78 79 7a 30 31 32 33 34 35 36 37 38 39 5f     vwxyz0123456789_
     e2f:	2d 2e 00                                            -..

00000e32 <_ZZ11menuProcMixhE3__c_0>:
     e32:	01 2b 2a 52 00                                      .+*R.

00000e37 <_ZZ11menuProcMixhE3__c>:
     e37:	4d 49 58 45 52 00                                   MIXER.

00000e3d <_ZL10MixPopList>:
     e3d:	45 44 49 54 00 49 4e 53 45 52 54 00 43 4f 50 59     EDIT.INSERT.COPY
     e4d:	00 4d 4f 56 45 00 44 45 4c 45 54 45 00              .MOVE.DELETE.

00000e5a <_ZZL12popupDisplayPKchhE3__c>:
     e5a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000e69 <_ZZ13menuDeleteMixhE3__c>:
     e69:	44 45 4c 45 54 45 20 4d 49 58 3f 00                 DELETE MIX?.

00000e75 <_ZZ13yesNoMenuExitPKcE3__c>:
     e75:	03 59 45 53 0b 4e 4f 1f 03 5b 4d 45 4e 55 5d 0b     .YES.NO..[MENU].
     e85:	5b 45 58 49 54 5d 00                                [EXIT].

00000e8c <_ZZ15menuMixersLimithE3__c>:
     e8c:	4d 61 78 20 6d 69 78 65 72 73 20 72 65 61 63 68     Max mixers reach
     e9c:	3a 20 33 32 1f 1f 50 72 65 73 73 20 5b 45 58 49     : 32..Press [EXI
     eac:	54 5d 20 74 6f 20 61 62 6f 72 74 00                 T] to abort.

00000eb8 <_ZZ14menuProcMixOnehE3__c_5>:
     eb8:	08 41 64 64 20 20 20 20 20 4d 75 6c 74 69 70 6c     .Add     Multipl
     ec8:	79 52 65 70 6c 61 63 65 20 00                       yReplace .

00000ed2 <_ZZ14menuProcMixOnehE3__c_4>:
     ed2:	43 75 72 76 65 00                                   Curve.

00000ed8 <_ZZ14menuProcMixOnehE3__c_3>:
     ed8:	08 44 69 66 66 00                                   .Diff.

00000ede <_ZZ14menuProcMixOnehE3__c_2>:
     ede:	11 45 78 70 6f 00                                   .Expo.

00000ee4 <_ZZ14menuProcMixOnehE3__c_1>:
     ee4:	01 55 73 65 20 4f 75 74 70 75 74 20 20 20 00        .Use Output   .

00000ef3 <_ZZ14menuProcMixOnehE3__c_0>:
     ef3:	01 53 6f 75 72 63 65 1f 01 57 65 69 67 68 74 1f     .Source..Weight.
     f03:	01 4f 66 66 73 65 74 1f 01 46 69 78 20 4f 66 66     .Offset..Fix Off
     f13:	73 65 74 1f 01 45 6e 61 62 6c 65 45 78 70 6f 44     set..EnableExpoD
     f23:	52 1f 01 54 72 69 6d 1f 1f 1f 01 53 77 69 74 63     R..Trim....Switc
     f33:	68 1f 01 4d 4f 44 45 53 1f 01 57 61 72 6e 69 6e     h..MODES..Warnin
     f43:	67 1f 01 4d 75 6c 74 70 78 1f 01 44 65 6c 61 79     g..Multpx..Delay
     f53:	20 44 6f 77 6e 1f 01 44 65 6c 61 79 20 55 70 1f      Down..Delay Up.
     f63:	01 53 6c 6f 77 20 20 44 6f 77 6e 1f 01 53 6c 6f     .Slow  Down..Slo
     f73:	77 20 20 55 70 1f 53 57 43 48 20 53 77 69 74 63     w  Up.SWCH Switc
     f83:	68 00                                               h.

00000f85 <_ZZ14menuProcMixOnehE3__c>:
     f85:	45 44 49 54 20 4d 49 58 20 00                       EDIT MIX .

00000f8f <_ZL8SW_3_IDX>:
     f8f:	04 73 49 44 78 73 54 48 52 73 52 55 44 73 45 4c     .sIDxsTHRsRUDsEL
     f9f:	45 73 41 49 4c 73 47 45 41 73 54 52 4e 00           EsAILsGEAsTRN.

00000fad <_ZZ12putsChnOpRawhhP9t_MixDatahE3__c>:
     fad:	4f 50 00                                            OP.

00000fb0 <_ZZ17menuProcTemplateshE3__c_0>:
     fb0:	43 4c 45 41 52 20 4d 49 58 45 53 20 5b 4d 45 4e     CLEAR MIXES [MEN
     fc0:	55 5d 00                                            U].

00000fc3 <_ZZ17menuProcTemplateshE3__c>:
     fc3:	54 45 4d 50 4c 41 54 45 53 00                       TEMPLATES.

00000fcd <_ZL6Str_GV>:
     fcd:	47 56 00                                            GV.

00000fd0 <_ZZ15menuProcGlobalshE3__c_0>:
     fd0:	53 43 09 2b 0d 2a 12 2f 00                          SC.+.*./.

00000fd9 <_ZZ15menuProcGlobalshE3__c>:
     fd9:	03 2d 2d 2d 52 74 6d 45 74 6d 54 74 6d 41 74 6d     .---RtmEtmTtmAtm
     fe9:	52 45 4e 52 75 64 45 6c 65 54 68 72 41 69 6c 50     RENRudEleThrAilP
     ff9:	31 20 50 32 20 50 33 20 00                          1 P2 P3 .

00001002 <_ZZ15menuProcGlobalshE10mstate_tab>:
    1002:	01 01 01 01 01 01 01 00                             ........

0000100a <_ZL11UnitsString>:
    100a:	05 46 65 65 74 20 56 6f 6c 74 73 44 65 67 5f 43     .Feet VoltsDeg_C
    101a:	44 65 67 5f 46 6d 41 68 20 20 41 6d 70 73 20 4d     Deg_FmAh  Amps M
    102a:	65 74 72 65 57 61 74 74 73 00                       etreWatts.

00001034 <_ZZ12menuScaleOnehE3__c_1>:
    1034:	05 46 69 72 73 74 4c 61 73 74 20 00                 .FirstLast .

00001040 <_ZZ12menuScaleOnehE3__c_0>:
    1040:	53 6f 75 72 63 65 1f 1f 4f 66 66 73 65 74 1f 4d     Source..Offset.M
    1050:	75 6c 74 69 70 6c 69 65 72 1f 44 69 76 69 73 6f     ultiplier.Diviso
    1060:	72 1f 55 6e 69 74 1f 53 69 67 6e 1f 44 65 63 69     r.Unit.Sign.Deci
    1070:	6d 61 6c 73 1f 4f 66 66 73 65 74 20 41 74 00        mals.Offset At.

0000107f <_ZZ12menuScaleOnehE3__c>:
    107f:	53 43 00                                            SC.

00001082 <_ZZ11displayNextvE3__c>:
    1082:	5b 4d 6f 72 65 5d 00                                [More].

00001089 <_ZZ13menuProcCurvehE3__c>:
    1089:	43 56 00                                            CV.

0000108c <_ZZ16menuProcCurveOnehE3__c_0>:
    108c:	50 52 45 53 45 54 00                                PRESET.

00001093 <_ZZ16menuProcCurveOnehE3__c>:
    1093:	43 55 52 56 45 00                                   CURVE.

00001099 <_ZZ16menu_lcd_HYPHINVhhhhE3__c>:
    1099:	03 2d 2d 2d 49 4e 56 00                             .---INV.

000010a1 <_ZZ8editNamehhPhhhE3__c>:
    10a1:	4e 61 6d 65 00                                      Name.

000010a6 <_ZL9UnitsText>:
    10a6:	46 56 43 46 6d 41 6d 57                             FVCFmAmW

000010ae <_ZL10UnitsVoice>:
    10ae:	18 24 2f 2f 00 33 38 3b                             .$//.38;

000010b6 <_ZZ20putsAttIdxTelemItemshhhhE3__c>:
    10b6:	53 57 52 20 00                                      SWR .

000010bb <_ZL9Str_Mixer>:
    10bb:	4d 69 78 65 72 00                                   Mixer.

000010c1 <_ZL13Str_Cswitches>:
    10c1:	4c 2e 53 77 69 74 63 68 65 73 00                    L.Switches.

000010cc <_ZL10Str_Safety>:
    10cc:	53 61 66 65 74 79 20 53 77 73 00                    Safety Sws.

000010d7 <_ZL9Str_Voice>:
    10d7:	56 6f 69 63 65 00                                   Voice.

000010dd <_ZL13Str_DiagSwtch>:
    10dd:	44 69 61 67 53 77 74 63 68 00                       DiagSwtch.

000010e7 <_ZL11Str_DiagAna>:
    10e7:	44 69 61 67 41 6e 61 00                             DiagAna.

000010ef <_ZL19Str_EEPROM_Overflow>:
    10ef:	45 45 50 52 4f 4d 20 6f 76 65 72 66 6c 6f 77 00     EEPROM overflow.

000010ff <_ZZ14eeWriteGeneralvE3__c_1>:
    10ff:	67 65 6e 77 72 69 74 65 20 65 72 72 6f 72 00        genwrite error.

0000110e <_ZZ14eeWriteGeneralvE3__c_0>:
    110e:	45 45 50 52 4f 4d 20 46 6f 72 6d 61 74 74 69 6e     EEPROM Formattin
    111e:	67 00                                               g.

00001120 <_ZZ14eeWriteGeneralvE3__c>:
    1120:	42 61 64 20 45 45 70 72 6f 6d 20 44 61 74 61 00     Bad EEprom Data.

00001130 <_ZZ11eeLoadModelhE3__c_0>:
    1130:	43 48 45 43 4b 20 4d 4f 44 45 4c 20 54 49 4d 45     CHECK MODEL TIME
    1140:	52 53 00                                            RS.

00001143 <_ZZ11eeLoadModelhE3__c>:
    1143:	43 48 45 43 4b 20 4d 49 58 2f 44 52 20 53 4f 55     CHECK MIX/DR SOU
    1153:	52 43 45 53 00                                      RCES.

00001158 <_ZZ17modelDefaultWritehE3__c>:
    1158:	4d 4f 44 45 4c 20 20 20 20 20 00                    MODEL     .

00001163 <_ZZ16eeGeneralDefaultvE3__c>:
    1163:	4d 45 20 20 20 20 20 20 20 20 00                    ME        .

0000116e <_ZL7Lcdinit>:
    116e:	e2 ae a1 a6 a4 a2 c0 2f 25 af                       ......./%.

00001178 <_ZL8_bitmask>:
    1178:	01 02 04 08 10 20 40 80                             ..... @.

00001180 <_ZL4font>:
	...
    1188:	6f 00 00 07 00 07 00 14 7f 14 7f 14 24 2a 7f 2a     o...........$*.*
    1198:	12 23 13 08 64 62 36 49 55 22 50 00 05 03 00 00     .#..db6IU"P.....
    11a8:	00 1c 22 41 00 00 41 22 1c 00 14 08 3e 08 14 08     .."A..A"....>...
    11b8:	08 3e 08 08 00 50 30 00 00 08 08 08 08 08 00 60     .>...P0........`
    11c8:	60 00 00 20 10 08 04 02 00 3e 49 45 3e 00 00 42     `.. .....>IE>..B
    11d8:	7f 40 00 62 51 49 46 00 41 49 49 36 00 18 14 12     .@.bQIF.AII6....
    11e8:	7f 00 27 45 45 39 00 3e 49 49 32 00 01 79 05 03     ..'EE9.>II2..y..
    11f8:	00 36 49 49 36 00 06 49 29 1e 00 00 36 36 00 00     .6II6..I)...66..
    1208:	00 56 36 00 00 08 14 22 41 14 14 14 14 14 41 22     .V6...."A.....A"
    1218:	14 08 00 02 01 51 09 06 00 06 09 09 06 7e 09 09     .....Q.......~..
    1228:	09 7e 7f 49 49 49 36 3e 41 41 41 22 7f 41 41 22     .~.III6>AAA".AA"
    1238:	1c 7f 49 49 49 41 7f 09 09 09 01 3e 41 49 49 7a     ..IIIA.....>AIIz
    1248:	7f 08 08 08 7f 00 41 7f 41 00 20 40 41 3f 01 7f     ......A.A. @A?..
    1258:	08 14 22 41 7f 40 40 40 40 7f 02 0c 02 7f 7f 04     .."A.@@@@.......
    1268:	08 10 7f 3e 41 41 41 3e 7f 09 09 09 06 3e 41 51     ...>AAA>.....>AQ
    1278:	21 5e 7f 09 19 29 46 26 49 49 49 32 01 01 7f 01     !^...)F&III2....
    1288:	01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40 30 40 3f     .?@@@?. @ .?@0@?
    1298:	63 14 08 14 63 07 08 70 08 07 61 51 49 45 43 00     c...c..p..aQIEC.
    12a8:	7f 41 41 00 02 04 08 10 20 00 41 41 7f 00 04 02     .AA..... .AA....
    12b8:	01 02 04 40 40 40 40 40 08 04 08 10 08 20 54 54     ...@@@@@..... TT
    12c8:	54 78 7f 48 44 44 38 38 44 44 44 20 38 44 44 48     Tx.HDD88DDD 8DDH
    12d8:	7f 38 54 54 54 18 08 7e 09 01 02 0c 52 52 52 3e     .8TTT..~....RRR>
    12e8:	7f 08 04 04 78 00 44 7d 40 00 20 40 44 3d 00 7f     ....x.D}@. @D=..
    12f8:	10 28 44 00 00 41 7f 40 00 7c 04 18 04 78 7c 08     .(D..A.@.|...x|.
    1308:	04 04 78 38 44 44 44 38 7c 14 14 14 08 08 14 14     ..x8DDD8|.......
    1318:	18 7c 7c 08 04 04 08 48 54 54 54 20 04 3f 44 40     .||....HTTT .?D@
    1328:	20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40 20 40 3c      <@@ |. @ .<@ @<
    1338:	44 28 10 28 44 0c 50 50 50 3c 44 64 54 4c 44 00     D(.(D.PPP<DdTLD.
    1348:	08 36 41 00 00 00 7f 00 00 00 41 36 08 00 08 08     .6A.......A6....
    1358:	22 1c 08 08 1c 22 08 08                             "...."..

00001360 <_ZL12font_dblsize>:
	...
    1380:	33 3b 1f 0f 00 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0     3;..............
    1390:	c0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    13a8:	18 3c 3c 18 00 00 00 00 00 00 00 80 c0 e0 70 38     .<<...........p8
    13b8:	1c 0c 0c 0e 07 03 01 00 00 00 00 00 00 00 fc fe     ................
    13c8:	87 c3 e3 77 fe fc 00 00 0f 1f 3b 31 30 38 1f 0f     ...w......;108..
    13d8:	00 00 0c 0e ff ff 00 00 00 00 00 00 30 30 3f 3f     ............00??
    13e8:	30 30 00 00 00 00 0c 0e 07 83 c3 e7 7e 3c 00 00     00..........~<..
    13f8:	3c 3e 37 33 31 30 30 30 00 00 03 03 c3 c3 c3 e7     <>731000........
    1408:	fe 3c 00 00 30 30 30 30 30 39 1f 0f 00 00 c0 e0     .<..000009......
    1418:	70 38 1c 0e ff ff 00 00 03 03 03 03 03 03 3f 3f     p8............??
    1428:	00 00 3f 3f 33 33 33 73 e3 c3 00 00 0c 1c 38 30     ..??333s......80
    1438:	30 38 1f 0f 00 00 fc fe c7 c3 c3 c7 8e 0c 00 00     08..............
    1448:	0f 1f 38 30 30 39 1f 0f 00 00 03 03 c3 e3 73 3b     ..8009........s;
    1458:	1f 0f 00 00 00 00 3f 3f 00 00 00 00 00 00 3c fe     ......??......<.
    1468:	e7 c3 c3 e7 fe 3c 00 00 0f 1f 39 30 30 39 1f 0f     .....<....9009..
    1478:	00 00 3c 7e e7 c3 c3 e7 fe fc 00 00 00 00 30 38     ..<~..........08
    1488:	1c 0e 07 03 00 00 18 3c 3c 18 00 00 00 00 00 00     .......<<.......
    1498:	06 0f 0f 06 00 00 00 00 f0 f8 dc ce c7 c7 ce dc     ................
    14a8:	f8 f0 3f 3f 00 00 00 00 00 00 3f 3f ff ff c3 c3     ..??......??....
    14b8:	c3 c3 c3 e7 fe 3c 3f 3f 30 30 30 30 30 39 1f 0f     .....<??000009..
    14c8:	fc fe 07 03 03 03 03 07 0e 0c 0f 1f 38 30 30 30     ............8000
    14d8:	30 38 1c 0c ff ff 03 03 03 07 0e 1c f8 f0 3f 3f     08............??
    14e8:	30 30 30 38 1c 0e 07 03 ff ff c3 c3 c3 c3 c3 c3     0008............
    14f8:	03 03 3f 3f 30 30 30 30 30 30 30 30 ff ff c3 c3     ..??00000000....
    1508:	c3 c3 c3 c3 03 03 3f 3f 00 00 00 00 00 00 00 00     ......??........
    1518:	fc fe 07 03 c3 c3 c3 c7 ce cc 0f 1f 38 30 30 30     ............8000
    1528:	30 30 3f 3f ff ff c0 c0 c0 c0 c0 c0 ff ff 3f 3f     00??..........??
    1538:	00 00 00 00 00 00 3f 3f 00 00 03 03 ff ff 03 03     ......??........
    1548:	00 00 00 00 30 30 3f 3f 30 30 00 00 00 00 00 00     ....00??00......
    1558:	03 03 ff ff 03 03 0c 1c 38 30 30 38 1f 0f 00 00     ........8008....
    1568:	ff ff c0 e0 f0 38 1c 0e 07 03 3f 3f 00 01 03 07     .....8....??....
    1578:	0e 1c 38 30 ff ff 00 00 00 00 00 00 00 00 3f 3f     ..80..........??
    1588:	30 30 30 30 30 30 30 30 ff ff 0e 1c f8 f8 1c 0e     00000000........
    1598:	ff ff 3f 3f 00 00 00 00 00 00 3f 3f ff ff 38 70     ..??......??..8p
    15a8:	e0 c0 80 00 ff ff 3f 3f 00 00 00 01 03 03 3f 3f     ......??......??
    15b8:	fc fe 07 03 03 03 03 07 fe fc 0f 1f 38 30 30 30     ............8000
    15c8:	30 38 1f 0f ff ff c3 c3 c3 c3 c3 e7 7e 3c 3f 3f     08..........~<??
	...
    15e0:	fc fe 07 03 03 03 03 07 fe fc 0f 1f 38 30 33 37     ............8037
    15f0:	1e 1c 3f 33 ff ff c3 c3 c3 c3 c3 e7 7e 3c 3f 3f     ..?3........~<??
    1600:	00 00 03 07 0e 1c 38 30 3c 7e e7 c3 c3 c3 c3 c7     ......80<~......
    1610:	8e 0c 0c 1c 38 30 30 30 30 39 1f 0f 03 03 03 03     ....800009......
    1620:	ff ff 03 03 03 03 00 00 00 00 3f 3f 00 00 00 00     ..........??....
    1630:	ff ff 00 00 00 00 00 00 ff ff 0f 1f 38 30 30 30     ............8000
    1640:	30 38 1f 0f ff ff 00 00 00 00 00 00 ff ff 03 07     08..............
    1650:	0e 1c 38 38 1c 0e 07 03 ff ff 00 00 00 00 00 00     ..88............
    1660:	ff ff 0f 1f 38 38 1f 1f 38 38 1f 0f 0f 1f 38 f0     ....88..88....8.
    1670:	e0 e0 f0 38 1f 0f 3c 3e 07 03 01 01 03 07 3e 3c     ...8..<>......><
    1680:	3f 7f e0 c0 80 80 c0 e0 7f 3f 00 00 00 01 3f 3f     ?........?....??
    1690:	01 00 00 00 03 03 03 83 c3 e3 73 3b 1f 0f 3c 3e     ..........s;..<>
    16a0:	37 33 31 30 30 30 30 30 00 00 00 00 00 00 00 00     73100000........
    16b0:	00 00 30 30 30 30 30 30 30 30 30 30 00 00 30 30     ..0000000000..00
    16c0:	30 30 30 70 e0 c0 0c 1e 3f 33 33 33 33 33 3f 3f     000p....?33333??
    16d0:	ff ff c0 e0 70 30 30 70 e0 c0 3f 3f 30 30 30 30     ....p00p..??0000
    16e0:	30 38 1f 0f c0 e0 70 30 30 30 30 30 00 00 0f 1f     08....p00000....
    16f0:	38 30 30 30 30 38 1c 0c c0 e0 70 30 30 70 e0 c0     800008....p00p..
    1700:	ff ff 0f 1f 38 30 30 30 30 30 3f 3f c0 e0 70 30     ....800000??..p0
    1710:	30 30 30 70 e0 c0 0f 1f 3b 33 33 33 33 33 03 03     000p....;33333..
    1720:	c0 c0 fc fe c7 c3 03 07 0e 0c 00 00 3f 3f 00 00     ............??..
    1730:	00 00 00 00 f0 f8 9c 0c 0c 0c 0c 0c fc fc 00 01     ................
    1740:	33 33 33 33 33 3b 1f 0f ff ff c0 e0 70 30 30 70     33333;......p00p
    1750:	e0 c0 3f 3f 00 00 00 00 00 00 3f 3f 00 00 30 30     ..??......??..00
    1760:	f3 f3 00 00 00 00 00 00 30 30 3f 3f 30 30 00 00     ........00??00..
    1770:	00 00 00 00 30 30 f3 f3 00 00 0c 1c 38 30 30 38     ....00......8008
    1780:	1f 0f 00 00 ff ff 00 80 c0 e0 70 30 00 00 3f 3f     ..........p0..??
    1790:	03 07 0f 1c 38 30 00 00 00 00 03 03 ff ff 00 00     ....80..........
    17a0:	00 00 00 00 30 30 3f 3f 30 30 00 00 f0 f0 30 70     ....00??00....0p
    17b0:	e0 e0 70 70 e0 c0 3f 3f 00 00 03 03 00 00 3f 3f     ..pp..??......??
    17c0:	f0 f0 c0 e0 70 30 30 70 e0 c0 3f 3f 00 00 00 00     ....p00p..??....
    17d0:	00 00 3f 3f c0 e0 70 30 30 30 30 70 e0 c0 0f 1f     ..??..p0000p....
    17e0:	38 30 30 30 30 38 1f 0f f0 f0 30 30 30 30 30 f0     800008....00000.
    17f0:	e0 c0 3f 3f 03 03 03 03 03 03 01 00 c0 e0 f0 30     ..??...........0
    1800:	30 30 e0 c0 f0 f0 00 01 03 03 03 03 03 03 3f 3f     00............??
    1810:	f0 f0 c0 e0 70 30 30 70 e0 c0 3f 3f 00 00 00 00     ....p00p..??....
    1820:	00 00 00 00 c0 e0 f0 30 30 30 30 30 00 00 30 31     .......00000..01
    1830:	33 33 33 33 33 3f 1e 0c 30 30 ff ff 30 30 00 00     33333?..00..00..
    1840:	00 00 00 00 0f 1f 38 30 30 38 1c 0c f0 f0 00 00     ......8008......
    1850:	00 00 00 00 f0 f0 0f 1f 38 30 30 38 1c 0c 3f 3f     ........8008..??
    1860:	f0 f0 00 00 00 00 00 00 f0 f0 03 07 0e 1c 38 38     ..............88
    1870:	1c 0e 07 03 f0 f0 00 00 00 00 00 00 f0 f0 0f 1f     ................
    1880:	38 38 1c 1c 38 38 1f 0f 30 70 e0 c0 80 80 c0 e0     88..88..0p......
    1890:	70 30 30 38 1c 0f 07 07 0f 1c 38 30 f0 f0 80 00     p008......80....
    18a0:	00 00 00 00 f0 f0 00 01 33 33 33 33 33 3b 1f 0f     ........33333;..
    18b0:	30 30 30 30 30 b0 f0 f0 70 30 30 38 3c 3e 37 33     00000...p008<>73
    18c0:	31 30 30 30                                         1000

000018c4 <_ZZ7per10msvE9crossTrim>:
    18c4:	40 80 08 04 20 10 02 01                             @... ...

000018cc <n_Templates>:
    18cc:	f5 18 01 19 07 19 14 19 1b 19 28 19 33 19 3e 19     ..........(.3.>.

000018dc <_ZL8heli_ar1>:
    18dc:	9c 14 1e 46 5a                                      ...FZ

000018e1 <_ZL8heli_ar2>:
    18e1:	50 46 3c 46 64                                      PF<Fd

000018e6 <_ZL8heli_ar3>:
    18e6:	64 5a 50 5a 64                                      dZPZd

000018eb <_ZL8heli_ar4>:
    18eb:	e2 f1 00 32 64                                      ...2d

000018f0 <_ZL8heli_ar5>:
    18f0:	9c ce 00 32 64                                      ...2d

000018f5 <_ZL8string_1>:
    18f5:	53 69 6d 70 6c 65 20 34 2d 43 48 00                 Simple 4-CH.

00001901 <_ZL8string_2>:
    1901:	54 2d 43 75 74 00                                   T-Cut.

00001907 <_ZL8string_3>:
    1907:	53 74 69 63 6b 79 20 54 2d 43 75 74 00              Sticky T-Cut.

00001914 <_ZL8string_4>:
    1914:	56 2d 54 61 69 6c 00                                V-Tail.

0000191b <_ZL8string_5>:
    191b:	45 6c 65 76 6f 6e 5c 44 65 6c 74 61 00              Elevon\Delta.

00001928 <_ZL8string_6>:
    1928:	48 65 6c 69 20 53 65 74 75 70 00                    Heli Setup.

00001933 <_ZL8string_7>:
    1933:	47 79 72 6f 20 53 65 74 75 70 00                    Gyro Setup.

0000193e <_ZL8string_8>:
    193e:	53 65 72 76 6f 20 54 65 73 74 00                    Servo Test.

00001949 <_ZL8CRCTable>:
    1949:	00 00 89 11 12 23 9b 32 24 46 ad 57 36 65 bf 74     .....#.2$F.W6e.t
    1959:	48 8c c1 9d 5a af d3 be 6c ca e5 db 7e e9 f7 f8     H...Z...l...~...
    1969:	81 10 08 01 93 33 1a 22 a5 56 2c 47 b7 75 3e 64     .....3.".V,G.u>d
    1979:	c9 9c 40 8d db bf 52 ae ed da 64 cb ff f9 76 e8     ..@...R...d...v.
    1989:	02 21 8b 30 10 02 99 13 26 67 af 76 34 44 bd 55     .!.0....&g.v4D.U
    1999:	4a ad c3 bc 58 8e d1 9f 6e eb e7 fa 7c c8 f5 d9     J...X...n...|...
    19a9:	83 31 0a 20 91 12 18 03 a7 77 2e 66 b5 54 3c 45     .1. .....w.f.T<E
    19b9:	cb bd 42 ac d9 9e 50 8f ef fb 66 ea fd d8 74 c9     ..B...P...f...t.
    19c9:	04 42 8d 53 16 61 9f 70 20 04 a9 15 32 27 bb 36     .B.S.a.p ...2'.6
    19d9:	4c ce c5 df 5e ed d7 fc 68 88 e1 99 7a ab f3 ba     L...^...h...z...
    19e9:	85 52 0c 43 97 71 1e 60 a1 14 28 05 b3 37 3a 26     .R.C.q.`..(..7:&
    19f9:	cd de 44 cf df fd 56 ec e9 98 60 89 fb bb 72 aa     ..D...V...`...r.
    1a09:	06 63 8f 72 14 40 9d 51 22 25 ab 34 30 06 b9 17     .c.r.@.Q"%.40...
    1a19:	4e ef c7 fe 5c cc d5 dd 6a a9 e3 b8 78 8a f1 9b     N...\...j...x...
    1a29:	87 73 0e 62 95 50 1c 41 a3 35 2a 24 b1 16 38 07     .s.b.P.A.5*$..8.
    1a39:	cf ff 46 ee dd dc 54 cd eb b9 62 a8 f9 9a 70 8b     ..F...T...b...p.
    1a49:	08 84 81 95 1a a7 93 b6 2c c2 a5 d3 3e e1 b7 f0     ........,...>...
    1a59:	40 08 c9 19 52 2b db 3a 64 4e ed 5f 76 6d ff 7c     @...R+.:dN._vm.|
    1a69:	89 94 00 85 9b b7 12 a6 ad d2 24 c3 bf f1 36 e0     ..........$...6.
    1a79:	c1 18 48 09 d3 3b 5a 2a e5 5e 6c 4f f7 7d 7e 6c     ..H..;Z*.^lO.}~l
    1a89:	0a a5 83 b4 18 86 91 97 2e e3 a7 f2 3c c0 b5 d1     ............<...
    1a99:	42 29 cb 38 50 0a d9 1b 66 6f ef 7e 74 4c fd 5d     B).8P...fo.~tL.]
    1aa9:	8b b5 02 a4 99 96 10 87 af f3 26 e2 bd d0 34 c1     ..........&...4.
    1ab9:	c3 39 4a 28 d1 1a 58 0b e7 7f 6e 6e f5 5c 7c 4d     .9J(..X...nn.\|M
    1ac9:	0c c6 85 d7 1e e5 97 f4 28 80 a1 91 3a a3 b3 b2     ........(...:...
    1ad9:	44 4a cd 5b 56 69 df 78 60 0c e9 1d 72 2f fb 3e     DJ.[Vi.x`...r/.>
    1ae9:	8d d6 04 c7 9f f5 16 e4 a9 90 20 81 bb b3 32 a2     .......... ...2.
    1af9:	c5 5a 4c 4b d7 79 5e 68 e1 1c 68 0d f3 3f 7a 2e     .ZLK.y^h..h..?z.
    1b09:	0e e7 87 f6 1c c4 95 d5 2a a1 a3 b0 38 82 b1 93     ........*...8...
    1b19:	46 6b cf 7a 54 48 dd 59 62 2d eb 3c 70 0e f9 1f     Fk.zTH.Yb-.<p...
    1b29:	8f f7 06 e6 9d d4 14 c5 ab b1 22 a0 b9 92 30 83     .........."...0.
    1b39:	c7 7b 4e 6a d5 58 5c 49 e3 3d 6a 2c f1 1e 78 0f     .{Nj.X\I.=j,..x.
	...

00001b4a <__ctors_start>:
    1b4a:	e5 11       	cpse	r30, r5

00001b4c <__ctors_end>:
    1b4c:	11 24       	eor	r1, r1
    1b4e:	1f be       	out	0x3f, r1	; 63
    1b50:	cf ef       	ldi	r28, 0xFF	; 255
    1b52:	d0 e1       	ldi	r29, 0x10	; 16
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	cd bf       	out	0x3d, r28	; 61

00001b58 <__do_copy_data>:
    1b58:	11 e0       	ldi	r17, 0x01	; 1
    1b5a:	a0 e0       	ldi	r26, 0x00	; 0
    1b5c:	b1 e0       	ldi	r27, 0x01	; 1
    1b5e:	e4 e4       	ldi	r30, 0x44	; 68
    1b60:	fe ef       	ldi	r31, 0xFE	; 254
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <.do_copy_data_start>

00001b64 <.do_copy_data_loop>:
    1b64:	05 90       	lpm	r0, Z+
    1b66:	0d 92       	st	X+, r0

00001b68 <.do_copy_data_start>:
    1b68:	ac 32       	cpi	r26, 0x2C	; 44
    1b6a:	b1 07       	cpc	r27, r17
    1b6c:	d9 f7       	brne	.-10     	; 0x1b64 <.do_copy_data_loop>

00001b6e <__do_clear_bss>:
    1b6e:	1e e0       	ldi	r17, 0x0E	; 14
    1b70:	ac e2       	ldi	r26, 0x2C	; 44
    1b72:	b1 e0       	ldi	r27, 0x01	; 1
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <.do_clear_bss_start>

00001b76 <.do_clear_bss_loop>:
    1b76:	1d 92       	st	X+, r1

00001b78 <.do_clear_bss_start>:
    1b78:	a7 36       	cpi	r26, 0x67	; 103
    1b7a:	b1 07       	cpc	r27, r17
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <.do_clear_bss_loop>

00001b7e <__do_global_ctors>:
    1b7e:	1b e1       	ldi	r17, 0x1B	; 27
    1b80:	cc e4       	ldi	r28, 0x4C	; 76
    1b82:	db e1       	ldi	r29, 0x1B	; 27
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <.do_global_ctors_start>

00001b86 <.do_global_ctors_loop>:
    1b86:	22 97       	sbiw	r28, 0x02	; 2
    1b88:	fe 01       	movw	r30, r28
    1b8a:	0e 94 ea 7e 	call	0xfdd4	; 0xfdd4 <__tablejump__>

00001b8e <.do_global_ctors_start>:
    1b8e:	ca 34       	cpi	r28, 0x4A	; 74
    1b90:	d1 07       	cpc	r29, r17
    1b92:	c9 f7       	brne	.-14     	; 0x1b86 <.do_global_ctors_loop>
    1b94:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <main>
    1b98:	0c 94 20 7f 	jmp	0xfe40	; 0xfe40 <_exit>

00001b9c <__bad_interrupt>:
    1b9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ba0 <_ZN10audioQueue6driverEv>:
    void event(uint8_t e,uint8_t f=BEEP_DEFAULT_FREQ);




inline void driver() {
    1ba0:	fc 01       	movw	r30, r24
#ifndef SIMU
  if (toneTimeLeft > 0) {	
    1ba2:	84 81       	ldd	r24, Z+4	; 0x04
    1ba4:	88 23       	and	r24, r24
    1ba6:	b9 f0       	breq	.+46     	; 0x1bd6 <_ZN10audioQueue6driverEv+0x36>
					switch ((g_eeGeneral.speakerMode & 1)){					 
    1ba8:	80 91 87 01 	lds	r24, 0x0187
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9c 01       	movw	r18, r24
    1bb0:	21 70       	andi	r18, 0x01	; 1
    1bb2:	30 70       	andi	r19, 0x00	; 0
    1bb4:	80 ff       	sbrs	r24, 0
    1bb6:	0b c0       	rjmp	.+22     	; 0x1bce <_ZN10audioQueue6driverEv+0x2e>
    1bb8:	21 30       	cpi	r18, 0x01	; 1
    1bba:	31 05       	cpc	r19, r1
    1bbc:	69 f4       	brne	.+26     	; 0x1bd8 <_ZN10audioQueue6driverEv+0x38>
							            PORTE |=  (1<<OUT_E_BUZZER); // speaker output 'high'
							        } 	 
							        break;	 
							  case 1:
									    static uint8_t toneCounter;
									    toneCounter += toneFreq;
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	90 91 66 0e 	lds	r25, 0x0E66
    1bc4:	89 0f       	add	r24, r25
    1bc6:	80 93 66 0e 	sts	0x0E66, r24
									    if ((toneCounter & 0x80) == 0x80) {
    1bca:	87 ff       	sbrs	r24, 7
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <_ZN10audioQueue6driverEv+0x32>
									      PORTE |= (1 << OUT_E_BUZZER);
    1bce:	1b 9a       	sbi	0x03, 3	; 3
    1bd0:	08 95       	ret
									    } else {
									      PORTE &= ~(1 << OUT_E_BUZZER);
    1bd2:	1b 98       	cbi	0x03, 3	; 3
    1bd4:	08 95       	ret
									    }							  	 
											break;						  	 
					}		 
	} else {
			PORTE &=  ~(1<<OUT_E_BUZZER); // speaker output 'low'
    1bd6:	1b 98       	cbi	0x03, 3	; 3
    1bd8:	08 95       	ret

00001bda <_Z12modeFixValueh>:


#ifdef FIX_MODE
uint8_t modeFixValue( uint8_t value )
{
	return pgm_read_byte(stickScramble+g_eeGeneral.stickMode*4+value)+1 ;
    1bda:	e0 91 7c 01 	lds	r30, 0x017C
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	ee 0f       	add	r30, r30
    1be2:	ff 1f       	adc	r31, r31
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	e8 0f       	add	r30, r24
    1bea:	f1 1d       	adc	r31, r1
    1bec:	eb 5b       	subi	r30, 0xBB	; 187
    1bee:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf0:	e4 91       	lpm	r30, Z+
}
    1bf2:	8e 2f       	mov	r24, r30
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	08 95       	ret

00001bf8 <_Z11get_tmr10msv>:


uint16_t get_tmr10ms()
{
    uint16_t time  ;
    cli();
    1bf8:	f8 94       	cli
    time = g_tmr10ms ;
    1bfa:	20 91 77 0d 	lds	r18, 0x0D77
    1bfe:	30 91 78 0d 	lds	r19, 0x0D78
    sei();
    1c02:	78 94       	sei
    return time ;
}
    1c04:	c9 01       	movw	r24, r18
    1c06:	08 95       	ret

00001c08 <_Z8CS_STATEh>:

uint8_t CS_STATE( uint8_t x)
{
	return pgm_read_byte(csTypeTable+x-1) ;
    1c08:	e8 2f       	mov	r30, r24
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	e9 5a       	subi	r30, 0xA9	; 169
    1c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c10:	e4 91       	lpm	r30, Z+
//#ifdef VERSION3
//	return ((x)<CS_AND ? CS_VOFS : ((((x)<CS_EQUAL) || ((x)==CS_LATCH)|| ((x)==CS_FLIP)) ? CS_VBOOL : ((x)<CS_TIME ? CS_VCOMP : CS_TIMER))) ;
//#else	
//	return ((x)<CS_AND ? CS_VOFS : ((x)<CS_EQUAL ? CS_VBOOL : ((x)<CS_TIME ? CS_VCOMP : CS_TIMER))) ;
//#endif
}
    1c12:	8e 2f       	mov	r24, r30
    1c14:	08 95       	ret

00001c16 <_Z10mixaddressh>:

MixData *mixaddress( uint8_t idx )
    1c16:	9a e0       	ldi	r25, 0x0A	; 10
    1c18:	89 9f       	mul	r24, r25
    1c1a:	90 01       	movw	r18, r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	2c 53       	subi	r18, 0x3C	; 60
    1c20:	3e 4f       	sbci	r19, 0xFE	; 254
{
    return &g_model.mixData[idx] ;
}
    1c22:	c9 01       	movw	r24, r18
    1c24:	08 95       	ret

00001c26 <_Z12limitaddressh>:

LimitData *limitaddress( uint8_t idx )
    1c26:	95 e0       	ldi	r25, 0x05	; 5
    1c28:	89 9f       	mul	r24, r25
    1c2a:	90 01       	movw	r18, r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	2c 5f       	subi	r18, 0xFC	; 252
    1c30:	3c 4f       	sbci	r19, 0xFC	; 252
{
    return &g_model.limitData[idx];
}
    1c32:	c9 01       	movw	r24, r18
    1c34:	08 95       	ret

00001c36 <_Z21checkThrottlePositionihi>:
 	int16_t v = anaIn(chan) ;
	return  (g_eeGeneral.throttleReversed) ? -v : v ;
}


uint8_t checkThrottlePosition( int16_t v, uint8_t thrchn, int16_t lowLim )
    1c36:	9c 01       	movw	r18, r24
{
	if ( g_model.throttleIdle )
    1c38:	80 91 1b 05 	lds	r24, 0x051B
    1c3c:	80 76       	andi	r24, 0x60	; 96
    1c3e:	89 f0       	breq	.+34     	; 0x1c62 <_Z21checkThrottlePositionihi+0x2c>
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	e6 2f       	mov	r30, r22
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	e8 5c       	subi	r30, 0xC8	; 200
    1c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4e:	81 81       	ldd	r24, Z+1	; 0x01
    1c50:	92 81       	ldd	r25, Z+2	; 0x02
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	21 5f       	subi	r18, 0xF1	; 241
    1c58:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5a:	2f 31       	cpi	r18, 0x1F	; 31
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	30 f4       	brcc	.+12     	; 0x1c6c <_Z21checkThrottlePositionihi+0x36>
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <_Z21checkThrottlePositionihi+0x34>
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	42 17       	cp	r20, r18
    1c66:	53 07       	cpc	r21, r19
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_Z21checkThrottlePositionihi+0x36>
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
  	{
  		return 1 ;
  	}
	}
	return 0 ;
}
    1c6c:	87 2f       	mov	r24, r23
    1c6e:	08 95       	ret

00001c70 <_Z15getRawTrimValuehh>:
		phase += 1 ;
  }
  return 0 ;
}

int16_t getRawTrimValue( uint8_t phase, uint8_t idx )
    1c70:	a6 2f       	mov	r26, r22
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
{
	if ( phase )
    1c74:	88 23       	and	r24, r24
    1c76:	a1 f0       	breq	.+40     	; 0x1ca0 <_Z15getRawTrimValuehh+0x30>
	{
		return g_model.phaseData[phase-1].trim[idx] + TRIM_EXTENDED_MAX + 1 ;
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	ee 0f       	add	r30, r30
    1c84:	ff 1f       	adc	r31, r31
    1c86:	e8 0f       	add	r30, r24
    1c88:	f9 1f       	adc	r31, r25
    1c8a:	ea 0f       	add	r30, r26
    1c8c:	fb 1f       	adc	r31, r27
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	e1 59       	subi	r30, 0x91	; 145
    1c94:	fb 4f       	sbci	r31, 0xFB	; 251
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	6b 50       	subi	r22, 0x0B	; 11
    1c9c:	7e 4f       	sbci	r23, 0xFE	; 254
    1c9e:	07 c0       	rjmp	.+14     	; 0x1cae <_Z15getRawTrimValuehh+0x3e>
	else
	{
#ifdef FMODE_TRIM
		return *TrimPtr[idx] ;
#else    
		return g_model.trim[idx] ;
    1ca0:	a4 57       	subi	r26, 0x74	; 116
    1ca2:	bc 4f       	sbci	r27, 0xFC	; 252
    1ca4:	8c 91       	ld	r24, X
    1ca6:	68 2f       	mov	r22, r24
    1ca8:	77 27       	eor	r23, r23
    1caa:	67 fd       	sbrc	r22, 7
    1cac:	70 95       	com	r23
#endif
	}
}
    1cae:	cb 01       	movw	r24, r22
    1cb0:	08 95       	ret

00001cb2 <_Z18getTrimFlightPhasehh>:

uint8_t getTrimFlightPhase( uint8_t phase, uint8_t idx )
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0

int16_t getRawTrimValue( uint8_t phase, uint8_t idx )
{
	if ( phase )
	{
		return g_model.phaseData[phase-1].trim[idx] + TRIM_EXTENDED_MAX + 1 ;
    1cb6:	70 e0       	ldi	r23, 0x00	; 0

uint8_t getTrimFlightPhase( uint8_t phase, uint8_t idx )
{
  for ( uint8_t i=0 ; i<MAX_MODES ; i += 1 )
	{
    if (phase == 0) return 0;
    1cb8:	22 23       	and	r18, r18
    1cba:	19 f1       	breq	.+70     	; 0x1d02 <_Z18getTrimFlightPhasehh+0x50>

int16_t getRawTrimValue( uint8_t phase, uint8_t idx )
{
	if ( phase )
	{
		return g_model.phaseData[phase-1].trim[idx] + TRIM_EXTENDED_MAX + 1 ;
    1cbc:	82 2f       	mov	r24, r18
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	e8 0f       	add	r30, r24
    1cce:	f9 1f       	adc	r31, r25
    1cd0:	e6 0f       	add	r30, r22
    1cd2:	f7 1f       	adc	r31, r23
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	ff 1f       	adc	r31, r31
    1cd8:	e1 59       	subi	r30, 0x91	; 145
    1cda:	fb 4f       	sbci	r31, 0xFB	; 251
    1cdc:	01 90       	ld	r0, Z+
    1cde:	f0 81       	ld	r31, Z
    1ce0:	e0 2d       	mov	r30, r0
    1ce2:	eb 50       	subi	r30, 0x0B	; 11
    1ce4:	fe 4f       	sbci	r31, 0xFE	; 254
{
  for ( uint8_t i=0 ; i<MAX_MODES ; i += 1 )
	{
    if (phase == 0) return 0;
    int16_t trim = getRawTrimValue( phase, idx ) ;
    if ( trim <= TRIM_EXTENDED_MAX )
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	e5 3f       	cpi	r30, 0xF5	; 245
    1cea:	f8 07       	cpc	r31, r24
    1cec:	54 f0       	brlt	.+20     	; 0x1d02 <_Z18getTrimFlightPhasehh+0x50>
		{
			return phase ;
		}
    uint8_t result = trim-TRIM_EXTENDED_MAX-1 ;
    1cee:	8e 2f       	mov	r24, r30
    1cf0:	85 5f       	subi	r24, 0xF5	; 245
    if (result >= phase)
    1cf2:	82 17       	cp	r24, r18
    1cf4:	08 f0       	brcs	.+2      	; 0x1cf8 <_Z18getTrimFlightPhasehh+0x46>
		{
			result += 1 ;
    1cf6:	8f 5f       	subi	r24, 0xFF	; 255
	}
}

uint8_t getTrimFlightPhase( uint8_t phase, uint8_t idx )
{
  for ( uint8_t i=0 ; i<MAX_MODES ; i += 1 )
    1cf8:	3f 5f       	subi	r19, 0xFF	; 255
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	34 30       	cpi	r19, 0x04	; 4
    1cfe:	e1 f6       	brne	.-72     	; 0x1cb8 <_Z18getTrimFlightPhasehh+0x6>
    1d00:	20 e0       	ldi	r18, 0x00	; 0
			result += 1 ;
		}
    phase = result;
  }
  return 0;
}
    1d02:	82 2f       	mov	r24, r18
    1d04:	08 95       	ret

00001d06 <_Z12getTrimValuehh>:


int16_t getTrimValue( uint8_t phase, uint8_t idx )
    1d06:	1f 93       	push	r17
    1d08:	16 2f       	mov	r17, r22
{
  return getRawTrimValue( getTrimFlightPhase( phase, idx ), idx ) ;
    1d0a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_Z18getTrimFlightPhasehh>
    1d0e:	a1 2f       	mov	r26, r17
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
  return 0 ;
}

int16_t getRawTrimValue( uint8_t phase, uint8_t idx )
{
	if ( phase )
    1d12:	88 23       	and	r24, r24
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <_Z12getTrimValuehh+0x3a>
	{
		return g_model.phaseData[phase-1].trim[idx] + TRIM_EXTENDED_MAX + 1 ;
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	ee 0f       	add	r30, r30
    1d1e:	ff 1f       	adc	r31, r31
    1d20:	ee 0f       	add	r30, r30
    1d22:	ff 1f       	adc	r31, r31
    1d24:	e8 0f       	add	r30, r24
    1d26:	f9 1f       	adc	r31, r25
    1d28:	ea 0f       	add	r30, r26
    1d2a:	fb 1f       	adc	r31, r27
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	e1 59       	subi	r30, 0x91	; 145
    1d32:	fb 4f       	sbci	r31, 0xFB	; 251
    1d34:	01 90       	ld	r0, Z+
    1d36:	f0 81       	ld	r31, Z
    1d38:	e0 2d       	mov	r30, r0
    1d3a:	eb 50       	subi	r30, 0x0B	; 11
    1d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <_Z12getTrimValuehh+0x48>
	else
	{
#ifdef FMODE_TRIM
		return *TrimPtr[idx] ;
#else    
		return g_model.trim[idx] ;
    1d40:	a4 57       	subi	r26, 0x74	; 116
    1d42:	bc 4f       	sbci	r27, 0xFC	; 252
    1d44:	8c 91       	ld	r24, X
    1d46:	e8 2f       	mov	r30, r24
    1d48:	ff 27       	eor	r31, r31
    1d4a:	e7 fd       	sbrc	r30, 7
    1d4c:	f0 95       	com	r31


int16_t getTrimValue( uint8_t phase, uint8_t idx )
{
  return getRawTrimValue( getTrimFlightPhase( phase, idx ), idx ) ;
}
    1d4e:	cf 01       	movw	r24, r30
    1d50:	1f 91       	pop	r17
    1d52:	08 95       	ret

00001d54 <_Z20validatePlusMinus125i>:

int16_t validatePlusMinus125( int16_t trim )
    1d54:	9c 01       	movw	r18, r24
{
  if(trim < -125 || trim > 125)
    1d56:	83 58       	subi	r24, 0x83	; 131
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	8b 3f       	cpi	r24, 0xFB	; 251
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	40 f0       	brcs	.+16     	; 0x1d70 <_Z20validatePlusMinus125i+0x1c>
	{
		trim = ( trim > 0 ) ? 125 : -125 ;
    1d60:	12 16       	cp	r1, r18
    1d62:	13 06       	cpc	r1, r19
    1d64:	1c f0       	brlt	.+6      	; 0x1d6c <_Z20validatePlusMinus125i+0x18>
    1d66:	23 e8       	ldi	r18, 0x83	; 131
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <_Z20validatePlusMinus125i+0x1c>
    1d6c:	2d e7       	ldi	r18, 0x7D	; 125
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
	}	
	return trim ;
}
    1d70:	c9 01       	movw	r24, r18
    1d72:	08 95       	ret

00001d74 <_Z11lastPopMenuv>:
int8_t checkIncDec_hg0( int8_t i_val, int8_t i_max)
{
    return checkIncDec( i_val,0 ,i_max,EE_GENERAL);
}

MenuFuncP lastPopMenu()
    1d74:	e0 91 12 06 	lds	r30, 0x0612
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	e6 5f       	subi	r30, 0xF6	; 246
    1d80:	f9 4f       	sbci	r31, 0xF9	; 249
{
    return  g_menuStack[g_menuStackPtr+1];
}
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	08 95       	ret

00001d88 <_Z9chainMenuPFvhE>:
    }
}

void chainMenu(MenuFuncP newMenu)
{
    g_menuStack[g_menuStackPtr] = newMenu;
    1d88:	e0 91 12 06 	lds	r30, 0x0612
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	ee 0f       	add	r30, r30
    1d90:	ff 1f       	adc	r31, r31
    1d92:	e8 5f       	subi	r30, 0xF8	; 248
    1d94:	f9 4f       	sbci	r31, 0xF9	; 249
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
		EnterMenu = EVT_ENTRY ;
    1d9a:	8f eb       	ldi	r24, 0xBF	; 191
    1d9c:	80 93 13 06 	sts	0x0613, r24
}
    1da0:	08 95       	ret

00001da2 <_Z12backlightKeyv>:
//}

void backlightKey()
{
  uint8_t a = g_eeGeneral.lightAutoOff ;
  uint16_t b = a * 250 ;
    1da2:	90 91 80 01 	lds	r25, 0x0180
    1da6:	8a ef       	ldi	r24, 0xFA	; 250
    1da8:	98 9f       	mul	r25, r24
    1daa:	90 01       	movw	r18, r0
    1dac:	11 24       	eor	r1, r1
	b <<= 1 ;				// b = a * 500, but less code
    1dae:	22 0f       	add	r18, r18
    1db0:	33 1f       	adc	r19, r19
	if(b>g_LightOffCounter) g_LightOffCounter = b;
    1db2:	80 91 21 06 	lds	r24, 0x0621
    1db6:	90 91 22 06 	lds	r25, 0x0622
    1dba:	82 17       	cp	r24, r18
    1dbc:	93 07       	cpc	r25, r19
    1dbe:	20 f4       	brcc	.+8      	; 0x1dc8 <_Z12backlightKeyv+0x26>
    1dc0:	30 93 22 06 	sts	0x0622, r19
    1dc4:	20 93 21 06 	sts	0x0621, r18
    1dc8:	08 95       	ret

00001dca <_Z17putVoiceQueueLongj>:
{
	CurrentVolume = value ;
	putVoiceQueueLong( value + 0xFFF0 ) ;
}

void putVoiceQueueLong( uint16_t value )
    1dca:	9c 01       	movw	r18, r24
{
	struct t_voice *vptr ;
	vptr = &Voice ;
	FORCE_INDIRECT(vptr) ;
    1dcc:	ab e1       	ldi	r26, 0x1B	; 27
    1dce:	be e0       	ldi	r27, 0x0E	; 14
	
	if ( vptr->VoiceQueueCount < VOICE_Q_LENGTH )
    1dd0:	97 96       	adiw	r26, 0x27	; 39
    1dd2:	8c 91       	ld	r24, X
    1dd4:	97 97       	sbiw	r26, 0x27	; 39
    1dd6:	80 31       	cpi	r24, 0x10	; 16
    1dd8:	d0 f4       	brcc	.+52     	; 0x1e0e <_Z17putVoiceQueueLongj+0x44>
	{
		vptr->VoiceQueue[vptr->VoiceQueueInIndex++] = value ;
    1dda:	98 96       	adiw	r26, 0x28	; 40
    1ddc:	8c 91       	ld	r24, X
    1dde:	98 97       	sbiw	r26, 0x28	; 40
    1de0:	e8 2f       	mov	r30, r24
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	ee 0f       	add	r30, r30
    1de6:	ff 1f       	adc	r31, r31
    1de8:	ea 0f       	add	r30, r26
    1dea:	fb 1f       	adc	r31, r27
    1dec:	31 83       	std	Z+1, r19	; 0x01
    1dee:	20 83       	st	Z, r18
    1df0:	8f 5f       	subi	r24, 0xFF	; 255
    1df2:	98 96       	adiw	r26, 0x28	; 40
    1df4:	8c 93       	st	X, r24
    1df6:	98 97       	sbiw	r26, 0x28	; 40
		if (vptr->VoiceQueueInIndex > ( VOICE_Q_LENGTH - 1 ) )
    1df8:	80 31       	cpi	r24, 0x10	; 16
    1dfa:	18 f0       	brcs	.+6      	; 0x1e02 <_Z17putVoiceQueueLongj+0x38>
		{
			vptr->VoiceQueueInIndex = 0 ;			
    1dfc:	98 96       	adiw	r26, 0x28	; 40
    1dfe:	1c 92       	st	X, r1
    1e00:	98 97       	sbiw	r26, 0x28	; 40
		}
		vptr->VoiceQueueCount += 1 ;
    1e02:	97 96       	adiw	r26, 0x27	; 39
    1e04:	8c 91       	ld	r24, X
    1e06:	97 97       	sbiw	r26, 0x27	; 39
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	97 96       	adiw	r26, 0x27	; 39
    1e0c:	8c 93       	st	X, r24
    1e0e:	08 95       	ret

00001e10 <_Z9setVolumeh>:
	putVoiceQueueLong( value ) ;
}

void setVolume( uint8_t value )
{
	CurrentVolume = value ;
    1e10:	80 93 9f 05 	sts	0x059F, r24
	putVoiceQueueLong( value + 0xFFF0 ) ;
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	40 97       	sbiw	r24, 0x10	; 16
    1e18:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
}
    1e1c:	08 95       	ret

00001e1e <_Z13putVoiceQueueh>:
}


void putVoiceQueue( uint8_t value )
{
	putVoiceQueueLong( value ) ;
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
}
    1e24:	08 95       	ret

00001e26 <_Z18putVoiceQueueUpperh>:
//uint8_t v_first[8] ;


void putVoiceQueueUpper( uint8_t value )
{
	putVoiceQueueLong( value + 260 ) ;
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	8c 5f       	subi	r24, 0xFC	; 252
    1e2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e2c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
}
    1e30:	08 95       	ret

00001e32 <_ZN7t_voice13voice_processEv>:
		}
		vptr->VoiceQueueCount += 1 ;
	}
}

void t_voice::voice_process(void)
    1e32:	dc 01       	movw	r26, r24
{
	if ( g_eeGeneral.speakerMode & 2 )
    1e34:	80 91 87 01 	lds	r24, 0x0187
    1e38:	90 96       	adiw	r26, 0x20	; 32
    1e3a:	9c 91       	ld	r25, X
    1e3c:	90 97       	sbiw	r26, 0x20	; 32
    1e3e:	81 ff       	sbrs	r24, 1
    1e40:	b7 c0       	rjmp	.+366    	; 0x1fb0 <_ZN7t_voice13voice_processEv+0x17e>
    1e42:	91 96       	adiw	r26, 0x21	; 33
    1e44:	8c 91       	ld	r24, X
    1e46:	91 97       	sbiw	r26, 0x21	; 33
	{
		if ( Backlight )
    1e48:	99 23       	and	r25, r25
    1e4a:	11 f0       	breq	.+4      	; 0x1e50 <_ZN7t_voice13voice_processEv+0x1e>
		{
			VoiceLatch |= BACKLIGHT_BIT ;			
    1e4c:	84 60       	ori	r24, 0x04	; 4
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <_ZN7t_voice13voice_processEv+0x20>
		}
		else
		{
			VoiceLatch &= ~BACKLIGHT_BIT ;			
    1e50:	8b 7f       	andi	r24, 0xFB	; 251
    1e52:	91 96       	adiw	r26, 0x21	; 33
    1e54:	8c 93       	st	X, r24
    1e56:	91 97       	sbiw	r26, 0x21	; 33
		}

		if ( VoiceState == V_IDLE )
    1e58:	96 96       	adiw	r26, 0x26	; 38
    1e5a:	9c 91       	ld	r25, X
    1e5c:	96 97       	sbiw	r26, 0x26	; 38
    1e5e:	91 30       	cpi	r25, 0x01	; 1
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <_ZN7t_voice13voice_processEv+0x32>
    1e62:	56 c0       	rjmp	.+172    	; 0x1f10 <_ZN7t_voice13voice_processEv+0xde>
		{
			PORTB |= (1<<OUT_B_LIGHT) ;				// Latch clock high
    1e64:	c7 9a       	sbi	0x18, 7	; 24
			if ( VoiceQueueCount )
    1e66:	97 96       	adiw	r26, 0x27	; 39
    1e68:	8c 91       	ld	r24, X
    1e6a:	97 97       	sbiw	r26, 0x27	; 39
    1e6c:	88 23       	and	r24, r24
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <_ZN7t_voice13voice_processEv+0x40>
    1e70:	4b c0       	rjmp	.+150    	; 0x1f08 <_ZN7t_voice13voice_processEv+0xd6>
			{
				VoiceSerial = VoiceQueue[VoiceQueueOutIndex++] ;
    1e72:	99 96       	adiw	r26, 0x29	; 41
    1e74:	8c 91       	ld	r24, X
    1e76:	99 97       	sbiw	r26, 0x29	; 41
    1e78:	e8 2f       	mov	r30, r24
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ea 0f       	add	r30, r26
    1e82:	fb 1f       	adc	r31, r27
    1e84:	20 81       	ld	r18, Z
    1e86:	31 81       	ldd	r19, Z+1	; 0x01
    1e88:	95 96       	adiw	r26, 0x25	; 37
    1e8a:	3c 93       	st	X, r19
    1e8c:	2e 93       	st	-X, r18
    1e8e:	94 97       	sbiw	r26, 0x24	; 36
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	99 96       	adiw	r26, 0x29	; 41
    1e94:	8c 93       	st	X, r24
    1e96:	99 97       	sbiw	r26, 0x29	; 41
				if (VoiceQueueOutIndex > ( VOICE_Q_LENGTH - 1 ) )
    1e98:	80 31       	cpi	r24, 0x10	; 16
    1e9a:	18 f0       	brcs	.+6      	; 0x1ea2 <_ZN7t_voice13voice_processEv+0x70>
				{
					VoiceQueueOutIndex = 0 ;			
    1e9c:	99 96       	adiw	r26, 0x29	; 41
    1e9e:	1c 92       	st	X, r1
    1ea0:	99 97       	sbiw	r26, 0x29	; 41
				}
				VoiceQueueCount -= 1 ;
    1ea2:	97 96       	adiw	r26, 0x27	; 39
    1ea4:	8c 91       	ld	r24, X
    1ea6:	97 97       	sbiw	r26, 0x27	; 39
    1ea8:	81 50       	subi	r24, 0x01	; 1
    1eaa:	97 96       	adiw	r26, 0x27	; 39
    1eac:	8c 93       	st	X, r24
    1eae:	97 97       	sbiw	r26, 0x27	; 39
//				if ( VoiceShift )
//				{
//					VoiceShift = 0 ;
//					VoiceSerial += 260 ;
//				}
				VoiceTimer = 17 ;
    1eb0:	81 e1       	ldi	r24, 0x11	; 17
    1eb2:	93 96       	adiw	r26, 0x23	; 35
    1eb4:	8c 93       	st	X, r24
    1eb6:	93 97       	sbiw	r26, 0x23	; 35
//				if ( ( VoiceSerial & 0x00FF ) >= 0xF0 )
				if ( VoiceSerial & 0x8000 )	// Looking for Volume setting
    1eb8:	94 96       	adiw	r26, 0x24	; 36
    1eba:	8d 91       	ld	r24, X+
    1ebc:	9c 91       	ld	r25, X
    1ebe:	95 97       	sbiw	r26, 0x25	; 37
    1ec0:	97 ff       	sbrs	r25, 7
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <_ZN7t_voice13voice_processEv+0x9a>
//					{
//						VoiceShift = 1 ;
//						return ;
//					}
//					VoiceSerial |= 0xFF00 ;
					VoiceTimer = 40 ;
    1ec4:	88 e2       	ldi	r24, 0x28	; 40
    1ec6:	93 96       	adiw	r26, 0x23	; 35
    1ec8:	8c 93       	st	X, r24
    1eca:	93 97       	sbiw	r26, 0x23	; 35
				}
				VoiceLatch &= ~VOICE_CLOCK_BIT & ~VOICE_DATA_BIT ;
    1ecc:	91 96       	adiw	r26, 0x21	; 33
    1ece:	2c 91       	ld	r18, X
    1ed0:	91 97       	sbiw	r26, 0x21	; 33
    1ed2:	2c 7f       	andi	r18, 0xFC	; 252
    1ed4:	91 96       	adiw	r26, 0x21	; 33
    1ed6:	2c 93       	st	X, r18
    1ed8:	91 97       	sbiw	r26, 0x21	; 33
				if ( VoiceSerial & 0x8000 )
    1eda:	94 96       	adiw	r26, 0x24	; 36
    1edc:	8d 91       	ld	r24, X+
    1ede:	9c 91       	ld	r25, X
    1ee0:	95 97       	sbiw	r26, 0x25	; 37
    1ee2:	97 ff       	sbrs	r25, 7
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <_ZN7t_voice13voice_processEv+0xbc>
				{
					VoiceLatch |= VOICE_DATA_BIT ;
    1ee6:	22 60       	ori	r18, 0x02	; 2
    1ee8:	91 96       	adiw	r26, 0x21	; 33
    1eea:	2c 93       	st	X, r18
    1eec:	91 97       	sbiw	r26, 0x21	; 33
				}
				PORTA_LCD_DAT = VoiceLatch ;			// Latch data set
    1eee:	91 96       	adiw	r26, 0x21	; 33
    1ef0:	8c 91       	ld	r24, X
    1ef2:	91 97       	sbiw	r26, 0x21	; 33
    1ef4:	8b bb       	out	0x1b, r24	; 27
				PORTB &= ~(1<<OUT_B_LIGHT) ;			// Latch clock low
    1ef6:	c7 98       	cbi	0x18, 7	; 24
				VoiceCounter = 31 ;
    1ef8:	8f e1       	ldi	r24, 0x1F	; 31
    1efa:	92 96       	adiw	r26, 0x22	; 34
    1efc:	8c 93       	st	X, r24
    1efe:	92 97       	sbiw	r26, 0x22	; 34
				VoiceState = V_CLOCKING ;
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	96 96       	adiw	r26, 0x26	; 38
    1f04:	8c 93       	st	X, r24
    1f06:	08 95       	ret
			}
			else
			{
				PORTA_LCD_DAT = VoiceLatch ;			// Latch data set
    1f08:	91 96       	adiw	r26, 0x21	; 33
    1f0a:	8c 91       	ld	r24, X
    1f0c:	8b bb       	out	0x1b, r24	; 27
    1f0e:	4e c0       	rjmp	.+156    	; 0x1fac <_ZN7t_voice13voice_processEv+0x17a>
				PORTB &= ~(1<<OUT_B_LIGHT) ;			// Latch clock low
			}
		}
		else if ( VoiceState == V_STARTUP )
    1f10:	99 23       	and	r25, r25
    1f12:	81 f4       	brne	.+32     	; 0x1f34 <_ZN7t_voice13voice_processEv+0x102>
		{
			PORTB |= (1<<OUT_B_LIGHT) ;				// Latch clock high
    1f14:	c7 9a       	sbi	0x18, 7	; 24
			VoiceLatch |= VOICE_CLOCK_BIT | VOICE_DATA_BIT ;
    1f16:	91 96       	adiw	r26, 0x21	; 33
    1f18:	8c 91       	ld	r24, X
    1f1a:	91 97       	sbiw	r26, 0x21	; 33
    1f1c:	83 60       	ori	r24, 0x03	; 3
    1f1e:	91 96       	adiw	r26, 0x21	; 33
    1f20:	8c 93       	st	X, r24
    1f22:	91 97       	sbiw	r26, 0x21	; 33
			PORTA_LCD_DAT = VoiceLatch ;			// Latch data set
    1f24:	8b bb       	out	0x1b, r24	; 27
			if ( g_blinkTmr10ms > 60 )					// Give module 1.4 secs to initialise
    1f26:	80 91 79 0d 	lds	r24, 0x0D79
    1f2a:	8d 33       	cpi	r24, 0x3D	; 61
    1f2c:	08 f4       	brcc	.+2      	; 0x1f30 <_ZN7t_voice13voice_processEv+0xfe>
    1f2e:	3e c0       	rjmp	.+124    	; 0x1fac <_ZN7t_voice13voice_processEv+0x17a>
			{
				VoiceState = V_WAIT_START_BUSY_OFF ;
    1f30:	86 e0       	ldi	r24, 0x06	; 6
    1f32:	3a c0       	rjmp	.+116    	; 0x1fa8 <_ZN7t_voice13voice_processEv+0x176>
			}
			PORTB &= ~(1<<OUT_B_LIGHT) ;			// Latch clock low
		}
		else if ( VoiceState != V_CLOCKING )
    1f34:	92 30       	cpi	r25, 0x02	; 2
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <_ZN7t_voice13voice_processEv+0x108>
    1f38:	46 c0       	rjmp	.+140    	; 0x1fc6 <_ZN7t_voice13voice_processEv+0x194>
		{
			uint8_t busy ;
			PORTA_LCD_DAT = VoiceLatch ;			// Latch data set
    1f3a:	91 96       	adiw	r26, 0x21	; 33
    1f3c:	8c 91       	ld	r24, X
    1f3e:	91 97       	sbiw	r26, 0x21	; 33
    1f40:	8b bb       	out	0x1b, r24	; 27
			PORTB |= (1<<OUT_B_LIGHT) ;				// Drive high,pullup enabled
    1f42:	c7 9a       	sbi	0x18, 7	; 24
			DDRB &= ~(1<<OUT_B_LIGHT) ;				// Change to input
    1f44:	bf 98       	cbi	0x17, 7	; 23
			asm(" rjmp 1f") ;
    1f46:	00 c0       	rjmp	.+0      	; 0x1f48 <_ZN7t_voice13voice_processEv+0x116>
			asm("1:") ;
			asm(" nop") ;											// delay to allow input to settle
    1f48:	00 00       	nop
			asm(" rjmp 1f") ;
    1f4a:	00 c0       	rjmp	.+0      	; 0x1f4c <_ZN7t_voice13voice_processEv+0x11a>
			asm("1:") ;
			busy = PINB & 0x80 ;
    1f4c:	86 b3       	in	r24, 0x16	; 22
    1f4e:	80 78       	andi	r24, 0x80	; 128
			DDRB |= (1<<OUT_B_LIGHT) ;				// Change to output
    1f50:	bf 9a       	sbi	0x17, 7	; 23
			// The next bit guarantees the backlight output gets clocked out
			if ( VoiceState == V_WAIT_BUSY_ON )	// check for busy processing here
    1f52:	93 30       	cpi	r25, 0x03	; 3
    1f54:	69 f4       	brne	.+26     	; 0x1f70 <_ZN7t_voice13voice_processEv+0x13e>
			{
				if ( busy == 0 )									// Busy is active
    1f56:	88 23       	and	r24, r24
    1f58:	49 f0       	breq	.+18     	; 0x1f6c <_ZN7t_voice13voice_processEv+0x13a>
				{
					VoiceState = V_WAIT_BUSY_OFF ;
				}
				else
				{
					if ( --VoiceTimer == 0 )
    1f5a:	93 96       	adiw	r26, 0x23	; 35
    1f5c:	8c 91       	ld	r24, X
    1f5e:	93 97       	sbiw	r26, 0x23	; 35
    1f60:	81 50       	subi	r24, 0x01	; 1
    1f62:	93 96       	adiw	r26, 0x23	; 35
    1f64:	8c 93       	st	X, r24
    1f66:	93 97       	sbiw	r26, 0x23	; 35
    1f68:	88 23       	and	r24, r24
    1f6a:	01 f5       	brne	.+64     	; 0x1fac <_ZN7t_voice13voice_processEv+0x17a>
					{
						VoiceState = V_WAIT_BUSY_OFF ;
    1f6c:	84 e0       	ldi	r24, 0x04	; 4
    1f6e:	1c c0       	rjmp	.+56     	; 0x1fa8 <_ZN7t_voice13voice_processEv+0x176>
					}
				}
			}
			else if (	VoiceState == V_WAIT_BUSY_OFF)	// check for busy processing here
    1f70:	94 30       	cpi	r25, 0x04	; 4
    1f72:	21 f4       	brne	.+8      	; 0x1f7c <_ZN7t_voice13voice_processEv+0x14a>
			{
				if ( busy )									// Busy is inactive
    1f74:	88 23       	and	r24, r24
    1f76:	d1 f0       	breq	.+52     	; 0x1fac <_ZN7t_voice13voice_processEv+0x17a>
				{
					VoiceTimer = 3 ;
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	12 c0       	rjmp	.+36     	; 0x1fa0 <_ZN7t_voice13voice_processEv+0x16e>
					VoiceState = V_WAIT_BUSY_DELAY ;
				}
			}
			else if (	VoiceState == V_WAIT_BUSY_DELAY)
    1f7c:	95 30       	cpi	r25, 0x05	; 5
    1f7e:	59 f4       	brne	.+22     	; 0x1f96 <_ZN7t_voice13voice_processEv+0x164>
			{
				if ( --VoiceTimer == 0 )
    1f80:	93 96       	adiw	r26, 0x23	; 35
    1f82:	8c 91       	ld	r24, X
    1f84:	93 97       	sbiw	r26, 0x23	; 35
    1f86:	81 50       	subi	r24, 0x01	; 1
    1f88:	93 96       	adiw	r26, 0x23	; 35
    1f8a:	8c 93       	st	X, r24
    1f8c:	93 97       	sbiw	r26, 0x23	; 35
    1f8e:	88 23       	and	r24, r24
    1f90:	69 f4       	brne	.+26     	; 0x1fac <_ZN7t_voice13voice_processEv+0x17a>
				{
					VoiceState = V_IDLE ;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	09 c0       	rjmp	.+18     	; 0x1fa8 <_ZN7t_voice13voice_processEv+0x176>
				}
			}
			else if (	VoiceState == V_WAIT_START_BUSY_OFF)	// check for busy processing here
    1f96:	96 30       	cpi	r25, 0x06	; 6
    1f98:	49 f4       	brne	.+18     	; 0x1fac <_ZN7t_voice13voice_processEv+0x17a>
			{
				if ( busy )									// Busy is inactive
    1f9a:	88 23       	and	r24, r24
    1f9c:	39 f0       	breq	.+14     	; 0x1fac <_ZN7t_voice13voice_processEv+0x17a>
				{
					VoiceTimer = 20 ;
    1f9e:	84 e1       	ldi	r24, 0x14	; 20
    1fa0:	93 96       	adiw	r26, 0x23	; 35
    1fa2:	8c 93       	st	X, r24
    1fa4:	93 97       	sbiw	r26, 0x23	; 35
					VoiceState = V_WAIT_BUSY_DELAY ;
    1fa6:	85 e0       	ldi	r24, 0x05	; 5
    1fa8:	96 96       	adiw	r26, 0x26	; 38
    1faa:	8c 93       	st	X, r24
				}
			}
			PORTB &= ~(1<<OUT_B_LIGHT) ;			// Latch clock low
    1fac:	c7 98       	cbi	0x18, 7	; 24
    1fae:	08 95       	ret
		}
	}
	else// no voice, put backlight control out
	{
		if ( Backlight ^ g_eeGeneral.blightinv )
    1fb0:	80 91 84 01 	lds	r24, 0x0184
    1fb4:	82 95       	swap	r24
    1fb6:	86 95       	lsr	r24
    1fb8:	86 95       	lsr	r24
    1fba:	81 70       	andi	r24, 0x01	; 1
    1fbc:	98 17       	cp	r25, r24
    1fbe:	11 f0       	breq	.+4      	; 0x1fc4 <_ZN7t_voice13voice_processEv+0x192>
		{
			PORTB |= (1<<OUT_B_LIGHT) ;				// Drive high,pullup enabled
    1fc0:	c7 9a       	sbi	0x18, 7	; 24
    1fc2:	08 95       	ret
		}
		else
		{
			PORTB &= ~(1<<OUT_B_LIGHT) ;			// Latch clock low
    1fc4:	c7 98       	cbi	0x18, 7	; 24
    1fc6:	08 95       	ret

00001fc8 <_Z10pollRotaryv>:
}

void pollRotary()
{
	// Rotary Encoder polling
	PORTA = 0 ;			// No pullups
    1fc8:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0x1F ;		// Top 3 bits input
    1fca:	8f e1       	ldi	r24, 0x1F	; 31
    1fcc:	8a bb       	out	0x1a, r24	; 26
	asm(" rjmp 1f") ;
    1fce:	00 c0       	rjmp	.+0      	; 0x1fd0 <_Z10pollRotaryv+0x8>
	asm("1:") ;
//	asm(" nop") ;
//	asm(" nop") ;
	uint8_t rotary ;
	rotary = PINA ;
    1fd0:	29 b3       	in	r18, 0x19	; 25
	DDRA = 0xFF ;		// Back to all outputs
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	8a bb       	out	0x1a, r24	; 26
	rotary &= 0xE0 ;
    1fd6:	20 7e       	andi	r18, 0xE0	; 224
//	RotEncoder = rotary ;

	struct t_rotary *protary = &Rotary ;
	FORCE_INDIRECT(protary) ;
    1fd8:	e1 ea       	ldi	r30, 0xA1	; 161
    1fda:	f5 e0       	ldi	r31, 0x05	; 5

	if( protary->TezRotary != 0)
    1fdc:	87 81       	ldd	r24, Z+7	; 0x07
    1fde:	88 23       	and	r24, r24
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <_Z10pollRotaryv+0x20>
		protary->RotEncoder = 0x20; // switch is on
    1fe2:	80 e2       	ldi	r24, 0x20	; 32
    1fe4:	84 83       	std	Z+4, r24	; 0x04
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <_Z10pollRotaryv+0x22>
	else
		protary->RotEncoder = rotary ; // just read the lcd pin
    1fe8:	24 83       	std	Z+4, r18	; 0x04
	
	rotary &= 0xDF ;
    1fea:	32 2f       	mov	r19, r18
    1fec:	3f 7d       	andi	r19, 0xDF	; 223
	if ( rotary != protary->RotPosition )
    1fee:	90 81       	ld	r25, Z
    1ff0:	39 17       	cp	r19, r25
    1ff2:	59 f0       	breq	.+22     	; 0x200a <_Z10pollRotaryv+0x42>
	{
		uint8_t x ;
		x = protary->RotPosition & 0x40 ;
    1ff4:	90 74       	andi	r25, 0x40	; 64
		x <<= 1 ;
		x ^= rotary & 0x80 ;
		if ( x )
    1ff6:	99 0f       	add	r25, r25
    1ff8:	20 78       	andi	r18, 0x80	; 128
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	92 17       	cp	r25, r18
    1ffe:	11 f0       	breq	.+4      	; 0x2004 <_Z10pollRotaryv+0x3c>
		{
			protary->RotCount -= 1 ;
    2000:	81 50       	subi	r24, 0x01	; 1
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <_Z10pollRotaryv+0x3e>
		}
		else
		{
			protary->RotCount += 1 ;
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	81 83       	std	Z+1, r24	; 0x01
		}
		protary->RotPosition = rotary ;
    2008:	30 83       	st	Z, r19
	}
	if ( protary->TrotCount != protary->LastTrotCount )
    200a:	92 81       	ldd	r25, Z+2	; 0x02
    200c:	83 81       	ldd	r24, Z+3	; 0x03
    200e:	98 17       	cp	r25, r24
    2010:	11 f0       	breq	.+4      	; 0x2016 <_Z10pollRotaryv+0x4e>
	{
		protary->RotCount = protary->LastTrotCount = protary->TrotCount ;
    2012:	93 83       	std	Z+3, r25	; 0x03
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	08 95       	ret

00002018 <_Z15calcStickScrollh>:
}

//const static prog_uint8_t APM rate[8] = { 0, 75, 40, 25, 10, 5, 2, 1 } ;
const static prog_uint8_t APM rate[8] = { 0, 0, 100, 40, 16, 7, 3, 1 } ;

uint8_t calcStickScroll( uint8_t index )
    2018:	e8 2f       	mov	r30, r24
{
	uint8_t direction ;
	int8_t value ;

	if ( ( g_eeGeneral.stickMode & 1 ) == 0 )
    201a:	80 91 7c 01 	lds	r24, 0x017C
    201e:	80 fd       	sbrc	r24, 0
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <_Z15calcStickScrollh+0xe>
	{
		index ^= 3 ;
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	e8 27       	eor	r30, r24
	}
	
#ifdef FIX_MODE
	value = phyStick[index] ;
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	ee 54       	subi	r30, 0x4E	; 78
    202a:	f9 4f       	sbci	r31, 0xF9	; 249
    202c:	80 81       	ld	r24, Z
	value /= 8 ;
    202e:	87 fd       	sbrc	r24, 7
    2030:	89 5f       	subi	r24, 0xF9	; 249
    2032:	85 95       	asr	r24
    2034:	85 95       	asr	r24
    2036:	85 95       	asr	r24
#else
	value = (calibratedStick[index] * 2) >> 8 ; // same as / 128
#endif

	direction = value > 0 ? 0x80 : 0 ;
    2038:	18 16       	cp	r1, r24
    203a:	14 f4       	brge	.+4      	; 0x2040 <_Z15calcStickScrollh+0x28>
    203c:	90 e8       	ldi	r25, 0x80	; 128
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <_Z15calcStickScrollh+0x2e>
	if ( value < 0 )
    2040:	81 11       	cpse	r24, r1
	{
		value = -value ;			// (abs)
    2042:	81 95       	neg	r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t temp = value ;	// Makes the compiler save 4 bytes flash
	if ( temp > 7 )
	{
		temp = 7 ;			
	}
	value = pgm_read_byte(rate+temp) ;
    2046:	88 30       	cpi	r24, 0x08	; 8
    2048:	08 f0       	brcs	.+2      	; 0x204c <_Z15calcStickScrollh+0x34>
    204a:	87 e0       	ldi	r24, 0x07	; 7
    204c:	e8 2f       	mov	r30, r24
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	e9 55       	subi	r30, 0x59	; 89
    2052:	fe 4f       	sbci	r31, 0xFE	; 254
    2054:	e4 91       	lpm	r30, Z+
	if ( value )
    2056:	ee 23       	and	r30, r30
    2058:	19 f0       	breq	.+6      	; 0x2060 <_Z15calcStickScrollh+0x48>
	{
		StickScrollTimer = STICK_SCROLL_TIMEOUT ;		// Seconds
    205a:	89 e0       	ldi	r24, 0x09	; 9
    205c:	80 93 07 06 	sts	0x0607, r24
	}
	return value | direction ;
}
    2060:	89 2f       	mov	r24, r25
    2062:	8e 2b       	or	r24, r30
    2064:	08 95       	ret

00002066 <_Z5anaInh>:
//#define STARTADCONV (ADCSRA  = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADSC) | (1 << ADIE))
int16_t BandGap = 240 ;

#ifndef SIMU
uint16_t s_anaFilt[8] ;
uint16_t anaIn(uint8_t chan)
    2066:	28 2f       	mov	r18, r24
    //                     ana-in:   3 1 2 0 4 5 6 7
    //static prog_char APM crossAna[]={4,2,3,1,5,6,7,0}; // wenn schon Tabelle, dann muss sich auch lohnen

//    const static prog_char APM crossAna[]={3,1,2,0,4,5,6,7};
	uint8_t pchan = chan ;
	if ( chan == 3 )
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	11 f4       	brne	.+4      	; 0x2070 <_Z5anaInh+0xa>
    206c:	e0 e0       	ldi	r30, 0x00	; 0
    206e:	05 c0       	rjmp	.+10     	; 0x207a <_Z5anaInh+0x14>
	{
		pchan = 0 ;		
	}
	else
	{
		if ( chan == 0 )
    2070:	88 23       	and	r24, r24
    2072:	11 f4       	brne	.+4      	; 0x2078 <_Z5anaInh+0x12>
    2074:	e3 e0       	ldi	r30, 0x03	; 3
    2076:	01 c0       	rjmp	.+2      	; 0x207a <_Z5anaInh+0x14>
    2078:	e8 2f       	mov	r30, r24
		}
	}
//    volatile uint16_t *p = &s_anaFilt[chan];
    //  AutoLock autoLock;
//    return  *p;
  uint16_t temp = s_anaFilt[pchan] ;
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	ee 0f       	add	r30, r30
    207e:	ff 1f       	adc	r31, r31
    2080:	eb 5c       	subi	r30, 0xCB	; 203
    2082:	f9 4f       	sbci	r31, 0xF9	; 249
    2084:	01 90       	ld	r0, Z+
    2086:	f0 81       	ld	r31, Z
    2088:	e0 2d       	mov	r30, r0
	if ( chan < 4 )	// A stick
    208a:	24 30       	cpi	r18, 0x04	; 4
    208c:	80 f4       	brcc	.+32     	; 0x20ae <_Z5anaInh+0x48>
	{
		if ( g_eeGeneral.stickReverse & ( 1 << chan ) )
    208e:	80 91 99 01 	lds	r24, 0x0199
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 c0       	rjmp	.+4      	; 0x209a <_Z5anaInh+0x34>
    2096:	95 95       	asr	r25
    2098:	87 95       	ror	r24
    209a:	2a 95       	dec	r18
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <_Z5anaInh+0x30>
    209e:	80 ff       	sbrs	r24, 0
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <_Z5anaInh+0x48>
		{
			temp = 2048 - temp ;
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	98 e0       	ldi	r25, 0x08	; 8
    20a6:	9c 01       	movw	r18, r24
    20a8:	2e 1b       	sub	r18, r30
    20aa:	3f 0b       	sbc	r19, r31
    20ac:	f9 01       	movw	r30, r18
		}
	}
	return temp ;
}
    20ae:	cf 01       	movw	r24, r30
    20b0:	08 95       	ret

000020b2 <_Z6tanaInh>:
}


int16_t tanaIn( uint8_t chan )
{
 	int16_t v = anaIn(chan) ;
    20b2:	0e 94 33 10 	call	0x2066	; 0x2066 <_Z5anaInh>
    20b6:	9c 01       	movw	r18, r24
	return  (g_eeGeneral.throttleReversed) ? -v : v ;
    20b8:	80 91 7e 01 	lds	r24, 0x017E
    20bc:	80 ff       	sbrs	r24, 0
    20be:	03 c0       	rjmp	.+6      	; 0x20c6 <_Z6tanaInh+0x14>
    20c0:	30 95       	com	r19
    20c2:	21 95       	neg	r18
    20c4:	3f 4f       	sbci	r19, 0xFF	; 255
}
    20c6:	c9 01       	movw	r24, r18
    20c8:	08 95       	ret

000020ca <_Z14stickMoveValuev>:
		tmr10ms = x ;
		Voice.voice_process() ;
	}
}

uint16_t stickMoveValue()
    20ca:	ff 92       	push	r15
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	00 e0       	ldi	r16, 0x00	; 0
    20d6:	10 e0       	ldi	r17, 0x00	; 0
    20d8:	ff 24       	eor	r15, r15
{
#define INAC_DEVISOR 256   // Issue 206 - bypass splash screen with stick movement
    uint16_t sum = 0;
    for(uint8_t i=0; i<4; i++)
        sum += anaIn(i)/INAC_DEVISOR;
    20da:	8f 2d       	mov	r24, r15
    20dc:	0e 94 33 10 	call	0x2066	; 0x2066 <_Z5anaInh>
    20e0:	c9 2f       	mov	r28, r25
    20e2:	d0 e0       	ldi	r29, 0x00	; 0
    20e4:	0c 0f       	add	r16, r28
    20e6:	1d 1f       	adc	r17, r29

uint16_t stickMoveValue()
{
#define INAC_DEVISOR 256   // Issue 206 - bypass splash screen with stick movement
    uint16_t sum = 0;
    for(uint8_t i=0; i<4; i++)
    20e8:	f3 94       	inc	r15
    20ea:	84 e0       	ldi	r24, 0x04	; 4
    20ec:	f8 16       	cp	r15, r24
    20ee:	a9 f7       	brne	.-22     	; 0x20da <_Z14stickMoveValuev+0x10>
        sum += anaIn(i)/INAC_DEVISOR;
    return sum ;
}
    20f0:	c8 01       	movw	r24, r16
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	08 95       	ret

000020fe <_Z11getADC_osmpv>:
  sss_ana[chan] = (sss_ana[chan] + ss_ana[chan]) >> 1;
  ss_ana[chan] = (ss_ana[chan] + s_ana[chan]) >> 1;
  s_ana[chan] = (ADC + s_ana[chan]) >> 1;
  */

void getADC_osmp()
    20fe:	e5 e3       	ldi	r30, 0x35	; 53
    2100:	f6 e0       	ldi	r31, 0x06	; 6
    2102:	40 e0       	ldi	r20, 0x00	; 0
    uint16_t temp_ana ;
    //	uint8_t thro_rev_chan = g_eeGeneral.throttleReversed ? THR_STICK : 10 ;  // 10 means don't reverse
    for (uint8_t adc_input=0;adc_input<8;adc_input++){
//        temp_ana = 0 ;
//        for (uint8_t i=0; i<2;i++) {  // Going from 10bits to 11 bits.  Addition = n.  Loop 2 times
            ADMUX=adc_input|ADC_VREF_TYPE;
    2104:	84 2f       	mov	r24, r20
    2106:	80 64       	ori	r24, 0x40	; 64
    2108:	87 b9       	out	0x07, r24	; 7
			asm("1:") ;
			asm(" rjmp 1f") ;
			asm("1:") ;
#endif

            ADCSRA|=0x40;
    210a:	36 9a       	sbi	0x06, 6	; 6
            // Wait for the AD conversion to complete
            while (ADCSRA & 0x40);
    210c:	36 99       	sbic	0x06, 6	; 6
    210e:	fe cf       	rjmp	.-4      	; 0x210c <_Z11getADC_osmpv+0xe>
//            ADCSRA|=0x10;
            //      temp_ana[adc_input] += ADCW;
            temp_ana = ADC;
    2110:	24 b1       	in	r18, 0x04	; 4
    2112:	35 b1       	in	r19, 0x05	; 5
            ADCSRA|=0x40;
    2114:	36 9a       	sbi	0x06, 6	; 6
            // Wait for the AD conversion to complete
            while (ADCSRA & 0x40);
    2116:	36 99       	sbic	0x06, 6	; 6
    2118:	fe cf       	rjmp	.-4      	; 0x2116 <_Z11getADC_osmpv+0x18>
//        temp_ana /= 2; // divide by 2^n to normalize result.
        //    if(adc_input == thro_rev_chan)
        //        temp_ana = 2048 -temp_ana;

        //		s_anaFilt[adc_input] = temp_ana[adc_input] / 2; // divide by 2^n to normalize result.
				temp_ana += ADC ;
    211a:	84 b1       	in	r24, 0x04	; 4
    211c:	95 b1       	in	r25, 0x05	; 5
#endif
        s_anaFilt[adc_input] = temp_ana ;
    211e:	82 0f       	add	r24, r18
    2120:	93 1f       	adc	r25, r19
    2122:	81 93       	st	Z+, r24
    2124:	91 93       	st	Z+, r25
void getADC_osmp()
{
    //  uint16_t temp_ana[8] = {0};
    uint16_t temp_ana ;
    //	uint8_t thro_rev_chan = g_eeGeneral.throttleReversed ? THR_STICK : 10 ;  // 10 means don't reverse
    for (uint8_t adc_input=0;adc_input<8;adc_input++){
    2126:	4f 5f       	subi	r20, 0xFF	; 255
    2128:	48 30       	cpi	r20, 0x08	; 8
    212a:	61 f7       	brne	.-40     	; 0x2104 <_Z11getADC_osmpv+0x6>
#endif
        s_anaFilt[adc_input] = temp_ana ;
        //    if(IS_THROTTLE(adc_input) && g_eeGeneral.throttleReversed)
        //        s_anaFilt[adc_input] = 2048 - s_anaFilt[adc_input];
    }
}
    212c:	08 95       	ret

0000212e <__vector_16>:

volatile uint8_t g_tmr16KHz;


#ifndef SIMU
ISR(TIMER0_OVF_vect, ISR_NOBLOCK) //continuous timer 16ms (16MHz/1024)
    212e:	78 94       	sei
    2130:	1f 92       	push	r1
    2132:	0f 92       	push	r0
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	0f 92       	push	r0
    2138:	11 24       	eor	r1, r1
    213a:	8f 93       	push	r24
{
    g_tmr16KHz++;
    213c:	80 91 45 06 	lds	r24, 0x0645
    2140:	8f 5f       	subi	r24, 0xFF	; 255
    2142:	80 93 45 06 	sts	0x0645, r24
}
    2146:	8f 91       	pop	r24
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <__vector_10>:
        if(hb-g_tmr16KHz==0) return (hb<<8)|lb;
    }
}

// Clocks every 128 uS
ISR(TIMER2_OVF_vect, ISR_NOBLOCK) //10ms timer
    2152:	78 94       	sei
    2154:	1f 92       	push	r1
    2156:	0f 92       	push	r0
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	0f 92       	push	r0
    215c:	11 24       	eor	r1, r1
    215e:	2f 93       	push	r18
    2160:	3f 93       	push	r19
    2162:	4f 93       	push	r20
    2164:	5f 93       	push	r21
    2166:	6f 93       	push	r22
    2168:	7f 93       	push	r23
    216a:	8f 93       	push	r24
    216c:	9f 93       	push	r25
    216e:	af 93       	push	r26
    2170:	bf 93       	push	r27
    2172:	ef 93       	push	r30
    2174:	ff 93       	push	r31
{
  cli();
    2176:	f8 94       	cli
#ifdef CPUM2561
  TIMSK2 &= ~ (1<<TOIE2) ; //stop reentrance
#else
  TIMSK &= ~ (1<<TOIE2) ; //stop reentrance
    2178:	87 b7       	in	r24, 0x37	; 55
    217a:	8f 7b       	andi	r24, 0xBF	; 191
    217c:	87 bf       	out	0x37, r24	; 55
#endif
  sei();
    217e:	78 94       	sei
  
	AUDIO_DRIVER();  // the tone generator
    2180:	85 eb       	ldi	r24, 0xB5	; 181
    2182:	95 e0       	ldi	r25, 0x05	; 5
    2184:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_ZN10audioQueue6driverEv>
	// Now handle the Voice output
	// Check for LcdLocked (in interrupt), and voice_enabled
	if ( g_eeGeneral.speakerMode & 2 )
    2188:	80 91 87 01 	lds	r24, 0x0187
    218c:	81 ff       	sbrs	r24, 1
    218e:	2b c0       	rjmp	.+86     	; 0x21e6 <__vector_10+0x94>
	{
		if ( LcdLock == 0 )		// LCD not in use
    2190:	80 91 48 0d 	lds	r24, 0x0D48
    2194:	88 23       	and	r24, r24
    2196:	39 f5       	brne	.+78     	; 0x21e6 <__vector_10+0x94>
		{
			struct t_voice *vptr ;
			vptr = &Voice ;
			FORCE_INDIRECT(vptr) ;
    2198:	eb e1       	ldi	r30, 0x1B	; 27
    219a:	fe e0       	ldi	r31, 0x0E	; 14
			if ( vptr->VoiceState == V_CLOCKING )
    219c:	86 a1       	ldd	r24, Z+38	; 0x26
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	11 f5       	brne	.+68     	; 0x21e6 <__vector_10+0x94>
			{
				if ( vptr->VoiceTimer )
    21a2:	83 a1       	ldd	r24, Z+35	; 0x23
    21a4:	88 23       	and	r24, r24
    21a6:	11 f0       	breq	.+4      	; 0x21ac <__vector_10+0x5a>
				{
					vptr->VoiceTimer -= 1 ;
    21a8:	81 50       	subi	r24, 0x01	; 1
    21aa:	1c c0       	rjmp	.+56     	; 0x21e4 <__vector_10+0x92>
				}
				else
				{
					uint8_t tVoiceLatch = vptr->VoiceLatch ;
    21ac:	21 a1       	ldd	r18, Z+33	; 0x21
					
					PORTB |= (1<<OUT_B_LIGHT) ;				// Latch clock high
    21ae:	c7 9a       	sbi	0x18, 7	; 24
					if ( ( vptr->VoiceCounter & 1 ) == 0 )
    21b0:	82 a1       	ldd	r24, Z+34	; 0x22
    21b2:	80 fd       	sbrc	r24, 0
    21b4:	09 c0       	rjmp	.+18     	; 0x21c8 <__vector_10+0x76>
					{
						tVoiceLatch &= ~VOICE_DATA_BIT ;
    21b6:	2d 7f       	andi	r18, 0xFD	; 253
						if ( vptr->VoiceSerial & 0x4000 )
    21b8:	84 a1       	ldd	r24, Z+36	; 0x24
    21ba:	95 a1       	ldd	r25, Z+37	; 0x25
    21bc:	96 fd       	sbrc	r25, 6
						{
							tVoiceLatch |= VOICE_DATA_BIT ;
    21be:	22 60       	ori	r18, 0x02	; 2
						}
						vptr->VoiceSerial <<= 1 ;
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	95 a3       	std	Z+37, r25	; 0x25
    21c6:	84 a3       	std	Z+36, r24	; 0x24
					}
					tVoiceLatch ^= VOICE_CLOCK_BIT ;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	28 27       	eor	r18, r24
					vptr->VoiceLatch = PORTA_LCD_DAT = tVoiceLatch ;			// Latch data set
    21cc:	2b bb       	out	0x1b, r18	; 27
    21ce:	8b b3       	in	r24, 0x1b	; 27
    21d0:	81 a3       	std	Z+33, r24	; 0x21
					PORTB &= ~(1<<OUT_B_LIGHT) ;			// Latch clock low
    21d2:	c7 98       	cbi	0x18, 7	; 24
					if ( --vptr->VoiceCounter == 0 )
    21d4:	82 a1       	ldd	r24, Z+34	; 0x22
    21d6:	81 50       	subi	r24, 0x01	; 1
    21d8:	82 a3       	std	Z+34, r24	; 0x22
    21da:	88 23       	and	r24, r24
    21dc:	21 f4       	brne	.+8      	; 0x21e6 <__vector_10+0x94>
					{
						vptr->VoiceState = V_WAIT_BUSY_ON ;
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	86 a3       	std	Z+38, r24	; 0x26
						vptr->VoiceTimer = 5 ;		// 50 mS
    21e2:	85 e0       	ldi	r24, 0x05	; 5
    21e4:	83 a3       	std	Z+35, r24	; 0x23
					}
				}
			}
		}
	}
  cli();
    21e6:	f8 94       	cli
#ifdef CPUM2561
  TIMSK2 |= (1<<TOIE2) ;
#else
  TIMSK |= (1<<TOIE2) ;
    21e8:	87 b7       	in	r24, 0x37	; 55
    21ea:	80 64       	ori	r24, 0x40	; 64
    21ec:	87 bf       	out	0x37, r24	; 55
#endif
  sei();
    21ee:	78 94       	sei
}
    21f0:	ff 91       	pop	r31
    21f2:	ef 91       	pop	r30
    21f4:	bf 91       	pop	r27
    21f6:	af 91       	pop	r26
    21f8:	9f 91       	pop	r25
    21fa:	8f 91       	pop	r24
    21fc:	7f 91       	pop	r23
    21fe:	6f 91       	pop	r22
    2200:	5f 91       	pop	r21
    2202:	4f 91       	pop	r20
    2204:	3f 91       	pop	r19
    2206:	2f 91       	pop	r18
    2208:	0f 90       	pop	r0
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	0f 90       	pop	r0
    220e:	1f 90       	pop	r1
    2210:	18 95       	reti

00002212 <__vector_25>:
// Timer3 used for PPM_IN pulse width capture. Counter running at 16MHz / 8 = 2MHz
// equating to one count every half millisecond. (2 counts = 1ms). Control channel
// count delta values thus can range from about 1600 to 4400 counts (800us to 2200us),
// corresponding to a PPM signal in the range 0.8ms to 2.2ms (1.5ms at center).
// (The timer is free-running and is thus not reset to zero at each capture interval.)
ISR(TIMER3_CAPT_vect, ISR_NOBLOCK) //capture ppm in 16MHz / 8 = 2MHz
    2212:	78 94       	sei
    2214:	1f 92       	push	r1
    2216:	0f 92       	push	r0
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	0f 92       	push	r0
    221c:	11 24       	eor	r1, r1
    221e:	2f 93       	push	r18
    2220:	3f 93       	push	r19
    2222:	4f 93       	push	r20
    2224:	5f 93       	push	r21
    2226:	6f 93       	push	r22
    2228:	7f 93       	push	r23
    222a:	8f 93       	push	r24
    222c:	9f 93       	push	r25
    222e:	af 93       	push	r26
    2230:	bf 93       	push	r27
    2232:	ef 93       	push	r30
    2234:	ff 93       	push	r31
{
    uint16_t capture=ICR3;
    2236:	20 91 80 00 	lds	r18, 0x0080
    223a:	30 91 81 00 	lds	r19, 0x0081
    cli();
    223e:	f8 94       	cli
#ifdef CPUM2561
    TIMSK3 &= ~(1<<ICIE3); //stop reentrance
#else
    ETIMSK &= ~(1<<TICIE3); //stop reentrance
    2240:	80 91 7d 00 	lds	r24, 0x007D
    2244:	8f 7d       	andi	r24, 0xDF	; 223
    2246:	80 93 7d 00 	sts	0x007D, r24
#endif
    sei();
    224a:	78 94       	sei

    static uint16_t lastCapt;
    uint16_t val = (capture - lastCapt) / 2;
    224c:	80 91 4b 06 	lds	r24, 0x064B
    2250:	90 91 4c 06 	lds	r25, 0x064C
    2254:	a9 01       	movw	r20, r18
    2256:	48 1b       	sub	r20, r24
    2258:	59 0b       	sbc	r21, r25
    225a:	56 95       	lsr	r21
    225c:	47 95       	ror	r20
    lastCapt = capture;
    225e:	30 93 4c 06 	sts	0x064C, r19
    2262:	20 93 4b 06 	sts	0x064B, r18

    // We prcoess g_ppmInsright here to make servo movement as smooth as possible
    //    while under trainee control
  	if (val>4000 && val < 16000) // G: Prioritize reset pulse. (Needed when less than 8 incoming pulses)
    2266:	ca 01       	movw	r24, r20
    2268:	81 5a       	subi	r24, 0xA1	; 161
    226a:	9f 40       	sbci	r25, 0x0F	; 15
    226c:	8f 5d       	subi	r24, 0xDF	; 223
    226e:	9e 42       	sbci	r25, 0x2E	; 46
    2270:	20 f4       	brcc	.+8      	; 0x227a <__vector_25+0x68>
  	  ppmInState = 1; // triggered
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	80 93 34 06 	sts	0x0634, r24
    2278:	2f c0       	rjmp	.+94     	; 0x22d8 <__vector_25+0xc6>
  	else
  	{
  		if(ppmInState && ppmInState<=8)
    227a:	20 91 34 06 	lds	r18, 0x0634
    227e:	82 2f       	mov	r24, r18
    2280:	81 50       	subi	r24, 0x01	; 1
    2282:	88 30       	cpi	r24, 0x08	; 8
    2284:	48 f5       	brcc	.+82     	; 0x22d8 <__vector_25+0xc6>
			{
  	  	if(val>800 && val<2200)
    2286:	ca 01       	movw	r24, r20
    2288:	81 52       	subi	r24, 0x21	; 33
    228a:	93 40       	sbci	r25, 0x03	; 3
    228c:	87 57       	subi	r24, 0x77	; 119
    228e:	95 40       	sbci	r25, 0x05	; 5
    2290:	08 f5       	brcc	.+66     	; 0x22d4 <__vector_25+0xc2>
				{
					ppmInValid = 100 ;
    2292:	84 e6       	ldi	r24, 0x64	; 100
    2294:	80 93 a0 05 	sts	0x05A0, r24
  		    g_ppmIns[ppmInState++ - 1] =
  	  	    (int16_t)(val - 1500)* (uint8_t)(g_eeGeneral.PPM_Multiplier+10)/10; //+-500 != 512, but close enough.
    2298:	e2 2f       	mov	r30, r18
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	ee 5d       	subi	r30, 0xDE	; 222
    22a2:	f9 4f       	sbci	r31, 0xF9	; 249
    22a4:	4c 5d       	subi	r20, 0xDC	; 220
    22a6:	55 40       	sbci	r21, 0x05	; 5
    22a8:	80 91 82 01 	lds	r24, 0x0182
    22ac:	86 5f       	subi	r24, 0xF6	; 246
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	bc 01       	movw	r22, r24
    22b2:	46 9f       	mul	r20, r22
    22b4:	c0 01       	movw	r24, r0
    22b6:	47 9f       	mul	r20, r23
    22b8:	90 0d       	add	r25, r0
    22ba:	56 9f       	mul	r21, r22
    22bc:	90 0d       	add	r25, r0
    22be:	11 24       	eor	r1, r1
    22c0:	6a e0       	ldi	r22, 0x0A	; 10
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    22c8:	71 83       	std	Z+1, r23	; 0x01
    22ca:	60 83       	st	Z, r22
    22cc:	2f 5f       	subi	r18, 0xFF	; 255
    22ce:	20 93 34 06 	sts	0x0634, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <__vector_25+0xc6>

		    }else{
  		    ppmInState=0; // not triggered
    22d4:	10 92 34 06 	sts	0x0634, r1
  	  	}
  	  }
  	}

    cli();
    22d8:	f8 94       	cli
#ifdef CPUM2561
    TIMSK3 |= (1<<ICIE3);
#else
    ETIMSK |= (1<<TICIE3);
    22da:	80 91 7d 00 	lds	r24, 0x007D
    22de:	80 62       	ori	r24, 0x20	; 32
    22e0:	80 93 7d 00 	sts	0x007D, r24
#endif
    sei();
    22e4:	78 94       	sei
}
    22e6:	ff 91       	pop	r31
    22e8:	ef 91       	pop	r30
    22ea:	bf 91       	pop	r27
    22ec:	af 91       	pop	r26
    22ee:	9f 91       	pop	r25
    22f0:	8f 91       	pop	r24
    22f2:	7f 91       	pop	r23
    22f4:	6f 91       	pop	r22
    22f6:	5f 91       	pop	r21
    22f8:	4f 91       	pop	r20
    22fa:	3f 91       	pop	r19
    22fc:	2f 91       	pop	r18
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	0f 90       	pop	r0
    2304:	1f 90       	pop	r1
    2306:	18 95       	reti

00002308 <_Z7isAgvarh>:
{
 	return getTelemetryValue(FR_ALT_BARO) + AltOffset ;
}
#endif

int8_t isAgvar(uint8_t value)
    2308:	98 2f       	mov	r25, r24
{
	if ( value >= 62 )
    230a:	8e 33       	cpi	r24, 0x3E	; 62
    230c:	10 f4       	brcc	.+4      	; 0x2312 <_Z7isAgvarh+0xa>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	08 95       	ret
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	95 34       	cpi	r25, 0x45	; 69
    2316:	08 f4       	brcc	.+2      	; 0x231a <_Z7isAgvarh+0x12>
    2318:	81 e0       	ldi	r24, 0x01	; 1
		{
			return 1 ;
		}
	}
	return 0 ;
}
    231a:	08 95       	ret

0000231c <_Z14calc1000toRESXi>:
#endif


int16_t calc1000toRESX(int16_t x)  // improve calc time by Pat MacKenzie
{
    int16_t y = x>>5;
    231c:	9c 01       	movw	r18, r24
    231e:	75 e0       	ldi	r23, 0x05	; 5
    2320:	35 95       	asr	r19
    2322:	27 95       	ror	r18
    2324:	7a 95       	dec	r23
    2326:	e1 f7       	brne	.-8      	; 0x2320 <_Z14calc1000toRESXi+0x4>
    x+=y;
    2328:	28 0f       	add	r18, r24
    232a:	39 1f       	adc	r19, r25
    232c:	ac 01       	movw	r20, r24
    232e:	45 2f       	mov	r20, r21
    2330:	55 0f       	add	r21, r21
    2332:	55 0b       	sbc	r21, r21
    2334:	45 95       	asr	r20
    2336:	24 0f       	add	r18, r20
    2338:	35 1f       	adc	r19, r21
    y=y>>2;
    233a:	88 0f       	add	r24, r24
    233c:	89 2f       	mov	r24, r25
    233e:	88 1f       	adc	r24, r24
    2340:	99 0b       	sbc	r25, r25


int16_t calc1000toRESX(int16_t x)  // improve calc time by Pat MacKenzie
{
    int16_t y = x>>5;
    x+=y;
    2342:	28 1b       	sub	r18, r24
    2344:	39 0b       	sbc	r19, r25
    y=y>>2;
    x-=y;
    return x+(y>>2);
    //  return x + x/32 - x/128 + x/512;
}
    2346:	c9 01       	movw	r24, r18
    2348:	08 95       	ret

0000234a <_Z3REGaaa>:
int8_t REG100_100(int8_t x)
{
	return REG( x, -100, 100 ) ;
}

int8_t REG(int8_t x, int8_t min, int8_t max)
    234a:	98 2f       	mov	r25, r24
{
  int8_t result = x;
  if (x >= 126 || x <= -126) {
    234c:	83 58       	subi	r24, 0x83	; 131
    234e:	8b 3f       	cpi	r24, 0xFB	; 251
    2350:	10 f4       	brcc	.+4      	; 0x2356 <_Z3REGaaa+0xc>
    2352:	89 2f       	mov	r24, r25
    2354:	08 95       	ret
    x = (uint8_t)x - 126;
    result = g_model.gvars[x].gvar ;
    2356:	9e 57       	subi	r25, 0x7E	; 126
    2358:	e9 2f       	mov	r30, r25
    235a:	ff 27       	eor	r31, r31
    235c:	e7 fd       	sbrc	r30, 7
    235e:	f0 95       	com	r31
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	ef 59       	subi	r30, 0x9F	; 159
    2366:	fb 4f       	sbci	r31, 0xFB	; 251
    2368:	80 81       	ld	r24, Z
    if (result < min) {
    236a:	86 17       	cp	r24, r22
    236c:	1c f4       	brge	.+6      	; 0x2374 <_Z3REGaaa+0x2a>
      g_model.gvars[x].gvar = result = min;
    236e:	60 83       	st	Z, r22
    2370:	86 2f       	mov	r24, r22
    2372:	08 95       	ret
//      eeDirty( EE_MODEL | EE_TRIM ) ;
    }
    else if (result > max) {
    2374:	48 17       	cp	r20, r24
    2376:	14 f4       	brge	.+4      	; 0x237c <_Z3REGaaa+0x32>
      g_model.gvars[x].gvar = result = max;
    2378:	40 83       	st	Z, r20
    237a:	84 2f       	mov	r24, r20
//      eeDirty( EE_MODEL | EE_TRIM ) ;
    }
  }
  return result;
}
    237c:	08 95       	ret

0000237e <_Z10REG100_100a>:
}

#if GVARS
int8_t REG100_100(int8_t x)
{
	return REG( x, -100, 100 ) ;
    237e:	6c e9       	ldi	r22, 0x9C	; 156
    2380:	44 e6       	ldi	r20, 0x64	; 100
    2382:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z3REGaaa>
}
    2386:	08 95       	ret

00002388 <_Z16IS_EXPO_THROTTLEh>:
  }
  return result;
}
#endif

uint8_t IS_EXPO_THROTTLE( uint8_t x )
    2388:	98 2f       	mov	r25, r24
{
	if ( g_model.thrExpo )
    238a:	80 91 bb 01 	lds	r24, 0x01BB
    238e:	84 fd       	sbrc	r24, 4
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <_Z16IS_EXPO_THROTTLEh+0xe>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	08 95       	ret
	{
		return IS_THROTTLE( x ) ;
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	92 30       	cpi	r25, 0x02	; 2
    239a:	09 f4       	brne	.+2      	; 0x239e <_Z16IS_EXPO_THROTTLEh+0x16>
    239c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0 ;
}
    239e:	08 95       	ret

000023a0 <_Z13calc100toRESXa>:
	y = 2 - y ;
	return (((y) == x) && (x<4)) ;
}
#endif

int16_t calc100toRESX(int8_t x)
    23a0:	99 e2       	ldi	r25, 0x29	; 41
    23a2:	89 02       	muls	r24, r25
    23a4:	90 01       	movw	r18, r0
    23a6:	11 24       	eor	r1, r1
    23a8:	35 95       	asr	r19
    23aa:	27 95       	ror	r18
    23ac:	35 95       	asr	r19
    23ae:	27 95       	ror	r18
    23b0:	87 fd       	sbrc	r24, 7
    23b2:	81 5c       	subi	r24, 0xC1	; 193
    23b4:	86 fb       	bst	r24, 6
    23b6:	88 0f       	add	r24, r24
    23b8:	88 0b       	sbc	r24, r24
    23ba:	80 f9       	bld	r24, 0
    23bc:	99 27       	eor	r25, r25
    23be:	87 fd       	sbrc	r24, 7
    23c0:	90 95       	com	r25
    23c2:	28 1b       	sub	r18, r24
    23c4:	39 0b       	sbc	r19, r25
{
    return ((x*41)>>2) - x/64;
}
    23c6:	c9 01       	movw	r24, r18
    23c8:	08 95       	ret

000023ca <_GLOBAL__I_Last_switch>:
																			0x4B, 0x4E, 0x63, 0x6C, 0x72, 0x78,
                                      0x87, 0x8D, 0x93, 0x9C, 0xB1, 0xB4,
                                      0xC6, 0xC9, 0xD2, 0xD8, 0xE1, 0xE4		} ;

//new audio object
audioQueue  audio;
    23ca:	85 eb       	ldi	r24, 0xB5	; 181
    23cc:	95 e0       	ldi	r25, 0x05	; 5
    23ce:	0e 94 7b 77 	call	0xeef6	; 0xeef6 <_ZN10audioQueueC1Ev>
#endif

int16_t calc100toRESX(int8_t x)
{
    return ((x*41)>>2) - x/64;
}
    23d2:	08 95       	ret

000023d4 <_Z12setTrimValuehhi>:
		trim = ( trim > 0 ) ? 125 : -125 ;
	}	
	return trim ;
}

void setTrimValue(uint8_t phase, uint8_t idx, int16_t trim)
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	16 2f       	mov	r17, r22
    23dc:	ea 01       	movw	r28, r20
{
	if ( phase )
    23de:	88 23       	and	r24, r24
    23e0:	41 f1       	breq	.+80     	; 0x2432 <_Z12setTrimValuehhi+0x5e>
	{
		phase = getTrimFlightPhase( phase, idx ) ;
    23e2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_Z18getTrimFlightPhasehh>
    23e6:	28 2f       	mov	r18, r24
	}
	if ( phase )
    23e8:	88 23       	and	r24, r24
    23ea:	19 f1       	breq	.+70     	; 0x2432 <_Z12setTrimValuehhi+0x5e>
  return getRawTrimValue( getTrimFlightPhase( phase, idx ), idx ) ;
}

int16_t validatePlusMinus125( int16_t trim )
{
  if(trim < -125 || trim > 125)
    23ec:	ce 01       	movw	r24, r28
    23ee:	83 58       	subi	r24, 0x83	; 131
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	8b 3f       	cpi	r24, 0xFB	; 251
    23f4:	91 05       	cpc	r25, r1
    23f6:	40 f0       	brcs	.+16     	; 0x2408 <_Z12setTrimValuehhi+0x34>
	{
		trim = ( trim > 0 ) ? 125 : -125 ;
    23f8:	1c 16       	cp	r1, r28
    23fa:	1d 06       	cpc	r1, r29
    23fc:	1c f0       	brlt	.+6      	; 0x2404 <_Z12setTrimValuehhi+0x30>
    23fe:	c3 e8       	ldi	r28, 0x83	; 131
    2400:	df ef       	ldi	r29, 0xFF	; 255
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <_Z12setTrimValuehhi+0x34>
    2404:	cd e7       	ldi	r28, 0x7D	; 125
    2406:	d0 e0       	ldi	r29, 0x00	; 0
//    if(trim < -500 || trim > 500)
//		{
//			trim = ( trim > 0 ) ? 125 : -125 ;
//			trim = ( trim > 0 ) ? 500 : -500 ; For later addition
//		}	
  	g_model.phaseData[phase-1].trim[idx] = trim - ( TRIM_EXTENDED_MAX + 1 ) ;
    2408:	82 2f       	mov	r24, r18
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	fc 01       	movw	r30, r24
    2410:	ee 0f       	add	r30, r30
    2412:	ff 1f       	adc	r31, r31
    2414:	ee 0f       	add	r30, r30
    2416:	ff 1f       	adc	r31, r31
    2418:	e8 0f       	add	r30, r24
    241a:	f9 1f       	adc	r31, r25
    241c:	e1 0f       	add	r30, r17
    241e:	f1 1d       	adc	r31, r1
    2420:	ee 0f       	add	r30, r30
    2422:	ff 1f       	adc	r31, r31
    2424:	e1 59       	subi	r30, 0x91	; 145
    2426:	fb 4f       	sbci	r31, 0xFB	; 251
    2428:	c5 5f       	subi	r28, 0xF5	; 245
    242a:	d1 40       	sbci	r29, 0x01	; 1
    242c:	d1 83       	std	Z+1, r29	; 0x01
    242e:	c0 83       	st	Z, r28
    2430:	13 c0       	rjmp	.+38     	; 0x2458 <_Z12setTrimValuehhi+0x84>
  return getRawTrimValue( getTrimFlightPhase( phase, idx ), idx ) ;
}

int16_t validatePlusMinus125( int16_t trim )
{
  if(trim < -125 || trim > 125)
    2432:	ce 01       	movw	r24, r28
    2434:	83 58       	subi	r24, 0x83	; 131
    2436:	9f 4f       	sbci	r25, 0xFF	; 255
    2438:	8b 3f       	cpi	r24, 0xFB	; 251
    243a:	91 05       	cpc	r25, r1
    243c:	40 f0       	brcs	.+16     	; 0x244e <_Z12setTrimValuehhi+0x7a>
	{
		trim = ( trim > 0 ) ? 125 : -125 ;
    243e:	1c 16       	cp	r1, r28
    2440:	1d 06       	cpc	r1, r29
    2442:	1c f0       	brlt	.+6      	; 0x244a <_Z12setTrimValuehhi+0x76>
    2444:	c3 e8       	ldi	r28, 0x83	; 131
    2446:	df ef       	ldi	r29, 0xFF	; 255
    2448:	02 c0       	rjmp	.+4      	; 0x244e <_Z12setTrimValuehhi+0x7a>
    244a:	cd e7       	ldi	r28, 0x7D	; 125
    244c:	d0 e0       	ldi	r29, 0x00	; 0
//			trim = ( trim > 0 ) ? 125 : -125 ;
//		}	
#ifdef FMODE_TRIM
   	*TrimPtr[idx] = trim ;
#else    
		g_model.trim[idx] = trim ;
    244e:	e1 2f       	mov	r30, r17
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	e4 57       	subi	r30, 0x74	; 116
    2454:	fc 4f       	sbci	r31, 0xFC	; 252
    2456:	c0 83       	st	Z, r28
#endif
	}
  STORE_MODELVARS_TRIM ;
    2458:	86 e0       	ldi	r24, 0x06	; 6
    245a:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
}
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	08 95       	ret

00002466 <__vector_15>:

// Clocks every 10 mS
#ifdef CPUM2561
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK) //10ms timer
#else
ISR(TIMER0_COMP_vect, ISR_NOBLOCK) //10ms timer
    2466:	78 94       	sei
    2468:	1f 92       	push	r1
    246a:	0f 92       	push	r0
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	0f 92       	push	r0
    2470:	11 24       	eor	r1, r1
    2472:	2f 93       	push	r18
    2474:	3f 93       	push	r19
    2476:	4f 93       	push	r20
    2478:	5f 93       	push	r21
    247a:	6f 93       	push	r22
    247c:	7f 93       	push	r23
    247e:	8f 93       	push	r24
    2480:	9f 93       	push	r25
    2482:	af 93       	push	r26
    2484:	bf 93       	push	r27
    2486:	ef 93       	push	r30
    2488:	ff 93       	push	r31
#endif
{ 
#ifdef CPUM2561
  OCR0A += 156 ;			// Interrupt every 128 uS
#else
  OCR0 += 156 ;			// Interrupt every 128 uS
    248a:	81 b7       	in	r24, 0x31	; 49
    248c:	84 56       	subi	r24, 0x64	; 100
    248e:	81 bf       	out	0x31, r24	; 49
//  static uint8_t cnt10ms = 77; // execute 10ms code once every 78 ISRs
//  if (cnt10ms-- == 0) { // BEGIN { ... every 10ms ... }
//    // Begin 10ms event
//    cnt10ms = 77;
		
		AUDIO_HEARTBEAT();  // the queue processing
    2490:	85 eb       	ldi	r24, 0xB5	; 181
    2492:	95 e0       	ldi	r25, 0x05	; 5
    2494:	0e 94 93 77 	call	0xef26	; 0xef26 <_ZN10audioQueue9heartbeatEv>

        per10ms();
    2498:	0e 94 26 6f 	call	0xde4c	; 0xde4c <_Z7per10msv>
#ifdef FRSKY
		check_frsky() ;
#endif
        heartbeat |= HEART_TIMER10ms;
    249c:	80 91 0b 0e 	lds	r24, 0x0E0B
    24a0:	82 60       	ori	r24, 0x02	; 2
    24a2:	80 93 0b 0e 	sts	0x0E0B, r24
	// See if time for alarm checking
		struct t_alarmControl *pac = &AlarmControl ;
		FORCE_INDIRECT(pac) ;
    24a6:	e0 e0       	ldi	r30, 0x00	; 0
    24a8:	f1 e0       	ldi	r31, 0x01	; 1

		if (--pac->AlarmTimer == 0 )
    24aa:	80 81       	ld	r24, Z
    24ac:	81 50       	subi	r24, 0x01	; 1
    24ae:	80 83       	st	Z, r24
    24b0:	88 23       	and	r24, r24
    24b2:	21 f4       	brne	.+8      	; 0x24bc <__vector_15+0x56>
		{
			pac->AlarmTimer = 100 ;		// Restart timer
    24b4:	84 e6       	ldi	r24, 0x64	; 100
    24b6:	80 83       	st	Z, r24
//			pac->AlarmCheckFlag += 1 ;	// Flag time to check alarms
			pac->OneSecFlag = 1 ;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	81 83       	std	Z+1, r24	; 0x01
		}
		if (--pac->VoiceFtimer == 0 )
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	81 50       	subi	r24, 0x01	; 1
    24c0:	82 83       	std	Z+2, r24	; 0x02
    24c2:	88 23       	and	r24, r24
    24c4:	21 f4       	brne	.+8      	; 0x24ce <__vector_15+0x68>
		{
			pac->VoiceFtimer = 10 ;		// Restart timer
    24c6:	8a e0       	ldi	r24, 0x0A	; 10
    24c8:	82 83       	std	Z+2, r24	; 0x02
			pac->VoiceCheckFlag = 1 ;	// Flag time to check alarms
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	83 83       	std	Z+3, r24	; 0x03
		}

		if(g_model.protocol == PROTO_NRF)
    24ce:	80 91 b9 01 	lds	r24, 0x01B9
    24d2:	8f 70       	andi	r24, 0x0F	; 15
    24d4:	84 30       	cpi	r24, 0x04	; 4
    24d6:	11 f4       	brne	.+4      	; 0x24dc <__vector_15+0x76>
		{
			kn_callback();
    24d8:	0e 94 57 7d 	call	0xfaae	; 0xfaae <_Z11kn_callbackv>
		}

//  } // end 10ms event

}
    24dc:	ff 91       	pop	r31
    24de:	ef 91       	pop	r30
    24e0:	bf 91       	pop	r27
    24e2:	af 91       	pop	r26
    24e4:	9f 91       	pop	r25
    24e6:	8f 91       	pop	r24
    24e8:	7f 91       	pop	r23
    24ea:	6f 91       	pop	r22
    24ec:	5f 91       	pop	r21
    24ee:	4f 91       	pop	r20
    24f0:	3f 91       	pop	r19
    24f2:	2f 91       	pop	r18
    24f4:	0f 90       	pop	r0
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	0f 90       	pop	r0
    24fa:	1f 90       	pop	r1
    24fc:	18 95       	reti

000024fe <_Z14checkSlaveModev>:
    return SlaveMode = SLAVE_MODE ;
#else
    static bool lastSlaveMode = false;

    static uint8_t checkDelay = 0;
    if (audio.busy()) {
    24fe:	85 eb       	ldi	r24, 0xB5	; 181
    2500:	95 e0       	ldi	r25, 0x05	; 5
    2502:	0e 94 81 77 	call	0xef02	; 0xef02 <_ZN10audioQueue4busyEv>
    2506:	88 23       	and	r24, r24
    2508:	11 f0       	breq	.+4      	; 0x250e <_Z14checkSlaveModev+0x10>
        checkDelay = 20;
    250a:	84 e1       	ldi	r24, 0x14	; 20
    250c:	05 c0       	rjmp	.+10     	; 0x2518 <_Z14checkSlaveModev+0x1a>
    }
    else if (checkDelay) {
    250e:	80 91 46 06 	lds	r24, 0x0646
    2512:	88 23       	and	r24, r24
    2514:	21 f0       	breq	.+8      	; 0x251e <_Z14checkSlaveModev+0x20>
        --checkDelay;
    2516:	81 50       	subi	r24, 0x01	; 1
    2518:	80 93 46 06 	sts	0x0646, r24
    251c:	08 c0       	rjmp	.+16     	; 0x252e <_Z14checkSlaveModev+0x30>
    }
    else {
        lastSlaveMode = SLAVE_MODE;//
    251e:	80 91 63 00 	lds	r24, 0x0063
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	96 95       	lsr	r25
    2526:	87 95       	ror	r24
    2528:	81 70       	andi	r24, 0x01	; 1
    252a:	80 93 47 06 	sts	0x0647, r24
    }
    return (SlaveMode = lastSlaveMode) ;
    252e:	80 91 47 06 	lds	r24, 0x0647
    2532:	80 93 6e 05 	sts	0x056E, r24
    2536:	81 11       	cpse	r24, r1
    2538:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    253a:	08 95       	ret

0000253c <_Z22getCurrentSwitchStatesv>:
{
  lcd_putsAttIdx( x, 2*FH, Str_Switches, idx, 0) ;

}

uint8_t getCurrentSwitchStates()
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	10 e0       	ldi	r17, 0x00	; 0
    2544:	c6 e1       	ldi	r28, 0x16	; 22
    2546:	d0 e0       	ldi	r29, 0x00	; 0
{
  uint8_t i = 0 ;
  for( uint8_t j=0; j<8; j++ )
  {
    bool t=keyState( (EnumKeys)(SW_BASE_DIAG+7-j) ) ;
    2548:	ce 01       	movw	r24, r28
    254a:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
		i <<= 1 ;
    254e:	11 0f       	add	r17, r17
    i |= t ;
    2550:	18 2b       	or	r17, r24
    2552:	21 97       	sbiw	r28, 0x01	; 1
}

uint8_t getCurrentSwitchStates()
{
  uint8_t i = 0 ;
  for( uint8_t j=0; j<8; j++ )
    2554:	ce 30       	cpi	r28, 0x0E	; 14
    2556:	d1 05       	cpc	r29, r1
    2558:	b9 f7       	brne	.-18     	; 0x2548 <_Z22getCurrentSwitchStatesv+0xc>
    bool t=keyState( (EnumKeys)(SW_BASE_DIAG+7-j) ) ;
		i <<= 1 ;
    i |= t ;
  }
	return i ;
}
    255a:	81 2f       	mov	r24, r17
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	08 95       	ret

00002564 <_Z13checkIncDec16iiih>:
struct t_p1 P1values ;
#endif
static uint8_t LongMenuTimer ;
uint8_t StepSize ;

int16_t checkIncDec16( int16_t val, int16_t i_min, int16_t i_max, uint8_t i_flags)
    2564:	af 92       	push	r10
    2566:	bf 92       	push	r11
    2568:	cf 92       	push	r12
    256a:	df 92       	push	r13
    256c:	ef 92       	push	r14
    256e:	ff 92       	push	r15
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	7c 01       	movw	r14, r24
    257a:	5b 01       	movw	r10, r22
    257c:	6a 01       	movw	r12, r20
    257e:	02 2f       	mov	r16, r18
{
    int16_t newval = val;
    uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;
//		uint8_t skipPause = 0 ;

		uint8_t event = Tevent ;
    2580:	10 91 aa 05 	lds	r17, 0x05AA
//        uint8_t hlp=kpl;
//        kpl=kmi;
//        kmi=hlp;
//        event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
//    }
    if(event==EVT_KEY_FIRST(kpl) || event== EVT_KEY_REPT(kpl) || (s_editMode && (event==EVT_KEY_FIRST(KEY_UP) || event== EVT_KEY_REPT(KEY_UP))) )
    2584:	14 36       	cpi	r17, 0x64	; 100
    2586:	51 f0       	breq	.+20     	; 0x259c <_Z13checkIncDec16iiih+0x38>
    2588:	14 34       	cpi	r17, 0x44	; 68
    258a:	41 f0       	breq	.+16     	; 0x259c <_Z13checkIncDec16iiih+0x38>
    258c:	80 91 e5 06 	lds	r24, 0x06E5
    2590:	88 23       	and	r24, r24
    2592:	99 f0       	breq	.+38     	; 0x25ba <_Z13checkIncDec16iiih+0x56>
    2594:	13 36       	cpi	r17, 0x63	; 99
    2596:	11 f0       	breq	.+4      	; 0x259c <_Z13checkIncDec16iiih+0x38>
    2598:	13 34       	cpi	r17, 0x43	; 67
    259a:	79 f4       	brne	.+30     	; 0x25ba <_Z13checkIncDec16iiih+0x56>
		{
				if ( ( read_keys() & 2 ) == 0 )
    259c:	b1 99       	sbic	0x16, 1	; 22
    259e:	06 c0       	rjmp	.+12     	; 0x25ac <_Z13checkIncDec16iiih+0x48>
				{
    			newval += StepSize ;
    25a0:	80 91 1e 06 	lds	r24, 0x061E
    25a4:	e7 01       	movw	r28, r14
    25a6:	c8 0f       	add	r28, r24
    25a8:	d1 1d       	adc	r29, r1
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <_Z13checkIncDec16iiih+0x4c>
				}		 
				else
				{
    			newval += 1 ;
    25ac:	e7 01       	movw	r28, r14
    25ae:	21 96       	adiw	r28, 0x01	; 1
				}

        audioDefevent(AU_KEYPAD_UP);
    25b0:	83 e1       	ldi	r24, 0x13	; 19
    25b2:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    25b6:	85 e0       	ldi	r24, 0x05	; 5
    25b8:	1a c0       	rjmp	.+52     	; 0x25ee <_Z13checkIncDec16iiih+0x8a>

        kother=kmi;
    }else if(event==EVT_KEY_FIRST(kmi) || event== EVT_KEY_REPT(kmi) || (s_editMode && (event==EVT_KEY_FIRST(KEY_DOWN) || event== EVT_KEY_REPT(KEY_DOWN))) )
    25ba:	15 36       	cpi	r17, 0x65	; 101
    25bc:	51 f0       	breq	.+20     	; 0x25d2 <_Z13checkIncDec16iiih+0x6e>
    25be:	15 34       	cpi	r17, 0x45	; 69
    25c0:	41 f0       	breq	.+16     	; 0x25d2 <_Z13checkIncDec16iiih+0x6e>
    25c2:	88 23       	and	r24, r24
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <_Z13checkIncDec16iiih+0x64>
    25c6:	94 c0       	rjmp	.+296    	; 0x26f0 <_Z13checkIncDec16iiih+0x18c>
    25c8:	12 36       	cpi	r17, 0x62	; 98
    25ca:	19 f0       	breq	.+6      	; 0x25d2 <_Z13checkIncDec16iiih+0x6e>
    25cc:	12 34       	cpi	r17, 0x42	; 66
    25ce:	09 f0       	breq	.+2      	; 0x25d2 <_Z13checkIncDec16iiih+0x6e>
    25d0:	8f c0       	rjmp	.+286    	; 0x26f0 <_Z13checkIncDec16iiih+0x18c>
		{
				if ( ( read_keys() & 2 ) == 0 )
    25d2:	b1 99       	sbic	0x16, 1	; 22
    25d4:	06 c0       	rjmp	.+12     	; 0x25e2 <_Z13checkIncDec16iiih+0x7e>
				{
    			newval -= StepSize ;
    25d6:	80 91 1e 06 	lds	r24, 0x061E
    25da:	e7 01       	movw	r28, r14
    25dc:	c8 1b       	sub	r28, r24
    25de:	d1 09       	sbc	r29, r1
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <_Z13checkIncDec16iiih+0x82>
				}		 
				else
				{
    			newval -= 1 ;
    25e2:	e7 01       	movw	r28, r14
    25e4:	21 97       	sbiw	r28, 0x01	; 1
				}

        audioDefevent(AU_KEYPAD_DOWN);
    25e6:	84 e1       	ldi	r24, 0x14	; 20
    25e8:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    25ec:	84 e0       	ldi	r24, 0x04	; 4

        kother=kpl;
    }
    if((kother != (uint8_t)-1) && keyState((EnumKeys)kother)){
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    25f4:	88 23       	and	r24, r24
    25f6:	51 f0       	breq	.+20     	; 0x260c <_Z13checkIncDec16iiih+0xa8>
        newval=-val;
    25f8:	cc 27       	eor	r28, r28
    25fa:	dd 27       	eor	r29, r29
    25fc:	ce 19       	sub	r28, r14
    25fe:	df 09       	sbc	r29, r15
        killEvents(kmi);
    2600:	85 e0       	ldi	r24, 0x05	; 5
    2602:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        killEvents(kpl);
    2606:	84 e0       	ldi	r24, 0x04	; 4
    2608:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
    }
    if(i_min==0 && i_max==1)
    260c:	a1 14       	cp	r10, r1
    260e:	b1 04       	cpc	r11, r1
    2610:	e1 f4       	brne	.+56     	; 0x264a <_Z13checkIncDec16iiih+0xe6>
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	c8 16       	cp	r12, r24
    2616:	d1 04       	cpc	r13, r1
    2618:	c1 f4       	brne	.+48     	; 0x264a <_Z13checkIncDec16iiih+0xe6>
		{
			if (event==EVT_KEY_FIRST(KEY_MENU) || event==EVT_KEY_BREAK(BTN_RE))
    261a:	10 36       	cpi	r17, 0x60	; 96
    261c:	11 f0       	breq	.+4      	; 0x2622 <_Z13checkIncDec16iiih+0xbe>
    261e:	1e 32       	cpi	r17, 0x2E	; 46
    2620:	91 f4       	brne	.+36     	; 0x2646 <_Z13checkIncDec16iiih+0xe2>
	    {
        s_editMode = false;
    2622:	10 92 e5 06 	sts	0x06E5, r1
        newval=!val;
    2626:	c0 e0       	ldi	r28, 0x00	; 0
    2628:	d0 e0       	ldi	r29, 0x00	; 0
    262a:	e1 14       	cp	r14, r1
    262c:	f1 04       	cpc	r15, r1
    262e:	11 f4       	brne	.+4      	; 0x2634 <_Z13checkIncDec16iiih+0xd0>
    2630:	c1 e0       	ldi	r28, 0x01	; 1
    2632:	d0 e0       	ldi	r29, 0x00	; 0
        killEvents(event);
    2634:	81 2f       	mov	r24, r17
    2636:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
//				skipPause = 1 ;
				if ( event==EVT_KEY_BREAK(BTN_RE) )
    263a:	1e 32       	cpi	r17, 0x2E	; 46
    263c:	11 f4       	brne	.+4      	; 0x2642 <_Z13checkIncDec16iiih+0xde>
				{
					RotaryState = ROTARY_MENU_UD ;
    263e:	10 92 af 06 	sts	0x06AF, r1
    2642:	10 e0       	ldi	r17, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <_Z13checkIncDec16iiih+0xe6>
				}
				event = 0 ;
	    }
			else
			{
				newval &= 1 ;
    2646:	c1 70       	andi	r28, 0x01	; 1
    2648:	d0 70       	andi	r29, 0x00	; 0
    }
  }
#endif
    //change values based on P1
#ifndef NOPOTSCROLL
    newval -= P1values.p1valdiff;
    264a:	80 91 16 06 	lds	r24, 0x0616
    264e:	90 91 17 06 	lds	r25, 0x0617
    2652:	c8 1b       	sub	r28, r24
    2654:	d9 0b       	sbc	r29, r25
#endif
		if ( RotaryState == ROTARY_VALUE )
    2656:	80 91 af 06 	lds	r24, 0x06AF
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	81 f4       	brne	.+32     	; 0x267e <_Z13checkIncDec16iiih+0x11a>
		{
			newval += ( ( read_keys() & 2 ) == 0 ) ? 20 * Rotary.Rotary_diff : Rotary.Rotary_diff ;
    265e:	b1 99       	sbic	0x16, 1	; 22
    2660:	07 c0       	rjmp	.+14     	; 0x2670 <_Z13checkIncDec16iiih+0x10c>
    2662:	90 91 a9 05 	lds	r25, 0x05A9
    2666:	84 e1       	ldi	r24, 0x14	; 20
    2668:	98 02       	muls	r25, r24
    266a:	c0 01       	movw	r24, r0
    266c:	11 24       	eor	r1, r1
    266e:	05 c0       	rjmp	.+10     	; 0x267a <_Z13checkIncDec16iiih+0x116>
    2670:	80 91 a9 05 	lds	r24, 0x05A9
    2674:	99 27       	eor	r25, r25
    2676:	87 fd       	sbrc	r24, 7
    2678:	90 95       	com	r25
    267a:	c8 0f       	add	r28, r24
    267c:	d9 1f       	adc	r29, r25
		}
    if(newval>i_max)
    267e:	cc 16       	cp	r12, r28
    2680:	dd 06       	cpc	r13, r29
    2682:	44 f4       	brge	.+16     	; 0x2694 <_Z13checkIncDec16iiih+0x130>
    {
        newval = i_max;
        killEvents(event);
    2684:	81 2f       	mov	r24, r17
    2686:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        audioDefevent(AU_KEYPAD_UP);
    268a:	83 e1       	ldi	r24, 0x13	; 19
    268c:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    2690:	e6 01       	movw	r28, r12
    2692:	0a c0       	rjmp	.+20     	; 0x26a8 <_Z13checkIncDec16iiih+0x144>
    }
    else if(newval < i_min)
    2694:	ca 15       	cp	r28, r10
    2696:	db 05       	cpc	r29, r11
    2698:	3c f4       	brge	.+14     	; 0x26a8 <_Z13checkIncDec16iiih+0x144>
    {
        newval = i_min;
        killEvents(event);
    269a:	81 2f       	mov	r24, r17
    269c:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        audioDefevent(AU_KEYPAD_DOWN);
    26a0:	84 e1       	ldi	r24, 0x14	; 20
    26a2:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    26a6:	e5 01       	movw	r28, r10

    }
    if(newval != val)
    26a8:	ce 15       	cp	r28, r14
    26aa:	df 05       	cpc	r29, r15
    26ac:	a9 f0       	breq	.+42     	; 0x26d8 <_Z13checkIncDec16iiih+0x174>
		{
			if ( menuPressed() )
    26ae:	b1 99       	sbic	0x16, 1	; 22
    26b0:	03 c0       	rjmp	.+6      	; 0x26b8 <_Z13checkIncDec16iiih+0x154>
			{
				LongMenuTimer = 255 ;
    26b2:	8f ef       	ldi	r24, 0xFF	; 255
    26b4:	80 93 4d 06 	sts	0x064D, r24
			}
        if(newval==0) {
    26b8:	20 97       	sbiw	r28, 0x00	; 0
    26ba:	51 f4       	brne	.+20     	; 0x26d0 <_Z13checkIncDec16iiih+0x16c>
//						if ( !skipPause )
//						{
          	  pauseEvents(event);
    26bc:	81 2f       	mov	r24, r17
    26be:	0e 94 09 6f 	call	0xde12	; 0xde12 <_Z11pauseEventsh>
//						}

            if (newval>val){
    26c2:	f7 fe       	sbrs	r15, 7
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <_Z13checkIncDec16iiih+0x166>
                audioDefevent(AU_KEYPAD_UP);
    26c6:	83 e1       	ldi	r24, 0x13	; 19
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <_Z13checkIncDec16iiih+0x168>
            } else {
                audioDefevent(AU_KEYPAD_DOWN);
    26ca:	84 e1       	ldi	r24, 0x14	; 20
    26cc:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
            }

        }
        eeDirty(i_flags & (EE_GENERAL|EE_MODEL));
    26d0:	80 2f       	mov	r24, r16
    26d2:	83 70       	andi	r24, 0x03	; 3
    26d4:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
    }
//    else {
//        checkIncDec_Ret = false;
//    }
    return newval;
}
    26d8:	ce 01       	movw	r24, r28
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	ff 90       	pop	r15
    26e4:	ef 90       	pop	r14
    26e6:	df 90       	pop	r13
    26e8:	cf 90       	pop	r12
    26ea:	bf 90       	pop	r11
    26ec:	af 90       	pop	r10
    26ee:	08 95       	ret
            } else {
                audioDefevent(AU_KEYPAD_DOWN);
            }

        }
        eeDirty(i_flags & (EE_GENERAL|EE_MODEL));
    26f0:	e7 01       	movw	r28, r14
    26f2:	8c cf       	rjmp	.-232    	; 0x260c <_Z13checkIncDec16iiih+0xa8>

000026f4 <_Z16checkIncDec_hmu0ih>:
int8_t checkIncDec_hm0( int8_t i_val, int8_t i_max)
{
    return checkIncDec( i_val,0,i_max,EE_MODEL);
}

int16_t checkIncDec_hmu0( int16_t i_val, uint8_t i_max)
    26f4:	46 2f       	mov	r20, r22
{
  return checkIncDec16( i_val,0,i_max,EE_MODEL) ;
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	22 e0       	ldi	r18, 0x02	; 2
    26fe:	0e 94 b2 12 	call	0x2564	; 0x2564 <_Z13checkIncDec16iiih>
}
    2702:	08 95       	ret

00002704 <_Z11checkIncDecaaah>:
    return newval;
}

NOINLINE int8_t checkIncDec( int8_t i_val, int8_t i_min, int8_t i_max, uint8_t i_flags)
{
    return checkIncDec16( i_val,i_min,i_max,i_flags);
    2704:	77 27       	eor	r23, r23
    2706:	67 fd       	sbrc	r22, 7
    2708:	70 95       	com	r23
    270a:	55 27       	eor	r21, r21
    270c:	47 fd       	sbrc	r20, 7
    270e:	50 95       	com	r21
    2710:	99 27       	eor	r25, r25
    2712:	87 fd       	sbrc	r24, 7
    2714:	90 95       	com	r25
    2716:	0e 94 b2 12 	call	0x2564	; 0x2564 <_Z13checkIncDec16iiih>
}
    271a:	08 95       	ret

0000271c <_Z15checkIncDec_hg0aa>:
int8_t checkIncDec_hg( int8_t i_val, int8_t i_min, int8_t i_max)
{
    return checkIncDec( i_val,i_min,i_max,EE_GENERAL);
}

int8_t checkIncDec_hg0( int8_t i_val, int8_t i_max)
    271c:	46 2f       	mov	r20, r22
{
    return checkIncDec( i_val,0 ,i_max,EE_GENERAL);
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	21 e0       	ldi	r18, 0x01	; 1
    2722:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
}
    2726:	08 95       	ret

00002728 <_Z14checkIncDec_hgaaa>:
  return checkIncDec16( i_val,0,i_max,EE_MODEL) ;
}

int8_t checkIncDec_hg( int8_t i_val, int8_t i_min, int8_t i_max)
{
    return checkIncDec( i_val,i_min,i_max,EE_GENERAL);
    2728:	21 e0       	ldi	r18, 0x01	; 1
    272a:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
}
    272e:	08 95       	ret

00002730 <_Z15checkIncDec_hm0aa>:
int8_t checkIncDec_hm( int8_t i_val, int8_t i_min, int8_t i_max)
{
    return checkIncDec( i_val,i_min,i_max,EE_MODEL);
}

int8_t checkIncDec_hm0( int8_t i_val, int8_t i_max)
    2730:	46 2f       	mov	r20, r22
{
    return checkIncDec( i_val,0,i_max,EE_MODEL);
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	22 e0       	ldi	r18, 0x02	; 2
    2736:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
}
    273a:	08 95       	ret

0000273c <_Z14checkIncDec_hmaaa>:
    return checkIncDec16( i_val,i_min,i_max,i_flags);
}

int8_t checkIncDec_hm( int8_t i_val, int8_t i_min, int8_t i_max)
{
    return checkIncDec( i_val,i_min,i_max,EE_MODEL);
    273c:	22 e0       	ldi	r18, 0x02	; 2
    273e:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
}
    2742:	08 95       	ret

00002744 <_Z13alertMessagesPKcS0_>:
        alert(PSTR(STR_EE_LOW_MEM));
    }

}

void alertMessages( const prog_char * s, const prog_char * t )
    2744:	ef 92       	push	r14
    2746:	ff 92       	push	r15
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	8c 01       	movw	r16, r24
    274e:	7b 01       	movw	r14, r22
{
    lcd_clear();
    2750:	0e 94 3c 6e 	call	0xdc78	; 0xdc78 <_Z9lcd_clearv>
    lcd_putsAtt(64-5*FW,0*FH,Str_Alert,DBLSIZE);
    2754:	82 e2       	ldi	r24, 0x22	; 34
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	49 ec       	ldi	r20, 0xC9	; 201
    275a:	51 e0       	ldi	r21, 0x01	; 1
    275c:	24 e0       	ldi	r18, 0x04	; 4
    275e:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
    lcd_puts_Pleft(4*FH,s);
    2762:	80 e2       	ldi	r24, 0x20	; 32
    2764:	b8 01       	movw	r22, r16
    2766:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    lcd_puts_Pleft(5*FH,t);
    276a:	88 e2       	ldi	r24, 0x28	; 40
    276c:	b7 01       	movw	r22, r14
    276e:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    lcd_puts_Pleft(6*FH,  PSTR(STR_PRESS_KEY_SKIP) ) ;
    2772:	80 e3       	ldi	r24, 0x30	; 48
    2774:	6c e2       	ldi	r22, 0x2C	; 44
    2776:	72 e0       	ldi	r23, 0x02	; 2
    2778:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
//		lcdSetContrast() ;
}
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	08 95       	ret

00002786 <_Z6almessPKch>:
//uint8_t  g_beepVal[5];

#define	ALERT_TYPE	0
#define MESS_TYPE		1

void almess( const prog_char * s, uint8_t type )
    2786:	ff 92       	push	r15
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	8c 01       	movw	r16, r24
    278e:	f6 2e       	mov	r15, r22
{
	const prog_char *h ;
  lcd_clear();
    2790:	0e 94 3c 6e 	call	0xdc78	; 0xdc78 <_Z9lcd_clearv>
  lcd_puts_Pleft(4*FW,s);
    2794:	88 e1       	ldi	r24, 0x18	; 24
    2796:	b8 01       	movw	r22, r16
    2798:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
	if ( type == ALERT_TYPE)
    279c:	ff 20       	and	r15, r15
    279e:	19 f0       	breq	.+6      	; 0x27a6 <_Z6almessPKch+0x20>
    lcd_puts_P(64-6*FW,7*FH,PSTR(STR_PRESS_ANY_KEY));
		h = Str_Alert ;
	}
	else
	{
		h = PSTR(STR_MESSAGE) ;
    27a0:	40 ed       	ldi	r20, 0xD0	; 208
    27a2:	51 e0       	ldi	r21, 0x01	; 1
    27a4:	08 c0       	rjmp	.+16     	; 0x27b6 <_Z6almessPKch+0x30>
	const prog_char *h ;
  lcd_clear();
  lcd_puts_Pleft(4*FW,s);
	if ( type == ALERT_TYPE)
	{
    lcd_puts_P(64-6*FW,7*FH,PSTR(STR_PRESS_ANY_KEY));
    27a6:	8c e1       	ldi	r24, 0x1C	; 28
    27a8:	68 e3       	ldi	r22, 0x38	; 56
    27aa:	48 ed       	ldi	r20, 0xD8	; 216
    27ac:	51 e0       	ldi	r21, 0x01	; 1
    27ae:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
    27b2:	49 ec       	ldi	r20, 0xC9	; 201
    27b4:	51 e0       	ldi	r21, 0x01	; 1
	}
	else
	{
		h = PSTR(STR_MESSAGE) ;
	}
  lcd_putsAtt(64-7*FW,0*FH, h,DBLSIZE);
    27b6:	86 e1       	ldi	r24, 0x16	; 22
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	24 e0       	ldi	r18, 0x04	; 4
    27bc:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
  refreshDiplay();
    27c0:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <_Z13refreshDiplayv>
}
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	ff 90       	pop	r15
    27ca:	08 95       	ret

000027cc <_Z7messagePKc>:


void message(const prog_char * s)
{
	almess( s, MESS_TYPE ) ;
    27cc:	61 e0       	ldi	r22, 0x01	; 1
    27ce:	0e 94 c3 13 	call	0x2786	; 0x2786 <_Z6almessPKch>
//	lcdSetContrast() ;
}
    27d2:	08 95       	ret

000027d4 <_Z15putsDblSizeNameh>:
    }


}

void putsDblSizeName( uint8_t y )
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	08 2f       	mov	r16, r24
    27de:	ca ea       	ldi	r28, 0xAA	; 170
    27e0:	d1 e0       	ldi	r29, 0x01	; 1
    27e2:	1a e0       	ldi	r17, 0x0A	; 10
{
	for(uint8_t i=0;i<sizeof(g_model.name);i++)
		lcd_putcAtt(FW*2+i*2*FW-i-2, y, g_model.name[i],DBLSIZE);
    27e4:	81 2f       	mov	r24, r17
    27e6:	60 2f       	mov	r22, r16
    27e8:	49 91       	ld	r20, Y+
    27ea:	24 e0       	ldi	r18, 0x04	; 4
    27ec:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
    27f0:	15 5f       	subi	r17, 0xF5	; 245

}

void putsDblSizeName( uint8_t y )
{
	for(uint8_t i=0;i<sizeof(g_model.name);i++)
    27f2:	18 37       	cpi	r17, 0x78	; 120
    27f4:	b9 f7       	brne	.-18     	; 0x27e4 <_Z15putsDblSizeNameh+0x10>
		lcd_putcAtt(FW*2+i*2*FW-i-2, y, g_model.name[i],DBLSIZE);
}
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	08 95       	ret

00002800 <_ZL16checkQuickSelectv>:
  return result;
}
#endif

#ifndef SIMU
static void checkQuickSelect()
    2800:	1f 93       	push	r17
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    2802:	86 b3       	in	r24, 0x16	; 22
    2804:	80 95       	com	r24
    2806:	8e 77       	andi	r24, 0x7E	; 126
    2808:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t i = keyDown(); //check for keystate
    uint8_t j;

    for(j=0; j<6; j++)
		{
			if ( i & 0x02 ) break ;
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	81 ff       	sbrs	r24, 1
    280e:	06 c0       	rjmp	.+12     	; 0x281c <_ZL16checkQuickSelectv+0x1c>
//    for(j=1; j<8; j++)
//        if(i & ((uint8_t)(1<<j))) break;
//    j--;

    if(j<6) {
        if(!eeModelExists(j)) return;
    2810:	81 2f       	mov	r24, r17
    2812:	0e 94 0a 63 	call	0xc614	; 0xc614 <_Z13eeModelExistsh>
    2816:	88 23       	and	r24, r24
    2818:	19 f1       	breq	.+70     	; 0x2860 <_ZL16checkQuickSelectv+0x60>
    281a:	06 c0       	rjmp	.+12     	; 0x2828 <_ZL16checkQuickSelectv+0x28>
static void checkQuickSelect()
{
    uint8_t i = keyDown(); //check for keystate
    uint8_t j;

    for(j=0; j<6; j++)
    281c:	1f 5f       	subi	r17, 0xFF	; 255
    281e:	16 30       	cpi	r17, 0x06	; 6
    2820:	f9 f0       	breq	.+62     	; 0x2860 <_ZL16checkQuickSelectv+0x60>
		{
			if ( i & 0x02 ) break ;
			i >>= 1 ;
    2822:	95 95       	asr	r25
    2824:	87 95       	ror	r24
    2826:	f1 cf       	rjmp	.-30     	; 0x280a <_ZL16checkQuickSelectv+0xa>
//    j--;

    if(j<6) {
        if(!eeModelExists(j)) return;

        eeLoadModel(g_eeGeneral.currModel = j);
    2828:	10 93 65 01 	sts	0x0165, r17
    282c:	81 2f       	mov	r24, r17
    282e:	0e 94 03 64 	call	0xc806	; 0xc806 <_Z11eeLoadModelh>
        STORE_GENERALVARS;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
        //        eeDirty(EE_GENERAL);

        lcd_clear();
    2838:	0e 94 3c 6e 	call	0xdc78	; 0xdc78 <_Z9lcd_clearv>
        lcd_putsAtt(64-7*FW,0*FH,PSTR(STR_LOADING),DBLSIZE);
    283c:	86 e1       	ldi	r24, 0x16	; 22
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	45 e5       	ldi	r20, 0x55	; 85
    2842:	51 e0       	ldi	r21, 0x01	; 1
    2844:	24 e0       	ldi	r18, 0x04	; 4
    2846:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>

				putsDblSizeName( 3*FH ) ;
    284a:	88 e1       	ldi	r24, 0x18	; 24
    284c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <_Z15putsDblSizeNameh>
//        for(uint8_t i=0;i<sizeof(g_model.name);i++)
//            lcd_putcAtt(FW*2+i*2*FW-i-2, 3*FH, g_model.name[i],DBLSIZE);

        refreshDiplay();
    2850:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <_Z13refreshDiplayv>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    2854:	86 b3       	in	r24, 0x16	; 22
static void clearKeyEvents()
{
#ifdef SIMU
    while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
    while (keyDown());  // loop until all keys are up
    2856:	80 95       	com	r24
    2858:	8e 77       	andi	r24, 0x7E	; 126
    285a:	e1 f7       	brne	.-8      	; 0x2854 <_ZL16checkQuickSelectv+0x54>
#endif
    putEvent(0);
    285c:	10 92 49 0d 	sts	0x0D49, r1
//            lcd_putcAtt(FW*2+i*2*FW-i-2, 3*FH, g_model.name[i],DBLSIZE);

        refreshDiplay();
        clearKeyEvents(); // wait for user to release key
    }
}
    2860:	1f 91       	pop	r17
    2862:	08 95       	ret

00002864 <_Z13putWarnSwitchhh>:
//        sysFlags &= ~(sysFLAG_OLD_EEPROM); //clear flag
        sysFlags = 0 ; //clear flag
    }
}

void putWarnSwitch( uint8_t x, uint8_t idx )
    2864:	0f 93       	push	r16
    2866:	26 2f       	mov	r18, r22
{
  lcd_putsAttIdx( x, 2*FH, Str_Switches, idx, 0) ;
    2868:	60 e1       	ldi	r22, 0x10	; 16
    286a:	4a ee       	ldi	r20, 0xEA	; 234
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	00 e0       	ldi	r16, 0x00	; 0
    2870:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>

}
    2874:	0f 91       	pop	r16
    2876:	08 95       	ret

00002878 <_Z14putsDrSwitcheshhah>:
		idx1 -= MAX_DRSWITCH - 1  ;
	}
  putsDrSwitches( x-1*FW, y, idx1, att ) ;
}

void putsDrSwitches(uint8_t x,uint8_t y,int8_t idx1,uint8_t att)//, bool nc)
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	08 2f       	mov	r16, r24
    2882:	f6 2e       	mov	r15, r22
    2884:	14 2f       	mov	r17, r20
    2886:	e2 2e       	mov	r14, r18
{
    
		switch(idx1){
    2888:	44 23       	and	r20, r20
    288a:	29 f0       	breq	.+10     	; 0x2896 <_Z14putsDrSwitcheshhah+0x1e>
    288c:	46 31       	cpi	r20, 0x16	; 22
    288e:	39 f0       	breq	.+14     	; 0x289e <_Z14putsDrSwitcheshhah+0x26>
    2890:	4a 3e       	cpi	r20, 0xEA	; 234
    2892:	81 f4       	brne	.+32     	; 0x28b4 <_Z14putsDrSwitcheshhah+0x3c>
    2894:	08 c0       	rjmp	.+16     	; 0x28a6 <_Z14putsDrSwitcheshhah+0x2e>
    case  0:            lcd_putsAtt(x+FW,y,PSTR("---"),att);return;
    2896:	8a 5f       	subi	r24, 0xFA	; 250
    2898:	4f e4       	ldi	r20, 0x4F	; 79
    289a:	52 e0       	ldi	r21, 0x02	; 2
    289c:	07 c0       	rjmp	.+14     	; 0x28ac <_Z14putsDrSwitcheshhah+0x34>
    case  MAX_DRSWITCH: lcd_putsAtt(x+FW,y,Str_ON,att);return;
    289e:	8a 5f       	subi	r24, 0xFA	; 250
    28a0:	4f e2       	ldi	r20, 0x2F	; 47
    28a2:	51 e0       	ldi	r21, 0x01	; 1
    28a4:	03 c0       	rjmp	.+6      	; 0x28ac <_Z14putsDrSwitcheshhah+0x34>
    case -MAX_DRSWITCH: lcd_putsAtt(x+FW,y,Str_OFF,att);return;
    28a6:	8a 5f       	subi	r24, 0xFA	; 250
    28a8:	4b e2       	ldi	r20, 0x2B	; 43
    28aa:	51 e0       	ldi	r21, 0x01	; 1
    28ac:	2e 2d       	mov	r18, r14
    28ae:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
    28b2:	12 c0       	rjmp	.+36     	; 0x28d8 <_Z14putsDrSwitcheshhah+0x60>
    }
		if ( idx1 < 0 )
    28b4:	47 fd       	sbrc	r20, 7
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <_Z14putsDrSwitcheshhah+0x44>
    28b8:	24 2f       	mov	r18, r20
    28ba:	05 c0       	rjmp	.+10     	; 0x28c6 <_Z14putsDrSwitcheshhah+0x4e>
		{
  		lcd_putcAtt(x,y, '!',att);
    28bc:	41 e2       	ldi	r20, 0x21	; 33
    28be:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
		}
		int8_t z ;
		z = idx1 ;
		if ( z < 0 )
		{
			z = -idx1 ;			
    28c2:	21 2f       	mov	r18, r17
    28c4:	21 95       	neg	r18
		}
		z -= 1 ;
//		z *= 3 ;
  lcd_putsAttIdx(x+FW,y,Str_Switches,z,att) ;
    28c6:	21 50       	subi	r18, 0x01	; 1
    28c8:	80 2f       	mov	r24, r16
    28ca:	8a 5f       	subi	r24, 0xFA	; 250
    28cc:	6f 2d       	mov	r22, r15
    28ce:	4a ee       	ldi	r20, 0xEA	; 234
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	0e 2d       	mov	r16, r14
    28d4:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
}
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	08 95       	ret

000028e2 <_Z20putsMomentDrSwitcheshhah>:
#else
	putsChnRaw( x, y, idx1 ? idx1+20 : idx1, att ) ;
#endif
}

void putsMomentDrSwitches(uint8_t x,uint8_t y,int8_t idx1,uint8_t att)
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	08 2f       	mov	r16, r24
    28ec:	f6 2e       	mov	r15, r22
    28ee:	14 2f       	mov	r17, r20
    28f0:	e2 2e       	mov	r14, r18
{
	if ( idx1 > MAX_DRSWITCH - 1 )
    28f2:	46 31       	cpi	r20, 0x16	; 22
    28f4:	2c f0       	brlt	.+10     	; 0x2900 <_Z20putsMomentDrSwitcheshhah+0x1e>
	{
		lcd_putcAtt(x+3*FW,  y,'m',att);
    28f6:	8e 5e       	subi	r24, 0xEE	; 238
    28f8:	4d e6       	ldi	r20, 0x6D	; 109
    28fa:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
		idx1 -= MAX_DRSWITCH - 1  ;
    28fe:	15 51       	subi	r17, 0x15	; 21
	}
  putsDrSwitches( x-1*FW, y, idx1, att ) ;
    2900:	80 2f       	mov	r24, r16
    2902:	86 50       	subi	r24, 0x06	; 6
    2904:	6f 2d       	mov	r22, r15
    2906:	41 2f       	mov	r20, r17
    2908:	2e 2d       	mov	r18, r14
    290a:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
}
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	ff 90       	pop	r15
    2914:	ef 90       	pop	r14
    2916:	08 95       	ret

00002918 <_Z8getValueh>:

#endif

int16_t getValue(uint8_t i)
{
    if(i<7) return calibratedStick[i];//-512..512
    2918:	87 30       	cpi	r24, 0x07	; 7
    291a:	38 f4       	brcc	.+14     	; 0x292a <_Z8getValueh+0x12>
    291c:	e8 2f       	mov	r30, r24
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	ee 0f       	add	r30, r30
    2922:	ff 1f       	adc	r31, r31
    2924:	ea 54       	subi	r30, 0x4A	; 74
    2926:	f9 4f       	sbci	r31, 0xF9	; 249
    2928:	23 c0       	rjmp	.+70     	; 0x2970 <_Z8getValueh+0x58>
    if(i<PPM_BASE) return 0 ;
    292a:	8c 30       	cpi	r24, 0x0C	; 12
    292c:	60 f1       	brcs	.+88     	; 0x2986 <_Z8getValueh+0x6e>
		else if(i<CHOUT_BASE)
    292e:	84 31       	cpi	r24, 0x14	; 20
    2930:	b8 f4       	brcc	.+46     	; 0x2960 <_Z8getValueh+0x48>
		{
			int16_t x ;
			x = g_ppmIns[i-PPM_BASE] ;
    2932:	a8 2f       	mov	r26, r24
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	fd 01       	movw	r30, r26
    2938:	ee 0f       	add	r30, r30
    293a:	ff 1f       	adc	r31, r31
    293c:	e4 5f       	subi	r30, 0xF4	; 244
    293e:	f9 4f       	sbci	r31, 0xF9	; 249
    2940:	01 90       	ld	r0, Z+
    2942:	f0 81       	ld	r31, Z
    2944:	e0 2d       	mov	r30, r0
			if(i<PPM_BASE+4)
    2946:	80 31       	cpi	r24, 0x10	; 16
    2948:	40 f4       	brcc	.+16     	; 0x295a <_Z8getValueh+0x42>
			{
				x -= g_eeGeneral.trainer.calib[i-PPM_BASE] ;
    294a:	aa 0f       	add	r26, r26
    294c:	bb 1f       	adc	r27, r27
    294e:	ae 5a       	subi	r26, 0xAE	; 174
    2950:	be 4f       	sbci	r27, 0xFE	; 254
    2952:	8d 91       	ld	r24, X+
    2954:	9c 91       	ld	r25, X
    2956:	e8 1b       	sub	r30, r24
    2958:	f9 0b       	sbc	r31, r25
			}
			return x*2;
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	15 c0       	rjmp	.+42     	; 0x298a <_Z8getValueh+0x72>
		}
		else if(i<CHOUT_BASE+NUM_CHNOUT) return ex_chans[i-CHOUT_BASE];
    2960:	84 32       	cpi	r24, 0x24	; 36
    2962:	50 f4       	brcc	.+20     	; 0x2978 <_Z8getValueh+0x60>
    2964:	e8 2f       	mov	r30, r24
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	ee 0f       	add	r30, r30
    296a:	ff 1f       	adc	r31, r31
    296c:	e4 56       	subi	r30, 0x64	; 100
    296e:	f9 4f       	sbci	r31, 0xF9	; 249
    2970:	01 90       	ld	r0, Z+
    2972:	f0 81       	ld	r31, Z
    2974:	e0 2d       	mov	r30, r0
    2976:	09 c0       	rjmp	.+18     	; 0x298a <_Z8getValueh+0x72>
    else if(i<CHOUT_BASE+NUM_CHNOUT+NUM_TELEM_ITEMS)
    2978:	8e 32       	cpi	r24, 0x2E	; 46
    297a:	28 f4       	brcc	.+10     	; 0x2986 <_Z8getValueh+0x6e>
		{
			return get_telemetry_value( i-CHOUT_BASE-NUM_CHNOUT ) ;
    297c:	84 52       	subi	r24, 0x24	; 36
    297e:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_Z19get_telemetry_valueh>
    2982:	fc 01       	movw	r30, r24
    2984:	02 c0       	rjmp	.+4      	; 0x298a <_Z8getValueh+0x72>
    2986:	e0 e0       	ldi	r30, 0x00	; 0
    2988:	f0 e0       	ldi	r31, 0x00	; 0
		}
    return 0;
}
    298a:	cf 01       	movw	r24, r30
    298c:	08 95       	ret

0000298e <_Z18doVoiceAlarmSourceP12t_voiceAlarm>:
}


#ifdef VOICE_ALARMS

void doVoiceAlarmSource( VoiceAlarmData *pvad )
    298e:	fc 01       	movw	r30, r24
{
	if ( pvad->source )
    2990:	80 81       	ld	r24, Z
    2992:	88 23       	and	r24, r24
    2994:	69 f0       	breq	.+26     	; 0x29b0 <_Z18doVoiceAlarmSourceP12t_voiceAlarm+0x22>
	{
		// SORT OTHER values here
		if ( pvad->source >= NUM_XCHNRAW )
    2996:	84 32       	cpi	r24, 0x24	; 36
    2998:	20 f0       	brcs	.+8      	; 0x29a2 <_Z18doVoiceAlarmSourceP12t_voiceAlarm+0x14>
		{
			voice_telem_item( pvad->source - NUM_XCHNRAW - 1 ) ;
    299a:	85 52       	subi	r24, 0x25	; 37
    299c:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z16voice_telem_itemh>
    29a0:	08 95       	ret
		else
		{
			if ( pvad->source )
			{
				int16_t value ;
				value = getValue( pvad->source - 1 ) ;
    29a2:	81 50       	subi	r24, 0x01	; 1
    29a4:	0e 94 8c 14 	call	0x2918	; 0x2918 <_Z8getValueh>
				voice_numeric( value, 0, 0 ) ;
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	0e 94 f1 79 	call	0xf3e2	; 0xf3e2 <_Z13voice_numericihh>
    29b0:	08 95       	ret

000029b2 <_Z9getSwitchabh>:
			return get_telemetry_value( i-CHOUT_BASE-NUM_CHNOUT ) ;
		}
    return 0;
}

bool getSwitch(int8_t swtch, bool nc, uint8_t level)
    29b2:	8f 92       	push	r8
    29b4:	9f 92       	push	r9
    29b6:	af 92       	push	r10
    29b8:	bf 92       	push	r11
    29ba:	cf 92       	push	r12
    29bc:	df 92       	push	r13
    29be:	ef 92       	push	r14
    29c0:	ff 92       	push	r15
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	a8 2e       	mov	r10, r24
    29cc:	94 2e       	mov	r9, r20
{
    bool ret_value ;
    uint8_t cs_index ;

    switch(swtch){
    29ce:	88 23       	and	r24, r24
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <_Z9getSwitchabh+0x22>
    29d2:	36 c1       	rjmp	.+620    	; 0x2c40 <_Z9getSwitchabh+0x28e>
    29d4:	86 e1       	ldi	r24, 0x16	; 22
    29d6:	a8 16       	cp	r10, r24
    29d8:	e1 f0       	breq	.+56     	; 0x2a12 <_Z9getSwitchabh+0x60>
    29da:	9a ee       	ldi	r25, 0xEA	; 234
    29dc:	a9 16       	cp	r10, r25
    29de:	09 f4       	brne	.+2      	; 0x29e2 <_Z9getSwitchabh+0x30>
    29e0:	2e c1       	rjmp	.+604    	; 0x2c3e <_Z9getSwitchabh+0x28c>
    case  0:            return  nc;
    case  MAX_DRSWITCH: return  true;
    case -MAX_DRSWITCH: return  false;
    }

		if ( swtch > MAX_DRSWITCH )
    29e2:	e6 e1       	ldi	r30, 0x16	; 22
    29e4:	ea 15       	cp	r30, r10
    29e6:	0c f4       	brge	.+2      	; 0x29ea <_Z9getSwitchabh+0x38>
    29e8:	2a c1       	rjmp	.+596    	; 0x2c3e <_Z9getSwitchabh+0x28c>
		{
			return false ;
		}

    uint8_t dir = swtch>0;
    uint8_t aswtch = swtch ;
    29ea:	8a 2d       	mov	r24, r10
    29ec:	87 fd       	sbrc	r24, 7
    29ee:	81 95       	neg	r24
		}		 

#if defined(CPUM128) || defined(CPUM2561)
    if(aswtch<(MAX_DRSWITCH-NUM_CSW-EXTRA_CSW))
#else
    if(aswtch<(MAX_DRSWITCH-NUM_CSW))
    29f0:	8a 30       	cpi	r24, 0x0A	; 10
    29f2:	88 f4       	brcc	.+34     	; 0x2a16 <_Z9getSwitchabh+0x64>
#endif
		{
			aswtch = keyState((EnumKeys)(SW_BASE+aswtch-1)) ;
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 96       	adiw	r24, 0x0e	; 14
    29f8:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
			return !dir ? (!aswtch) : aswtch ;
    29fc:	1a 14       	cp	r1, r10
    29fe:	2c f0       	brlt	.+10     	; 0x2a0a <_Z9getSwitchabh+0x58>
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	88 23       	and	r24, r24
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <_Z9getSwitchabh+0x56>
    2a06:	1c c1       	rjmp	.+568    	; 0x2c40 <_Z9getSwitchabh+0x28e>
    2a08:	04 c0       	rjmp	.+8      	; 0x2a12 <_Z9getSwitchabh+0x60>
    2a0a:	68 2f       	mov	r22, r24
    2a0c:	88 23       	and	r24, r24
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <_Z9getSwitchabh+0x60>
    2a10:	17 c1       	rjmp	.+558    	; 0x2c40 <_Z9getSwitchabh+0x28e>
    2a12:	61 e0       	ldi	r22, 0x01	; 1
    2a14:	15 c1       	rjmp	.+554    	; 0x2c40 <_Z9getSwitchabh+0x28e>
			}
#endif
    	return swtch>0 ? ret_value : !ret_value ;
		}
#endif
		CSwData *cs = &g_model.customSw[cs_index];
    2a16:	8a 50       	subi	r24, 0x0A	; 10
    2a18:	e8 2e       	mov	r14, r24
    2a1a:	ff 24       	eor	r15, r15
    
		if(!cs->func) return false;
    2a1c:	97 01       	movw	r18, r14
    2a1e:	22 0f       	add	r18, r18
    2a20:	33 1f       	adc	r19, r19
    2a22:	2e 0d       	add	r18, r14
    2a24:	3f 1d       	adc	r19, r15
    2a26:	f9 01       	movw	r30, r18
    2a28:	e0 50       	subi	r30, 0x00	; 0
    2a2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	8f 70       	andi	r24, 0x0F	; 15
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <_Z9getSwitchabh+0x82>
    2a32:	05 c1       	rjmp	.+522    	; 0x2c3e <_Z9getSwitchabh+0x28c>

    if ( level>4 )
    2a34:	f4 e0       	ldi	r31, 0x04	; 4
    2a36:	f4 17       	cp	r31, r20
    2a38:	88 f4       	brcc	.+34     	; 0x2a5c <_Z9getSwitchabh+0xaa>
    {
    		ret_value = Last_switch[cs_index] & 1 ;
    2a3a:	8c e2       	ldi	r24, 0x2C	; 44
    2a3c:	91 e0       	ldi	r25, 0x01	; 1
    2a3e:	e8 0e       	add	r14, r24
    2a40:	f9 1e       	adc	r15, r25
    2a42:	f7 01       	movw	r30, r14
    2a44:	80 81       	ld	r24, Z
    2a46:	68 2f       	mov	r22, r24
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	61 70       	andi	r22, 0x01	; 1
    2a4c:	70 70       	andi	r23, 0x00	; 0
    2a4e:	86 2f       	mov	r24, r22
        return swtch>0 ? ret_value : !ret_value ;
    2a50:	1a 14       	cp	r1, r10
    2a52:	0c f4       	brge	.+2      	; 0x2a56 <_Z9getSwitchabh+0xa4>
    2a54:	f5 c0       	rjmp	.+490    	; 0x2c40 <_Z9getSwitchabh+0x28e>
    2a56:	61 e0       	ldi	r22, 0x01	; 1
    2a58:	68 27       	eor	r22, r24
    2a5a:	f2 c0       	rjmp	.+484    	; 0x2c40 <_Z9getSwitchabh+0x28e>
    }

    int8_t a = cs->v1;
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	e6 55       	subi	r30, 0x56	; 86
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	ea 5a       	subi	r30, 0xAA	; 170
    2a64:	fd 4f       	sbci	r31, 0xFD	; 253
    2a66:	b1 90       	ld	r11, Z+
    int8_t b = cs->v2;
    2a68:	8f 01       	movw	r16, r30
    2a6a:	80 80       	ld	r8, Z
    return time ;
}

uint8_t CS_STATE( uint8_t x)
{
	return pgm_read_byte(csTypeTable+x-1) ;
    2a6c:	f9 01       	movw	r30, r18
    2a6e:	ee 5f       	subi	r30, 0xFE	; 254
    2a70:	fb 4f       	sbci	r31, 0xFB	; 251
    2a72:	e0 81       	ld	r30, Z
    2a74:	ef 70       	andi	r30, 0x0F	; 15
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	e9 5a       	subi	r30, 0xA9	; 169
    2a7a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a7c:	e4 91       	lpm	r30, Z+
		uint8_t valid = 1 ;

    // init values only if needed
    uint8_t s = CS_STATE(cs->func);

    if(s == CS_VOFS)
    2a7e:	ee 23       	and	r30, r30
    2a80:	51 f4       	brne	.+20     	; 0x2a96 <_Z9getSwitchabh+0xe4>
    {
        x = getValue(cs->v1-1);
    2a82:	8b 2d       	mov	r24, r11
    2a84:	81 50       	subi	r24, 0x01	; 1
    2a86:	0e 94 8c 14 	call	0x2918	; 0x2918 <_Z8getValueh>
    2a8a:	ec 01       	movw	r28, r24
          y = convertTelemConstant( idx, cs->v2 ) ;
					valid = telemItemValid( idx ) ;
				}
        else
#endif
            y = calc100toRESX(cs->v2);
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	80 81       	ld	r24, Z
    2a90:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_Z13calc100toRESXa>
    2a94:	11 c0       	rjmp	.+34     	; 0x2ab8 <_Z9getSwitchabh+0x106>
    }
    else if(s == CS_VCOMP)
    2a96:	e2 30       	cpi	r30, 0x02	; 2
    2a98:	29 f0       	breq	.+10     	; 0x2aa4 <_Z9getSwitchabh+0xf2>
    2a9a:	c0 e0       	ldi	r28, 0x00	; 0
    2a9c:	d0 e0       	ldi	r29, 0x00	; 0
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	0b c0       	rjmp	.+22     	; 0x2aba <_Z9getSwitchabh+0x108>
    {
        x = getValue(cs->v1-1);
    2aa4:	8b 2d       	mov	r24, r11
    2aa6:	81 50       	subi	r24, 0x01	; 1
    2aa8:	0e 94 8c 14 	call	0x2918	; 0x2918 <_Z8getValueh>
    2aac:	ec 01       	movw	r28, r24
        y = getValue(cs->v2-1);
    2aae:	f8 01       	movw	r30, r16
    2ab0:	80 81       	ld	r24, Z
    2ab2:	81 50       	subi	r24, 0x01	; 1
    2ab4:	0e 94 8c 14 	call	0x2918	; 0x2918 <_Z8getValueh>
    2ab8:	9c 01       	movw	r18, r24
    }

    switch ((uint8_t)cs->func) {
    2aba:	c7 01       	movw	r24, r14
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	6c 01       	movw	r12, r24
    2ac2:	ce 0c       	add	r12, r14
    2ac4:	df 1c       	adc	r13, r15
    2ac6:	f6 01       	movw	r30, r12
    2ac8:	ee 5f       	subi	r30, 0xFE	; 254
    2aca:	fb 4f       	sbci	r31, 0xFB	; 251
    2acc:	e0 81       	ld	r30, Z
    2ace:	ef 70       	andi	r30, 0x0F	; 15
    2ad0:	e8 30       	cpi	r30, 0x08	; 8
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <_Z9getSwitchabh+0x124>
    2ad4:	5e c0       	rjmp	.+188    	; 0x2b92 <_Z9getSwitchabh+0x1e0>
    2ad6:	e9 30       	cpi	r30, 0x09	; 9
    2ad8:	70 f4       	brcc	.+28     	; 0x2af6 <_Z9getSwitchabh+0x144>
    2ada:	e3 30       	cpi	r30, 0x03	; 3
    2adc:	f9 f0       	breq	.+62     	; 0x2b1c <_Z9getSwitchabh+0x16a>
    2ade:	e4 30       	cpi	r30, 0x04	; 4
    2ae0:	38 f4       	brcc	.+14     	; 0x2af0 <_Z9getSwitchabh+0x13e>
    2ae2:	e1 30       	cpi	r30, 0x01	; 1
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <_Z9getSwitchabh+0x136>
    2ae6:	5f c0       	rjmp	.+190    	; 0x2ba6 <_Z9getSwitchabh+0x1f4>
    2ae8:	e2 30       	cpi	r30, 0x02	; 2
    2aea:	09 f0       	breq	.+2      	; 0x2aee <_Z9getSwitchabh+0x13c>
    2aec:	b7 c0       	rjmp	.+366    	; 0x2c5c <_Z9getSwitchabh+0x2aa>
    2aee:	60 c0       	rjmp	.+192    	; 0x2bb0 <_Z9getSwitchabh+0x1fe>
    2af0:	e4 30       	cpi	r30, 0x04	; 4
    2af2:	61 f5       	brne	.+88     	; 0x2b4c <_Z9getSwitchabh+0x19a>
    2af4:	1f c0       	rjmp	.+62     	; 0x2b34 <_Z9getSwitchabh+0x182>
    2af6:	eb 30       	cpi	r30, 0x0B	; 11
    2af8:	09 f4       	brne	.+2      	; 0x2afc <_Z9getSwitchabh+0x14a>
    2afa:	5a c0       	rjmp	.+180    	; 0x2bb0 <_Z9getSwitchabh+0x1fe>
    2afc:	ec 30       	cpi	r30, 0x0C	; 12
    2afe:	38 f4       	brcc	.+14     	; 0x2b0e <_Z9getSwitchabh+0x15c>
    2b00:	e9 30       	cpi	r30, 0x09	; 9
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <_Z9getSwitchabh+0x154>
    2b04:	4b c0       	rjmp	.+150    	; 0x2b9c <_Z9getSwitchabh+0x1ea>
    2b06:	ea 30       	cpi	r30, 0x0A	; 10
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <_Z9getSwitchabh+0x15a>
    2b0a:	a8 c0       	rjmp	.+336    	; 0x2c5c <_Z9getSwitchabh+0x2aa>
    2b0c:	4c c0       	rjmp	.+152    	; 0x2ba6 <_Z9getSwitchabh+0x1f4>
    2b0e:	ee 30       	cpi	r30, 0x0E	; 14
    2b10:	08 f4       	brcc	.+2      	; 0x2b14 <_Z9getSwitchabh+0x162>
    2b12:	5c c0       	rjmp	.+184    	; 0x2bcc <_Z9getSwitchabh+0x21a>
    2b14:	ee 30       	cpi	r30, 0x0E	; 14
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <_Z9getSwitchabh+0x168>
    2b18:	a1 c0       	rjmp	.+322    	; 0x2c5c <_Z9getSwitchabh+0x2aa>
    2b1a:	4f c0       	rjmp	.+158    	; 0x2bba <_Z9getSwitchabh+0x208>
    case (CS_VNEG):
        ret_value = (x<y) ;
        break;
    case (CS_APOS):
    {
        ret_value = (abs(x)>y) ;
    2b1c:	40 e0       	ldi	r20, 0x00	; 0
    2b1e:	ce 01       	movw	r24, r28
    2b20:	d7 ff       	sbrs	r29, 7
    2b22:	03 c0       	rjmp	.+6      	; 0x2b2a <_Z9getSwitchabh+0x178>
    2b24:	90 95       	com	r25
    2b26:	81 95       	neg	r24
    2b28:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2a:	28 17       	cp	r18, r24
    2b2c:	39 07       	cpc	r19, r25
    2b2e:	0c f0       	brlt	.+2      	; 0x2b32 <_Z9getSwitchabh+0x180>
    2b30:	6d c0       	rjmp	.+218    	; 0x2c0c <_Z9getSwitchabh+0x25a>
    2b32:	56 c0       	rjmp	.+172    	; 0x2be0 <_Z9getSwitchabh+0x22e>
    }
    //      return swtch>0 ? (abs(x)>y) : !(abs(x)>y);
    break;
    case (CS_ANEG):
    {
        ret_value = (abs(x)<y) ;
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	ce 01       	movw	r24, r28
    2b38:	d7 ff       	sbrs	r29, 7
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <_Z9getSwitchabh+0x190>
    2b3c:	90 95       	com	r25
    2b3e:	81 95       	neg	r24
    2b40:	9f 4f       	sbci	r25, 0xFF	; 255
    2b42:	82 17       	cp	r24, r18
    2b44:	93 07       	cpc	r25, r19
    2b46:	0c f0       	brlt	.+2      	; 0x2b4a <_Z9getSwitchabh+0x198>
    2b48:	61 c0       	rjmp	.+194    	; 0x2c0c <_Z9getSwitchabh+0x25a>
    2b4a:	4a c0       	rjmp	.+148    	; 0x2be0 <_Z9getSwitchabh+0x22e>
    //      break;
    case (CS_AND):
    case (CS_OR):
    case (CS_XOR):
    {
        bool res1 = getSwitch(a,0,level+1) ;
    2b4c:	19 2d       	mov	r17, r9
    2b4e:	1f 5f       	subi	r17, 0xFF	; 255
    2b50:	8b 2d       	mov	r24, r11
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	41 2f       	mov	r20, r17
    2b56:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    2b5a:	08 2f       	mov	r16, r24
        bool res2 = getSwitch(b,0,level+1) ;
    2b5c:	88 2d       	mov	r24, r8
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	41 2f       	mov	r20, r17
    2b62:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
        if ( cs->func == CS_AND )
    2b66:	f6 01       	movw	r30, r12
    2b68:	e0 50       	subi	r30, 0x00	; 0
    2b6a:	fc 4f       	sbci	r31, 0xFC	; 252
    2b6c:	e2 81       	ldd	r30, Z+2	; 0x02
    2b6e:	ef 70       	andi	r30, 0x0F	; 15
    2b70:	e5 30       	cpi	r30, 0x05	; 5
    2b72:	21 f4       	brne	.+8      	; 0x2b7c <_Z9getSwitchabh+0x1ca>
        {
            ret_value = res1 && res2 ;
    2b74:	00 23       	and	r16, r16
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <_Z9getSwitchabh+0x1c8>
    2b78:	71 c0       	rjmp	.+226    	; 0x2c5c <_Z9getSwitchabh+0x2aa>
    2b7a:	04 c0       	rjmp	.+8      	; 0x2b84 <_Z9getSwitchabh+0x1d2>
        }
        else if ( cs->func == CS_OR )
    2b7c:	e6 30       	cpi	r30, 0x06	; 6
    2b7e:	29 f4       	brne	.+10     	; 0x2b8a <_Z9getSwitchabh+0x1d8>
        {
            ret_value = res1 || res2 ;
    2b80:	00 23       	and	r16, r16
    2b82:	71 f5       	brne	.+92     	; 0x2be0 <_Z9getSwitchabh+0x22e>
    2b84:	88 23       	and	r24, r24
    2b86:	61 f5       	brne	.+88     	; 0x2be0 <_Z9getSwitchabh+0x22e>
    2b88:	69 c0       	rjmp	.+210    	; 0x2c5c <_Z9getSwitchabh+0x2aa>
        }
        else  // CS_XOR
        {
            ret_value = res1 ^ res2 ;
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	08 17       	cp	r16, r24
    2b8e:	41 f5       	brne	.+80     	; 0x2be0 <_Z9getSwitchabh+0x22e>
    2b90:	3d c0       	rjmp	.+122    	; 0x2c0c <_Z9getSwitchabh+0x25a>
        }
    }
    break;

    case (CS_EQUAL):
        ret_value = (x==y);
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	c2 17       	cp	r28, r18
    2b96:	d3 07       	cpc	r29, r19
    2b98:	c9 f5       	brne	.+114    	; 0x2c0c <_Z9getSwitchabh+0x25a>
    2b9a:	22 c0       	rjmp	.+68     	; 0x2be0 <_Z9getSwitchabh+0x22e>
        break;
    case (CS_NEQUAL):
        ret_value = (x!=y);
    2b9c:	40 e0       	ldi	r20, 0x00	; 0
    2b9e:	c2 17       	cp	r28, r18
    2ba0:	d3 07       	cpc	r29, r19
    2ba2:	f1 f4       	brne	.+60     	; 0x2be0 <_Z9getSwitchabh+0x22e>
    2ba4:	33 c0       	rjmp	.+102    	; 0x2c0c <_Z9getSwitchabh+0x25a>
        break;
    case (CS_GREATER):
        ret_value = (x>y);
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	2c 17       	cp	r18, r28
    2baa:	3d 07       	cpc	r19, r29
    2bac:	7c f5       	brge	.+94     	; 0x2c0c <_Z9getSwitchabh+0x25a>
    2bae:	18 c0       	rjmp	.+48     	; 0x2be0 <_Z9getSwitchabh+0x22e>
        break;
    case (CS_LESS):
        ret_value = (x<y);
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	c2 17       	cp	r28, r18
    2bb4:	d3 07       	cpc	r29, r19
    2bb6:	54 f5       	brge	.+84     	; 0x2c0c <_Z9getSwitchabh+0x25a>
    2bb8:	13 c0       	rjmp	.+38     	; 0x2be0 <_Z9getSwitchabh+0x22e>
    case (CS_ELESS):
        ret_value = (x<=y);
        break;
#endif
    case (CS_TIME):
        ret_value = CsTimer[cs_index] >= 0 ;
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e2 51       	subi	r30, 0x12	; 18
    2bc0:	fa 4f       	sbci	r31, 0xFA	; 250
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	99 23       	and	r25, r25
    2bc8:	5c f4       	brge	.+22     	; 0x2be0 <_Z9getSwitchabh+0x22e>
    2bca:	20 c0       	rjmp	.+64     	; 0x2c0c <_Z9getSwitchabh+0x25a>
        break;
#ifdef VERSION3
  	case (CS_LATCH) :
  	case (CS_FLIP) :
    	ret_value = Last_switch[cs_index] & 1 ;
    2bcc:	f7 01       	movw	r30, r14
    2bce:	e4 5d       	subi	r30, 0xD4	; 212
    2bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd2:	80 81       	ld	r24, Z
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	81 70       	andi	r24, 0x01	; 1
    2bd8:	90 70       	andi	r25, 0x00	; 0
    2bda:	48 2f       	mov	r20, r24
    }
		if ( valid == 0 )			// Catch telemetry values not present
		{
      ret_value = false;
		}
		if ( ret_value )
    2bdc:	88 23       	and	r24, r24
    2bde:	b1 f0       	breq	.+44     	; 0x2c0c <_Z9getSwitchabh+0x25a>
		{
			int8_t x ;
			x = cs->andsw ;
    2be0:	f7 01       	movw	r30, r14
    2be2:	ee 0f       	add	r30, r30
    2be4:	ff 1f       	adc	r31, r31
    2be6:	ee 0d       	add	r30, r14
    2be8:	ff 1d       	adc	r31, r15
    2bea:	ee 5f       	subi	r30, 0xFE	; 254
    2bec:	fb 4f       	sbci	r31, 0xFB	; 251
    2bee:	80 81       	ld	r24, Z
    2bf0:	82 95       	swap	r24
    2bf2:	8f 70       	andi	r24, 0x0F	; 15
			if ( x )
    2bf4:	11 f4       	brne	.+4      	; 0x2bfa <_Z9getSwitchabh+0x248>
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	09 c0       	rjmp	.+18     	; 0x2c0c <_Z9getSwitchabh+0x25a>
			{
				if ( x > 8 )
    2bfa:	89 30       	cpi	r24, 0x09	; 9
    2bfc:	0c f0       	brlt	.+2      	; 0x2c00 <_Z9getSwitchabh+0x24e>
				{
					x += 1 ;
    2bfe:	8f 5f       	subi	r24, 0xFF	; 255
				}
      	ret_value = getSwitch( x, 0, level+1) ;
    2c00:	93 94       	inc	r9
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	49 2d       	mov	r20, r9
    2c06:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    2c0a:	48 2f       	mov	r20, r24
			}
		}
#ifdef VERSION3
		if ( cs->func < CS_LATCH )
    2c0c:	f7 01       	movw	r30, r14
    2c0e:	ee 0f       	add	r30, r30
    2c10:	ff 1f       	adc	r31, r31
    2c12:	ee 0d       	add	r30, r14
    2c14:	ff 1d       	adc	r31, r15
    2c16:	ee 5f       	subi	r30, 0xFE	; 254
    2c18:	fb 4f       	sbci	r31, 0xFB	; 251
    2c1a:	80 81       	ld	r24, Z
    2c1c:	8f 70       	andi	r24, 0x0F	; 15
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0c 97       	sbiw	r24, 0x0c	; 12
    2c22:	34 f4       	brge	.+12     	; 0x2c30 <_Z9getSwitchabh+0x27e>
		{
#endif
			Last_switch[cs_index] = ret_value ;
    2c24:	8c e2       	ldi	r24, 0x2C	; 44
    2c26:	91 e0       	ldi	r25, 0x01	; 1
    2c28:	e8 0e       	add	r14, r24
    2c2a:	f9 1e       	adc	r15, r25
    2c2c:	f7 01       	movw	r30, r14
    2c2e:	40 83       	st	Z, r20
#ifdef VERSION3
		}
#endif
    return swtch>0 ? ret_value : !ret_value ;
    2c30:	1a 14       	cp	r1, r10
    2c32:	14 f4       	brge	.+4      	; 0x2c38 <_Z9getSwitchabh+0x286>
    2c34:	64 2f       	mov	r22, r20
    2c36:	04 c0       	rjmp	.+8      	; 0x2c40 <_Z9getSwitchabh+0x28e>
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	64 27       	eor	r22, r20
    2c3c:	01 c0       	rjmp	.+2      	; 0x2c40 <_Z9getSwitchabh+0x28e>
    2c3e:	60 e0       	ldi	r22, 0x00	; 0

}
    2c40:	86 2f       	mov	r24, r22
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	bf 90       	pop	r11
    2c54:	af 90       	pop	r10
    2c56:	9f 90       	pop	r9
    2c58:	8f 90       	pop	r8
    2c5a:	08 95       	ret
#endif
			Last_switch[cs_index] = ret_value ;
#ifdef VERSION3
		}
#endif
    return swtch>0 ? ret_value : !ret_value ;
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	d6 cf       	rjmp	.-84     	; 0x2c0c <_Z9getSwitchabh+0x25a>

00002c60 <_Z14getFlightPhasev>:
    &g_model.trim[3]
} ;
#endif

#ifdef PHASES		
uint8_t getFlightPhase()
    2c60:	1f 93       	push	r17
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	10 e0       	ldi	r17, 0x00	; 0
    2c68:	cf e6       	ldi	r28, 0x6F	; 111
    2c6a:	d4 e0       	ldi	r29, 0x04	; 4
	uint8_t i ;
  PhaseData *phase = &g_model.phaseData[0];

  for ( i = 0 ; i < MAX_MODES ; i += 1 )
	{
    if ( phase->swtch && getSwitch( phase->swtch, 0 ) )
    2c6c:	88 85       	ldd	r24, Y+8	; 0x08
    2c6e:	88 23       	and	r24, r24
    2c70:	61 f0       	breq	.+24     	; 0x2c8a <_Z14getFlightPhasev+0x2a>
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    2c7a:	88 23       	and	r24, r24
    2c7c:	31 f0       	breq	.+12     	; 0x2c8a <_Z14getFlightPhasev+0x2a>
		{
      return i + 1 ;
    2c7e:	81 2f       	mov	r24, r17
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    }
		phase += 1 ;
  }
  return 0 ;
}
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	08 95       	ret
uint8_t getFlightPhase()
{
	uint8_t i ;
  PhaseData *phase = &g_model.phaseData[0];

  for ( i = 0 ; i < MAX_MODES ; i += 1 )
    2c8a:	1f 5f       	subi	r17, 0xFF	; 255
    2c8c:	14 30       	cpi	r17, 0x04	; 4
    2c8e:	11 f4       	brne	.+4      	; 0x2c94 <_Z14getFlightPhasev+0x34>
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	f7 cf       	rjmp	.-18     	; 0x2c82 <_Z14getFlightPhasev+0x22>
	{
    if ( phase->swtch && getSwitch( phase->swtch, 0 ) )
		{
      return i + 1 ;
    }
		phase += 1 ;
    2c94:	2a 96       	adiw	r28, 0x0a	; 10
    2c96:	ea cf       	rjmp	.-44     	; 0x2c6c <_Z14getFlightPhasev+0xc>

00002c98 <_Z21check_backlight_voicev>:
}

void check_backlight_voice()
{
	static uint8_t tmr10ms ;
    if(getSwitch(g_eeGeneral.lightSw,0) || g_LightOffCounter)
    2c98:	80 91 69 01 	lds	r24, 0x0169
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    2ca4:	88 23       	and	r24, r24
    2ca6:	31 f4       	brne	.+12     	; 0x2cb4 <_Z21check_backlight_voicev+0x1c>
    2ca8:	80 91 21 06 	lds	r24, 0x0621
    2cac:	90 91 22 06 	lds	r25, 0x0622
    2cb0:	89 2b       	or	r24, r25
    2cb2:	81 f0       	breq	.+32     	; 0x2cd4 <_Z21check_backlight_voicev+0x3c>
        BACKLIGHT_ON ;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	80 93 3b 0e 	sts	0x0E3B, r24
    else
        BACKLIGHT_OFF ;

	uint8_t x ;
	x = g_blinkTmr10ms ;
    2cba:	90 91 79 0d 	lds	r25, 0x0D79
	if ( tmr10ms != x )
    2cbe:	80 91 52 06 	lds	r24, 0x0652
    2cc2:	89 17       	cp	r24, r25
    2cc4:	51 f0       	breq	.+20     	; 0x2cda <_Z21check_backlight_voicev+0x42>
	{
		tmr10ms = x ;
    2cc6:	90 93 52 06 	sts	0x0652, r25
		Voice.voice_process() ;
    2cca:	8b e1       	ldi	r24, 0x1B	; 27
    2ccc:	9e e0       	ldi	r25, 0x0E	; 14
    2cce:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_ZN7t_voice13voice_processEv>
    2cd2:	08 95       	ret
{
	static uint8_t tmr10ms ;
    if(getSwitch(g_eeGeneral.lightSw,0) || g_LightOffCounter)
        BACKLIGHT_ON ;
    else
        BACKLIGHT_OFF ;
    2cd4:	10 92 3b 0e 	sts	0x0E3B, r1
    2cd8:	f0 cf       	rjmp	.-32     	; 0x2cba <_Z21check_backlight_voicev+0x22>
    2cda:	08 95       	ret

00002cdc <_Z16doBackLightVoiceh>:
void doBackLightVoice(uint8_t evt)
{
    uint8_t a = 0;
    uint16_t b ;
    uint16_t lightoffctr ;
    if(evt) backlightKey() ; // on keypress turn the light on 5*100
    2cdc:	88 23       	and	r24, r24
    2cde:	99 f0       	breq	.+38     	; 0x2d06 <_Z16doBackLightVoiceh+0x2a>
//}

void backlightKey()
{
  uint8_t a = g_eeGeneral.lightAutoOff ;
  uint16_t b = a * 250 ;
    2ce0:	90 91 80 01 	lds	r25, 0x0180
    2ce4:	8a ef       	ldi	r24, 0xFA	; 250
    2ce6:	98 9f       	mul	r25, r24
    2ce8:	90 01       	movw	r18, r0
    2cea:	11 24       	eor	r1, r1
	b <<= 1 ;				// b = a * 500, but less code
    2cec:	22 0f       	add	r18, r18
    2cee:	33 1f       	adc	r19, r19
	if(b>g_LightOffCounter) g_LightOffCounter = b;
    2cf0:	80 91 21 06 	lds	r24, 0x0621
    2cf4:	90 91 22 06 	lds	r25, 0x0622
    2cf8:	82 17       	cp	r24, r18
    2cfa:	93 07       	cpc	r25, r19
    2cfc:	20 f4       	brcc	.+8      	; 0x2d06 <_Z16doBackLightVoiceh+0x2a>
    2cfe:	30 93 22 06 	sts	0x0622, r19
    2d02:	20 93 21 06 	sts	0x0621, r18
    uint8_t a = 0;
    uint16_t b ;
    uint16_t lightoffctr ;
    if(evt) backlightKey() ; // on keypress turn the light on 5*100

		lightoffctr = g_LightOffCounter ;
    2d06:	20 91 21 06 	lds	r18, 0x0621
    2d0a:	30 91 22 06 	lds	r19, 0x0622
    if(lightoffctr) lightoffctr--;
    2d0e:	21 15       	cp	r18, r1
    2d10:	31 05       	cpc	r19, r1
    2d12:	11 f0       	breq	.+4      	; 0x2d18 <_Z16doBackLightVoiceh+0x3c>
    2d14:	21 50       	subi	r18, 0x01	; 1
    2d16:	30 40       	sbci	r19, 0x00	; 0
    if(stickMoved)
    2d18:	80 91 23 06 	lds	r24, 0x0623
    2d1c:	88 23       	and	r24, r24
    2d1e:	61 f0       	breq	.+24     	; 0x2d38 <_Z16doBackLightVoiceh+0x5c>
		{
			a = g_eeGeneral.lightOnStickMove ;
    	b = a * 250 ;
    2d20:	90 91 88 01 	lds	r25, 0x0188
    2d24:	8a ef       	ldi	r24, 0xFA	; 250
    2d26:	98 9f       	mul	r25, r24
    2d28:	c0 01       	movw	r24, r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	28 17       	cp	r18, r24
    2d32:	39 07       	cpc	r19, r25
    2d34:	08 f4       	brcc	.+2      	; 0x2d38 <_Z16doBackLightVoiceh+0x5c>
    2d36:	9c 01       	movw	r18, r24
			b <<= 1 ;				// b = a * 500, but less code
			if(b>lightoffctr) lightoffctr = b;
		}
		g_LightOffCounter = lightoffctr ;
    2d38:	30 93 22 06 	sts	0x0622, r19
    2d3c:	20 93 21 06 	sts	0x0621, r18
    check_backlight_voice();
    2d40:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_Z21check_backlight_voicev>
}
    2d44:	08 95       	ret

00002d46 <_Z7perMainv>:
}

//uint16_t MixCounter ;
//uint16_t MixRate ;

void perMain()
    2d46:	af 92       	push	r10
    2d48:	bf 92       	push	r11
    2d4a:	df 92       	push	r13
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
{
    static uint8_t lastTMR;
//    static uint8_t timer20mS ;
		uint8_t t10ms ;
		t10ms = g_tmr10ms ;
    2d58:	20 91 77 0d 	lds	r18, 0x0D77
    2d5c:	30 91 78 0d 	lds	r19, 0x0D78
    tick10ms = t10ms - lastTMR ;
    2d60:	80 91 51 06 	lds	r24, 0x0651
    2d64:	a2 2e       	mov	r10, r18
    2d66:	a8 1a       	sub	r10, r24
    2d68:	a0 92 20 06 	sts	0x0620, r10
    lastTMR = t10ms ;
    2d6c:	20 93 51 06 	sts	0x0651, r18
    //    tick10ms = (time10ms != lastTMR);
    //    lastTMR = time10ms;

//  	UBRR0L = 17 ;
//		UDR0 = 0 ;
    perOutPhase(g_chans512, 0);
    2d70:	8c ee       	ldi	r24, 0xEC	; 236
    2d72:	96 e0       	ldi	r25, 0x06	; 6
    2d74:	60 e0       	ldi	r22, 0x00	; 0
    2d76:	0e 94 e5 38 	call	0x71ca	; 0x71ca <_Z11perOutPhasePih>
//		MixCounter += 1 ;
    if(tick10ms == 0) return ; //make sure the rest happen only every 10ms.
    2d7a:	80 91 20 06 	lds	r24, 0x0620
    2d7e:	88 23       	and	r24, r24
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <_Z7perMainv+0x3e>
    2d82:	c5 c2       	rjmp	.+1418   	; 0x330e <_Z7perMainv+0x5c8>
//    	  }
//    	}
//		}
//#endif

		if ( ppmInValid )
    2d84:	80 91 a0 05 	lds	r24, 0x05A0
    2d88:	88 23       	and	r24, r24
    2d8a:	19 f0       	breq	.+6      	; 0x2d92 <_Z7perMainv+0x4c>
		{
			ppmInValid -= 1 ;
    2d8c:	81 50       	subi	r24, 0x01	; 1
    2d8e:	80 93 a0 05 	sts	0x05A0, r24
		}

    eeCheck();
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	0e 94 99 61 	call	0xc332	; 0xc332 <_Z7eeCheckb>

		// Every 10mS update backlight output to external latch
		// Note: LcdLock not needed here as at tasking level

    lcd_clear();
    2d98:	0e 94 3c 6e 	call	0xdc78	; 0xdc78 <_Z9lcd_clearv>
    uint8_t evt=getEvent();
    2d9c:	0e 94 47 6e 	call	0xdc8e	; 0xdc8e <_Z8getEventv>
    2da0:	e8 2e       	mov	r14, r24
#endif


static uint8_t checkTrim(uint8_t event)
{
    int8_t  k = (event & EVT_KEY_MASK) - TRM_BASE;
    2da2:	0f e0       	ldi	r16, 0x0F	; 15
    2da4:	f0 2e       	mov	r15, r16
    2da6:	f8 22       	and	r15, r24
    2da8:	1a ef       	ldi	r17, 0xFA	; 250
    2daa:	b1 2e       	mov	r11, r17
    2dac:	fb 0c       	add	r15, r11
    int8_t  s = g_model.trimInc;
    2dae:	10 91 bc 01 	lds	r17, 0x01BC
//    if (s>1) s = 1 << (s-1);  // 1=>1  2=>2  3=>4  4=>8
		if ( s == 4 )
    2db2:	14 30       	cpi	r17, 0x04	; 4
    2db4:	11 f4       	brne	.+4      	; 0x2dba <_Z7perMainv+0x74>
    2db6:	18 e0       	ldi	r17, 0x08	; 8
    2db8:	03 c0       	rjmp	.+6      	; 0x2dc0 <_Z7perMainv+0x7a>
		{
			s = 8 ;			  // 1=>1  2=>2  3=>4  4=>8
		}
		else
		{
			if ( s == 3 )
    2dba:	13 30       	cpi	r17, 0x03	; 3
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <_Z7perMainv+0x7a>
    2dbe:	14 e0       	ldi	r17, 0x04	; 4
				s = 4 ;			  // 1=>1  2=>2  3=>4  4=>8
			}
		}


	  if( (k>=0) && (k<8) && !IS_KEY_BREAK(event)) // && (event & _MSK_KEY_REPT))
    2dc0:	27 e0       	ldi	r18, 0x07	; 7
    2dc2:	2f 15       	cp	r18, r15
    2dc4:	08 f4       	brcc	.+2      	; 0x2dc8 <_Z7perMainv+0x82>
    2dc6:	a3 c0       	rjmp	.+326    	; 0x2f0e <_Z7perMainv+0x1c8>
    2dc8:	8e 2d       	mov	r24, r14
    2dca:	80 7f       	andi	r24, 0xF0	; 240
    2dcc:	80 32       	cpi	r24, 0x20	; 32
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <_Z7perMainv+0x8c>
    2dd0:	9e c0       	rjmp	.+316    	; 0x2f0e <_Z7perMainv+0x1c8>


#ifdef FIX_MODE
uint8_t modeFixValue( uint8_t value )
{
	return pgm_read_byte(stickScramble+g_eeGeneral.stickMode*4+value)+1 ;
    2dd2:	8f 2d       	mov	r24, r15
    2dd4:	86 95       	lsr	r24
    2dd6:	e0 91 7c 01 	lds	r30, 0x017C
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	ee 0f       	add	r30, r30
    2dde:	ff 1f       	adc	r31, r31
    2de0:	ee 0f       	add	r30, r30
    2de2:	ff 1f       	adc	r31, r31
    2de4:	e8 0f       	add	r30, r24
    2de6:	f1 1d       	adc	r31, r1
    2de8:	eb 5b       	subi	r30, 0xBB	; 187
    2dea:	fe 4f       	sbci	r31, 0xFE	; 254
    2dec:	04 91       	lpm	r16, Z+
// SORT idx for stickmode if FIX_MODE on
#ifdef FIX_MODE
				idx = modeFixValue( idx ) - 1 ;
//				pgm_read_byte(stickScramble+g_eeGeneral.stickMode*4+idx ) ;
#endif
				if ( g_eeGeneral.crosstrim )
    2dee:	80 91 98 01 	lds	r24, 0x0198
    2df2:	80 ff       	sbrs	r24, 0
    2df4:	03 c0       	rjmp	.+6      	; 0x2dfc <_Z7perMainv+0xb6>
				{
					idx = 3 - idx ;			
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	80 1b       	sub	r24, r16
    2dfa:	08 2f       	mov	r16, r24
				}
#ifdef PHASES		
				uint8_t phaseNo = getTrimFlightPhase( CurrentPhase, idx ) ;
    2dfc:	80 91 70 08 	lds	r24, 0x0870
    2e00:	60 2f       	mov	r22, r16
    2e02:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_Z18getTrimFlightPhasehh>
    2e06:	d8 2e       	mov	r13, r24
    		int16_t tm = getTrimValue( phaseNo, idx ) ;
    2e08:	60 2f       	mov	r22, r16
    2e0a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    2e0e:	bc 01       	movw	r22, r24
        int8_t tm = *TrimPtr[idx] ;
#else    
        int8_t tm = g_model.trim[idx] ;
#endif
#endif
        int8_t  v = (s==0) ? (abs(tm)/4)+1 : s;
    2e10:	11 23       	and	r17, r17
    2e12:	69 f4       	brne	.+26     	; 0x2e2e <_Z7perMainv+0xe8>
    2e14:	9c 01       	movw	r18, r24
    2e16:	97 ff       	sbrs	r25, 7
    2e18:	04 c0       	rjmp	.+8      	; 0x2e22 <_Z7perMainv+0xdc>
    2e1a:	22 27       	eor	r18, r18
    2e1c:	33 27       	eor	r19, r19
    2e1e:	28 1b       	sub	r18, r24
    2e20:	39 0b       	sbc	r19, r25
    2e22:	35 95       	asr	r19
    2e24:	27 95       	ror	r18
    2e26:	35 95       	asr	r19
    2e28:	27 95       	ror	r18
    2e2a:	12 2f       	mov	r17, r18
    2e2c:	1f 5f       	subi	r17, 0xFF	; 255
#ifdef FIX_MODE
        bool thrChan = (2 == idx) ;
#else
        bool thrChan = ((2-(g_eeGeneral.stickMode&1)) == idx);
#endif
        bool thro = (thrChan && (g_model.thrTrim));
    2e2e:	02 30       	cpi	r16, 0x02	; 2
    2e30:	11 f0       	breq	.+4      	; 0x2e36 <_Z7perMainv+0xf0>
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0c c0       	rjmp	.+24     	; 0x2e4e <_Z7perMainv+0x108>
    2e36:	80 91 bb 01 	lds	r24, 0x01BB
    2e3a:	80 fd       	sbrc	r24, 0
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <_Z7perMainv+0xfc>
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <_Z7perMainv+0x100>
    2e42:	12 e0       	ldi	r17, 0x02	; 2
    2e44:	91 e0       	ldi	r25, 0x01	; 1
        if(thro) v = 2 ; // if throttle trim and trim trottle then step=2
        if(thrChan && g_eeGeneral.throttleReversed) v = -v;  // throttle reversed = trim reversed
    2e46:	80 91 7e 01 	lds	r24, 0x017E
    2e4a:	80 fd       	sbrc	r24, 0
    2e4c:	11 95       	neg	r17
    2e4e:	41 2f       	mov	r20, r17
    2e50:	55 27       	eor	r21, r21
    2e52:	47 fd       	sbrc	r20, 7
    2e54:	50 95       	com	r21
        int16_t x = (k&1) ? tm + v : tm - v;   // positive = k&1
    2e56:	f0 fe       	sbrs	r15, 0
    2e58:	04 c0       	rjmp	.+8      	; 0x2e62 <_Z7perMainv+0x11c>
    2e5a:	ea 01       	movw	r28, r20
    2e5c:	c6 0f       	add	r28, r22
    2e5e:	d7 1f       	adc	r29, r23
    2e60:	03 c0       	rjmp	.+6      	; 0x2e68 <_Z7perMainv+0x122>
    2e62:	eb 01       	movw	r28, r22
    2e64:	c4 1b       	sub	r28, r20
    2e66:	d5 0b       	sbc	r29, r21

        if(((x==0)  ||  ((x>=0) != (tm>=0))) && (!thro) && (tm!=0)){
    2e68:	20 97       	sbiw	r28, 0x00	; 0
    2e6a:	29 f0       	breq	.+10     	; 0x2e76 <_Z7perMainv+0x130>
    2e6c:	5e 01       	movw	r10, r28
    2e6e:	8b 2d       	mov	r24, r11
    2e70:	87 27       	eor	r24, r23
    2e72:	87 ff       	sbrs	r24, 7
    2e74:	11 c0       	rjmp	.+34     	; 0x2e98 <_Z7perMainv+0x152>
    2e76:	99 23       	and	r25, r25
    2e78:	79 f4       	brne	.+30     	; 0x2e98 <_Z7perMainv+0x152>
    2e7a:	67 2b       	or	r22, r23
    2e7c:	69 f0       	breq	.+26     	; 0x2e98 <_Z7perMainv+0x152>
#ifdef PHASES		
						setTrimValue( phaseNo, idx, 0 ) ;
    2e7e:	8d 2d       	mov	r24, r13
    2e80:	60 2f       	mov	r22, r16
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	50 e0       	ldi	r21, 0x00	; 0
    2e86:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <_Z12setTrimValuehhi>
            *TrimPtr[idx]=0;
#else    
						g_model.trim[idx] = 0 ;
#endif
#endif
            killEvents(event);
    2e8a:	8e 2d       	mov	r24, r14
    2e8c:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
            audioDefevent(AU_TRIM_MIDDLE);
    2e90:	86 e1       	ldi	r24, 0x16	; 22
    2e92:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    2e96:	39 c2       	rjmp	.+1138   	; 0x330a <_Z7perMainv+0x5c4>

        } else if(x>-125 && x<125){
    2e98:	ce 01       	movw	r24, r28
    2e9a:	84 58       	subi	r24, 0x84	; 132
    2e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9e:	89 3f       	cpi	r24, 0xF9	; 249
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	78 f4       	brcc	.+30     	; 0x2ec2 <_Z7perMainv+0x17c>
#ifdef PHASES		
						setTrimValue( phaseNo, idx, x ) ;
    2ea4:	8d 2d       	mov	r24, r13
    2ea6:	60 2f       	mov	r22, r16
    2ea8:	ae 01       	movw	r20, r28
    2eaa:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <_Z12setTrimValuehhi>
            STORE_MODELVARS_TRIM;
#endif
            //if(event & _MSK_KEY_REPT) warble = true;
//            if(x <= 125 && x >= -125){
            
						int8_t t = x ;
    2eae:	ce 01       	movw	r24, r28
    2eb0:	87 fd       	sbrc	r24, 7
    2eb2:	81 95       	neg	r24
    2eb4:	68 2f       	mov	r22, r24
						if ( t < 0 )
						{
							t = -t ;
						}
						t /= 4 ;
						audioEvent(AU_TRIM_MOVE,t+60) ;
    2eb6:	65 95       	asr	r22
    2eb8:	65 95       	asr	r22
    2eba:	77 27       	eor	r23, r23
    2ebc:	67 fd       	sbrc	r22, 7
    2ebe:	70 95       	com	r23
    2ec0:	20 c0       	rjmp	.+64     	; 0x2f02 <_Z7perMainv+0x1bc>
//            }
        }
        else
        {
#ifdef PHASES		
						setTrimValue( phaseNo, idx, (x>0) ? 125 : -125 ) ;
    2ec2:	1c 16       	cp	r1, r28
    2ec4:	1d 06       	cpc	r1, r29
    2ec6:	1c f0       	brlt	.+6      	; 0x2ece <_Z7perMainv+0x188>
    2ec8:	43 e8       	ldi	r20, 0x83	; 131
    2eca:	5f ef       	ldi	r21, 0xFF	; 255
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <_Z7perMainv+0x18c>
    2ece:	4d e7       	ldi	r20, 0x7D	; 125
    2ed0:	50 e0       	ldi	r21, 0x00	; 0
    2ed2:	8d 2d       	mov	r24, r13
    2ed4:	60 2f       	mov	r22, r16
    2ed6:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <_Z12setTrimValuehhi>
#else    
						g_model.trim[idx] = (x<0) ? -125 : 125 ;
#endif
            STORE_MODELVARS_TRIM;
#endif
            if(x <= 125 && x >= -125)
    2eda:	ce 01       	movw	r24, r28
    2edc:	83 58       	subi	r24, 0x83	; 131
    2ede:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee0:	8b 3f       	cpi	r24, 0xFB	; 251
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <_Z7perMainv+0x1a2>
    2ee6:	11 c2       	rjmp	.+1058   	; 0x330a <_Z7perMainv+0x5c4>
    2ee8:	5e 01       	movw	r10, r28
    2eea:	a7 fc       	sbrc	r10, 7
    2eec:	a1 94       	neg	r10
    2eee:	4a 2d       	mov	r20, r10
    2ef0:	41 95       	neg	r20
							if ( t > 0 )
							{
								t = -t ;
							}
							t /= 4 ;
              audioEvent(AU_TRIM_MOVE,(t+60));
    2ef2:	47 fd       	sbrc	r20, 7
    2ef4:	4d 5f       	subi	r20, 0xFD	; 253
    2ef6:	45 95       	asr	r20
    2ef8:	45 95       	asr	r20
    2efa:	64 2f       	mov	r22, r20
    2efc:	77 27       	eor	r23, r23
    2efe:	67 fd       	sbrc	r22, 7
    2f00:	70 95       	com	r23
    2f02:	64 5c       	subi	r22, 0xC4	; 196
    2f04:	7f 4f       	sbci	r23, 0xFF	; 255
    2f06:	85 e1       	ldi	r24, 0x15	; 21
    2f08:	0e 94 dc 79 	call	0xf3b8	; 0xf3b8 <_Z10audioEventhj>
    2f0c:	fe c1       	rjmp	.+1020   	; 0x330a <_Z7perMainv+0x5c4>
		// Note: LcdLock not needed here as at tasking level

    lcd_clear();
    uint8_t evt=getEvent();
    evt = checkTrim(evt);
		if ( ( evt == 0 ) || ( evt == EVT_KEY_REPT(KEY_MENU) ) )
    2f0e:	ee 20       	and	r14, r14
    2f10:	21 f0       	breq	.+8      	; 0x2f1a <_Z7perMainv+0x1d4>
    2f12:	f0 e4       	ldi	r31, 0x40	; 64
    2f14:	bf 2e       	mov	r11, r31
    2f16:	eb 14       	cp	r14, r11
    2f18:	71 f4       	brne	.+28     	; 0x2f36 <_Z7perMainv+0x1f0>
		{
			uint8_t timer = LongMenuTimer ;
    2f1a:	80 91 4d 06 	lds	r24, 0x064D
			if ( menuPressed() )
    2f1e:	b1 99       	sbic	0x16, 1	; 22
    2f20:	ef c1       	rjmp	.+990    	; 0x3300 <_Z7perMainv+0x5ba>
			{
				if ( timer < 255 )
    2f22:	8f 3f       	cpi	r24, 0xFF	; 255
    2f24:	31 f0       	breq	.+12     	; 0x2f32 <_Z7perMainv+0x1ec>
				{
					timer += 1 ;
    2f26:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else
			{
				timer = 0 ;
			}
			if ( timer == 200 )
    2f28:	88 3c       	cpi	r24, 0xC8	; 200
    2f2a:	19 f4       	brne	.+6      	; 0x2f32 <_Z7perMainv+0x1ec>
    2f2c:	ed eb       	ldi	r30, 0xBD	; 189
    2f2e:	ee 2e       	mov	r14, r30
    2f30:	8f ef       	ldi	r24, 0xFF	; 255
			{
				evt = EVT_TOGGLE_GVAR ;
				timer = 255 ;
			}
			LongMenuTimer = timer ;
    2f32:	80 93 4d 06 	sts	0x064D, r24
#ifndef NOPOTSCROLL
		int16_t p1d ;

		struct t_p1 *ptrp1 ;
		ptrp1 = &P1values ;
		FORCE_INDIRECT(ptrp1) ;
    2f36:	e4 e1       	ldi	r30, 0x14	; 20
    2f38:	f6 e0       	ldi	r31, 0x06	; 6

		int16_t c6 = calibratedStick[6] ;
    2f3a:	c0 91 c2 06 	lds	r28, 0x06C2
    2f3e:	d0 91 c3 06 	lds	r29, 0x06C3
    p1d = ( ptrp1->p1val-c6 )/32;
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	8c 1b       	sub	r24, r28
    2f48:	9d 0b       	sbc	r25, r29
    2f4a:	60 e2       	ldi	r22, 0x20	; 32
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    2f52:	9b 01       	movw	r18, r22
    if(p1d) {
    2f54:	61 15       	cp	r22, r1
    2f56:	71 05       	cpc	r23, r1
    2f58:	59 f0       	breq	.+22     	; 0x2f70 <_Z7perMainv+0x22a>
        p1d = (ptrp1->p1valprev-c6)/2;
    2f5a:	84 81       	ldd	r24, Z+4	; 0x04
    2f5c:	95 81       	ldd	r25, Z+5	; 0x05
    2f5e:	8c 1b       	sub	r24, r28
    2f60:	9d 0b       	sbc	r25, r29
    2f62:	62 e0       	ldi	r22, 0x02	; 2
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    2f6a:	9b 01       	movw	r18, r22
        ptrp1->p1val = c6 ;
    2f6c:	d1 83       	std	Z+1, r29	; 0x01
    2f6e:	c0 83       	st	Z, r28
    }
    ptrp1->p1valprev = c6 ;
    2f70:	d5 83       	std	Z+5, r29	; 0x05
    2f72:	c4 83       	std	Z+4, r28	; 0x04
    if ( g_eeGeneral.disablePotScroll || (scroll_disabled) )
    2f74:	80 91 7e 01 	lds	r24, 0x017E
    2f78:	85 fd       	sbrc	r24, 5
    2f7a:	04 c0       	rjmp	.+8      	; 0x2f84 <_Z7perMainv+0x23e>
    2f7c:	80 91 e9 06 	lds	r24, 0x06E9
    2f80:	88 23       	and	r24, r24
    2f82:	11 f0       	breq	.+4      	; 0x2f88 <_Z7perMainv+0x242>
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    {
        p1d = 0 ;
    }
		ptrp1->p1valdiff = p1d ;
    2f88:	33 83       	std	Z+3, r19	; 0x03
    2f8a:	22 83       	std	Z+2, r18	; 0x02
#endif

		struct t_rotary *protary = &Rotary ;
		FORCE_INDIRECT(protary) ;
    2f8c:	c1 ea       	ldi	r28, 0xA1	; 161
    2f8e:	d5 e0       	ldi	r29, 0x05	; 5
		{
			int8_t x ;
			x = protary->RotCount - protary->LastRotaryValue ;
    2f90:	29 81       	ldd	r18, Y+1	; 0x01
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	28 1b       	sub	r18, r24
			if ( x == -1 )
    2f96:	2f 3f       	cpi	r18, 0xFF	; 255
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <_Z7perMainv+0x256>
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
			{
				x = 0 ;
			}
			protary->Rotary_diff = ( x ) / 2 ;
    2f9c:	27 fd       	sbrc	r18, 7
    2f9e:	2f 5f       	subi	r18, 0xFF	; 255
    2fa0:	25 95       	asr	r18
    2fa2:	28 87       	std	Y+8, r18	; 0x08
			protary->LastRotaryValue += protary->Rotary_diff * 2 ;
    2fa4:	82 2f       	mov	r24, r18
    2fa6:	88 0f       	add	r24, r24
    2fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    2faa:	89 0f       	add	r24, r25
    2fac:	8d 83       	std	Y+5, r24	; 0x05
		}
    
		doBackLightVoice( evt | protary->Rotary_diff ) ;
    2fae:	8e 2d       	mov	r24, r14
    2fb0:	82 2b       	or	r24, r18
    2fb2:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Z16doBackLightVoiceh>
// Handle volume
		uint8_t requiredVolume ;
		requiredVolume = g_eeGeneral.volume+7 ;
    2fb6:	60 91 94 01 	lds	r22, 0x0194
    2fba:	69 5f       	subi	r22, 0xF9	; 249

		if ( ( g_menuStack[g_menuStackPtr] == menuProc0) && ( PopupData.PopupActive == 0 ) )
    2fbc:	e0 91 12 06 	lds	r30, 0x0612
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	ee 0f       	add	r30, r30
    2fc4:	ff 1f       	adc	r31, r31
    2fc6:	e8 5f       	subi	r30, 0xF8	; 248
    2fc8:	f9 4f       	sbci	r31, 0xF9	; 249
    2fca:	80 81       	ld	r24, Z
    2fcc:	91 81       	ldd	r25, Z+1	; 0x01
    2fce:	8d 5a       	subi	r24, 0xAD	; 173
    2fd0:	9f 43       	sbci	r25, 0x3F	; 63
    2fd2:	09 f0       	breq	.+2      	; 0x2fd6 <_Z7perMainv+0x290>
    2fd4:	50 c0       	rjmp	.+160    	; 0x3076 <_Z7perMainv+0x330>
    2fd6:	80 91 8b 06 	lds	r24, 0x068B
    2fda:	88 23       	and	r24, r24
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <_Z7perMainv+0x29a>
    2fde:	4b c0       	rjmp	.+150    	; 0x3076 <_Z7perMainv+0x330>
		{
			if ( protary->Rotary_diff )
    2fe0:	28 85       	ldd	r18, Y+8	; 0x08
    2fe2:	22 23       	and	r18, r18
    2fe4:	c9 f0       	breq	.+50     	; 0x3018 <_Z7perMainv+0x2d2>
			{
				int16_t x = protary->RotaryControl ;
    2fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe8:	99 27       	eor	r25, r25
    2fea:	87 fd       	sbrc	r24, 7
    2fec:	90 95       	com	r25
				x += protary->Rotary_diff ;
    2fee:	33 27       	eor	r19, r19
    2ff0:	27 fd       	sbrc	r18, 7
    2ff2:	30 95       	com	r19
    2ff4:	28 0f       	add	r18, r24
    2ff6:	39 1f       	adc	r19, r25
  return getRawTrimValue( getTrimFlightPhase( phase, idx ), idx ) ;
}

int16_t validatePlusMinus125( int16_t trim )
{
  if(trim < -125 || trim > 125)
    2ff8:	c9 01       	movw	r24, r18
    2ffa:	83 58       	subi	r24, 0x83	; 131
    2ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffe:	8b 3f       	cpi	r24, 0xFB	; 251
    3000:	91 05       	cpc	r25, r1
    3002:	40 f0       	brcs	.+16     	; 0x3014 <_Z7perMainv+0x2ce>
	{
		trim = ( trim > 0 ) ? 125 : -125 ;
    3004:	12 16       	cp	r1, r18
    3006:	13 06       	cpc	r1, r19
    3008:	1c f0       	brlt	.+6      	; 0x3010 <_Z7perMainv+0x2ca>
    300a:	23 e8       	ldi	r18, 0x83	; 131
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <_Z7perMainv+0x2ce>
    3010:	2d e7       	ldi	r18, 0x7D	; 125
    3012:	30 e0       	ldi	r19, 0x00	; 0
		{
			if ( protary->Rotary_diff )
			{
				int16_t x = protary->RotaryControl ;
				x += protary->Rotary_diff ;
				protary->RotaryControl = validatePlusMinus125( x ) ;
    3014:	2e 83       	std	Y+6, r18	; 0x06
							}
						}
				  }
				}
#endif				
				protary->Rotary_diff = 0 ;
    3016:	18 86       	std	Y+8, r1	; 0x08
			}
			
			if ( g_model.anaVolume )	// Only check if on main screen
    3018:	90 91 26 04 	lds	r25, 0x0426
    301c:	89 2f       	mov	r24, r25
    301e:	80 7e       	andi	r24, 0xE0	; 224
    3020:	51 f1       	breq	.+84     	; 0x3076 <_Z7perMainv+0x330>
			{
				uint16_t v ;
				uint16_t divisor ;
				if ( g_model.anaVolume < 4 )
    3022:	92 95       	swap	r25
    3024:	96 95       	lsr	r25
    3026:	97 70       	andi	r25, 0x07	; 7
    3028:	e9 2f       	mov	r30, r25
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	e4 30       	cpi	r30, 0x04	; 4
    302e:	f1 05       	cpc	r31, r1
    3030:	5c f4       	brge	.+22     	; 0x3048 <_Z7perMainv+0x302>
				{
					v = calibratedStick[g_model.anaVolume+3] + 1024 ;
    3032:	ee 0f       	add	r30, r30
    3034:	ff 1f       	adc	r31, r31
    3036:	e4 54       	subi	r30, 0x44	; 68
    3038:	f9 4f       	sbci	r31, 0xF9	; 249
    303a:	20 81       	ld	r18, Z
    303c:	31 81       	ldd	r19, Z+1	; 0x01
    303e:	20 50       	subi	r18, 0x00	; 0
    3040:	3c 4f       	sbci	r19, 0xFC	; 252
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	78 e0       	ldi	r23, 0x08	; 8
    3046:	0d c0       	rjmp	.+26     	; 0x3062 <_Z7perMainv+0x31c>
					divisor = 2048 ;
				}
				else
				{
					v = g_model.gvars[g_model.anaVolume-1].gvar + 125 ;
    3048:	ee 0f       	add	r30, r30
    304a:	ff 1f       	adc	r31, r31
    304c:	e1 5a       	subi	r30, 0xA1	; 161
    304e:	fb 4f       	sbci	r31, 0xFB	; 251
    3050:	80 81       	ld	r24, Z
    3052:	28 2f       	mov	r18, r24
    3054:	33 27       	eor	r19, r19
    3056:	27 fd       	sbrc	r18, 7
    3058:	30 95       	com	r19
    305a:	23 58       	subi	r18, 0x83	; 131
    305c:	3f 4f       	sbci	r19, 0xFF	; 255
    305e:	6a ef       	ldi	r22, 0xFA	; 250
    3060:	70 e0       	ldi	r23, 0x00	; 0
					divisor = 250 ;
				}
				requiredVolume = v * (NUM_VOL_LEVELS-1) / divisor ;
    3062:	c9 01       	movw	r24, r18
    3064:	43 e0       	ldi	r20, 0x03	; 3
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	4a 95       	dec	r20
    306c:	e1 f7       	brne	.-8      	; 0x3066 <_Z7perMainv+0x320>
    306e:	82 1b       	sub	r24, r18
    3070:	93 0b       	sbc	r25, r19
    3072:	0e 94 84 7e 	call	0xfd08	; 0xfd08 <__udivmodhi4>
			}
		}
		if ( requiredVolume != CurrentVolume )
    3076:	80 91 9f 05 	lds	r24, 0x059F
    307a:	68 17       	cp	r22, r24
    307c:	19 f0       	breq	.+6      	; 0x3084 <_Z7perMainv+0x33e>
		{
			setVolume( requiredVolume ) ;
    307e:	86 2f       	mov	r24, r22
    3080:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_Z9setVolumeh>
		}
		
		if ( g_eeGeneral.stickScroll && StickScrollAllowed )
    3084:	80 91 84 01 	lds	r24, 0x0184
    3088:	87 ff       	sbrs	r24, 7
    308a:	3e c0       	rjmp	.+124    	; 0x3108 <_Z7perMainv+0x3c2>
    308c:	80 91 06 06 	lds	r24, 0x0606
    3090:	88 23       	and	r24, r24
    3092:	d1 f1       	breq	.+116    	; 0x3108 <_Z7perMainv+0x3c2>
		{
		 	if ( StickScrollTimer )
    3094:	80 91 07 06 	lds	r24, 0x0607
    3098:	88 23       	and	r24, r24
    309a:	c1 f1       	breq	.+112    	; 0x310c <_Z7perMainv+0x3c6>
			{
				static uint8_t repeater ;
				uint8_t direction ;
				uint8_t value ;
		
				if ( repeater < 128 )
    309c:	80 91 4f 06 	lds	r24, 0x064F
    30a0:	87 fd       	sbrc	r24, 7
    30a2:	03 c0       	rjmp	.+6      	; 0x30aa <_Z7perMainv+0x364>
				{
					repeater += 1 ;
    30a4:	8f 5f       	subi	r24, 0xFF	; 255
    30a6:	80 93 4f 06 	sts	0x064F, r24
				}
				value = calcStickScroll( 2 ) ;
    30aa:	82 e0       	ldi	r24, 0x02	; 2
    30ac:	0e 94 0c 10 	call	0x2018	; 0x2018 <_Z15calcStickScrollh>
    30b0:	98 2f       	mov	r25, r24
				direction = value & 0x80 ;
				value &= 0x7F ;
    30b2:	28 2f       	mov	r18, r24
    30b4:	2f 77       	andi	r18, 0x7F	; 127
				if ( value )
    30b6:	81 f0       	breq	.+32     	; 0x30d8 <_Z7perMainv+0x392>
				{
					if ( repeater > value )
    30b8:	80 91 4f 06 	lds	r24, 0x064F
    30bc:	28 17       	cp	r18, r24
    30be:	30 f5       	brcc	.+76     	; 0x310c <_Z7perMainv+0x3c6>
					{
						repeater = 0 ;
    30c0:	10 92 4f 06 	sts	0x064F, r1
						if ( evt == 0 )
    30c4:	ee 20       	and	r14, r14
    30c6:	11 f5       	brne	.+68     	; 0x310c <_Z7perMainv+0x3c6>
						{
							if ( direction )
    30c8:	99 23       	and	r25, r25
    30ca:	e9 2e       	mov	r14, r25
    30cc:	ee 1c       	adc	r14, r14
    30ce:	ee 24       	eor	r14, r14
    30d0:	ee 1c       	adc	r14, r14
    30d2:	82 e6       	ldi	r24, 0x62	; 98
    30d4:	e8 0e       	add	r14, r24
    30d6:	1a c0       	rjmp	.+52     	; 0x310c <_Z7perMainv+0x3c6>
						}
					}
				}
				else
				{
					value = calcStickScroll( 3 ) ;
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	0e 94 0c 10 	call	0x2018	; 0x2018 <_Z15calcStickScrollh>
    30de:	98 2f       	mov	r25, r24
					direction = value & 0x80 ;
					value &= 0x7F ;
    30e0:	28 2f       	mov	r18, r24
    30e2:	2f 77       	andi	r18, 0x7F	; 127
					if ( value )
    30e4:	99 f0       	breq	.+38     	; 0x310c <_Z7perMainv+0x3c6>
					{
						if ( repeater > value )
    30e6:	80 91 4f 06 	lds	r24, 0x064F
    30ea:	28 17       	cp	r18, r24
    30ec:	78 f4       	brcc	.+30     	; 0x310c <_Z7perMainv+0x3c6>
						{
							repeater = 0 ;
    30ee:	10 92 4f 06 	sts	0x064F, r1
							if ( evt == 0 )
    30f2:	ee 20       	and	r14, r14
    30f4:	59 f4       	brne	.+22     	; 0x310c <_Z7perMainv+0x3c6>
							{
								if ( direction )
    30f6:	99 23       	and	r25, r25
    30f8:	e9 2e       	mov	r14, r25
    30fa:	ee 1c       	adc	r14, r14
    30fc:	ee 24       	eor	r14, r14
    30fe:	ee 1c       	adc	r14, r14
    3100:	85 e6       	ldi	r24, 0x65	; 101
    3102:	8e 19       	sub	r24, r14
    3104:	e8 2e       	mov	r14, r24
    3106:	02 c0       	rjmp	.+4      	; 0x310c <_Z7perMainv+0x3c6>
				}
			}
		}
		else
		{
			StickScrollTimer = 0 ;		// Seconds
    3108:	10 92 07 06 	sts	0x0607, r1
		}	
		StickScrollAllowed = 1 ;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	80 93 06 06 	sts	0x0606, r24
    3112:	c1 e6       	ldi	r28, 0x61	; 97
    3114:	d4 e0       	ldi	r29, 0x04	; 4

#if GVARS
		for( uint8_t i = 0 ; i < MAX_GVARS ; i += 1 )
		{
			if ( g_model.gvars[i].gvsource )
    3116:	69 81       	ldd	r22, Y+1	; 0x01
    3118:	66 23       	and	r22, r22
    311a:	09 f4       	brne	.+2      	; 0x311e <_Z7perMainv+0x3d8>
    311c:	44 c0       	rjmp	.+136    	; 0x31a6 <_Z7perMainv+0x460>
					{
						continue ;
					}
				}
#endif
				if ( src <= 4 )
    311e:	65 30       	cpi	r22, 0x05	; 5
    3120:	30 f4       	brcc	.+12     	; 0x312e <_Z7perMainv+0x3e8>
				{
//					value = *TrimPtr[ convert_mode_helper(src) - 1 ] ;
#ifdef FIX_MODE
					value = getTrimValue( CurrentPhase, src - 1 ) ;
    3122:	61 50       	subi	r22, 0x01	; 1
    3124:	80 91 70 08 	lds	r24, 0x0870
    3128:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    312c:	2c c0       	rjmp	.+88     	; 0x3186 <_Z7perMainv+0x440>
#else
					value = getTrimValue( CurrentPhase, convert_mode_helper(src) - 1 ) ;
#endif
				}
			  else if ( src == 5 )	// REN
    312e:	65 30       	cpi	r22, 0x05	; 5
    3130:	39 f4       	brne	.+14     	; 0x3140 <_Z7perMainv+0x3fa>
				{
#if defined(CPUM128) || defined(CPUM2561)
					value = g_model.gvars[i].gvar ;	// Adjusted elsewhere
#else					
					value = Rotary.RotaryControl ;
    3132:	80 91 a7 05 	lds	r24, 0x05A7
    3136:	28 2f       	mov	r18, r24
    3138:	33 27       	eor	r19, r19
    313a:	27 fd       	sbrc	r18, 7
    313c:	30 95       	com	r19
    313e:	24 c0       	rjmp	.+72     	; 0x3188 <_Z7perMainv+0x442>
#endif
				}
				else if ( src <= 9 )	// Stick
    3140:	6a 30       	cpi	r22, 0x0A	; 10
    3142:	48 f4       	brcc	.+18     	; 0x3156 <_Z7perMainv+0x410>
				{
#ifdef FIX_MODE
					value = calibratedStick[ src-5 - 1 ] / 8 ;
    3144:	e6 2f       	mov	r30, r22
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	ee 0f       	add	r30, r30
    314a:	ff 1f       	adc	r31, r31
    314c:	e6 55       	subi	r30, 0x56	; 86
    314e:	f9 4f       	sbci	r31, 0xF9	; 249
    3150:	80 81       	ld	r24, Z
    3152:	91 81       	ldd	r25, Z+1	; 0x01
    3154:	0a c0       	rjmp	.+20     	; 0x316a <_Z7perMainv+0x424>
    3156:	a6 2f       	mov	r26, r22
    3158:	b0 e0       	ldi	r27, 0x00	; 0
#else
					value = calibratedStick[ convert_mode_helper( src-5) - 1 ] / 8 ;
#endif
				}
				else if ( src <= 12 )	// Pot
    315a:	6d 30       	cpi	r22, 0x0D	; 13
    315c:	48 f4       	brcc	.+18     	; 0x3170 <_Z7perMainv+0x42a>
				{
					value = calibratedStick[ ( src-6)] / 8 ;
    315e:	aa 0f       	add	r26, r26
    3160:	bb 1f       	adc	r27, r27
    3162:	a6 55       	subi	r26, 0x56	; 86
    3164:	b9 4f       	sbci	r27, 0xF9	; 249
    3166:	8d 91       	ld	r24, X+
    3168:	9c 91       	ld	r25, X
    316a:	68 e0       	ldi	r22, 0x08	; 8
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	08 c0       	rjmp	.+16     	; 0x3180 <_Z7perMainv+0x43a>
				}
				else// if ( g_model.gvars[i].gvsource <= 28 )	// Chans
				{
					value = ex_chans[src-13] / 10 ;
    3170:	aa 0f       	add	r26, r26
    3172:	bb 1f       	adc	r27, r27
    3174:	a6 55       	subi	r26, 0x56	; 86
    3176:	b9 4f       	sbci	r27, 0xF9	; 249
    3178:	8d 91       	ld	r24, X+
    317a:	9c 91       	ld	r25, X
    317c:	6a e0       	ldi	r22, 0x0A	; 10
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    3184:	cb 01       	movw	r24, r22
    3186:	9c 01       	movw	r18, r24
  return getRawTrimValue( getTrimFlightPhase( phase, idx ), idx ) ;
}

int16_t validatePlusMinus125( int16_t trim )
{
  if(trim < -125 || trim > 125)
    3188:	c9 01       	movw	r24, r18
    318a:	83 58       	subi	r24, 0x83	; 131
    318c:	9f 4f       	sbci	r25, 0xFF	; 255
    318e:	8b 3f       	cpi	r24, 0xFB	; 251
    3190:	91 05       	cpc	r25, r1
    3192:	40 f0       	brcs	.+16     	; 0x31a4 <_Z7perMainv+0x45e>
	{
		trim = ( trim > 0 ) ? 125 : -125 ;
    3194:	12 16       	cp	r1, r18
    3196:	13 06       	cpc	r1, r19
    3198:	1c f0       	brlt	.+6      	; 0x31a0 <_Z7perMainv+0x45a>
    319a:	23 e8       	ldi	r18, 0x83	; 131
    319c:	3f ef       	ldi	r19, 0xFF	; 255
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <_Z7perMainv+0x45e>
    31a0:	2d e7       	ldi	r18, 0x7D	; 125
    31a2:	30 e0       	ldi	r19, 0x00	; 0
				}
				else// if ( g_model.gvars[i].gvsource <= 28 )	// Chans
				{
					value = ex_chans[src-13] / 10 ;
				}
				g_model.gvars[i].gvar = validatePlusMinus125( value ) ; // limit( -125, value, 125 ) ;
    31a4:	28 83       	st	Y, r18
    31a6:	22 96       	adiw	r28, 0x02	; 2
			StickScrollTimer = 0 ;		// Seconds
		}	
		StickScrollAllowed = 1 ;

#if GVARS
		for( uint8_t i = 0 ; i < MAX_GVARS ; i += 1 )
    31a8:	94 e0       	ldi	r25, 0x04	; 4
    31aa:	cf 36       	cpi	r28, 0x6F	; 111
    31ac:	d9 07       	cpc	r29, r25
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <_Z7perMainv+0x46c>
    31b0:	b2 cf       	rjmp	.-156    	; 0x3116 <_Z7perMainv+0x3d0>
			}
		}
#endif

			static uint8_t alertKey ;
			if ( AlertMessage )
    31b2:	80 91 6b 05 	lds	r24, 0x056B
    31b6:	90 91 6c 05 	lds	r25, 0x056C
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	b9 f0       	breq	.+46     	; 0x31ec <_Z7perMainv+0x4a6>
			{
				almess( AlertMessage, ALERT_TYPE ) ;
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	0e 94 c3 13 	call	0x2786	; 0x2786 <_Z6almessPKch>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    31c4:	96 b3       	in	r25, 0x16	; 22
    31c6:	90 95       	com	r25
    31c8:	9e 77       	andi	r25, 0x7E	; 126
			static uint8_t alertKey ;
			if ( AlertMessage )
			{
				almess( AlertMessage, ALERT_TYPE ) ;
				uint8_t key = keyDown() ;
				if ( alertKey )
    31ca:	80 91 50 06 	lds	r24, 0x0650
    31ce:	88 23       	and	r24, r24
    31d0:	39 f0       	breq	.+14     	; 0x31e0 <_Z7perMainv+0x49a>
				{
					if( key == 0 )
    31d2:	99 23       	and	r25, r25
    31d4:	49 f5       	brne	.+82     	; 0x3228 <_Z7perMainv+0x4e2>
					{
						AlertMessage = 0 ;
    31d6:	10 92 6c 05 	sts	0x056C, r1
    31da:	10 92 6b 05 	sts	0x056B, r1
    31de:	24 c0       	rjmp	.+72     	; 0x3228 <_Z7perMainv+0x4e2>
					}
				}
				else if ( key )
    31e0:	99 23       	and	r25, r25
    31e2:	11 f1       	breq	.+68     	; 0x3228 <_Z7perMainv+0x4e2>
				{
					alertKey = 1 ;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	80 93 50 06 	sts	0x0650, r24
    31ea:	1e c0       	rjmp	.+60     	; 0x3228 <_Z7perMainv+0x4e2>
	//				AlertMessage = 0 ;
	//			}
			}
			else
			{
				alertKey = 0 ;
    31ec:	10 92 50 06 	sts	0x0650, r1

//				uint16_t ltimer = MenuTimer ;
				if ( EnterMenu )
    31f0:	10 91 13 06 	lds	r17, 0x0613
    31f4:	11 23       	and	r17, r17
    31f6:	11 f4       	brne	.+4      	; 0x31fc <_Z7perMainv+0x4b6>
    31f8:	1e 2d       	mov	r17, r14
    31fa:	05 c0       	rjmp	.+10     	; 0x3206 <_Z7perMainv+0x4c0>
				{
					evt = EnterMenu ;
					EnterMenu = 0 ;
    31fc:	10 92 13 06 	sts	0x0613, r1
					audioDefevent(AU_MENUS);
    3200:	87 e1       	ldi	r24, 0x17	; 23
    3202:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
//					ltimer = 0 ;
				}
				StepSize = 20 ;
    3206:	84 e1       	ldi	r24, 0x14	; 20
    3208:	80 93 1e 06 	sts	0x061E, r24
				Tevent = evt ;
    320c:	10 93 aa 05 	sts	0x05AA, r17
//						}
//					}
//				}
//				MenuTimer = ltimer ;
				
				g_menuStack[g_menuStackPtr](evt);
    3210:	e0 91 12 06 	lds	r30, 0x0612
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	ee 0f       	add	r30, r30
    3218:	ff 1f       	adc	r31, r31
    321a:	e8 5f       	subi	r30, 0xF8	; 248
    321c:	f9 4f       	sbci	r31, 0xF9	; 249
    321e:	01 90       	ld	r0, Z+
    3220:	f0 81       	ld	r31, Z
    3222:	e0 2d       	mov	r30, r0
    3224:	81 2f       	mov	r24, r17
    3226:	09 95       	icall
			}
//		if ( ++timer20mS > 9 )		// Only do next bit every 100mS
//		{
//			timer20mS = 0 ;

    	refreshDiplay();
    3228:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <_Z13refreshDiplayv>
//		}
		{
			uint8_t pg ;
			pg = PORTG ;
    322c:	10 91 65 00 	lds	r17, 0x0065
    	if( (checkSlaveMode()) && (!g_eeGeneral.enablePpmsim))
    3230:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_Z14checkSlaveModev>
    3234:	88 23       	and	r24, r24
    3236:	09 f4       	brne	.+2      	; 0x323a <_Z7perMainv+0x4f4>
    3238:	65 c0       	rjmp	.+202    	; 0x3304 <_Z7perMainv+0x5be>
    323a:	80 91 84 01 	lds	r24, 0x0184
    323e:	85 fd       	sbrc	r24, 5
    3240:	61 c0       	rjmp	.+194    	; 0x3304 <_Z7perMainv+0x5be>
			{
    	    pg &= ~(1<<OUT_G_SIM_CTL); // 0=ppm out
    3242:	81 2f       	mov	r24, r17
    3244:	8f 7e       	andi	r24, 0xEF	; 239
    	}else{
    	    pg |=  (1<<OUT_G_SIM_CTL); // 1=ppm-in
    	}
			PORTG = pg ;
    3246:	80 93 65 00 	sts	0x0065, r24
		}

    switch( g_blinkTmr10ms & 0x1f ) { //alle 10ms*32
    324a:	80 91 79 0d 	lds	r24, 0x0D79
    324e:	8f 71       	andi	r24, 0x1F	; 31
    3250:	82 30       	cpi	r24, 0x02	; 2
    3252:	09 f0       	breq	.+2      	; 0x3256 <_Z7perMainv+0x510>
    3254:	52 c0       	rjmp	.+164    	; 0x32fa <_Z7perMainv+0x5b4>
        //        If battery voltage = 10V then A2D voltage = 3.462V
        //        11 bit A2D count is 1417 (3.462/5*2048).
        //        1417*18/256 = 99 (actually 99.6) to represent 9.9 volts.
        //        Erring on the side of low is probably best.

        int16_t ab = anaIn(7);
    3256:	87 e0       	ldi	r24, 0x07	; 7
    3258:	0e 94 33 10 	call	0x2066	; 0x2066 <_Z5anaInh>
    325c:	fc 01       	movw	r30, r24
        ab = ab*16 + ab/8*(6+g_eeGeneral.vBatCalib) ;
    325e:	20 91 68 01 	lds	r18, 0x0168
        ab = (uint16_t) ab / (g_eeGeneral.disableBG ? 240 : BandGap ) ;  // ab might be more than 32767
    3262:	80 91 7e 01 	lds	r24, 0x017E
    3266:	86 ff       	sbrs	r24, 6
    3268:	03 c0       	rjmp	.+6      	; 0x3270 <_Z7perMainv+0x52a>
    326a:	c0 ef       	ldi	r28, 0xF0	; 240
    326c:	d0 e0       	ldi	r29, 0x00	; 0
    326e:	04 c0       	rjmp	.+8      	; 0x3278 <_Z7perMainv+0x532>
    3270:	c0 91 04 01 	lds	r28, 0x0104
    3274:	d0 91 05 01 	lds	r29, 0x0105
        //        11 bit A2D count is 1417 (3.462/5*2048).
        //        1417*18/256 = 99 (actually 99.6) to represent 9.9 volts.
        //        Erring on the side of low is probably best.

        int16_t ab = anaIn(7);
        ab = ab*16 + ab/8*(6+g_eeGeneral.vBatCalib) ;
    3278:	33 27       	eor	r19, r19
    327a:	27 fd       	sbrc	r18, 7
    327c:	30 95       	com	r19
    327e:	2a 5f       	subi	r18, 0xFA	; 250
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	cf 01       	movw	r24, r30
    3284:	68 e0       	ldi	r22, 0x08	; 8
    3286:	70 e0       	ldi	r23, 0x00	; 0
    3288:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    328c:	26 9f       	mul	r18, r22
    328e:	c0 01       	movw	r24, r0
    3290:	27 9f       	mul	r18, r23
    3292:	90 0d       	add	r25, r0
    3294:	36 9f       	mul	r19, r22
    3296:	90 0d       	add	r25, r0
    3298:	11 24       	eor	r1, r1
    329a:	a4 e0       	ldi	r26, 0x04	; 4
    329c:	ee 0f       	add	r30, r30
    329e:	ff 1f       	adc	r31, r31
    32a0:	aa 95       	dec	r26
    32a2:	e1 f7       	brne	.-8      	; 0x329c <_Z7perMainv+0x556>
        ab = (uint16_t) ab / (g_eeGeneral.disableBG ? 240 : BandGap ) ;  // ab might be more than 32767
    32a4:	8e 0f       	add	r24, r30
    32a6:	9f 1f       	adc	r25, r31
    32a8:	be 01       	movw	r22, r28
    32aa:	0e 94 84 7e 	call	0xfd08	; 0xfd08 <__udivmodhi4>
        g_vbat100mV = (ab + g_vbat100mV + 1) >> 1 ;  // Filter it a bit => more stable display
    32ae:	20 91 1f 06 	lds	r18, 0x061F
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	2f 5f       	subi	r18, 0xFF	; 255
    32b6:	3f 4f       	sbci	r19, 0xFF	; 255
    32b8:	26 0f       	add	r18, r22
    32ba:	37 1f       	adc	r19, r23
    32bc:	35 95       	asr	r19
    32be:	27 95       	ror	r18
    32c0:	20 93 1f 06 	sts	0x061F, r18

        static uint8_t s_batCheck;
        s_batCheck+=16 ;
    32c4:	80 91 4e 06 	lds	r24, 0x064E
    32c8:	80 5f       	subi	r24, 0xF0	; 240
    32ca:	80 93 4e 06 	sts	0x064E, r24
        if((s_batCheck==0) && (g_vbat100mV<g_eeGeneral.vBatWarn) && (g_vbat100mV>49)){
    32ce:	88 23       	and	r24, r24
    32d0:	a1 f4       	brne	.+40     	; 0x32fa <_Z7perMainv+0x5b4>
    32d2:	80 91 67 01 	lds	r24, 0x0167
    32d6:	28 17       	cp	r18, r24
    32d8:	80 f4       	brcc	.+32     	; 0x32fa <_Z7perMainv+0x5b4>
    32da:	22 33       	cpi	r18, 0x32	; 50
    32dc:	70 f0       	brcs	.+28     	; 0x32fa <_Z7perMainv+0x5b4>

            audioVoiceDefevent(AU_TX_BATTERY_LOW, V_BATTERY_LOW);
    32de:	81 e1       	ldi	r24, 0x11	; 17
    32e0:	6e e2       	ldi	r22, 0x2E	; 46
    32e2:	0e 94 e4 79 	call	0xf3c8	; 0xf3c8 <_Z18audioVoiceDefeventhh>
            if (g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
    32e6:	80 91 7e 01 	lds	r24, 0x017E
    32ea:	83 ff       	sbrs	r24, 3
    32ec:	06 c0       	rjmp	.+12     	; 0x32fa <_Z7perMainv+0x5b4>
    32ee:	82 e3       	ldi	r24, 0x32	; 50
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	90 93 22 06 	sts	0x0622, r25
    32f6:	80 93 21 06 	sts	0x0621, r24
    }
    break;
    }


    stickMoved = 0; //reset this flag
    32fa:	10 92 23 06 	sts	0x0623, r1
    32fe:	07 c0       	rjmp	.+14     	; 0x330e <_Z7perMainv+0x5c8>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	17 ce       	rjmp	.-978    	; 0x2f32 <_Z7perMainv+0x1ec>
			pg = PORTG ;
    	if( (checkSlaveMode()) && (!g_eeGeneral.enablePpmsim))
			{
    	    pg &= ~(1<<OUT_G_SIM_CTL); // 0=ppm out
    	}else{
    	    pg |=  (1<<OUT_G_SIM_CTL); // 1=ppm-in
    3304:	81 2f       	mov	r24, r17
    3306:	80 61       	ori	r24, 0x10	; 16
    3308:	9e cf       	rjmp	.-196    	; 0x3246 <_Z7perMainv+0x500>
    330a:	ee 24       	eor	r14, r14
    330c:	06 ce       	rjmp	.-1012   	; 0x2f1a <_Z7perMainv+0x1d4>
    }


    stickMoved = 0; //reset this flag

}
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	df 90       	pop	r13
    331c:	bf 90       	pop	r11
    331e:	af 90       	pop	r10
    3320:	08 95       	ret

00003322 <_Z6alertxPKcb>:
void alert(const prog_char * s)
{
	alertx( s, false ) ;
}

void alertx(const prog_char * s, bool defaults)
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	9c 01       	movw	r18, r24
    3328:	16 2f       	mov	r17, r22
{
	if ( Main_running )
    332a:	80 91 6d 05 	lds	r24, 0x056D
    332e:	88 23       	and	r24, r24
    3330:	29 f0       	breq	.+10     	; 0x333c <_Z6alertxPKcb+0x1a>
	{
		AlertMessage = s ;
    3332:	30 93 6c 05 	sts	0x056C, r19
    3336:	20 93 6b 05 	sts	0x056B, r18
    333a:	33 c0       	rjmp	.+102    	; 0x33a2 <_Z6alertxPKcb+0x80>
		return ;
	}
	almess( s, ALERT_TYPE ) ;
    333c:	c9 01       	movw	r24, r18
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	0e 94 c3 13 	call	0x2786	; 0x2786 <_Z6almessPKch>
  
	lcdSetRefVolt(defaults ? LCD_NOMCONTRAST : g_eeGeneral.contrast);
    3344:	11 23       	and	r17, r17
    3346:	11 f0       	breq	.+4      	; 0x334c <_Z6alertxPKcb+0x2a>
    3348:	81 e2       	ldi	r24, 0x21	; 33
    334a:	02 c0       	rjmp	.+4      	; 0x3350 <_Z6alertxPKcb+0x2e>
    334c:	80 91 66 01 	lds	r24, 0x0166
    3350:	0e 94 1a 6c 	call	0xd834	; 0xd834 <_Z13lcdSetRefVolth>
  audioVoiceDefevent(AU_ERROR, V_ALERT);
    3354:	82 e1       	ldi	r24, 0x12	; 18
    3356:	67 e1       	ldi	r22, 0x17	; 23
    3358:	0e 94 e4 79 	call	0xf3c8	; 0xf3c8 <_Z18audioVoiceDefeventhh>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    335c:	86 b3       	in	r24, 0x16	; 22
static void clearKeyEvents()
{
#ifdef SIMU
    while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
    while (keyDown());  // loop until all keys are up
    335e:	80 95       	com	r24
    3360:	8e 77       	andi	r24, 0x7E	; 126
    3362:	e1 f7       	brne	.-8      	; 0x335c <_Z6alertxPKcb+0x3a>
#endif
    putEvent(0);
    3364:	10 92 49 0d 	sts	0x0D49, r1
            wdt_reset();
            heartbeat = 0;
        }

        if(defaults)
        	BACKLIGHT_ON ;
    3368:	01 e0       	ldi	r16, 0x01	; 1
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    336a:	86 b3       	in	r24, 0x16	; 22
    {
#ifdef SIMU
    if (!main_thread_running) return;
    sleep(1/*ms*/);
#endif
        if(keyDown())
    336c:	80 95       	com	r24
    336e:	8e 77       	andi	r24, 0x7E	; 126
    3370:	39 f0       	breq	.+14     	; 0x3380 <_Z6alertxPKcb+0x5e>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    3372:	86 b3       	in	r24, 0x16	; 22
static void clearKeyEvents()
{
#ifdef SIMU
    while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
    while (keyDown());  // loop until all keys are up
    3374:	80 95       	com	r24
    3376:	8e 77       	andi	r24, 0x7E	; 126
    3378:	e1 f7       	brne	.-8      	; 0x3372 <_Z6alertxPKcb+0x50>
#endif
    putEvent(0);
    337a:	10 92 49 0d 	sts	0x0D49, r1
    337e:	11 c0       	rjmp	.+34     	; 0x33a2 <_Z6alertxPKcb+0x80>
        if(keyDown())
        {
				    clearKeyEvents() ;
            return;  //wait for key release
        }
        if(heartbeat == 0x3)
    3380:	80 91 0b 0e 	lds	r24, 0x0E0B
    3384:	83 30       	cpi	r24, 0x03	; 3
    3386:	19 f4       	brne	.+6      	; 0x338e <_Z6alertxPKcb+0x6c>
        {
            wdt_reset();
    3388:	a8 95       	wdr
            heartbeat = 0;
    338a:	10 92 0b 0e 	sts	0x0E0B, r1
        }

        if(defaults)
    338e:	11 23       	and	r17, r17
    3390:	19 f0       	breq	.+6      	; 0x3398 <_Z6alertxPKcb+0x76>
        	BACKLIGHT_ON ;
    3392:	00 93 3b 0e 	sts	0x0E3B, r16
    3396:	02 c0       	rjmp	.+4      	; 0x339c <_Z6alertxPKcb+0x7a>
		    else
    	    BACKLIGHT_OFF ;
    3398:	10 92 3b 0e 	sts	0x0E3B, r1
        check_backlight_voice() ;
    339c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_Z21check_backlight_voicev>
    33a0:	e4 cf       	rjmp	.-56     	; 0x336a <_Z6alertxPKcb+0x48>
    }
}
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	08 95       	ret

000033a8 <_Z5alertPKc>:
//	lcdSetContrast() ;
}

void alert(const prog_char * s)
{
	alertx( s, false ) ;
    33a8:	60 e0       	ldi	r22, 0x00	; 0
    33aa:	0e 94 91 19 	call	0x3322	; 0x3322 <_Z6alertxPKcb>
}
    33ae:	08 95       	ret

000033b0 <_ZL8checkMemv>:
    }
}

static void checkMem()
{
    if(g_eeGeneral.disableMemoryWarning) return;
    33b0:	80 91 7b 01 	lds	r24, 0x017B
    33b4:	82 fd       	sbrc	r24, 2
    33b6:	09 c0       	rjmp	.+18     	; 0x33ca <_ZL8checkMemv+0x1a>
    if(EeFsGetFree() < 200)
    33b8:	0e 94 81 65 	call	0xcb02	; 0xcb02 <_Z11EeFsGetFreev>
    33bc:	88 3c       	cpi	r24, 0xC8	; 200
    33be:	91 05       	cpc	r25, r1
    33c0:	20 f4       	brcc	.+8      	; 0x33ca <_ZL8checkMemv+0x1a>
    {
        alert(PSTR(STR_EE_LOW_MEM));
    33c2:	8d e5       	ldi	r24, 0x5D	; 93
    33c4:	91 e0       	ldi	r25, 0x01	; 1
    33c6:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>
    33ca:	08 95       	ret

000033cc <_ZL10checkAlarmv>:
    }
}

static void checkAlarm() // added by Gohst
{
    if(g_eeGeneral.disableAlarmWarning) return;
    33cc:	80 91 7b 01 	lds	r24, 0x017B
    33d0:	87 fd       	sbrc	r24, 7
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <_ZL10checkAlarmv+0x14>
    if(!g_eeGeneral.beeperVal) alert(PSTR(STR_ALARMS_DISABLE));
    33d4:	88 73       	andi	r24, 0x38	; 56
    33d6:	21 f4       	brne	.+8      	; 0x33e0 <_ZL10checkAlarmv+0x14>
    33d8:	8c e6       	ldi	r24, 0x6C	; 108
    33da:	91 e0       	ldi	r25, 0x01	; 1
    33dc:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>
    33e0:	08 95       	ret

000033e2 <_ZL13checkWarningsv>:
}

static void checkWarnings()
{
//    if(sysFlags & sysFLAG_OLD_EEPROM)
    if(sysFlags)
    33e2:	80 91 ed 05 	lds	r24, 0x05ED
    33e6:	88 23       	and	r24, r24
    33e8:	31 f0       	breq	.+12     	; 0x33f6 <_ZL13checkWarningsv+0x14>
    {
        alert(PSTR(STR_OLD_VER_EEPROM)); //will update on next save
    33ea:	8c e7       	ldi	r24, 0x7C	; 124
    33ec:	91 e0       	ldi	r25, 0x01	; 1
    33ee:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>
//        sysFlags &= ~(sysFLAG_OLD_EEPROM); //clear flag
        sysFlags = 0 ; //clear flag
    33f2:	10 92 ed 05 	sts	0x05ED, r1
    33f6:	08 95       	ret

000033f8 <_Z8pushMenuPFvhE>:
void chainMenu(MenuFuncP newMenu)
{
    g_menuStack[g_menuStackPtr] = newMenu;
		EnterMenu = EVT_ENTRY ;
}
void pushMenu(MenuFuncP newMenu)
    33f8:	9c 01       	movw	r18, r24
{

//    g_menuStackPtr++;
    if(g_menuStackPtr >= DIM(g_menuStack)-1)
    33fa:	e0 91 12 06 	lds	r30, 0x0612
    33fe:	e4 30       	cpi	r30, 0x04	; 4
    3400:	28 f0       	brcs	.+10     	; 0x340c <_Z8pushMenuPFvhE+0x14>
    {
//        g_menuStackPtr--;
        alert(PSTR(STR_MSTACK_OFLOW));
    3402:	8f ea       	ldi	r24, 0xAF	; 175
    3404:	91 e0       	ldi	r25, 0x01	; 1
    3406:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>
    340a:	08 95       	ret
        return;
    }
		EnterMenu = EVT_ENTRY ;
    340c:	8f eb       	ldi	r24, 0xBF	; 191
    340e:	80 93 13 06 	sts	0x0613, r24
    g_menuStack[++g_menuStackPtr] = newMenu;
    3412:	ef 5f       	subi	r30, 0xFF	; 255
    3414:	e0 93 12 06 	sts	0x0612, r30
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	ee 0f       	add	r30, r30
    341c:	ff 1f       	adc	r31, r31
    341e:	e8 5f       	subi	r30, 0xF8	; 248
    3420:	f9 4f       	sbci	r31, 0xF9	; 249
    3422:	31 83       	std	Z+1, r19	; 0x01
    3424:	20 83       	st	Z, r18
    3426:	08 95       	ret

00003428 <_Z7popMenub>:
    return  g_menuStack[g_menuStackPtr+1];
}

void popMenu(bool uppermost)
{
    if(g_menuStackPtr>0 || uppermost)
    3428:	90 91 12 06 	lds	r25, 0x0612
    342c:	99 23       	and	r25, r25
    342e:	19 f4       	brne	.+6      	; 0x3436 <_Z7popMenub+0xe>
    3430:	88 23       	and	r24, r24
    3432:	31 f4       	brne	.+12     	; 0x3440 <_Z7popMenub+0x18>
    3434:	0c c0       	rjmp	.+24     	; 0x344e <_Z7popMenub+0x26>
		{
        g_menuStackPtr = uppermost ? 0 : g_menuStackPtr-1;
    3436:	88 23       	and	r24, r24
    3438:	19 f4       	brne	.+6      	; 0x3440 <_Z7popMenub+0x18>
    343a:	89 2f       	mov	r24, r25
    343c:	81 50       	subi	r24, 0x01	; 1
    343e:	01 c0       	rjmp	.+2      	; 0x3442 <_Z7popMenub+0x1a>
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	80 93 12 06 	sts	0x0612, r24
				EnterMenu = EVT_ENTRY_UP ;
    3446:	8e eb       	ldi	r24, 0xBE	; 190
    3448:	80 93 13 06 	sts	0x0613, r24
    344c:	08 95       	ret
    }else{
        alert(PSTR(STR_MSTACK_UFLOW));
    344e:	8c eb       	ldi	r24, 0xBC	; 188
    3450:	91 e0       	ldi	r25, 0x01	; 1
    3452:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>
    3456:	08 95       	ret

00003458 <_Z13checkSwitchesv>:
    i |= t ;
  }
	return i ;
}

void checkSwitches()
    3458:	ef 92       	push	r14
    345a:	ff 92       	push	r15
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
{
	uint8_t warningStates ;
	
	warningStates = g_model.switchWarningStates ;
    3464:	10 91 59 04 	lds	r17, 0x0459

    if(g_eeGeneral.disableSwitchWarning) return; // if warning is on
    3468:	80 91 7b 01 	lds	r24, 0x017B
    346c:	81 fd       	sbrc	r24, 1
    346e:	63 c0       	rjmp	.+198    	; 0x3536 <_Z13checkSwitchesv+0xde>

    uint8_t x = warningStates & SWP_IL5;
    3470:	81 2f       	mov	r24, r17
    3472:	88 73       	andi	r24, 0x38	; 56
    if(!(x==SWP_LEG1 || x==SWP_LEG2 || x==SWP_LEG3)) //legal states for ID0/1/2
    3474:	88 30       	cpi	r24, 0x08	; 8
    3476:	41 f0       	breq	.+16     	; 0x3488 <_Z13checkSwitchesv+0x30>
    3478:	80 31       	cpi	r24, 0x10	; 16
    347a:	31 f0       	breq	.+12     	; 0x3488 <_Z13checkSwitchesv+0x30>
    347c:	80 32       	cpi	r24, 0x20	; 32
    347e:	21 f0       	breq	.+8      	; 0x3488 <_Z13checkSwitchesv+0x30>
    {
        warningStates &= ~SWP_IL5; // turn all off, make sure only one is on
    3480:	17 7c       	andi	r17, 0xC7	; 199
        warningStates |=  SWP_ID0B;
    3482:	18 60       	ori	r17, 0x08	; 8
				g_model.switchWarningStates = warningStates ;
    3484:	10 93 59 04 	sts	0x0459, r17
    3488:	ee 24       	eor	r14, r14
    348a:	e3 94       	inc	r14

	uint8_t first = 1 ;
    //loop until all switches are reset
    while (1)
    {
        uint8_t i = getCurrentSwitchStates() ;
    348c:	0e 94 9e 12 	call	0x253c	; 0x253c <_Z22getCurrentSwitchStatesv>
    3490:	08 2f       	mov	r16, r24

        //show the difference between i and switch?
        //show just the offending switches.
        //first row - THR, GEA, AIL, ELE, ID0/1/2
        uint8_t x = i ^ warningStates ;
    3492:	f8 2e       	mov	r15, r24
    3494:	f1 26       	eor	r15, r17

		    alertMessages( PSTR(STR_SWITCH_WARN), PSTR(STR_RESET_SWITCHES) ) ;
    3496:	8c ef       	ldi	r24, 0xFC	; 252
    3498:	91 e0       	ldi	r25, 0x01	; 1
    349a:	66 ee       	ldi	r22, 0xE6	; 230
    349c:	71 e0       	ldi	r23, 0x01	; 1
    349e:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z13alertMessagesPKcS0_>

        if(x & SWP_THRB)
    34a2:	cf 2d       	mov	r28, r15
    34a4:	d0 e0       	ldi	r29, 0x00	; 0
    34a6:	f0 fe       	sbrs	r15, 0
    34a8:	04 c0       	rjmp	.+8      	; 0x34b2 <_Z13checkSwitchesv+0x5a>
            putWarnSwitch(2 + 0*FW, 0 );
    34aa:	82 e0       	ldi	r24, 0x02	; 2
    34ac:	60 e0       	ldi	r22, 0x00	; 0
    34ae:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z13putWarnSwitchhh>
        if(x & SWP_RUDB)
    34b2:	c1 ff       	sbrs	r28, 1
    34b4:	04 c0       	rjmp	.+8      	; 0x34be <_Z13checkSwitchesv+0x66>
            putWarnSwitch(2 + 3*FW + FW/2, 1 );
    34b6:	87 e1       	ldi	r24, 0x17	; 23
    34b8:	61 e0       	ldi	r22, 0x01	; 1
    34ba:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z13putWarnSwitchhh>
        if(x & SWP_ELEB)
    34be:	c2 ff       	sbrs	r28, 2
    34c0:	04 c0       	rjmp	.+8      	; 0x34ca <_Z13checkSwitchesv+0x72>
            putWarnSwitch(2 + 7*FW, 2 );
    34c2:	8c e2       	ldi	r24, 0x2C	; 44
    34c4:	62 e0       	ldi	r22, 0x02	; 2
    34c6:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z13putWarnSwitchhh>

        if(x & SWP_IL5)
    34ca:	ce 01       	movw	r24, r28
    34cc:	88 73       	andi	r24, 0x38	; 56
    34ce:	90 70       	andi	r25, 0x00	; 0
    34d0:	89 2b       	or	r24, r25
    34d2:	81 f0       	breq	.+32     	; 0x34f4 <_Z13checkSwitchesv+0x9c>
        {
            if(i & SWP_ID0B)
    34d4:	03 ff       	sbrs	r16, 3
    34d6:	03 c0       	rjmp	.+6      	; 0x34de <_Z13checkSwitchesv+0x86>
                putWarnSwitch(2 + 10*FW + FW/2, 3 );
    34d8:	81 e4       	ldi	r24, 0x41	; 65
    34da:	63 e0       	ldi	r22, 0x03	; 3
    34dc:	09 c0       	rjmp	.+18     	; 0x34f0 <_Z13checkSwitchesv+0x98>
            else if(i & SWP_ID1B)
    34de:	04 ff       	sbrs	r16, 4
    34e0:	03 c0       	rjmp	.+6      	; 0x34e8 <_Z13checkSwitchesv+0x90>
                putWarnSwitch(2 + 10*FW + FW/2, 4 );
    34e2:	81 e4       	ldi	r24, 0x41	; 65
    34e4:	64 e0       	ldi	r22, 0x04	; 4
    34e6:	04 c0       	rjmp	.+8      	; 0x34f0 <_Z13checkSwitchesv+0x98>
            else if(i & SWP_ID2B)
    34e8:	05 ff       	sbrs	r16, 5
    34ea:	04 c0       	rjmp	.+8      	; 0x34f4 <_Z13checkSwitchesv+0x9c>
                putWarnSwitch(2 + 10*FW + FW/2, 5 );
    34ec:	81 e4       	ldi	r24, 0x41	; 65
    34ee:	65 e0       	ldi	r22, 0x05	; 5
    34f0:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z13putWarnSwitchhh>
        }

        if(x & SWP_AILB)
    34f4:	c6 ff       	sbrs	r28, 6
    34f6:	04 c0       	rjmp	.+8      	; 0x3500 <_Z13checkSwitchesv+0xa8>
            putWarnSwitch(2 + 14*FW, 6 );
    34f8:	86 e5       	ldi	r24, 0x56	; 86
    34fa:	66 e0       	ldi	r22, 0x06	; 6
    34fc:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z13putWarnSwitchhh>
        if(x & SWP_GEAB)
    3500:	f7 fe       	sbrs	r15, 7
    3502:	04 c0       	rjmp	.+8      	; 0x350c <_Z13checkSwitchesv+0xb4>
            putWarnSwitch(2 + 17*FW + FW/2, 7 );
    3504:	8b e6       	ldi	r24, 0x6B	; 107
    3506:	67 e0       	ldi	r22, 0x07	; 7
    3508:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z13putWarnSwitchhh>
//				  UBRR1L = UBRRL_VALUE;
//				}
//				lcd_putc( 0, 8, q ) ;

//#endif
        refreshDiplay();
    350c:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <_Z13refreshDiplayv>

				if ( first )
    3510:	ee 20       	and	r14, r14
    3512:	31 f0       	breq	.+12     	; 0x3520 <_Z13checkSwitchesv+0xc8>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    3514:	86 b3       	in	r24, 0x16	; 22
static void clearKeyEvents()
{
#ifdef SIMU
    while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
    while (keyDown());  // loop until all keys are up
    3516:	80 95       	com	r24
    3518:	8e 77       	andi	r24, 0x7E	; 126
    351a:	e1 f7       	brne	.-8      	; 0x3514 <_Z13checkSwitchesv+0xbc>
#endif
    putEvent(0);
    351c:	10 92 49 0d 	sts	0x0D49, r1
				{
    			clearKeyEvents();
					first = 0 ;
				}

        if((i==warningStates) || (keyDown())) // check state against settings
    3520:	01 17       	cp	r16, r17
    3522:	49 f0       	breq	.+18     	; 0x3536 <_Z13checkSwitchesv+0xde>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    3524:	86 b3       	in	r24, 0x16	; 22
				{
    			clearKeyEvents();
					first = 0 ;
				}

        if((i==warningStates) || (keyDown())) // check state against settings
    3526:	80 95       	com	r24
    3528:	8e 77       	andi	r24, 0x7E	; 126
    352a:	29 f4       	brne	.+10     	; 0x3536 <_Z13checkSwitchesv+0xde>
//  UCSR1B &= ~(1 << RXEN1) ; // disable RX
//#endif
            return;  //wait for key release
        }

        check_backlight_voice() ;
    352c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_Z21check_backlight_voicev>
        wdt_reset() ;
    3530:	a8 95       	wdr
    3532:	ee 24       	eor	r14, r14
    3534:	ab cf       	rjmp	.-170    	; 0x348c <_Z13checkSwitchesv+0x34>

    }


}
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	ff 90       	pop	r15
    3540:	ef 90       	pop	r14
    3542:	08 95       	ret

00003544 <_Z8checkTHRv>:
  	}
	}
	return 0 ;
}

void checkTHR()
    3544:	1f 93       	push	r17
    3546:	cf 93       	push	r28
    3548:	df 93       	push	r29
{
    if(g_eeGeneral.disableThrottleWarning) return;
    354a:	80 91 7b 01 	lds	r24, 0x017B
    354e:	80 fd       	sbrc	r24, 0
    3550:	4a c0       	rjmp	.+148    	; 0x35e6 <_Z8checkTHRv+0xa2>

    uint8_t thrchn=(2-(g_eeGeneral.stickMode&1));//stickMode=0123 -> thr=2121
    3552:	80 91 7c 01 	lds	r24, 0x017C
    3556:	81 70       	andi	r24, 0x01	; 1
    3558:	12 e0       	ldi	r17, 0x02	; 2
    355a:	18 1b       	sub	r17, r24
 	  
#ifndef SIMU
		getADC_osmp();   // if thr is down - do not display warning at all
    355c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_Z11getADC_osmpv>
#endif
 	  
		int16_t lowLim = g_eeGeneral.calibMid[thrchn] ;
    3560:	e1 2f       	mov	r30, r17
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	ee 0f       	add	r30, r30
    3566:	ff 1f       	adc	r31, r31
    3568:	e8 5c       	subi	r30, 0xC8	; 200
    356a:	fe 4f       	sbci	r31, 0xFE	; 254
    356c:	21 81       	ldd	r18, Z+1	; 0x01
    356e:	32 81       	ldd	r19, Z+2	; 0x02

		lowLim = (g_eeGeneral.throttleReversed ? (- lowLim) - g_eeGeneral.calibSpanPos[thrchn] : lowLim - g_eeGeneral.calibSpanNeg[thrchn]);
    3570:	80 91 7e 01 	lds	r24, 0x017E
    3574:	80 ff       	sbrs	r24, 0
    3576:	07 c0       	rjmp	.+14     	; 0x3586 <_Z8checkTHRv+0x42>
    3578:	44 27       	eor	r20, r20
    357a:	55 27       	eor	r21, r21
    357c:	42 1b       	sub	r20, r18
    357e:	53 0b       	sbc	r21, r19
    3580:	85 8d       	ldd	r24, Z+29	; 0x1d
    3582:	96 8d       	ldd	r25, Z+30	; 0x1e
    3584:	03 c0       	rjmp	.+6      	; 0x358c <_Z8checkTHRv+0x48>
    3586:	87 85       	ldd	r24, Z+15	; 0x0f
    3588:	90 89       	ldd	r25, Z+16	; 0x10
    358a:	a9 01       	movw	r20, r18
    358c:	48 1b       	sub	r20, r24
    358e:	59 0b       	sbc	r21, r25
		lowLim += THRCHK_DEADBAND ;
    3590:	ea 01       	movw	r28, r20
    3592:	60 96       	adiw	r28, 0x10	; 16
 
    if ( checkThrottlePosition( tanaIn(thrchn), thrchn, lowLim ) )
    3594:	81 2f       	mov	r24, r17
    3596:	0e 94 59 10 	call	0x20b2	; 0x20b2 <_Z6tanaInh>
    359a:	61 2f       	mov	r22, r17
    359c:	ae 01       	movw	r20, r28
    359e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_Z21checkThrottlePositionihi>
    35a2:	88 23       	and	r24, r24
    35a4:	01 f5       	brne	.+64     	; 0x35e6 <_Z8checkTHRv+0xa2>
		{
			return ;
		}

    // first - display warning
    alertMessages( PSTR(STR_THR_NOT_IDLE), PSTR(STR_RST_THROTTLE) ) ;
    35a6:	8a e1       	ldi	r24, 0x1A	; 26
    35a8:	92 e0       	ldi	r25, 0x02	; 2
    35aa:	6b e0       	ldi	r22, 0x0B	; 11
    35ac:	72 e0       	ldi	r23, 0x02	; 2
    35ae:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z13alertMessagesPKcS0_>
    refreshDiplay();
    35b2:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <_Z13refreshDiplayv>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    35b6:	86 b3       	in	r24, 0x16	; 22
static void clearKeyEvents()
{
#ifdef SIMU
    while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
    while (keyDown());  // loop until all keys are up
    35b8:	80 95       	com	r24
    35ba:	8e 77       	andi	r24, 0x7E	; 126
    35bc:	e1 f7       	brne	.-8      	; 0x35b6 <_Z8checkTHRv+0x72>
#endif
    putEvent(0);
    35be:	10 92 49 0d 	sts	0x0D49, r1
    {
#ifdef SIMU
      if (!main_thread_running) return;
      sleep(1/*ms*/);
#else
        getADC_osmp();
    35c2:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_Z11getADC_osmpv>
#endif
        check_backlight_voice() ;
    35c6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_Z21check_backlight_voicev>
        
        wdt_reset() ;
    35ca:	a8 95       	wdr
				
		    if ( checkThrottlePosition( tanaIn(thrchn), thrchn, lowLim ) )
    35cc:	81 2f       	mov	r24, r17
    35ce:	0e 94 59 10 	call	0x20b2	; 0x20b2 <_Z6tanaInh>
    35d2:	61 2f       	mov	r22, r17
    35d4:	ae 01       	movw	r20, r28
    35d6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_Z21checkThrottlePositionihi>
    35da:	88 23       	and	r24, r24
    35dc:	21 f4       	brne	.+8      	; 0x35e6 <_Z8checkTHRv+0xa2>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    35de:	86 b3       	in	r24, 0x16	; 22
				
		    if ( checkThrottlePosition( tanaIn(thrchn), thrchn, lowLim ) )
				{
					return ;
				}
				if( keyDown() )
    35e0:	80 95       	com	r24
    35e2:	8e 77       	andi	r24, 0x7E	; 126
    35e4:	71 f3       	breq	.-36     	; 0x35c2 <_Z8checkTHRv+0x7e>
        {
          return ;
        }
    }
}
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	1f 91       	pop	r17
    35ec:	08 95       	ret

000035ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh>:
		}
	}
}


void procOneVoiceAlarm( VoiceAlarmData *pvad, uint8_t i )
    35ee:	af 92       	push	r10
    35f0:	bf 92       	push	r11
    35f2:	cf 92       	push	r12
    35f4:	df 92       	push	r13
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	7c 01       	movw	r14, r24
{
	uint8_t curent_state ;
	uint8_t play = 0 ;
	curent_state = 0 ;
	int16_t ltimer = Nvs_timer[i] ;
    3604:	a6 2e       	mov	r10, r22
    3606:	bb 24       	eor	r11, r11
    3608:	f5 01       	movw	r30, r10
    360a:	ee 0f       	add	r30, r30
    360c:	ff 1f       	adc	r31, r31
    360e:	e1 57       	subi	r30, 0x71	; 113
    3610:	fa 4f       	sbci	r31, 0xFA	; 250
    3612:	c0 80       	ld	r12, Z
    3614:	d1 80       	ldd	r13, Z+1	; 0x01
		
	if ( pvad->func )		// Configured
    3616:	fc 01       	movw	r30, r24
    3618:	81 81       	ldd	r24, Z+1	; 0x01
    361a:	88 23       	and	r24, r24
    361c:	09 f4       	brne	.+2      	; 0x3620 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x32>
    361e:	74 c0       	rjmp	.+232    	; 0x3708 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x11a>
	{
  	int16_t x ;
		int16_t y = pvad->offset ;
    3620:	05 81       	ldd	r16, Z+5	; 0x05
    3622:	16 81       	ldd	r17, Z+6	; 0x06
		x = getValue( pvad->source - 1 ) ;
    3624:	80 81       	ld	r24, Z
    3626:	81 50       	subi	r24, 0x01	; 1
    3628:	0e 94 8c 14 	call	0x2918	; 0x2918 <_Z8getValueh>
    362c:	ec 01       	movw	r28, r24
  	switch (pvad->func)
    362e:	f7 01       	movw	r30, r14
    3630:	21 81       	ldd	r18, Z+1	; 0x01
    3632:	25 30       	cpi	r18, 0x05	; 5
    3634:	40 f4       	brcc	.+16     	; 0x3646 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x58>
    3636:	23 30       	cpi	r18, 0x03	; 3
    3638:	d0 f4       	brcc	.+52     	; 0x366e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x80>
    363a:	21 30       	cpi	r18, 0x01	; 1
    363c:	51 f0       	breq	.+20     	; 0x3652 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x64>
    363e:	22 30       	cpi	r18, 0x02	; 2
    3640:	09 f0       	breq	.+2      	; 0x3644 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x56>
    3642:	55 c0       	rjmp	.+170    	; 0x36ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x100>
    3644:	0d c0       	rjmp	.+26     	; 0x3660 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x72>
    3646:	25 30       	cpi	r18, 0x05	; 5
    3648:	29 f1       	breq	.+74     	; 0x3694 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xa6>
    364a:	26 30       	cpi	r18, 0x06	; 6
    364c:	09 f0       	breq	.+2      	; 0x3650 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x62>
    364e:	4f c0       	rjmp	.+158    	; 0x36ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x100>
    3650:	46 c0       	rjmp	.+140    	; 0x36de <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xf0>
		{
			case 1 :
				x = x > y ;
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	0c 17       	cp	r16, r28
    3658:	1d 07       	cpc	r17, r29
    365a:	0c f0       	brlt	.+2      	; 0x365e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x70>
    365c:	47 c0       	rjmp	.+142    	; 0x36ec <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xfe>
    365e:	44 c0       	rjmp	.+136    	; 0x36e8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xfa>
			break ;
			case 2 :
				x = x < y ;
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	c0 17       	cp	r28, r16
    3666:	d1 07       	cpc	r29, r17
    3668:	0c f0       	brlt	.+2      	; 0x366c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x7e>
    366a:	40 c0       	rjmp	.+128    	; 0x36ec <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xfe>
    366c:	3d c0       	rjmp	.+122    	; 0x36e8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xfa>
			break ;
			case 3 :
			case 4 :
				x = abs(x) ;
    366e:	97 ff       	sbrs	r25, 7
    3670:	03 c0       	rjmp	.+6      	; 0x3678 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x8a>
    3672:	90 95       	com	r25
    3674:	81 95       	neg	r24
    3676:	9f 4f       	sbci	r25, 0xFF	; 255
				x = (pvad->func == 3) ? x > y : x < y ;
    3678:	23 30       	cpi	r18, 0x03	; 3
    367a:	31 f4       	brne	.+12     	; 0x3688 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x9a>
    367c:	c0 e0       	ldi	r28, 0x00	; 0
    367e:	d0 e0       	ldi	r29, 0x00	; 0
    3680:	08 17       	cp	r16, r24
    3682:	19 07       	cpc	r17, r25
    3684:	a4 f5       	brge	.+104    	; 0x36ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x100>
    3686:	28 c0       	rjmp	.+80     	; 0x36d8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xea>
    3688:	c0 e0       	ldi	r28, 0x00	; 0
    368a:	d0 e0       	ldi	r29, 0x00	; 0
    368c:	80 17       	cp	r24, r16
    368e:	91 07       	cpc	r25, r17
    3690:	74 f5       	brge	.+92     	; 0x36ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x100>
    3692:	22 c0       	rjmp	.+68     	; 0x36d8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xea>
			break ;
//					x = abs(x) < y ;
//				break ;
			case 5 :
			{
				if ( isAgvar( pvad->source ) )
    3694:	f7 01       	movw	r30, r14
    3696:	80 81       	ld	r24, Z
}
#endif

int8_t isAgvar(uint8_t value)
{
	if ( value >= 62 )
    3698:	8e 33       	cpi	r24, 0x3E	; 62
    369a:	b0 f0       	brcs	.+44     	; 0x36c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xda>
	{
		if ( value <= 68 )
    369c:	85 34       	cpi	r24, 0x45	; 69
    369e:	a0 f4       	brcc	.+40     	; 0x36c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xda>
//				break ;
			case 5 :
			{
				if ( isAgvar( pvad->source ) )
				{
					x *= 10 ;
    36a0:	ce 01       	movw	r24, r28
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	63 e0       	ldi	r22, 0x03	; 3
    36a8:	cc 0f       	add	r28, r28
    36aa:	dd 1f       	adc	r29, r29
    36ac:	6a 95       	dec	r22
    36ae:	e1 f7       	brne	.-8      	; 0x36a8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xba>
    36b0:	c8 0f       	add	r28, r24
    36b2:	d9 1f       	adc	r29, r25
					y *= 10 ;
    36b4:	c8 01       	movw	r24, r16
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	43 e0       	ldi	r20, 0x03	; 3
    36bc:	00 0f       	add	r16, r16
    36be:	11 1f       	adc	r17, r17
    36c0:	4a 95       	dec	r20
    36c2:	e1 f7       	brne	.-8      	; 0x36bc <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xce>
    36c4:	08 0f       	add	r16, r24
    36c6:	19 1f       	adc	r17, r25
				}
    		x = abs(x-y) < 32 ;
    36c8:	ce 01       	movw	r24, r28
    36ca:	80 1b       	sub	r24, r16
    36cc:	91 0b       	sbc	r25, r17
    36ce:	4f 96       	adiw	r24, 0x1f	; 31
    36d0:	c0 e0       	ldi	r28, 0x00	; 0
    36d2:	d0 e0       	ldi	r29, 0x00	; 0
    36d4:	cf 97       	sbiw	r24, 0x3f	; 63
    36d6:	58 f4       	brcc	.+22     	; 0x36ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x100>
    36d8:	c1 e0       	ldi	r28, 0x01	; 1
    36da:	d0 e0       	ldi	r29, 0x00	; 0
    36dc:	08 c0       	rjmp	.+16     	; 0x36ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x100>
			}
			break ;
			case 6 :
				x = x == y ;
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	c0 17       	cp	r28, r16
    36e4:	d1 07       	cpc	r29, r17
    36e6:	11 f4       	brne	.+4      	; 0x36ec <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xfe>
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	ec 01       	movw	r28, r24
//						{
//							x = 0 ;	// Treat as OFF
//						}
//					}
// End of invalid telemetry detection
		if ( pvad->swtch )
    36ee:	f7 01       	movw	r30, r14
    36f0:	82 81       	ldd	r24, Z+2	; 0x02
    36f2:	88 23       	and	r24, r24
    36f4:	31 f0       	breq	.+12     	; 0x3702 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x114>
		{
			if ( getSwitch( pvad->swtch, 0 ) == 0 )
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    36fe:	88 23       	and	r24, r24
    3700:	01 f1       	breq	.+64     	; 0x3742 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x154>
			{
				x = 0 ;
			}
		}
		if ( x == 0 )
    3702:	cd 2b       	or	r28, r29
    3704:	c1 f4       	brne	.+48     	; 0x3736 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x148>
    3706:	1d c0       	rjmp	.+58     	; 0x3742 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x154>
			play = 1 ;
		}
	}
	else // No function
	{
		if ( pvad->swtch )
    3708:	f7 01       	movw	r30, r14
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	88 23       	and	r24, r24
    370e:	61 f0       	breq	.+24     	; 0x3728 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x13a>
		{
			curent_state = getSwitch( pvad->swtch, 0 ) ;
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	40 e0       	ldi	r20, 0x00	; 0
    3714:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3718:	98 2f       	mov	r25, r24
			if ( curent_state == 0 )
    371a:	88 23       	and	r24, r24
    371c:	81 f4       	brne	.+32     	; 0x373e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x150>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	cc 24       	eor	r12, r12
    3722:	ca 94       	dec	r12
    3724:	dc 2c       	mov	r13, r12
    3726:	11 c0       	rjmp	.+34     	; 0x374a <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x15c>
				ltimer = -1 ;
			}
		}
		else// No switch, no function
		{ // Check for source with numeric rate
			if ( pvad->rate >= 3 )	// A time
    3728:	f7 01       	movw	r30, r14
    372a:	83 81       	ldd	r24, Z+3	; 0x03
    372c:	83 30       	cpi	r24, 0x03	; 3
    372e:	30 f0       	brcs	.+12     	; 0x373c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x14e>
			{
				if ( pvad->vsource )
    3730:	84 81       	ldd	r24, Z+4	; 0x04
    3732:	80 76       	andi	r24, 0x60	; 96
    3734:	19 f0       	breq	.+6      	; 0x373c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x14e>
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	07 c0       	rjmp	.+14     	; 0x374a <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x15c>
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	04 c0       	rjmp	.+8      	; 0x374a <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x15c>
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	cc 24       	eor	r12, r12
    3748:	dd 24       	eor	r13, r13
					play = 1 ;
				}
			}
		}
	}
	play |= curent_state ;
    374a:	18 2f       	mov	r17, r24
    374c:	19 2b       	or	r17, r25

	if ( ( AlarmControl.VoiceCheckFlag & 2 ) == 0 )
    374e:	80 91 03 01 	lds	r24, 0x0103
    3752:	81 fd       	sbrc	r24, 1
    3754:	30 c0       	rjmp	.+96     	; 0x37b6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1c8>
    3756:	f5 01       	movw	r30, r10
    3758:	e9 57       	subi	r30, 0x79	; 121
    375a:	fa 4f       	sbci	r31, 0xFA	; 250
	{
		if ( play == 1 )
    375c:	11 30       	cpi	r17, 0x01	; 1
    375e:	b1 f4       	brne	.+44     	; 0x378c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x19e>
		{
			if ( Nvs_state[i] == 0 )
    3760:	80 81       	ld	r24, Z
    3762:	88 23       	and	r24, r24
    3764:	41 f4       	brne	.+16     	; 0x3776 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x188>
			{ // just turned ON
				if ( ( pvad->rate == 0 ) || ( pvad->rate == 2 ) )
    3766:	f7 01       	movw	r30, r14
    3768:	83 81       	ldd	r24, Z+3	; 0x03
    376a:	88 23       	and	r24, r24
    376c:	11 f0       	breq	.+4      	; 0x3772 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x184>
    376e:	82 30       	cpi	r24, 0x02	; 2
    3770:	11 f4       	brne	.+4      	; 0x3776 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x188>
    3772:	cc 24       	eor	r12, r12
    3774:	dd 24       	eor	r13, r13
				{ // ON
					ltimer = 0 ;
				}
			}
			Nvs_state[i] = 1 ;
    3776:	f5 01       	movw	r30, r10
    3778:	e9 57       	subi	r30, 0x79	; 121
    377a:	fa 4f       	sbci	r31, 0xFA	; 250
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	80 83       	st	Z, r24
			if ( ( pvad->rate == 1 ) )
    3780:	f7 01       	movw	r30, r14
    3782:	83 81       	ldd	r24, Z+3	; 0x03
    3784:	81 30       	cpi	r24, 0x01	; 1
    3786:	f9 f4       	brne	.+62     	; 0x37c6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1d8>
    3788:	10 e0       	ldi	r17, 0x00	; 0
    378a:	1d c0       	rjmp	.+58     	; 0x37c6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1d8>
				play = 0 ;
			}
		}
		else
		{
			if ( Nvs_state[i] == 1 )
    378c:	80 81       	ld	r24, Z
    378e:	81 30       	cpi	r24, 0x01	; 1
    3790:	69 f4       	brne	.+26     	; 0x37ac <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1be>
			{
				if ( ( pvad->rate == 1 ) || ( pvad->rate == 2 ) )
    3792:	f7 01       	movw	r30, r14
    3794:	93 81       	ldd	r25, Z+3	; 0x03
    3796:	89 2f       	mov	r24, r25
    3798:	81 50       	subi	r24, 0x01	; 1
    379a:	82 30       	cpi	r24, 0x02	; 2
    379c:	38 f4       	brcc	.+14     	; 0x37ac <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1be>
				{
					ltimer = 0 ;
					play = 1 ;
					if ( pvad->rate == 2 )
    379e:	92 30       	cpi	r25, 0x02	; 2
    37a0:	11 f4       	brne	.+4      	; 0x37a6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1b8>
    37a2:	12 e0       	ldi	r17, 0x02	; 2
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1ba>
    37a6:	11 e0       	ldi	r17, 0x01	; 1
    37a8:	cc 24       	eor	r12, r12
    37aa:	dd 24       	eor	r13, r13
					{
						play = 2 ;
					}
				}
			}
			Nvs_state[i] = 0 ;
    37ac:	f5 01       	movw	r30, r10
    37ae:	e9 57       	subi	r30, 0x79	; 121
    37b0:	fa 4f       	sbci	r31, 0xFA	; 250
    37b2:	10 82       	st	Z, r1
    37b4:	08 c0       	rjmp	.+16     	; 0x37c6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1d8>
		}
	}
	else
	{
		Nvs_state[i] = play ;
    37b6:	f5 01       	movw	r30, r10
    37b8:	e9 57       	subi	r30, 0x79	; 121
    37ba:	fa 4f       	sbci	r31, 0xFA	; 250
    37bc:	10 83       	st	Z, r17
    37be:	10 e0       	ldi	r17, 0x00	; 0
    37c0:	cc 24       	eor	r12, r12
    37c2:	ca 94       	dec	r12
    37c4:	dc 2c       	mov	r13, r12
		ltimer = -1 ;
		play = 0 ;
	}

	if ( pvad->mute )
    37c6:	f7 01       	movw	r30, r14
    37c8:	84 81       	ldd	r24, Z+4	; 0x04
    37ca:	87 ff       	sbrs	r24, 7
    37cc:	09 c0       	rjmp	.+18     	; 0x37e0 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1f2>
	{
		if ( pvad->source > ( CHOUT_BASE - NUM_CHNOUT ) )
    37ce:	80 81       	ld	r24, Z
    37d0:	85 30       	cpi	r24, 0x05	; 5
    37d2:	30 f0       	brcs	.+12     	; 0x37e0 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1f2>
		{ // Telemetry item
			if ( !telemItemValid( pvad->source - 1 - CHOUT_BASE - NUM_CHNOUT ) )
    37d4:	85 52       	subi	r24, 0x25	; 37
    37d6:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z14telemItemValidh>
    37da:	88 23       	and	r24, r24
    37dc:	09 f4       	brne	.+2      	; 0x37e0 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1f2>
    37de:	65 c0       	rjmp	.+202    	; 0x38aa <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x2bc>
				play = 0 ;	// Mute it
			}
		}
	}

	if ( play )
    37e0:	11 23       	and	r17, r17
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1f8>
    37e4:	62 c0       	rjmp	.+196    	; 0x38aa <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x2bc>
	{
		if ( ltimer < 0 )
    37e6:	d7 fe       	sbrs	r13, 7
    37e8:	05 c0       	rjmp	.+10     	; 0x37f4 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x206>
		{
			if ( pvad->rate >= 3 )	// A time
    37ea:	f7 01       	movw	r30, r14
    37ec:	83 81       	ldd	r24, Z+3	; 0x03
    37ee:	83 30       	cpi	r24, 0x03	; 3
    37f0:	28 f4       	brcc	.+10     	; 0x37fc <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x20e>
    37f2:	5b c0       	rjmp	.+182    	; 0x38aa <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x2bc>
			{
				ltimer = 0 ;
			}
		}
		if ( ltimer == 0 )
    37f4:	c1 14       	cp	r12, r1
    37f6:	d1 04       	cpc	r13, r1
    37f8:	09 f0       	breq	.+2      	; 0x37fc <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x20e>
    37fa:	45 c0       	rjmp	.+138    	; 0x3886 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x298>
		{
			if ( pvad->vsource == 1 )
    37fc:	f7 01       	movw	r30, r14
    37fe:	84 81       	ldd	r24, Z+4	; 0x04
    3800:	80 76       	andi	r24, 0x60	; 96
    3802:	80 32       	cpi	r24, 0x20	; 32
    3804:	19 f4       	brne	.+6      	; 0x380c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x21e>
			{
				doVoiceAlarmSource( pvad ) ;
    3806:	c7 01       	movw	r24, r14
    3808:	0e 94 c7 14 	call	0x298e	; 0x298e <_Z18doVoiceAlarmSourceP12t_voiceAlarm>
//								voice_numeric( value, 0, 0 ) ;
//							}
//						}
//					}
			}
			if ( pvad->fnameType == 0 )	// None
    380c:	f7 01       	movw	r30, r14
    380e:	84 81       	ldd	r24, Z+4	; 0x04
    3810:	87 70       	andi	r24, 0x07	; 7
    3812:	81 f0       	breq	.+32     	; 0x3834 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x246>
			{
				// Nothing!
			}
			else if ( pvad->fnameType == 1 )	// Name
    3814:	81 30       	cpi	r24, 0x01	; 1
    3816:	41 f4       	brne	.+16     	; 0x3828 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x23a>
//					}
//					putUserVoice( name, 0 ) ;
//				}
//				else if ( pvad->fnameType == 2 )	// Number
			{
				putVoiceQueueLong( pvad->vfile +( play - 1 ) ) ;
    3818:	87 81       	ldd	r24, Z+7	; 0x07
    381a:	90 85       	ldd	r25, Z+8	; 0x08
    381c:	01 97       	sbiw	r24, 0x01	; 1
    381e:	81 0f       	add	r24, r17
    3820:	91 1d       	adc	r25, r1
    3822:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
    3826:	06 c0       	rjmp	.+12     	; 0x3834 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x246>
			}
			else
			{ // Audio
				audioEvent( pvad->vfile, 0 ) ;
    3828:	f7 01       	movw	r30, r14
    382a:	87 81       	ldd	r24, Z+7	; 0x07
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	0e 94 dc 79 	call	0xf3b8	; 0xf3b8 <_Z10audioEventhj>
			}
			if ( pvad->vsource == 2 )
    3834:	f7 01       	movw	r30, r14
    3836:	84 81       	ldd	r24, Z+4	; 0x04
    3838:	80 76       	andi	r24, 0x60	; 96
    383a:	80 34       	cpi	r24, 0x40	; 64
    383c:	19 f4       	brne	.+6      	; 0x3844 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x256>
			{
				doVoiceAlarmSource( pvad ) ;
    383e:	c7 01       	movw	r24, r14
    3840:	0e 94 c7 14 	call	0x298e	; 0x298e <_Z18doVoiceAlarmSourceP12t_voiceAlarm>
//								voice_numeric( value, 0, 0 ) ;
//							}
//						}
//					}
			}
      if ( pvad->haptic )
    3844:	f7 01       	movw	r30, r14
    3846:	84 81       	ldd	r24, Z+4	; 0x04
    3848:	28 2f       	mov	r18, r24
    384a:	28 71       	andi	r18, 0x18	; 24
    384c:	81 f0       	breq	.+32     	; 0x386e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x280>
			{
				audioDefevent( (pvad->haptic > 1) ? ( ( pvad->haptic == 3 ) ? AU_HAPTIC3 : AU_HAPTIC2 ) : AU_HAPTIC1 ) ;
    384e:	86 95       	lsr	r24
    3850:	86 95       	lsr	r24
    3852:	86 95       	lsr	r24
    3854:	83 70       	andi	r24, 0x03	; 3
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	02 97       	sbiw	r24, 0x02	; 2
    385a:	14 f4       	brge	.+4      	; 0x3860 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x272>
    385c:	8d e0       	ldi	r24, 0x0D	; 13
    385e:	05 c0       	rjmp	.+10     	; 0x386a <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x27c>
    3860:	28 31       	cpi	r18, 0x18	; 24
    3862:	11 f0       	breq	.+4      	; 0x3868 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x27a>
    3864:	8e e0       	ldi	r24, 0x0E	; 14
    3866:	01 c0       	rjmp	.+2      	; 0x386a <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x27c>
    3868:	8f e0       	ldi	r24, 0x0F	; 15
    386a:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
			}
			if ( pvad->rate < 3 )	// ON/OFF/BOTH
    386e:	f7 01       	movw	r30, r14
    3870:	83 81       	ldd	r24, Z+3	; 0x03
    3872:	83 30       	cpi	r24, 0x03	; 3
    3874:	20 f0       	brcs	.+8      	; 0x387e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x290>
    3876:	31 e0       	ldi	r19, 0x01	; 1
    3878:	c3 2e       	mov	r12, r19
    387a:	d1 2c       	mov	r13, r1
    387c:	16 c0       	rjmp	.+44     	; 0x38aa <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x2bc>
    387e:	cc 24       	eor	r12, r12
    3880:	ca 94       	dec	r12
    3882:	dc 2c       	mov	r13, r12
    3884:	12 c0       	rjmp	.+36     	; 0x38aa <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x2bc>
			else
			{
				ltimer = 1 ;
			}
		}
		else if ( ltimer > 0 )
    3886:	1c 14       	cp	r1, r12
    3888:	1d 04       	cpc	r1, r13
    388a:	7c f4       	brge	.+30     	; 0x38aa <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x2bc>
		{
			ltimer += 1 ;
    388c:	08 94       	sec
    388e:	c1 1c       	adc	r12, r1
    3890:	d1 1c       	adc	r13, r1
			if ( ltimer > ( (pvad->rate-2) * 10 ) )
    3892:	f7 01       	movw	r30, r14
    3894:	83 81       	ldd	r24, Z+3	; 0x03
    3896:	2a e0       	ldi	r18, 0x0A	; 10
    3898:	82 9f       	mul	r24, r18
    389a:	c0 01       	movw	r24, r0
    389c:	11 24       	eor	r1, r1
    389e:	43 97       	sbiw	r24, 0x13	; 19
    38a0:	c8 16       	cp	r12, r24
    38a2:	d9 06       	cpc	r13, r25
    38a4:	14 f0       	brlt	.+4      	; 0x38aa <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x2bc>
    38a6:	cc 24       	eor	r12, r12
    38a8:	dd 24       	eor	r13, r13
				ltimer = 0 ;
			}
		}
	}
	pvad += 1 ;
	Nvs_timer[i] = ltimer ;
    38aa:	aa 0c       	add	r10, r10
    38ac:	bb 1c       	adc	r11, r11
    38ae:	8f e8       	ldi	r24, 0x8F	; 143
    38b0:	95 e0       	ldi	r25, 0x05	; 5
    38b2:	a8 0e       	add	r10, r24
    38b4:	b9 1e       	adc	r11, r25
    38b6:	f5 01       	movw	r30, r10
    38b8:	d1 82       	std	Z+1, r13	; 0x01
    38ba:	c0 82       	st	Z, r12
}
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	ff 90       	pop	r15
    38c6:	ef 90       	pop	r14
    38c8:	df 90       	pop	r13
    38ca:	cf 90       	pop	r12
    38cc:	bf 90       	pop	r11
    38ce:	af 90       	pop	r10
    38d0:	08 95       	ret

000038d2 <_Z18processVoiceAlarmsv>:

NOINLINE void processVoiceAlarms()
    38d2:	1f 93       	push	r17
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
    38d8:	c3 e2       	ldi	r28, 0x23	; 35
    38da:	d5 e0       	ldi	r29, 0x05	; 5
    38dc:	10 e0       	ldi	r17, 0x00	; 0
	VoiceAlarmData *pvad = &g_model.vad[0] ;
//	FORCE_INDIRECT(pvad) ;

	for ( i = 0 ; i < NUM_VOICE_ALARMS ; i += 1 )
	{
		procOneVoiceAlarm( pvad, i ) ;
    38de:	ce 01       	movw	r24, r28
    38e0:	61 2f       	mov	r22, r17
    38e2:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh>
		pvad += 1 ;		
    38e6:	29 96       	adiw	r28, 0x09	; 9
	uint8_t i ;
//	uint8_t curent_state ;
	VoiceAlarmData *pvad = &g_model.vad[0] ;
//	FORCE_INDIRECT(pvad) ;

	for ( i = 0 ; i < NUM_VOICE_ALARMS ; i += 1 )
    38e8:	1f 5f       	subi	r17, 0xFF	; 255
    38ea:	18 30       	cpi	r17, 0x08	; 8
    38ec:	c1 f7       	brne	.-16     	; 0x38de <_Z18processVoiceAlarmsv+0xc>
	{
		procOneVoiceAlarm( pvad, i ) ;
		pvad += 1 ;		
	}
}
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	1f 91       	pop	r17
    38f4:	08 95       	ret

000038f6 <_Z12mainSequencev>:
#endif


void mainSequence()
    38f6:	7f 92       	push	r7
    38f8:	8f 92       	push	r8
    38fa:	9f 92       	push	r9
    38fc:	af 92       	push	r10
    38fe:	bf 92       	push	r11
    3900:	cf 92       	push	r12
    3902:	df 92       	push	r13
    3904:	ef 92       	push	r14
    3906:	ff 92       	push	r15
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
{
	CalcScaleNest = 0 ;
    3910:	10 92 b0 06 	sts	0x06B0, r1
}

static uint16_t getTmr16KHz()
{
    while(1){
        uint8_t hb  = g_tmr16KHz;
    3914:	00 91 45 06 	lds	r16, 0x0645
        uint8_t lb  = TCNT0;
    3918:	f2 b6       	in	r15, 0x32	; 50
        if(hb-g_tmr16KHz==0) return (hb<<8)|lb;
    391a:	80 91 45 06 	lds	r24, 0x0645
    391e:	08 17       	cp	r16, r24
    3920:	c9 f7       	brne	.-14     	; 0x3914 <_Z12mainSequencev+0x1e>
void mainSequence()
{
	CalcScaleNest = 0 ;
  
	uint16_t t0 = getTmr16KHz();
	uint8_t numSafety = 16 - g_model.numVoice ;
    3922:	80 91 26 04 	lds	r24, 0x0426
    3926:	8f 71       	andi	r24, 0x1F	; 31
    3928:	a0 e1       	ldi	r26, 0x10	; 16
    392a:	7a 2e       	mov	r7, r26
    392c:	78 1a       	sub	r7, r24
//    {
//        getADC_filt() ;
//    }
//    else if ( g_eeGeneral.filterInput == 2)
//    {
  getADC_osmp() ;
    392e:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_Z11getADC_osmpv>
//    }
//    else
//    {
//        getADC_single() ;
//    }
  ADMUX=0x1E|ADC_VREF_TYPE;   // Select bandgap
    3932:	1e e5       	ldi	r17, 0x5E	; 94
    3934:	17 b9       	out	0x07, r17	; 7
	pollRotary() ;
    3936:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_Z10pollRotaryv>
  perMain();      // Give bandgap plenty of time to settle
    393a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <_Z7perMainv>
//    }
//}

static void getADC_bandgap()
{
    ADMUX=0x1E|ADC_VREF_TYPE;
    393e:	17 b9       	out	0x07, r17	; 7
    //  ADCSRA|=0x40;
    // Wait for the AD conversion to complete
    //  while ((ADCSRA & 0x10)==0);
    //  ADCSRA|=0x10;
    // Do it twice, first conversion may be wrong
    ADCSRA|=0x40;
    3940:	36 9a       	sbi	0x06, 6	; 6
    // Wait for the AD conversion to complete
    while (ADCSRA & 0x40) ;
    3942:	36 99       	sbic	0x06, 6	; 6
    3944:	fe cf       	rjmp	.-4      	; 0x3942 <_Z12mainSequencev+0x4c>
//    ADCSRA|=0x10;
    BandGap = (BandGap * 7 + ADC + 4 ) >> 3 ;
    3946:	24 b1       	in	r18, 0x04	; 4
    3948:	35 b1       	in	r19, 0x05	; 5
    394a:	2c 5f       	subi	r18, 0xFC	; 252
    394c:	3f 4f       	sbci	r19, 0xFF	; 255
    394e:	40 91 04 01 	lds	r20, 0x0104
    3952:	50 91 05 01 	lds	r21, 0x0105
    3956:	ca 01       	movw	r24, r20
    3958:	f3 e0       	ldi	r31, 0x03	; 3
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	fa 95       	dec	r31
    3960:	e1 f7       	brne	.-8      	; 0x395a <_Z12mainSequencev+0x64>
    3962:	84 1b       	sub	r24, r20
    3964:	95 0b       	sbc	r25, r21
    3966:	28 0f       	add	r18, r24
    3968:	39 1f       	adc	r19, r25
    396a:	e3 e0       	ldi	r30, 0x03	; 3
    396c:	36 95       	lsr	r19
    396e:	27 95       	ror	r18
    3970:	ea 95       	dec	r30
    3972:	e1 f7       	brne	.-8      	; 0x396c <_Z12mainSequencev+0x76>
    3974:	30 93 05 01 	sts	0x0105, r19
    3978:	20 93 04 01 	sts	0x0104, r18
  ADMUX=0x1E|ADC_VREF_TYPE;   // Select bandgap
	pollRotary() ;
  perMain();      // Give bandgap plenty of time to settle
  getADC_bandgap() ;
  //while(get_tmr10ms()==old10ms) sleep_mode();
  if(heartbeat == 0x3)
    397c:	80 91 0b 0e 	lds	r24, 0x0E0B
    3980:	83 30       	cpi	r24, 0x03	; 3
    3982:	19 f4       	brne	.+6      	; 0x398a <_Z12mainSequencev+0x94>
  {
      wdt_reset();
    3984:	a8 95       	wdr
      heartbeat = 0;
    3986:	10 92 0b 0e 	sts	0x0E0B, r1
}

static uint16_t getTmr16KHz()
{
    while(1){
        uint8_t hb  = g_tmr16KHz;
    398a:	40 91 45 06 	lds	r20, 0x0645
        uint8_t lb  = TCNT0;
    398e:	52 b7       	in	r21, 0x32	; 50
        if(hb-g_tmr16KHz==0) return (hb<<8)|lb;
    3990:	80 91 45 06 	lds	r24, 0x0645
    3994:	48 17       	cp	r20, r24
    3996:	c9 f7       	brne	.-14     	; 0x398a <_Z12mainSequencev+0x94>
    3998:	30 2f       	mov	r19, r16
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	8f 2d       	mov	r24, r15
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	28 2b       	or	r18, r24
    39a2:	39 2b       	or	r19, r25
  if(heartbeat == 0x3)
  {
      wdt_reset();
      heartbeat = 0;
  }
  t0 = getTmr16KHz() - t0;
    39a4:	94 2f       	mov	r25, r20
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	45 2f       	mov	r20, r21
    39aa:	50 e0       	ldi	r21, 0x00	; 0
    39ac:	48 2b       	or	r20, r24
    39ae:	59 2b       	or	r21, r25
    39b0:	42 1b       	sub	r20, r18
    39b2:	53 0b       	sbc	r21, r19
  if ( t0 > g_latency.g_timeMain ) g_latency.g_timeMain = t0 ;
    39b4:	80 91 08 01 	lds	r24, 0x0108
    39b8:	90 91 09 01 	lds	r25, 0x0109
    39bc:	84 17       	cp	r24, r20
    39be:	95 07       	cpc	r25, r21
    39c0:	20 f4       	brcc	.+8      	; 0x39ca <_Z12mainSequencev+0xd4>
    39c2:	50 93 09 01 	sts	0x0109, r21
    39c6:	40 93 08 01 	sts	0x0108, r20
  
  if ( AlarmControl.VoiceCheckFlag )		// Every 100 mS
    39ca:	80 91 03 01 	lds	r24, 0x0103
    39ce:	88 23       	and	r24, r24
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <_Z12mainSequencev+0xde>
    39d2:	53 c1       	rjmp	.+678    	; 0x3c7a <_Z12mainSequencev+0x384>
  {
		uint8_t i ;
		static uint16_t timer ;
    
		timer += 1 ;
    39d4:	80 91 49 06 	lds	r24, 0x0649
    39d8:	90 91 4a 06 	lds	r25, 0x064A
    39dc:	01 96       	adiw	r24, 0x01	; 1
    39de:	90 93 4a 06 	sts	0x064A, r25
    39e2:	80 93 49 06 	sts	0x0649, r24
    39e6:	c7 2c       	mov	r12, r7
    39e8:	81 c0       	rjmp	.+258    	; 0x3aec <_Z12mainSequencev+0x1f6>
//#endif
		{
			uint8_t curent_state ;
			uint8_t mode ;
			uint8_t value ;
    	SafetySwData *sd = &g_model.safetySw[i];
    39ea:	ec 2c       	mov	r14, r12
    39ec:	ff 24       	eor	r15, r15
//#if defined(CPUM128) || defined(CPUM2561)
    	if ( i >= NUM_CHNOUT )
    39ee:	8f e0       	ldi	r24, 0x0F	; 15
    39f0:	8c 15       	cp	r24, r12
    39f2:	30 f0       	brcs	.+12     	; 0x3a00 <_Z12mainSequencev+0x10a>
//#endif
		{
			uint8_t curent_state ;
			uint8_t mode ;
			uint8_t value ;
    	SafetySwData *sd = &g_model.safetySw[i];
    39f4:	e7 01       	movw	r28, r14
    39f6:	cc 0f       	add	r28, r28
    39f8:	dd 1f       	adc	r29, r29
    39fa:	c9 5d       	subi	r28, 0xD9	; 217
    39fc:	db 4f       	sbci	r29, 0xFB	; 251
    39fe:	05 c0       	rjmp	.+10     	; 0x3a0a <_Z12mainSequencev+0x114>
//#if defined(CPUM128) || defined(CPUM2561)
    	if ( i >= NUM_CHNOUT )
			{
				sd = &g_model.xvoiceSw[i-NUM_CHNOUT];
    3a00:	e7 01       	movw	r28, r14
    3a02:	cc 0f       	add	r28, r28
    3a04:	dd 1f       	adc	r29, r29
    3a06:	c5 57       	subi	r28, 0x75	; 117
    3a08:	db 4f       	sbci	r29, 0xFB	; 251
			}
//#endif

			mode = sd->opt.vs.vmode ;
    3a0a:	18 81       	ld	r17, Y
    3a0c:	12 95       	swap	r17
    3a0e:	16 95       	lsr	r17
    3a10:	17 70       	andi	r17, 0x07	; 7
			value = sd->opt.vs.vval ;
    3a12:	09 81       	ldd	r16, Y+1	; 0x01
			if ( mode <= 5 )
    3a14:	16 30       	cpi	r17, 0x06	; 6
    3a16:	48 f4       	brcc	.+18     	; 0x3a2a <_Z12mainSequencev+0x134>
			{
				if ( value > 250 )
    3a18:	0b 3f       	cpi	r16, 0xFB	; 251
    3a1a:	38 f0       	brcs	.+14     	; 0x3a2a <_Z12mainSequencev+0x134>
				{
					value = g_model.gvars[value-248].gvar ; //Gvars 3-7
    3a1c:	e0 2f       	mov	r30, r16
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	ee 0f       	add	r30, r30
    3a22:	ff 1f       	adc	r31, r31
    3a24:	ef 58       	subi	r30, 0x8F	; 143
    3a26:	fd 4f       	sbci	r31, 0xFD	; 253
    3a28:	00 81       	ld	r16, Z
				}
			}

			if ( sd->opt.vs.vswtch )		// Configured
    3a2a:	88 81       	ld	r24, Y
    3a2c:	8f 71       	andi	r24, 0x1F	; 31
    3a2e:	09 f4       	brne	.+2      	; 0x3a32 <_Z12mainSequencev+0x13c>
    3a30:	5c c0       	rjmp	.+184    	; 0x3aea <_Z12mainSequencev+0x1f4>
			{
				curent_state = getSwitch( sd->opt.vs.vswtch, 0 ) ;
    3a32:	60 e0       	ldi	r22, 0x00	; 0
    3a34:	40 e0       	ldi	r20, 0x00	; 0
    3a36:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3a3a:	d8 2e       	mov	r13, r24
				if ( ( AlarmControl.VoiceCheckFlag & 2) == 0 )
    3a3c:	80 91 03 01 	lds	r24, 0x0103
    3a40:	81 fd       	sbrc	r24, 1
    3a42:	4d c0       	rjmp	.+154    	; 0x3ade <_Z12mainSequencev+0x1e8>
				{
					if ( ( mode == 0 ) || ( mode == 2 ) )
    3a44:	11 23       	and	r17, r17
    3a46:	11 f0       	breq	.+4      	; 0x3a4c <_Z12mainSequencev+0x156>
    3a48:	12 30       	cpi	r17, 0x02	; 2
    3a4a:	61 f4       	brne	.+24     	; 0x3a64 <_Z12mainSequencev+0x16e>
					{ // ON
						if ( ( Vs_state[i] == 0 ) && curent_state )
    3a4c:	f7 01       	movw	r30, r14
    3a4e:	e1 59       	subi	r30, 0x91	; 145
    3a50:	fa 4f       	sbci	r31, 0xFA	; 250
    3a52:	80 81       	ld	r24, Z
    3a54:	88 23       	and	r24, r24
    3a56:	31 f4       	brne	.+12     	; 0x3a64 <_Z12mainSequencev+0x16e>
    3a58:	dd 20       	and	r13, r13
    3a5a:	21 f0       	breq	.+8      	; 0x3a64 <_Z12mainSequencev+0x16e>
}


void putVoiceQueue( uint8_t value )
{
	putVoiceQueueLong( value ) ;
    3a5c:	80 2f       	mov	r24, r16
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
						if ( ( Vs_state[i] == 0 ) && curent_state )
						{
							putVoiceQueue( value ) ;
						}
					}
					if ( ( mode == 1 ) || ( mode == 2 ) )
    3a64:	81 2f       	mov	r24, r17
    3a66:	81 50       	subi	r24, 0x01	; 1
    3a68:	82 30       	cpi	r24, 0x02	; 2
    3a6a:	78 f4       	brcc	.+30     	; 0x3a8a <_Z12mainSequencev+0x194>
					{ // OFF
						if ( ( Vs_state[i] == 1 ) && !curent_state )
    3a6c:	f7 01       	movw	r30, r14
    3a6e:	e1 59       	subi	r30, 0x91	; 145
    3a70:	fa 4f       	sbci	r31, 0xFA	; 250
    3a72:	80 81       	ld	r24, Z
    3a74:	81 30       	cpi	r24, 0x01	; 1
    3a76:	49 f4       	brne	.+18     	; 0x3a8a <_Z12mainSequencev+0x194>
    3a78:	dd 20       	and	r13, r13
    3a7a:	39 f4       	brne	.+14     	; 0x3a8a <_Z12mainSequencev+0x194>
						{
//							uint8_t x ;
//							x = sd->opt.vs.vval ;
							if ( mode == 2 )
    3a7c:	12 30       	cpi	r17, 0x02	; 2
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <_Z12mainSequencev+0x18c>
							{
								value += 1 ;							
    3a80:	0f 5f       	subi	r16, 0xFF	; 255
}


void putVoiceQueue( uint8_t value )
{
	putVoiceQueueLong( value ) ;
    3a82:	80 2f       	mov	r24, r16
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
								value += 1 ;							
							}
							putVoiceQueue( value ) ;
						}
					}
					if ( mode > 5 )
    3a8a:	16 30       	cpi	r17, 0x06	; 6
    3a8c:	60 f0       	brcs	.+24     	; 0x3aa6 <_Z12mainSequencev+0x1b0>
					{
						if ( ( Vs_state[i] == 0 ) && curent_state )
    3a8e:	f7 01       	movw	r30, r14
    3a90:	e1 59       	subi	r30, 0x91	; 145
    3a92:	fa 4f       	sbci	r31, 0xFA	; 250
    3a94:	80 81       	ld	r24, Z
    3a96:	88 23       	and	r24, r24
    3a98:	11 f5       	brne	.+68     	; 0x3ade <_Z12mainSequencev+0x1e8>
    3a9a:	dd 20       	and	r13, r13
    3a9c:	01 f1       	breq	.+64     	; 0x3ade <_Z12mainSequencev+0x1e8>
						{
							voice_telem_item( sd->opt.vs.vval ) ;
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z16voice_telem_itemh>
    3aa4:	1c c0       	rjmp	.+56     	; 0x3ade <_Z12mainSequencev+0x1e8>
						}					
					}
					else if ( mode > 2 )
    3aa6:	13 30       	cpi	r17, 0x03	; 3
    3aa8:	d0 f0       	brcs	.+52     	; 0x3ade <_Z12mainSequencev+0x1e8>
					{ // 15, 30 or 60 secs
						if ( curent_state )
    3aaa:	dd 20       	and	r13, r13
    3aac:	c1 f0       	breq	.+48     	; 0x3ade <_Z12mainSequencev+0x1e8>
						{
							uint16_t mask ;
							mask = 150 ;
							if ( mode == 4 ) mask = 300 ;
    3aae:	14 30       	cpi	r17, 0x04	; 4
    3ab0:	19 f4       	brne	.+6      	; 0x3ab8 <_Z12mainSequencev+0x1c2>
    3ab2:	6c e2       	ldi	r22, 0x2C	; 44
    3ab4:	71 e0       	ldi	r23, 0x01	; 1
    3ab6:	07 c0       	rjmp	.+14     	; 0x3ac6 <_Z12mainSequencev+0x1d0>
							if ( mode == 5 ) mask = 600 ;
    3ab8:	15 30       	cpi	r17, 0x05	; 5
    3aba:	19 f4       	brne	.+6      	; 0x3ac2 <_Z12mainSequencev+0x1cc>
    3abc:	68 e5       	ldi	r22, 0x58	; 88
    3abe:	72 e0       	ldi	r23, 0x02	; 2
    3ac0:	02 c0       	rjmp	.+4      	; 0x3ac6 <_Z12mainSequencev+0x1d0>
    3ac2:	66 e9       	ldi	r22, 0x96	; 150
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
							if ( timer % mask == 0 )
    3ac6:	80 91 49 06 	lds	r24, 0x0649
    3aca:	90 91 4a 06 	lds	r25, 0x064A
    3ace:	0e 94 84 7e 	call	0xfd08	; 0xfd08 <__udivmodhi4>
    3ad2:	89 2b       	or	r24, r25
    3ad4:	21 f4       	brne	.+8      	; 0x3ade <_Z12mainSequencev+0x1e8>
}


void putVoiceQueue( uint8_t value )
{
	putVoiceQueueLong( value ) ;
    3ad6:	80 2f       	mov	r24, r16
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
								putVoiceQueue( value ) ;
							}
						}
					}
				}
				Vs_state[i] = curent_state ;
    3ade:	ef e6       	ldi	r30, 0x6F	; 111
    3ae0:	f5 e0       	ldi	r31, 0x05	; 5
    3ae2:	ee 0e       	add	r14, r30
    3ae4:	ff 1e       	adc	r15, r31
    3ae6:	f7 01       	movw	r30, r14
    3ae8:	d0 82       	st	Z, r13
		static uint16_t timer ;
    
		timer += 1 ;

//#if defined(CPUM128) || defined(CPUM2561)
		for ( i = numSafety ; i < NUM_CHNOUT+EXTRA_VOICE_SW ; i += 1 )
    3aea:	c3 94       	inc	r12
    3aec:	f7 e1       	ldi	r31, 0x17	; 23
    3aee:	fc 15       	cp	r31, r12
    3af0:	08 f0       	brcs	.+2      	; 0x3af4 <_Z12mainSequencev+0x1fe>
    3af2:	7b cf       	rjmp	.-266    	; 0x39ea <_Z12mainSequencev+0xf4>
    3af4:	4c e2       	ldi	r20, 0x2C	; 44
    3af6:	84 2e       	mov	r8, r20
    3af8:	41 e0       	ldi	r20, 0x01	; 1
    3afa:	94 2e       	mov	r9, r20
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	c3 2e       	mov	r12, r19
    3b00:	34 e0       	ldi	r19, 0x04	; 4
    3b02:	d3 2e       	mov	r13, r19
    3b04:	2e ee       	ldi	r18, 0xEE	; 238
    3b06:	a2 2e       	mov	r10, r18
    3b08:	25 e0       	ldi	r18, 0x05	; 5
    3b0a:	b2 2e       	mov	r11, r18
    3b0c:	00 e0       	ldi	r16, 0x00	; 0
    3b0e:	10 e0       	ldi	r17, 0x00	; 0
    return time ;
}

uint8_t CS_STATE( uint8_t x)
{
	return pgm_read_byte(csTypeTable+x-1) ;
    3b10:	f8 01       	movw	r30, r16
    3b12:	ee 0f       	add	r30, r30
    3b14:	ff 1f       	adc	r31, r31
    3b16:	e0 0f       	add	r30, r16
    3b18:	f1 1f       	adc	r31, r17
    3b1a:	ee 5f       	subi	r30, 0xFE	; 254
    3b1c:	fb 4f       	sbci	r31, 0xFB	; 251
    3b1e:	e0 81       	ld	r30, Z
    3b20:	ef 70       	andi	r30, 0x0F	; 15
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	e9 5a       	subi	r30, 0xA9	; 169
    3b26:	fd 4f       	sbci	r31, 0xFD	; 253
    3b28:	e4 91       	lpm	r30, Z+
		for ( i = 0 ; i < NUM_CSW ; i += 1 )
		{
    	CSwData *cs = &g_model.customSw[i];
    	uint8_t cstate = CS_STATE(cs->func);

    	if(cstate == CS_TIMER)
    3b2a:	e3 30       	cpi	r30, 0x03	; 3
    3b2c:	09 f0       	breq	.+2      	; 0x3b30 <_Z12mainSequencev+0x23a>
    3b2e:	4b c0       	rjmp	.+150    	; 0x3bc6 <_Z12mainSequencev+0x2d0>
			{
				int16_t y ;
				y = CsTimer[i] ;
    3b30:	f5 01       	movw	r30, r10
    3b32:	80 81       	ld	r24, Z
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
				if ( y == 0 )
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	79 f4       	brne	.+30     	; 0x3b58 <_Z12mainSequencev+0x262>
				{
					int8_t z ;
					z = cs->v1 ;
    3b3a:	f6 01       	movw	r30, r12
    3b3c:	80 81       	ld	r24, Z
					if ( z >= 0 )
    3b3e:	87 fd       	sbrc	r24, 7
    3b40:	06 c0       	rjmp	.+12     	; 0x3b4e <_Z12mainSequencev+0x258>
					{
						z = -z-1 ;
						y = z * 10 ;					
    3b42:	80 95       	com	r24
    3b44:	fa e0       	ldi	r31, 0x0A	; 10
    3b46:	8f 02       	muls	r24, r31
    3b48:	e0 01       	movw	r28, r0
    3b4a:	11 24       	eor	r1, r1
    3b4c:	1d c0       	rjmp	.+58     	; 0x3b88 <_Z12mainSequencev+0x292>
					}
					else
					{
						y = z ;
    3b4e:	c8 2f       	mov	r28, r24
    3b50:	dd 27       	eor	r29, r29
    3b52:	c7 fd       	sbrc	r28, 7
    3b54:	d0 95       	com	r29
    3b56:	18 c0       	rjmp	.+48     	; 0x3b88 <_Z12mainSequencev+0x292>
					}
				}
				else if ( y < 0 )
    3b58:	97 ff       	sbrs	r25, 7
    3b5a:	14 c0       	rjmp	.+40     	; 0x3b84 <_Z12mainSequencev+0x28e>
				{
					if ( ++y == 0 )
    3b5c:	ec 01       	movw	r28, r24
    3b5e:	21 96       	adiw	r28, 0x01	; 1
    3b60:	99 f4       	brne	.+38     	; 0x3b88 <_Z12mainSequencev+0x292>
					{
						int8_t z ;
						z = cs->v2 ;
    3b62:	f6 01       	movw	r30, r12
    3b64:	81 81       	ldd	r24, Z+1	; 0x01
						if ( z >= 0 )
    3b66:	87 fd       	sbrc	r24, 7
    3b68:	06 c0       	rjmp	.+12     	; 0x3b76 <_Z12mainSequencev+0x280>
						{
							z += 1 ;
    3b6a:	8f 5f       	subi	r24, 0xFF	; 255
							y = z * 10 - 1  ;
    3b6c:	fa e0       	ldi	r31, 0x0A	; 10
    3b6e:	8f 02       	muls	r24, r31
    3b70:	e0 01       	movw	r28, r0
    3b72:	11 24       	eor	r1, r1
    3b74:	08 c0       	rjmp	.+16     	; 0x3b86 <_Z12mainSequencev+0x290>
						}
						else
						{
							y = -z-1 ;
    3b76:	c8 2f       	mov	r28, r24
    3b78:	dd 27       	eor	r29, r29
    3b7a:	c7 fd       	sbrc	r28, 7
    3b7c:	d0 95       	com	r29
    3b7e:	c0 95       	com	r28
    3b80:	d0 95       	com	r29
    3b82:	02 c0       	rjmp	.+4      	; 0x3b88 <_Z12mainSequencev+0x292>
						}
					}
				}
				else  // if ( CsTimer[i] > 0 )
				{
					y -= 1 ;
    3b84:	ec 01       	movw	r28, r24
    3b86:	21 97       	sbiw	r28, 0x01	; 1
				}
				if ( cs->andsw )
    3b88:	98 01       	movw	r18, r16
    3b8a:	22 0f       	add	r18, r18
    3b8c:	33 1f       	adc	r19, r19
    3b8e:	20 0f       	add	r18, r16
    3b90:	31 1f       	adc	r19, r17
    3b92:	f9 01       	movw	r30, r18
    3b94:	e0 50       	subi	r30, 0x00	; 0
    3b96:	fc 4f       	sbci	r31, 0xFC	; 252
    3b98:	82 81       	ldd	r24, Z+2	; 0x02
    3b9a:	80 7f       	andi	r24, 0xF0	; 240
    3b9c:	89 f0       	breq	.+34     	; 0x3bc0 <_Z12mainSequencev+0x2ca>
				{
					int8_t x ;
					x = cs->andsw ;
    3b9e:	f9 01       	movw	r30, r18
    3ba0:	ee 5f       	subi	r30, 0xFE	; 254
    3ba2:	fb 4f       	sbci	r31, 0xFB	; 251
    3ba4:	80 81       	ld	r24, Z
    3ba6:	82 95       	swap	r24
    3ba8:	8f 70       	andi	r24, 0x0F	; 15
					if ( x > 8 )
    3baa:	89 30       	cpi	r24, 0x09	; 9
    3bac:	0c f0       	brlt	.+2      	; 0x3bb0 <_Z12mainSequencev+0x2ba>
					{
						x += 1 ;
    3bae:	8f 5f       	subi	r24, 0xFF	; 255
					}
	        if (getSwitch( x, 0, 0) == 0 )
    3bb0:	60 e0       	ldi	r22, 0x00	; 0
    3bb2:	40 e0       	ldi	r20, 0x00	; 0
    3bb4:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3bb8:	88 23       	and	r24, r24
    3bba:	11 f4       	brne	.+4      	; 0x3bc0 <_Z12mainSequencev+0x2ca>
    3bbc:	cf ef       	ldi	r28, 0xFF	; 255
    3bbe:	df ef       	ldi	r29, 0xFF	; 255
				  {
						y = -1 ;
					}	
				}
				CsTimer[i] = y ;
    3bc0:	f5 01       	movw	r30, r10
    3bc2:	d1 83       	std	Z+1, r29	; 0x01
    3bc4:	c0 83       	st	Z, r28
			}
#ifdef VERSION3
			uint8_t lastSwitch = Last_switch[i] ;
    3bc6:	f4 01       	movw	r30, r8
    3bc8:	f0 80       	ld	r15, Z
			if ( cs->func == CS_LATCH )
    3bca:	f8 01       	movw	r30, r16
    3bcc:	ee 0f       	add	r30, r30
    3bce:	ff 1f       	adc	r31, r31
    3bd0:	e0 0f       	add	r30, r16
    3bd2:	f1 1f       	adc	r31, r17
    3bd4:	e0 50       	subi	r30, 0x00	; 0
    3bd6:	fc 4f       	sbci	r31, 0xFC	; 252
    3bd8:	82 81       	ldd	r24, Z+2	; 0x02
    3bda:	8f 70       	andi	r24, 0x0F	; 15
    3bdc:	8c 30       	cpi	r24, 0x0C	; 12
    3bde:	99 f4       	brne	.+38     	; 0x3c06 <_Z12mainSequencev+0x310>
			{
		    if (getSwitch( cs->v1, 0, 0) )
    3be0:	f6 01       	movw	r30, r12
    3be2:	80 81       	ld	r24, Z
    3be4:	60 e0       	ldi	r22, 0x00	; 0
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3bec:	88 23       	and	r24, r24
    3bee:	19 f0       	breq	.+6      	; 0x3bf6 <_Z12mainSequencev+0x300>
    3bf0:	ff 24       	eor	r15, r15
    3bf2:	f3 94       	inc	r15
    3bf4:	08 c0       	rjmp	.+16     	; 0x3c06 <_Z12mainSequencev+0x310>
				{
					lastSwitch = 1 ;
				}
				else
				{
			    if (getSwitch( cs->v2, 0, 0) )
    3bf6:	f6 01       	movw	r30, r12
    3bf8:	81 81       	ldd	r24, Z+1	; 0x01
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	40 e0       	ldi	r20, 0x00	; 0
    3bfe:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3c02:	81 11       	cpse	r24, r1
    3c04:	ff 24       	eor	r15, r15
					{
						lastSwitch = 0 ;
					}
				}
			}
			if ( cs->func == CS_FLIP )
    3c06:	f8 01       	movw	r30, r16
    3c08:	ee 0f       	add	r30, r30
    3c0a:	ff 1f       	adc	r31, r31
    3c0c:	e0 0f       	add	r30, r16
    3c0e:	f1 1f       	adc	r31, r17
    3c10:	e0 50       	subi	r30, 0x00	; 0
    3c12:	fc 4f       	sbci	r31, 0xFC	; 252
    3c14:	82 81       	ldd	r24, Z+2	; 0x02
    3c16:	8f 70       	andi	r24, 0x0F	; 15
    3c18:	8d 30       	cpi	r24, 0x0D	; 13
    3c1a:	d1 f4       	brne	.+52     	; 0x3c50 <_Z12mainSequencev+0x35a>
			{
		    if (getSwitch( cs->v1, 0, 0) )
    3c1c:	f6 01       	movw	r30, r12
    3c1e:	80 81       	ld	r24, Z
    3c20:	60 e0       	ldi	r22, 0x00	; 0
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3c28:	88 23       	and	r24, r24
    3c2a:	81 f0       	breq	.+32     	; 0x3c4c <_Z12mainSequencev+0x356>
				{
					if ( ( lastSwitch & 2 ) == 0 )
    3c2c:	f1 fc       	sbrc	r15, 1
    3c2e:	10 c0       	rjmp	.+32     	; 0x3c50 <_Z12mainSequencev+0x35a>
					{
						// Clock it!
			      if (getSwitch( cs->v2, 0, 0) )
    3c30:	f6 01       	movw	r30, r12
    3c32:	81 81       	ldd	r24, Z+1	; 0x01
    3c34:	60 e0       	ldi	r22, 0x00	; 0
    3c36:	40 e0       	ldi	r20, 0x00	; 0
    3c38:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3c3c:	88 23       	and	r24, r24
    3c3e:	19 f4       	brne	.+6      	; 0x3c46 <_Z12mainSequencev+0x350>
    3c40:	72 e0       	ldi	r23, 0x02	; 2
    3c42:	f7 2e       	mov	r15, r23
    3c44:	05 c0       	rjmp	.+10     	; 0x3c50 <_Z12mainSequencev+0x35a>
    3c46:	63 e0       	ldi	r22, 0x03	; 3
    3c48:	f6 2e       	mov	r15, r22
    3c4a:	02 c0       	rjmp	.+4      	; 0x3c50 <_Z12mainSequencev+0x35a>
						}
					}
				}
				else
				{
					lastSwitch &= ~2 ;
    3c4c:	fd ef       	ldi	r31, 0xFD	; 253
    3c4e:	ff 22       	and	r15, r31
				}
			}
			Last_switch[i] = lastSwitch ;
    3c50:	f4 01       	movw	r30, r8
    3c52:	f1 92       	st	Z+, r15
    3c54:	4f 01       	movw	r8, r30
    3c56:	0f 5f       	subi	r16, 0xFF	; 255
    3c58:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5a:	83 e0       	ldi	r24, 0x03	; 3
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	c8 0e       	add	r12, r24
    3c60:	d9 1e       	adc	r13, r25
    3c62:	e2 e0       	ldi	r30, 0x02	; 2
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	ae 0e       	add	r10, r30
    3c68:	bf 1e       	adc	r11, r31
				}
				Vs_state[i] = curent_state ;
			}
		}
		
		for ( i = 0 ; i < NUM_CSW ; i += 1 )
    3c6a:	0c 30       	cpi	r16, 0x0C	; 12
    3c6c:	11 05       	cpc	r17, r1
    3c6e:	09 f0       	breq	.+2      	; 0x3c72 <_Z12mainSequencev+0x37c>
    3c70:	4f cf       	rjmp	.-354    	; 0x3b10 <_Z12mainSequencev+0x21a>
			}
#endif
		}
#endif
#ifdef VOICE_ALARMS
		processVoiceAlarms() ;
    3c72:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <_Z18processVoiceAlarmsv>
#endif
		AlarmControl.VoiceCheckFlag = 0 ;
    3c76:	10 92 03 01 	sts	0x0103, r1
			}
		}	
#endif // FrSky
	}
	
	if ( AlarmControl.OneSecFlag )		// Custom Switch Timers
    3c7a:	80 91 01 01 	lds	r24, 0x0101
    3c7e:	88 23       	and	r24, r24
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <_Z12mainSequencev+0x38e>
    3c82:	8e c0       	rjmp	.+284    	; 0x3da0 <_Z12mainSequencev+0x4aa>
#ifndef NOSAFETY_A_OR_V					
			// Now for the Safety/alarm switch alarms
			// Carried out evey 100 mS
			{
				static uint8_t periodCounter ;
				uint8_t pCounter = periodCounter ;
    3c84:	20 91 48 06 	lds	r18, 0x0648
					
				pCounter += 0x11 ;
    3c88:	2f 5e       	subi	r18, 0xEF	; 239
				if ( ( pCounter & 0x0F ) > 11 )
    3c8a:	82 2f       	mov	r24, r18
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	8f 70       	andi	r24, 0x0F	; 15
    3c90:	90 70       	andi	r25, 0x00	; 0
    3c92:	0c 97       	sbiw	r24, 0x0c	; 12
    3c94:	0c f0       	brlt	.+2      	; 0x3c98 <_Z12mainSequencev+0x3a2>
				{
					pCounter &= 0xF0 ;
    3c96:	20 7f       	andi	r18, 0xF0	; 240
				}
				periodCounter = pCounter ;
    3c98:	20 93 48 06 	sts	0x0648, r18
    3c9c:	c8 e2       	ldi	r28, 0x28	; 40
    3c9e:	d4 e0       	ldi	r29, 0x04	; 4
    3ca0:	00 e0       	ldi	r16, 0x00	; 0
    3ca2:	10 e0       	ldi	r17, 0x00	; 0
				for ( i = 0 ; i < numSafety ; i += 1 )
				{
    			SafetySwData *sd = &g_model.safetySw[i] ;
					if (sd->opt.ss.mode == 1)
					{
						if ( ( pCounter & 0x30 ) == 0 )
    3ca4:	82 2f       	mov	r24, r18
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	50 e3       	ldi	r21, 0x30	; 48
    3caa:	e5 2e       	mov	r14, r21
    3cac:	f1 2c       	mov	r15, r1
    3cae:	e8 22       	and	r14, r24
    3cb0:	f9 22       	and	r15, r25
									{
										voice_telem_item( sd->opt.ss.val ) ;
									}
								break ;
								case 1 :
									if ( ( pCounter & 0x0F ) == 0 )
    3cb2:	4f e0       	ldi	r20, 0x0F	; 15
    3cb4:	84 2e       	mov	r8, r20
    3cb6:	91 2c       	mov	r9, r1
    3cb8:	88 22       	and	r8, r24
    3cba:	99 22       	and	r9, r25
							uint8_t temp = sd->opt.ss.swtch ;
							temp -= MAX_DRSWITCH +1 ;
							switch ( temp )
							{
								case 0 :
									if ( ( pCounter & 0x70 ) == 0 )
    3cbc:	30 e7       	ldi	r19, 0x70	; 112
    3cbe:	a3 2e       	mov	r10, r19
    3cc0:	b1 2c       	mov	r11, r1
    3cc2:	a8 22       	and	r10, r24
    3cc4:	b9 22       	and	r11, r25
									{
										voice_telem_item( sd->opt.ss.val ) ;
									}
								break ;
								case 2 :
									if ( ( pCounter & 0xF0 ) == 0x20 )
    3cc6:	20 ef       	ldi	r18, 0xF0	; 240
    3cc8:	c2 2e       	mov	r12, r18
    3cca:	d1 2c       	mov	r13, r1
    3ccc:	c8 22       	and	r12, r24
    3cce:	d9 22       	and	r13, r25
    3cd0:	5b c0       	rjmp	.+182    	; 0x3d88 <_Z12mainSequencev+0x492>
				}
				periodCounter = pCounter ;
				for ( i = 0 ; i < numSafety ; i += 1 )
				{
    			SafetySwData *sd = &g_model.safetySw[i] ;
					if (sd->opt.ss.mode == 1)
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	ee 0f       	add	r30, r30
    3cd6:	ff 1f       	adc	r31, r31
    3cd8:	e9 5d       	subi	r30, 0xD9	; 217
    3cda:	fb 4f       	sbci	r31, 0xFB	; 251
    3cdc:	e0 81       	ld	r30, Z
    3cde:	8e 2f       	mov	r24, r30
    3ce0:	80 7c       	andi	r24, 0xC0	; 192
    3ce2:	80 34       	cpi	r24, 0x40	; 64
    3ce4:	b9 f4       	brne	.+46     	; 0x3d14 <_Z12mainSequencev+0x41e>
					{
						if ( ( pCounter & 0x30 ) == 0 )
    3ce6:	e1 14       	cp	r14, r1
    3ce8:	f1 04       	cpc	r15, r1
    3cea:	a1 f4       	brne	.+40     	; 0x3d14 <_Z12mainSequencev+0x41e>
						{
							if(getSwitch( sd->opt.ss.swtch,0))
    3cec:	ee 0f       	add	r30, r30
    3cee:	ee 0f       	add	r30, r30
    3cf0:	8e 2f       	mov	r24, r30
    3cf2:	85 95       	asr	r24
    3cf4:	85 95       	asr	r24
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	40 e0       	ldi	r20, 0x00	; 0
    3cfa:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3cfe:	88 23       	and	r24, r24
    3d00:	49 f0       	breq	.+18     	; 0x3d14 <_Z12mainSequencev+0x41e>
							{
								audioDefevent( ((g_eeGeneral.speakerMode & 1) == 0) ? 1 : sd->opt.ss.val ) ;
    3d02:	80 91 87 01 	lds	r24, 0x0187
    3d06:	80 fd       	sbrc	r24, 0
    3d08:	02 c0       	rjmp	.+4      	; 0x3d0e <_Z12mainSequencev+0x418>
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	01 c0       	rjmp	.+2      	; 0x3d10 <_Z12mainSequencev+0x41a>
    3d0e:	88 81       	ld	r24, Y
    3d10:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
							}
						}
					}
					if (sd->opt.ss.mode == 2)
    3d14:	f8 01       	movw	r30, r16
    3d16:	ee 0f       	add	r30, r30
    3d18:	ff 1f       	adc	r31, r31
    3d1a:	e9 5d       	subi	r30, 0xD9	; 217
    3d1c:	fb 4f       	sbci	r31, 0xFB	; 251
    3d1e:	e0 81       	ld	r30, Z
    3d20:	8e 2f       	mov	r24, r30
    3d22:	80 7c       	andi	r24, 0xC0	; 192
    3d24:	80 38       	cpi	r24, 0x80	; 128
    3d26:	69 f5       	brne	.+90     	; 0x3d82 <_Z12mainSequencev+0x48c>
					{
						if ( sd->opt.ss.swtch > MAX_DRSWITCH )
    3d28:	8e 2f       	mov	r24, r30
    3d2a:	88 0f       	add	r24, r24
    3d2c:	88 0f       	add	r24, r24
    3d2e:	85 95       	asr	r24
    3d30:	85 95       	asr	r24
    3d32:	87 31       	cpi	r24, 0x17	; 23
    3d34:	c4 f0       	brlt	.+48     	; 0x3d66 <_Z12mainSequencev+0x470>
						{
							uint8_t temp = sd->opt.ss.swtch ;
							temp -= MAX_DRSWITCH +1 ;
							switch ( temp )
    3d36:	87 51       	subi	r24, 0x17	; 23
    3d38:	81 30       	cpi	r24, 0x01	; 1
    3d3a:	49 f0       	breq	.+18     	; 0x3d4e <_Z12mainSequencev+0x458>
    3d3c:	81 30       	cpi	r24, 0x01	; 1
    3d3e:	18 f0       	brcs	.+6      	; 0x3d46 <_Z12mainSequencev+0x450>
    3d40:	82 30       	cpi	r24, 0x02	; 2
    3d42:	f9 f4       	brne	.+62     	; 0x3d82 <_Z12mainSequencev+0x48c>
    3d44:	08 c0       	rjmp	.+16     	; 0x3d56 <_Z12mainSequencev+0x460>
							{
								case 0 :
									if ( ( pCounter & 0x70 ) == 0 )
    3d46:	a1 14       	cp	r10, r1
    3d48:	b1 04       	cpc	r11, r1
    3d4a:	d9 f4       	brne	.+54     	; 0x3d82 <_Z12mainSequencev+0x48c>
    3d4c:	08 c0       	rjmp	.+16     	; 0x3d5e <_Z12mainSequencev+0x468>
									{
										voice_telem_item( sd->opt.ss.val ) ;
									}
								break ;
								case 1 :
									if ( ( pCounter & 0x0F ) == 0 )
    3d4e:	81 14       	cp	r8, r1
    3d50:	91 04       	cpc	r9, r1
    3d52:	b9 f4       	brne	.+46     	; 0x3d82 <_Z12mainSequencev+0x48c>
    3d54:	04 c0       	rjmp	.+8      	; 0x3d5e <_Z12mainSequencev+0x468>
									{
										voice_telem_item( sd->opt.ss.val ) ;
									}
								break ;
								case 2 :
									if ( ( pCounter & 0xF0 ) == 0x20 )
    3d56:	f0 e2       	ldi	r31, 0x20	; 32
    3d58:	cf 16       	cp	r12, r31
    3d5a:	d1 04       	cpc	r13, r1
    3d5c:	91 f4       	brne	.+36     	; 0x3d82 <_Z12mainSequencev+0x48c>
									{
										voice_telem_item( sd->opt.ss.val ) ;
    3d5e:	88 81       	ld	r24, Y
    3d60:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <_Z16voice_telem_itemh>
    3d64:	0e c0       	rjmp	.+28     	; 0x3d82 <_Z12mainSequencev+0x48c>
									}
								break ;
							}
						}
						else if ( ( pCounter & 0x30 ) == 0 )		// Every 4 seconds
    3d66:	e1 14       	cp	r14, r1
    3d68:	f1 04       	cpc	r15, r1
    3d6a:	59 f4       	brne	.+22     	; 0x3d82 <_Z12mainSequencev+0x48c>
						{
							if(getSwitch( sd->opt.ss.swtch,0))
    3d6c:	60 e0       	ldi	r22, 0x00	; 0
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    3d74:	88 23       	and	r24, r24
    3d76:	29 f0       	breq	.+10     	; 0x3d82 <_Z12mainSequencev+0x48c>
}


void putVoiceQueue( uint8_t value )
{
	putVoiceQueueLong( value ) ;
    3d78:	88 81       	ld	r24, Y
    3d7a:	80 58       	subi	r24, 0x80	; 128
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
    3d82:	0f 5f       	subi	r16, 0xFF	; 255
    3d84:	1f 4f       	sbci	r17, 0xFF	; 255
    3d86:	22 96       	adiw	r28, 0x02	; 2
				if ( ( pCounter & 0x0F ) > 11 )
				{
					pCounter &= 0xF0 ;
				}
				periodCounter = pCounter ;
				for ( i = 0 ; i < numSafety ; i += 1 )
    3d88:	07 15       	cp	r16, r7
    3d8a:	08 f4       	brcc	.+2      	; 0x3d8e <_Z12mainSequencev+0x498>
    3d8c:	a2 cf       	rjmp	.-188    	; 0x3cd2 <_Z12mainSequencev+0x3dc>
			}
#endif // NOSAFETY_A_OR_V					
	// New switch voices
	// New entries, Switch, (on/off/both), voice file index

		AlarmControl.OneSecFlag = 0 ;
    3d8e:	10 92 01 01 	sts	0x0101, r1
//		uint8_t i ;
		
		if ( StickScrollTimer )
    3d92:	80 91 07 06 	lds	r24, 0x0607
    3d96:	88 23       	and	r24, r24
    3d98:	19 f0       	breq	.+6      	; 0x3da0 <_Z12mainSequencev+0x4aa>
		{
			StickScrollTimer -= 1 ;				
    3d9a:	81 50       	subi	r24, 0x01	; 1
    3d9c:	80 93 07 06 	sts	0x0607, r24
		}
	}
}
    3da0:	df 91       	pop	r29
    3da2:	cf 91       	pop	r28
    3da4:	1f 91       	pop	r17
    3da6:	0f 91       	pop	r16
    3da8:	ff 90       	pop	r15
    3daa:	ef 90       	pop	r14
    3dac:	df 90       	pop	r13
    3dae:	cf 90       	pop	r12
    3db0:	bf 90       	pop	r11
    3db2:	af 90       	pop	r10
    3db4:	9f 90       	pop	r9
    3db6:	8f 90       	pop	r8
    3db8:	7f 90       	pop	r7
    3dba:	08 95       	ret

00003dbc <main>:

#ifdef CPUM2561
uint8_t SaveMcusr ;
#endif

int main(void)
    3dbc:	0f 93       	push	r16
    3dbe:	1f 93       	push	r17
{

    DDRA = 0xff;  PORTA = 0x00;
    3dc0:	2f ef       	ldi	r18, 0xFF	; 255
    3dc2:	2a bb       	out	0x1a, r18	; 26
    3dc4:	1b ba       	out	0x1b, r1	; 27
    DDRB = 0x81;  PORTB = 0x7e; //pullups keys+nc
    3dc6:	91 e8       	ldi	r25, 0x81	; 129
    3dc8:	97 bb       	out	0x17, r25	; 23
    3dca:	8e e7       	ldi	r24, 0x7E	; 126
    3dcc:	88 bb       	out	0x18, r24	; 24
    DDRC = 0xFE;  PORTC = 0x81; //pullups nc
    3dce:	8e ef       	ldi	r24, 0xFE	; 254
    3dd0:	84 bb       	out	0x14, r24	; 20
    3dd2:	95 bb       	out	0x15, r25	; 21
    DDRD = 0x00;  PORTD = 0xff; //all D inputs pullups keys
    3dd4:	11 ba       	out	0x11, r1	; 17
    3dd6:	22 bb       	out	0x12, r18	; 18
    DDRE = 0x08;  PORTE = 0xff-(1<<OUT_E_BUZZER); //pullups + buzzer 0
    3dd8:	88 e0       	ldi	r24, 0x08	; 8
    3dda:	82 b9       	out	0x02, r24	; 2
    3ddc:	87 ef       	ldi	r24, 0xF7	; 247
    3dde:	83 b9       	out	0x03, r24	; 3
    DDRF = 0x00;  PORTF = 0x00; //all F inputs anain - pullups are off
    3de0:	10 92 61 00 	sts	0x0061, r1
    3de4:	10 92 62 00 	sts	0x0062, r1
    //DDRG = 0x10;  PORTG = 0xff; //pullups + SIM_CTL=1 = phonejack = ppm_in
    DDRG = 0x14; PORTG = 0xfB; //pullups + SIM_CTL=1 = phonejack = ppm_in, Haptic output and off (0)
    3de8:	84 e1       	ldi	r24, 0x14	; 20
    3dea:	80 93 64 00 	sts	0x0064, r24
    3dee:	8b ef       	ldi	r24, 0xFB	; 251
    3df0:	80 93 65 00 	sts	0x0065, r24
#ifdef CPUM2561
  uint8_t mcusr = MCUSR; // save the WDT (etc) flags
	SaveMcusr = mcusr ;
  MCUSR = 0; // must be zeroed before disabling the WDT
#else
  uint8_t mcusr = MCUCSR;
    3df4:	04 b7       	in	r16, 0x34	; 52
  MCUCSR = 0;
    3df6:	14 be       	out	0x34, r1	; 52
#ifdef NMEA
    NMEA_Init();
#endif


    ADMUX=ADC_VREF_TYPE;
    3df8:	80 e4       	ldi	r24, 0x40	; 64
    3dfa:	87 b9       	out	0x07, r24	; 7
    ADCSRA=0x85 ;
    3dfc:	85 e8       	ldi	r24, 0x85	; 133
    3dfe:	86 b9       	out	0x06, r24	; 6
		TIMSK0 |= (1<<OCIE0A) | (1<<TOIE0) ;
    
		TCCR2B  = (2 << CS00);//  Norm mode, clk/8
		TIMSK2 |= (1<<TOIE2) ;
#else
    TCCR0  = (7 << CS00);//  Norm mode, clk/1024
    3e00:	87 e0       	ldi	r24, 0x07	; 7
    3e02:	83 bf       	out	0x33, r24	; 51
    OCR0   = 156;
    3e04:	8c e9       	ldi	r24, 0x9C	; 156
    3e06:	81 bf       	out	0x31, r24	; 49
    TCCR2  = (2 << CS00);//  Norm mode, clk/8
    3e08:	82 e0       	ldi	r24, 0x02	; 2
    3e0a:	85 bd       	out	0x25, r24	; 37
		TIMSK |= (1<<OCIE0) | (1<<TOIE0) | (1<<TOIE2) ;
    3e0c:	87 b7       	in	r24, 0x37	; 55
    3e0e:	83 64       	ori	r24, 0x43	; 67
    3e10:	87 bf       	out	0x37, r24	; 55
#endif
    // TCNT1 2MHz Pulse generator
    TCCR1A = (0<<WGM10);
    3e12:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = (1 << WGM12) | (2<<CS10); // CTC OCR1A, 16MHz / 8
    3e14:	8a e0       	ldi	r24, 0x0A	; 10
    3e16:	8e bd       	out	0x2e, r24	; 46
    //TIMSK |= (1<<OCIE1A); enable immediately before mainloop

    TCCR3A  = 0;
    3e18:	10 92 8b 00 	sts	0x008B, r1
    TCCR3B  = (1<<ICNC3) | (2<<CS30);      //ICNC3 16MHz / 8
    3e1c:	82 e8       	ldi	r24, 0x82	; 130
    3e1e:	80 93 8a 00 	sts	0x008A, r24
#ifdef CPUM2561
    TIMSK3 |= (1<<ICIE3);
#else
    ETIMSK |= (1<<TICIE3);
    3e22:	80 91 7d 00 	lds	r24, 0x007D
    3e26:	80 62       	ori	r24, 0x20	; 32
    3e28:	80 93 7d 00 	sts	0x007D, r24
        {
            *p-- = 0x55 ;
        }
    }
#endif
		sei(); //damit alert in eeReadGeneral() nicht haengt
    3e2c:	78 94       	sei

    g_menuStack[0] =  menuProc0;
    3e2e:	8d ea       	ldi	r24, 0xAD	; 173
    3e30:	9f e3       	ldi	r25, 0x3F	; 63
    3e32:	90 93 09 06 	sts	0x0609, r25
    3e36:	80 93 08 06 	sts	0x0608, r24

	if (eeReadGeneral())
    3e3a:	0e 94 c2 62 	call	0xc584	; 0xc584 <_Z13eeReadGeneralv>
    3e3e:	88 23       	and	r24, r24
    3e40:	19 f0       	breq	.+6      	; 0x3e48 <main+0x8c>
	{
		lcd_init() ;   // initialize LCD module after reading eeprom
    3e42:	0e 94 2e 6c 	call	0xd85c	; 0xd85c <_Z8lcd_initv>
    3e46:	06 c0       	rjmp	.+12     	; 0x3e54 <main+0x98>
  }
	else
  {
    eeGeneralDefault(); // init g_eeGeneral with default values
    3e48:	0e 94 6e 62 	call	0xc4dc	; 0xc4dc <_Z16eeGeneralDefaultv>
    lcd_init();         // initialize LCD module for ALERT box
    3e4c:	0e 94 2e 6c 	call	0xd85c	; 0xd85c <_Z8lcd_initv>
    eeWriteGeneral();   // format/write back to eeprom
    3e50:	0e 94 db 63 	call	0xc7b6	; 0xc7b6 <_Z14eeWriteGeneralv>
		((void (*)(void)) (0x7FFE))() ;	// Goes to 0xFFFC
#endif
	}
#endif

	uint8_t cModel = g_eeGeneral.currModel;
    3e54:	10 91 65 01 	lds	r17, 0x0165
	eeLoadModel( cModel ) ;
    3e58:	81 2f       	mov	r24, r17
    3e5a:	0e 94 03 64 	call	0xc806	; 0xc806 <_Z11eeLoadModelh>
    
#ifdef FRSKY
		FRSKY_Init( 0 ) ;	
#endif
		
		checkQuickSelect();
    3e5e:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZL16checkQuickSelectv>
    //if we have a switch on backlight it will be able to turn on the backlight.

		{
//			uint8_t sm ;
//			sm = stickMoved ;
			stickMoved = 1 ;
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	80 93 23 06 	sts	0x0623, r24
			doBackLightVoice(1) ;
    3e68:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Z16doBackLightVoiceh>
			stickMoved = 0 ;
    3e6c:	10 92 23 06 	sts	0x0623, r1

//    check_backlight_voice();
		}
    // moved here and logic added to only play statup tone if splash screen enabled.
    // that way we save a bit, but keep the option for end users!
		setVolume(g_eeGeneral.volume+7) ;
    3e70:	80 91 94 01 	lds	r24, 0x0194
    3e74:	89 5f       	subi	r24, 0xF9	; 249
    3e76:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_Z9setVolumeh>
//		putVoiceQueueLong( g_eeGeneral.volume + 0xFFF7 ) ;
    
  if ( ( mcusr & (1<<WDRF) ) == 0 )
    3e7a:	03 fd       	sbrc	r16, 3
    3e7c:	2b c0       	rjmp	.+86     	; 0x3ed4 <main+0x118>
	{
		if(!g_eeGeneral.disableSplashScreen)
    3e7e:	80 91 7e 01 	lds	r24, 0x017E
    3e82:	84 fd       	sbrc	r24, 4
    3e84:	08 c0       	rjmp	.+16     	; 0x3e96 <main+0xda>
    {
	    if( g_eeGeneral.speakerMode )		// Not just beeper
    3e86:	80 91 87 01 	lds	r24, 0x0187
    3e8a:	88 23       	and	r24, r24
    3e8c:	21 f0       	breq	.+8      	; 0x3e96 <main+0xda>
			{
				audioVoiceDefevent( AU_TADA, V_HELLO ) ;
    3e8e:	87 e0       	ldi	r24, 0x07	; 7
    3e90:	6c e1       	ldi	r22, 0x1C	; 28
    3e92:	0e 94 e4 79 	call	0xf3c8	; 0xf3c8 <_Z18audioVoiceDefeventhh>
      }
  	  //###doSplash();
    }
    checkMem();
    3e96:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZL8checkMemv>
    //setupAdc(); //before checkTHR
    getADC_osmp();
    3e9a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_Z11getADC_osmpv>
    g_vbat100mV = anaIn(7) / 14 ;
    3e9e:	87 e0       	ldi	r24, 0x07	; 7
    3ea0:	0e 94 33 10 	call	0x2066	; 0x2066 <_Z5anaInh>
    3ea4:	6e e0       	ldi	r22, 0x0E	; 14
    3ea6:	70 e0       	ldi	r23, 0x00	; 0
    3ea8:	0e 94 84 7e 	call	0xfd08	; 0xfd08 <__udivmodhi4>
    3eac:	60 93 1f 06 	sts	0x061F, r22
    checkTHR();
    3eb0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z8checkTHRv>
    checkSwitches();
    3eb4:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_Z13checkSwitchesv>
    checkAlarm();
    3eb8:	0e 94 e6 19 	call	0x33cc	; 0x33cc <_ZL10checkAlarmv>
    checkWarnings();
    3ebc:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZL13checkWarningsv>
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown()
{
    return (~PINB) & 0x7E;
    3ec0:	86 b3       	in	r24, 0x16	; 22
static void clearKeyEvents()
{
#ifdef SIMU
    while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
    while (keyDown());  // loop until all keys are up
    3ec2:	80 95       	com	r24
    3ec4:	8e 77       	andi	r24, 0x7E	; 126
    3ec6:	e1 f7       	brne	.-8      	; 0x3ec0 <main+0x104>
#endif
    putEvent(0);
    3ec8:	10 92 49 0d 	sts	0x0D49, r1
    checkSwitches();
    checkAlarm();
    checkWarnings();
    clearKeyEvents(); //make sure no keys are down before proceeding
//    BandGap = 240 ;
		putVoiceQueueUpper( g_model.modelVoice ) ;
    3ecc:	80 91 b4 01 	lds	r24, 0x01B4
    3ed0:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_Z18putVoiceQueueUpperh>
	}
		AlarmControl.VoiceCheckFlag |= 2 ;// Set switch current states
    3ed4:	80 91 03 01 	lds	r24, 0x0103
    3ed8:	82 60       	ori	r24, 0x02	; 2
    3eda:	80 93 03 01 	sts	0x0103, r24
		CurrentPhase = 0 ;
    3ede:	10 92 70 08 	sts	0x0870, r1
    perOutPhase(g_chans512, 0 ) ;
    3ee2:	8c ee       	ldi	r24, 0xEC	; 236
    3ee4:	96 e0       	ldi	r25, 0x06	; 6
    3ee6:	60 e0       	ldi	r22, 0x00	; 0
    3ee8:	0e 94 e5 38 	call	0x71ca	; 0x71ca <_Z11perOutPhasePih>
		startPulses() ;
    3eec:	0e 94 ea 76 	call	0xedd4	; 0xedd4 <_Z11startPulsesv>
    wdt_enable(WDTO_500MS);
    3ef0:	2d e0       	ldi	r18, 0x0D	; 13
    3ef2:	88 e1       	ldi	r24, 0x18	; 24
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	f8 94       	cli
    3efa:	a8 95       	wdr
    3efc:	81 bd       	out	0x21, r24	; 33
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	21 bd       	out	0x21, r18	; 33

//    pushMenu(menuProcModelSelect);
//    popMenu(true);  
    g_menuStack[1] = menuProcModelSelect ;	// this is so the first instance of [MENU LONG] doesn't freak out!
    3f02:	8e ee       	ldi	r24, 0xEE	; 238
    3f04:	97 e5       	ldi	r25, 0x57	; 87
    3f06:	90 93 0b 06 	sts	0x060B, r25
    3f0a:	80 93 0a 06 	sts	0x060A, r24

//		lcdSetContrast() ;

    if(cModel!=g_eeGeneral.currModel)
    3f0e:	80 91 65 01 	lds	r24, 0x0165
    3f12:	18 17       	cp	r17, r24
    3f14:	29 f0       	breq	.+10     	; 0x3f20 <main+0x164>
    {
        STORE_GENERALVARS ;    // if model was quick-selected, make sure it sticks
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
        //    eeDirty(EE_GENERAL); // if model was quick-selected, make sure it sticks
        eeWaitComplete() ;
    3f1c:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>
//#else
//			TIFR = 1 << OCF1A ;   // Clear pending interrupt
//#endif
//	    PULSEGEN_ON; // Pulse generator enable immediately before mainloop
//		}
		Main_running = 1 ;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	80 93 6d 05 	sts	0x056D, r24

		if(g_model.protocol == PROTO_NRF)
    3f26:	80 91 b9 01 	lds	r24, 0x01B9
    3f2a:	8f 70       	andi	r24, 0x0F	; 15
    3f2c:	84 30       	cpi	r24, 0x04	; 4
    3f2e:	11 f4       	brne	.+4      	; 0x3f34 <main+0x178>
		{
			kn_initAll(g_model.protocol);
    3f30:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <_Z10kn_initAllh>
		}

    while(1){
        //uint16_t old10ms=get_tmr10ms();
        mainSequence() ;
    3f34:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_Z12mainSequencev>
    3f38:	fd cf       	rjmp	.-6      	; 0x3f34 <main+0x178>

00003f3a <_Z11putsTmrModehhhh>:
		z -= 1 ;
//		z *= 3 ;
  lcd_putsAttIdx(x+FW,y,Str_Switches,z,att) ;
}

void putsTmrMode(uint8_t x, uint8_t y, uint8_t attr, uint8_t type )
    3f3a:	bf 92       	push	r11
    3f3c:	cf 92       	push	r12
    3f3e:	df 92       	push	r13
    3f40:	ef 92       	push	r14
    3f42:	ff 92       	push	r15
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	f8 2e       	mov	r15, r24
    3f4a:	d6 2e       	mov	r13, r22
    3f4c:	c4 2e       	mov	r12, r20
	
//#ifdef TWO_TIMERS
	TimerMode *ptConfig ;
  int8_t tm ;
  int8_t tmb ;
	if ( type & 0x80 )
    3f4e:	27 fd       	sbrc	r18, 7
    3f50:	03 c0       	rjmp	.+6      	; 0x3f58 <_Z11putsTmrModehhhh+0x1e>
    3f52:	eb ea       	ldi	r30, 0xAB	; 171
    3f54:	f5 e0       	ldi	r31, 0x05	; 5
    3f56:	02 c0       	rjmp	.+4      	; 0x3f5c <_Z11putsTmrModehhhh+0x22>
    3f58:	e0 eb       	ldi	r30, 0xB0	; 176
    3f5a:	f5 e0       	ldi	r31, 0x05	; 5
	else
	{
		ptConfig = &TimerConfig[0] ;
	}
//	FORCE_INDIRECT(ptConfig) ;
	tm = ptConfig->tmrModeA ;
    3f5c:	12 81       	ldd	r17, Z+2	; 0x02
  tmb = ptConfig->tmrModeB ;
    3f5e:	b3 80       	ldd	r11, Z+3	; 0x03

	type &= 3 ;
    3f60:	b3 e0       	ldi	r27, 0x03	; 3
    3f62:	eb 2e       	mov	r14, r27
    3f64:	e2 22       	and	r14, r18
//#else	
//  int8_t tm = g_model.tmrMode ;
//  int8_t tmb = g_model.tmrModeB ;
//#endif	
//#ifdef TWO_TIMERS
	if ( type < 2 )		// 0 or 1
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	8e 15       	cp	r24, r14
    3f6a:	18 f1       	brcs	.+70     	; 0x3fb2 <_Z11putsTmrModehhhh+0x78>
	{
	  if(tm<TMR_VAROFS)
    3f6c:	14 30       	cpi	r17, 0x04	; 4
    3f6e:	6c f4       	brge	.+26     	; 0x3f8a <_Z11putsTmrModehhhh+0x50>
		{
			lcd_putsnAtt(  x, y, PSTR(STR_TRIGA_OPTS)+3*tm,3,attr);
    3f70:	43 e0       	ldi	r20, 0x03	; 3
    3f72:	14 02       	muls	r17, r20
    3f74:	a0 01       	movw	r20, r0
    3f76:	11 24       	eor	r1, r1
    3f78:	4e 5b       	subi	r20, 0xBE	; 190
    3f7a:	5d 4f       	sbci	r21, 0xFD	; 253
    3f7c:	8f 2d       	mov	r24, r15
    3f7e:	6d 2d       	mov	r22, r13
    3f80:	23 e0       	ldi	r18, 0x03	; 3
    3f82:	0c 2d       	mov	r16, r12
    3f84:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
    3f88:	14 c0       	rjmp	.+40     	; 0x3fb2 <_Z11putsTmrModehhhh+0x78>
  	}
		else
		{
  		tm -= TMR_VAROFS - 7 ;
    3f8a:	1d 5f       	subi	r17, 0xFD	; 253
      lcd_putsAttIdx(  x, y, Curve_Str, tm, attr ) ;
    3f8c:	8f 2d       	mov	r24, r15
    3f8e:	6d 2d       	mov	r22, r13
    3f90:	48 e6       	ldi	r20, 0x68	; 104
    3f92:	53 e0       	ldi	r21, 0x03	; 3
    3f94:	21 2f       	mov	r18, r17
    3f96:	0c 2d       	mov	r16, r12
    3f98:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
			if ( tm < 9 + 7 )	// Allow for 7 offset above
    3f9c:	10 31       	cpi	r17, 0x10	; 16
    3f9e:	14 f4       	brge	.+4      	; 0x3fa4 <_Z11putsTmrModehhhh+0x6a>
			{
				x -= FW ;		
    3fa0:	8a ef       	ldi	r24, 0xFA	; 250
    3fa2:	f8 0e       	add	r15, r24
			}
  		lcd_putcAtt(x+3*FW,  y,'%',attr);
    3fa4:	8f 2d       	mov	r24, r15
    3fa6:	8e 5e       	subi	r24, 0xEE	; 238
    3fa8:	6d 2d       	mov	r22, r13
    3faa:	45 e2       	ldi	r20, 0x25	; 37
    3fac:	2c 2d       	mov	r18, r12
    3fae:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
		}
	}
	if ( ( type == 2 ) || ( ( type == 0 ) && ( tm == 1 ) ) )
    3fb2:	82 e0       	ldi	r24, 0x02	; 2
    3fb4:	e8 16       	cp	r14, r24
    3fb6:	21 f0       	breq	.+8      	; 0x3fc0 <_Z11putsTmrModehhhh+0x86>
    3fb8:	ee 20       	and	r14, r14
    3fba:	41 f4       	brne	.+16     	; 0x3fcc <_Z11putsTmrModehhhh+0x92>
    3fbc:	11 30       	cpi	r17, 0x01	; 1
    3fbe:	31 f4       	brne	.+12     	; 0x3fcc <_Z11putsTmrModehhhh+0x92>
	{
		putsMomentDrSwitches( x, y, tmb, attr );
    3fc0:	8f 2d       	mov	r24, r15
    3fc2:	6d 2d       	mov	r22, r13
    3fc4:	4b 2d       	mov	r20, r11
    3fc6:	2c 2d       	mov	r18, r12
    3fc8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_Z20putsMomentDrSwitcheshhah>
//	{
//   	putsDrSwitches( x-1*FW, y, tmb, attr );
//	}
//#endif	
	asm("") ;
}
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	ff 90       	pop	r15
    3fd2:	ef 90       	pop	r14
    3fd4:	df 90       	pop	r13
    3fd6:	cf 90       	pop	r12
    3fd8:	bf 90       	pop	r11
    3fda:	08 95       	ret

00003fdc <_Z10putsChnRawhhhh>:
{
    return &g_model.limitData[idx];
}


void putsChnRaw(uint8_t x,uint8_t y,uint8_t idx,uint8_t att)
    3fdc:	0f 93       	push	r16
    3fde:	38 2f       	mov	r19, r24
    3fe0:	94 2f       	mov	r25, r20
    3fe2:	02 2f       	mov	r16, r18
{
	uint8_t chanLimit = NUM_XCHNRAW ;
	uint8_t mix = att & MIX_SOURCE ;
	if ( mix )
    3fe4:	24 fd       	sbrc	r18, 4
    3fe6:	02 c0       	rjmp	.+4      	; 0x3fec <_Z10putsChnRawhhhh+0x10>
    3fe8:	84 e2       	ldi	r24, 0x24	; 36
    3fea:	02 c0       	rjmp	.+4      	; 0x3ff0 <_Z10putsChnRawhhhh+0x14>
#if GVARS
		chanLimit += MAX_GVARS + 1 + 1 ;
#else
		chanLimit += 1 ;
#endif
		att &= ~MIX_SOURCE ;		
    3fec:	0f 7e       	andi	r16, 0xEF	; 239
    3fee:	8d e2       	ldi	r24, 0x2D	; 45
	}
    if(idx==0)
    3ff0:	99 23       	and	r25, r25
    3ff2:	21 f4       	brne	.+8      	; 0x3ffc <_Z10putsChnRawhhhh+0x20>
        lcd_putsnAtt(x,y,PSTR("----"),4,att);
    3ff4:	83 2f       	mov	r24, r19
    3ff6:	43 e5       	ldi	r20, 0x53	; 83
    3ff8:	52 e0       	ldi	r21, 0x02	; 2
    3ffa:	10 c0       	rjmp	.+32     	; 0x401c <_Z10putsChnRawhhhh+0x40>
    else if(idx<=4)
    3ffc:	95 30       	cpi	r25, 0x05	; 5
    3ffe:	b8 f4       	brcc	.+46     	; 0x402e <_Z10putsChnRawhhhh+0x52>
#ifdef FIX_MODE
		{
			if ( g_model.useCustomStickNames )
    4000:	80 91 1b 05 	lds	r24, 0x051B
    4004:	84 ff       	sbrs	r24, 4
    4006:	0e c0       	rjmp	.+28     	; 0x4024 <_Z10putsChnRawhhhh+0x48>
			{
				lcd_putsnAtt( x, y, ( char *)g_eeGeneral.customStickNames+4*(idx-1), 4, att|BSS ) ;
    4008:	49 2f       	mov	r20, r25
    400a:	50 e0       	ldi	r21, 0x00	; 0
    400c:	44 0f       	add	r20, r20
    400e:	55 1f       	adc	r21, r21
    4010:	44 0f       	add	r20, r20
    4012:	55 1f       	adc	r21, r21
    4014:	4a 56       	subi	r20, 0x6A	; 106
    4016:	5e 4f       	sbci	r21, 0xFE	; 254
    4018:	00 61       	ori	r16, 0x10	; 16
    401a:	83 2f       	mov	r24, r19
    401c:	24 e0       	ldi	r18, 0x04	; 4
    401e:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
    4022:	0e c0       	rjmp	.+28     	; 0x4040 <_Z10putsChnRawhhhh+0x64>
			}
			else
			{
        lcd_putsAttIdx(x,y,modi12x3,(idx-1),att) ;
    4024:	91 50       	subi	r25, 0x01	; 1
    4026:	83 2f       	mov	r24, r19
    4028:	43 e3       	ldi	r20, 0x33	; 51
    402a:	51 e0       	ldi	r21, 0x01	; 1
    402c:	06 c0       	rjmp	.+12     	; 0x403a <_Z10putsChnRawhhhh+0x5e>
			}
		}
#else
        lcd_putsnAtt(x,y,&modi12x3[(pgm_read_byte(modn12x3+g_eeGeneral.stickMode*4+(idx-1))-1)*4],4,att);
#endif
    else if(idx<=chanLimit)
    402e:	89 17       	cp	r24, r25
    4030:	38 f0       	brcs	.+14     	; 0x4040 <_Z10putsChnRawhhhh+0x64>
#if GVARS
        lcd_putsAttIdx(x,y,Str_Chans_Gv,(idx-5),att);
    4032:	95 50       	subi	r25, 0x05	; 5
    4034:	83 2f       	mov	r24, r19
    4036:	42 ec       	ldi	r20, 0xC2	; 194
    4038:	52 e0       	ldi	r21, 0x02	; 2
    403a:	29 2f       	mov	r18, r25
    403c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
				idx += TEL_ITEM_SC1-(chanLimit-NUM_XCHNRAW) ;
			}
  	  lcd_putsAttIdx(x,y,Str_telemItems,(idx-NUM_XCHNRAW),att);
		}
#endif
}
    4040:	0f 91       	pop	r16
    4042:	08 95       	ret

00004044 <_Z7putsChnhhhh>:
		}
		lcd_2_digits( x1, y, idx1, att ) ;
    lcd_putsnAtt(x,y,PSTR(STR_CH),2,att);
	}
#else
	putsChnRaw( x, y, idx1 ? idx1+20 : idx1, att ) ;
    4044:	41 11       	cpse	r20, r1
    4046:	4c 5e       	subi	r20, 0xEC	; 236
    4048:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
#endif
}
    404c:	08 95       	ret

0000404e <_Z7m_to_fti>:
NOINLINE int16_t m_to_ft( int16_t metres )
{
	int16_t result ;

  // m to ft *105/32
	result = metres * 3 ;
    404e:	9c 01       	movw	r18, r24
    4050:	22 0f       	add	r18, r18
    4052:	33 1f       	adc	r19, r19
    4054:	28 0f       	add	r18, r24
    4056:	39 1f       	adc	r19, r25
	metres >>= 2 ;
    4058:	95 95       	asr	r25
    405a:	87 95       	ror	r24
    405c:	95 95       	asr	r25
    405e:	87 95       	ror	r24
    4060:	28 0f       	add	r18, r24
    4062:	39 1f       	adc	r19, r25
    4064:	95 95       	asr	r25
    4066:	87 95       	ror	r24
    4068:	95 95       	asr	r25
    406a:	87 95       	ror	r24
    406c:	95 95       	asr	r25
    406e:	87 95       	ror	r24
    4070:	28 0f       	add	r18, r24
    4072:	39 1f       	adc	r19, r25
	result += metres ;
	metres >>= 2 ;
  return result + (metres >> 1 );
}
    4074:	c9 01       	movw	r24, r18
    4076:	08 95       	ret

00004078 <_Z6c_to_fi>:

NOINLINE int16_t c_to_f( int16_t degrees )
{
  degrees += 18 ;
    4078:	42 96       	adiw	r24, 0x12	; 18
  degrees *= 115 ;
    407a:	23 e7       	ldi	r18, 0x73	; 115
    407c:	30 e0       	ldi	r19, 0x00	; 0
    407e:	a9 01       	movw	r20, r18
    4080:	84 9f       	mul	r24, r20
    4082:	90 01       	movw	r18, r0
    4084:	85 9f       	mul	r24, r21
    4086:	30 0d       	add	r19, r0
    4088:	94 9f       	mul	r25, r20
    408a:	30 0d       	add	r19, r0
    408c:	11 24       	eor	r1, r1
    408e:	e6 e0       	ldi	r30, 0x06	; 6
    4090:	35 95       	asr	r19
    4092:	27 95       	ror	r18
    4094:	ea 95       	dec	r30
    4096:	e1 f7       	brne	.-8      	; 0x4090 <_Z6c_to_fi+0x18>
  degrees >>= 6 ;
  return degrees ;
}
    4098:	c9 01       	movw	r24, r18
    409a:	08 95       	ret

0000409c <_Z14telemItemValidh>:
	}
	return 0 ;	
#else
	return 1 ;
#endif
}
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	08 95       	ret

000040a0 <_Z20convertTelemConstantha>:
int16_t convertTelemConstant( uint8_t channelin, int8_t value)
{
  int16_t result;
	int8_t channel ;

	channel = pgm_read_byte( &TelemIndex[channelin] ) ;
    40a0:	e8 2f       	mov	r30, r24
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	e3 52       	subi	r30, 0x23	; 35
    40a6:	fc 4f       	sbci	r31, 0xFC	; 252
    40a8:	e4 91       	lpm	r30, Z+
	result = value + 125 ;
    40aa:	77 27       	eor	r23, r23
    40ac:	67 fd       	sbrc	r22, 7
    40ae:	70 95       	com	r23
    40b0:	63 58       	subi	r22, 0x83	; 131
    40b2:	7f 4f       	sbci	r23, 0xFF	; 255
  switch (channel)
    40b4:	ee 5f       	subi	r30, 0xFE	; 254
    40b6:	e2 30       	cpi	r30, 0x02	; 2
    40b8:	50 f4       	brcc	.+20     	; 0x40ce <_Z20convertTelemConstantha+0x2e>
		// case FR_FUEL :
		// case FR_CURRENT :
		
    case TIMER1 :
    case TIMER2 :
      result *= 10 ;
    40ba:	cb 01       	movw	r24, r22
    40bc:	88 0f       	add	r24, r24
    40be:	99 1f       	adc	r25, r25
    40c0:	f3 e0       	ldi	r31, 0x03	; 3
    40c2:	66 0f       	add	r22, r22
    40c4:	77 1f       	adc	r23, r23
    40c6:	fa 95       	dec	r31
    40c8:	e1 f7       	brne	.-8      	; 0x40c2 <_Z20convertTelemConstantha+0x22>
    40ca:	68 0f       	add	r22, r24
    40cc:	79 1f       	adc	r23, r25
			result = value * 10 ;
		break ;
#endif
  }
  return result;
}
    40ce:	cb 01       	movw	r24, r22
    40d0:	08 95       	ret

000040d2 <_Z19get_telemetry_valueh>:


int16_t get_telemetry_value( uint8_t channelIn )
{
	int8_t channel = pgm_read_byte( &TelemIndex[channelIn] ) ;
    40d2:	e8 2f       	mov	r30, r24
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	e3 52       	subi	r30, 0x23	; 35
    40d8:	fc 4f       	sbci	r31, 0xFC	; 252
    40da:	e4 91       	lpm	r30, Z+

  if ( channel == TMOK )
    40dc:	e0 3f       	cpi	r30, 0xF0	; 240
    40de:	49 f1       	breq	.+82     	; 0x4132 <_Z19get_telemetry_valueh+0x60>
	{
		return calc_scaler(channel-V_SC1, 0, 0 ) ;
	}
#endif
#endif
	if ( channel < -3 )	// A GVAR
    40e0:	ed 3f       	cpi	r30, 0xFD	; 253
    40e2:	6c f4       	brge	.+26     	; 0x40fe <_Z19get_telemetry_valueh+0x2c>
	{
		return g_model.gvars[channel-V_GVAR1].gvar ;
    40e4:	ff 27       	eor	r31, r31
    40e6:	e7 fd       	sbrc	r30, 7
    40e8:	f0 95       	com	r31
    40ea:	ee 0f       	add	r30, r30
    40ec:	ff 1f       	adc	r31, r31
    40ee:	eb 58       	subi	r30, 0x8B	; 139
    40f0:	fb 4f       	sbci	r31, 0xFB	; 251
    40f2:	80 81       	ld	r24, Z
    40f4:	e8 2f       	mov	r30, r24
    40f6:	ff 27       	eor	r31, r31
    40f8:	e7 fd       	sbrc	r30, 7
    40fa:	f0 95       	com	r31
    40fc:	1c c0       	rjmp	.+56     	; 0x4136 <_Z19get_telemetry_valueh+0x64>
	}
  switch (channel)
    40fe:	ed 3f       	cpi	r30, 0xFD	; 253
    4100:	99 f0       	breq	.+38     	; 0x4128 <_Z19get_telemetry_valueh+0x56>
    4102:	ed 3f       	cpi	r30, 0xFD	; 253
    4104:	b4 f0       	brlt	.+44     	; 0x4132 <_Z19get_telemetry_valueh+0x60>
    4106:	ef 3f       	cpi	r30, 0xFF	; 255
    4108:	09 f0       	breq	.+2      	; 0x410c <_Z19get_telemetry_valueh+0x3a>
    410a:	9c f4       	brge	.+38     	; 0x4132 <_Z19get_telemetry_valueh+0x60>
	{
    case TIMER1 :
    case TIMER2 :
//#ifdef TWO_TIMERS
    return s_timer[channel+2].s_timerVal ;
    410c:	ff 27       	eor	r31, r31
    410e:	e7 fd       	sbrc	r30, 7
    4110:	f0 95       	com	r31
    4112:	b4 e0       	ldi	r27, 0x04	; 4
    4114:	ee 0f       	add	r30, r30
    4116:	ff 1f       	adc	r31, r31
    4118:	ba 95       	dec	r27
    411a:	e1 f7       	brne	.-8      	; 0x4114 <_Z19get_telemetry_valueh+0x42>
    411c:	e1 55       	subi	r30, 0x51	; 81
    411e:	f9 4f       	sbci	r31, 0xF9	; 249
    4120:	04 84       	ldd	r0, Z+12	; 0x0c
    4122:	f5 85       	ldd	r31, Z+13	; 0x0d
    4124:	e0 2d       	mov	r30, r0
    4126:	07 c0       	rjmp	.+14     	; 0x4136 <_Z19get_telemetry_valueh+0x64>
//#else
//    return TimerG.s_timerVal[channel+2] ;
//#endif
    
    case BATTERY :
    return g_vbat100mV ;
    4128:	80 91 1f 06 	lds	r24, 0x061F
    412c:	e8 2f       	mov	r30, r24
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	02 c0       	rjmp	.+4      	; 0x4136 <_Z19get_telemetry_valueh+0x64>
    4132:	e0 e0       	ldi	r30, 0x00	; 0
    4134:	f0 e0       	ldi	r31, 0x00	; 0
#else
		default :
		return 0 ;
#endif
  }
}
    4136:	cf 01       	movw	r24, r30
    4138:	08 95       	ret

0000413a <_Z7qRotaryv>:

int8_t qRotary()
{
	int8_t diff = 0 ;

	if ( Rotary.Rotary_diff > 0)
    413a:	80 91 a9 05 	lds	r24, 0x05A9
    413e:	18 16       	cp	r1, r24
    4140:	14 f4       	brge	.+4      	; 0x4146 <_Z7qRotaryv+0xc>
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	05 c0       	rjmp	.+10     	; 0x4150 <_Z7qRotaryv+0x16>
	{
		diff = 1 ;
	}
	else if ( Rotary.Rotary_diff < 0)
    4146:	88 23       	and	r24, r24
    4148:	11 f0       	breq	.+4      	; 0x414e <_Z7qRotaryv+0x14>
    414a:	8f ef       	ldi	r24, 0xFF	; 255
    414c:	01 c0       	rjmp	.+2      	; 0x4150 <_Z7qRotaryv+0x16>
    414e:	80 e0       	ldi	r24, 0x00	; 0
	{
		diff = -1 ;
	}
	Rotary.Rotary_diff = 0 ;
    4150:	10 92 a9 05 	sts	0x05A9, r1
	return diff ;
}
    4154:	08 95       	ret

00004156 <_Z6MAXCOLhPKhh>:
uint8_t g_posHorz ;
uint8_t M_longMenuTimer ;

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL( uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax)
    4156:	fb 01       	movw	r30, r22
{
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
    4158:	61 15       	cp	r22, r1
    415a:	71 05       	cpc	r23, r1
    415c:	11 f4       	brne	.+4      	; 0x4162 <_Z6MAXCOLhPKhh+0xc>
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	08 95       	ret
    4162:	84 17       	cp	r24, r20
    4164:	08 f4       	brcc	.+2      	; 0x4168 <_Z6MAXCOLhPKhh+0x12>
    4166:	48 2f       	mov	r20, r24
    4168:	e4 0f       	add	r30, r20
    416a:	f1 1d       	adc	r31, r1
    416c:	84 91       	lpm	r24, Z+
}
    416e:	08 95       	ret

00004170 <_ZL12curveAddressh>:
	}
	
}


NOINLINE static int8_t *curveAddress( uint8_t idx )
    4170:	98 2f       	mov	r25, r24
{
  uint8_t cv9 = idx >= MAX_CURVE5 ;
	return cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx] ;
    4172:	88 30       	cpi	r24, 0x08	; 8
    4174:	68 f0       	brcs	.+26     	; 0x4190 <_ZL12curveAddressh+0x20>
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	08 97       	sbiw	r24, 0x08	; 8
    417a:	9c 01       	movw	r18, r24
    417c:	43 e0       	ldi	r20, 0x03	; 3
    417e:	22 0f       	add	r18, r18
    4180:	33 1f       	adc	r19, r19
    4182:	4a 95       	dec	r20
    4184:	e1 f7       	brne	.-8      	; 0x417e <_ZL12curveAddressh+0xe>
    4186:	28 0f       	add	r18, r24
    4188:	39 1f       	adc	r19, r25
    418a:	28 54       	subi	r18, 0x48	; 72
    418c:	3c 4f       	sbci	r19, 0xFC	; 252
    418e:	06 c0       	rjmp	.+12     	; 0x419c <_ZL12curveAddressh+0x2c>
    4190:	85 e0       	ldi	r24, 0x05	; 5
    4192:	98 9f       	mul	r25, r24
    4194:	90 01       	movw	r18, r0
    4196:	11 24       	eor	r1, r1
    4198:	20 57       	subi	r18, 0x70	; 112
    419a:	3c 4f       	sbci	r19, 0xFC	; 252
}
    419c:	c9 01       	movw	r24, r18
    419e:	08 95       	ret

000041a0 <_Z5expoujj>:
#else
	s_mixMaxSel = current - 2 ;
#endif
}

uint16_t expou(uint16_t x, uint16_t k)
    41a0:	8f 92       	push	r8
    41a2:	9f 92       	push	r9
    41a4:	af 92       	push	r10
    41a6:	bf 92       	push	r11
    41a8:	cf 92       	push	r12
    41aa:	df 92       	push	r13
    41ac:	ef 92       	push	r14
    41ae:	ff 92       	push	r15
    41b0:	0f 93       	push	r16
    41b2:	1f 93       	push	r17
    41b4:	4b 01       	movw	r8, r22
{
  // previous function was this one:
    // k*x*x*x + (1-k)*x
//    return ((unsigned long)x*x*x/0x10000*k/(RESXul*RESXul/0x10000) + (RESKul-k)*x+RESKul/2)/RESKul;

  uint32_t value = (uint32_t) x*x;
    41b6:	5c 01       	movw	r10, r24
    41b8:	cc 24       	eor	r12, r12
    41ba:	dd 24       	eor	r13, r13
    41bc:	c6 01       	movw	r24, r12
    41be:	b5 01       	movw	r22, r10
    41c0:	a6 01       	movw	r20, r12
    41c2:	95 01       	movw	r18, r10
    41c4:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
  value *= (uint32_t)k;
    41c8:	94 01       	movw	r18, r8
    41ca:	40 e0       	ldi	r20, 0x00	; 0
    41cc:	50 e0       	ldi	r21, 0x00	; 0
    41ce:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
  value >>= 8;
    41d2:	67 2f       	mov	r22, r23
    41d4:	78 2f       	mov	r23, r24
    41d6:	89 2f       	mov	r24, r25
    41d8:	99 27       	eor	r25, r25
  value *= (uint32_t)x;
    41da:	a6 01       	movw	r20, r12
    41dc:	95 01       	movw	r18, r10
    41de:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    41e2:	7b 01       	movw	r14, r22
    41e4:	8c 01       	movw	r16, r24
  value >>= 12;
    41e6:	6c e0       	ldi	r22, 0x0C	; 12
    41e8:	16 95       	lsr	r17
    41ea:	07 95       	ror	r16
    41ec:	f7 94       	ror	r15
    41ee:	e7 94       	ror	r14
    41f0:	6a 95       	dec	r22
    41f2:	d1 f7       	brne	.-12     	; 0x41e8 <_Z5expoujj+0x48>
    41f4:	64 e6       	ldi	r22, 0x64	; 100
    41f6:	70 e0       	ldi	r23, 0x00	; 0
    41f8:	68 19       	sub	r22, r8
    41fa:	79 09       	sbc	r23, r9
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    4204:	6e 5c       	subi	r22, 0xCE	; 206
    4206:	7f 4f       	sbci	r23, 0xFF	; 255
    4208:	8f 4f       	sbci	r24, 0xFF	; 255
    420a:	9f 4f       	sbci	r25, 0xFF	; 255
    420c:	6e 0d       	add	r22, r14
    420e:	7f 1d       	adc	r23, r15
    4210:	80 1f       	adc	r24, r16
    4212:	91 1f       	adc	r25, r17
    4214:	24 e6       	ldi	r18, 0x64	; 100
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	40 e0       	ldi	r20, 0x00	; 0
    421a:	50 e0       	ldi	r21, 0x00	; 0
    421c:	0e 94 ab 7e 	call	0xfd56	; 0xfd56 <__udivmodsi4>
    4220:	c9 01       	movw	r24, r18
  value += (uint32_t)(100-k)*x+50;

  // return divu100(value);
  return value/100;
}
    4222:	1f 91       	pop	r17
    4224:	0f 91       	pop	r16
    4226:	ff 90       	pop	r15
    4228:	ef 90       	pop	r14
    422a:	df 90       	pop	r13
    422c:	cf 90       	pop	r12
    422e:	bf 90       	pop	r11
    4230:	af 90       	pop	r10
    4232:	9f 90       	pop	r9
    4234:	8f 90       	pop	r8
    4236:	08 95       	ret

00004238 <_Z4expoii>:
// f(x,k)=exp(ln(x)*k/10) ;P[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
// f(x,k)=x*x*x*k/10 + x*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]
// f(x,k)=x*x*k/10 + x*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]
// f(x,k)=1+(x-1)*(x-1)*(x-1)*k/10 + (x-1)*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]

int16_t expo(int16_t x, int16_t k)
    4238:	ff 92       	push	r15
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	9c 01       	movw	r18, r24
    4240:	ab 01       	movw	r20, r22
{
    if(k == 0) return x;
    4242:	61 15       	cp	r22, r1
    4244:	71 05       	cpc	r23, r1
    4246:	31 f1       	breq	.+76     	; 0x4294 <_Z4expoii+0x5c>
    int16_t   y;
    bool    neg =  x < 0;
    4248:	ff 24       	eor	r15, r15
    424a:	97 ff       	sbrs	r25, 7
    424c:	05 c0       	rjmp	.+10     	; 0x4258 <_Z4expoii+0x20>
    424e:	ff 24       	eor	r15, r15
    4250:	f3 94       	inc	r15
    if(neg)   x = -x;
    4252:	30 95       	com	r19
    4254:	21 95       	neg	r18
    4256:	3f 4f       	sbci	r19, 0xFF	; 255
    if(k<0){
    4258:	57 ff       	sbrs	r21, 7
    425a:	10 c0       	rjmp	.+32     	; 0x427c <_Z4expoii+0x44>
        y = RESXu-expou(RESXu-x,-k);
    425c:	00 e0       	ldi	r16, 0x00	; 0
    425e:	14 e0       	ldi	r17, 0x04	; 4
    4260:	66 27       	eor	r22, r22
    4262:	77 27       	eor	r23, r23
    4264:	64 1b       	sub	r22, r20
    4266:	75 0b       	sbc	r23, r21
    4268:	c8 01       	movw	r24, r16
    426a:	82 1b       	sub	r24, r18
    426c:	93 0b       	sbc	r25, r19
    426e:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <_Z5expoujj>
    4272:	98 01       	movw	r18, r16
    4274:	28 1b       	sub	r18, r24
    4276:	39 0b       	sbc	r19, r25
    4278:	c9 01       	movw	r24, r18
    427a:	04 c0       	rjmp	.+8      	; 0x4284 <_Z4expoii+0x4c>
    }else{
        y = expou(x,k);
    427c:	c9 01       	movw	r24, r18
    427e:	ba 01       	movw	r22, r20
    4280:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <_Z5expoujj>
    }
    return neg? -y:y;
    4284:	ff 20       	and	r15, r15
    4286:	11 f4       	brne	.+4      	; 0x428c <_Z4expoii+0x54>
    4288:	9c 01       	movw	r18, r24
    428a:	04 c0       	rjmp	.+8      	; 0x4294 <_Z4expoii+0x5c>
    428c:	22 27       	eor	r18, r18
    428e:	33 27       	eor	r19, r19
    4290:	28 1b       	sub	r18, r24
    4292:	39 0b       	sbc	r19, r25
}
    4294:	c9 01       	movw	r24, r18
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	ff 90       	pop	r15
    429c:	08 95       	ret

0000429e <_Z8char2idxc>:
////	}

//}


uint8_t char2idx(char c)
    429e:	28 2f       	mov	r18, r24
    42a0:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t ret ;
    for(ret=0;;ret++)
    {
        char cc= pgm_read_byte(s_charTab+ret);
    42a2:	e8 2f       	mov	r30, r24
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	e1 51       	subi	r30, 0x11	; 17
    42a8:	f2 4f       	sbci	r31, 0xF2	; 242
    42aa:	94 91       	lpm	r25, Z+
        if(cc==c) return ret;
    42ac:	92 17       	cp	r25, r18
    42ae:	29 f0       	breq	.+10     	; 0x42ba <_Z8char2idxc+0x1c>
        if(cc==0) return 0;
    42b0:	99 23       	and	r25, r25
    42b2:	11 f0       	breq	.+4      	; 0x42b8 <_Z8char2idxc+0x1a>


uint8_t char2idx(char c)
{
	uint8_t ret ;
    for(ret=0;;ret++)
    42b4:	8f 5f       	subi	r24, 0xFF	; 255
    42b6:	f5 cf       	rjmp	.-22     	; 0x42a2 <_Z8char2idxc+0x4>
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    {
        char cc= pgm_read_byte(s_charTab+ret);
        if(cc==c) return ret;
        if(cc==0) return 0;
    }
}
    42ba:	08 95       	ret

000042bc <_Z8idx2charh>:
char idx2char(uint8_t idx)
{
    if(idx < NUMCHARS) return pgm_read_byte(s_charTab+idx);
    42bc:	82 34       	cpi	r24, 0x42	; 66
    42be:	10 f0       	brcs	.+4      	; 0x42c4 <_Z8idx2charh+0x8>
    42c0:	80 e2       	ldi	r24, 0x20	; 32
    42c2:	08 95       	ret
    42c4:	e8 2f       	mov	r30, r24
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	e1 51       	subi	r30, 0x11	; 17
    42ca:	f2 4f       	sbci	r31, 0xF2	; 242
    42cc:	84 91       	lpm	r24, Z+
    return ' ';
}
    42ce:	08 95       	ret

000042d0 <_Z11resetTimernh>:

void resetTimern( uint8_t timer )
{
	uint16_t time ;
	uint8_t dir ;
	TimerMode *ptConfig = &TimerConfig[timer] ;
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	fc 01       	movw	r30, r24
    42d4:	ee 0f       	add	r30, r30
    42d6:	ff 1f       	adc	r31, r31
    42d8:	ee 0f       	add	r30, r30
    42da:	ff 1f       	adc	r31, r31
    42dc:	e8 0f       	add	r30, r24
    42de:	f9 1f       	adc	r31, r25
    42e0:	e5 55       	subi	r30, 0x55	; 85
    42e2:	fa 4f       	sbci	r31, 0xFA	; 250
	FORCE_INDIRECT(ptConfig) ;
	
	time = ptConfig->tmrVal ;
	dir = ptConfig->tmrDir ;
    42e4:	24 81       	ldd	r18, Z+4	; 0x04
	
  struct t_timer *tptr = &s_timer[timer] ;
    42e6:	dc 01       	movw	r26, r24
    42e8:	84 e0       	ldi	r24, 0x04	; 4
    42ea:	aa 0f       	add	r26, r26
    42ec:	bb 1f       	adc	r27, r27
    42ee:	8a 95       	dec	r24
    42f0:	e1 f7       	brne	.-8      	; 0x42ea <_Z11resetTimernh+0x1a>
    42f2:	a1 57       	subi	r26, 0x71	; 113
    42f4:	b9 4f       	sbci	r27, 0xF9	; 249
	FORCE_INDIRECT(tptr) ;
	
	tptr->last_tmr = time ;
    42f6:	01 90       	ld	r0, Z+
    42f8:	f0 81       	ld	r31, Z
    42fa:	e0 2d       	mov	r30, r0
    42fc:	1f 96       	adiw	r26, 0x0f	; 15
    42fe:	fc 93       	st	X, r31
    4300:	ee 93       	st	-X, r30
    4302:	1e 97       	sbiw	r26, 0x0e	; 14
	tptr->s_timerVal = ( dir ) ? 0 : time ;
    4304:	22 23       	and	r18, r18
    4306:	11 f0       	breq	.+4      	; 0x430c <_Z11resetTimernh+0x3c>
    4308:	e0 e0       	ldi	r30, 0x00	; 0
    430a:	f0 e0       	ldi	r31, 0x00	; 0
    430c:	1d 96       	adiw	r26, 0x0d	; 13
    430e:	fc 93       	st	X, r31
    4310:	ee 93       	st	-X, r30
    4312:	1c 97       	sbiw	r26, 0x0c	; 12
	tptr->s_timerState = TMR_OFF; //is changed to RUNNING dep from mode
    4314:	16 96       	adiw	r26, 0x06	; 6
    4316:	1c 92       	st	X, r1
    4318:	16 97       	sbiw	r26, 0x06	; 6
  tptr->s_timeCumThr=0;
    431a:	19 96       	adiw	r26, 0x09	; 9
    431c:	1c 92       	st	X, r1
    431e:	1e 92       	st	-X, r1
    4320:	18 97       	sbiw	r26, 0x08	; 8
  tptr->s_timeCumSw=0;
    4322:	15 96       	adiw	r26, 0x05	; 5
    4324:	1c 92       	st	X, r1
    4326:	1e 92       	st	-X, r1
    4328:	14 97       	sbiw	r26, 0x04	; 4
  tptr->s_timeCum16ThrP=0;
    432a:	1b 96       	adiw	r26, 0x0b	; 11
    432c:	1c 92       	st	X, r1
    432e:	1e 92       	st	-X, r1
    4330:	1a 97       	sbiw	r26, 0x0a	; 10
	tptr->s_sum = 0 ;
    4332:	1d 92       	st	X+, r1
    4334:	1c 92       	st	X, r1
	

}
    4336:	08 95       	ret

00004338 <_Z11resetTimer1v>:


NOINLINE void resetTimer1(void)
{
  TimeGlobals.s_timeCumAbs=0 ;
    4338:	10 92 16 07 	sts	0x0716, r1
    433c:	10 92 15 07 	sts	0x0715, r1
	resetTimern( 0 ) ;
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	0e 94 68 21 	call	0x42d0	; 0x42d0 <_Z11resetTimernh>
}
    4346:	08 95       	ret

00004348 <_Z11resetTimer2v>:

void resetTimer2()
{
	resetTimern( 1 ) ;
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	0e 94 68 21 	call	0x42d0	; 0x42d0 <_Z11resetTimernh>
}
    434e:	08 95       	ret

00004350 <_Z7isqrt32m>:
#endif	

	asm("") ;
}

uint16_t isqrt32(uint32_t n)
    4350:	af 92       	push	r10
    4352:	bf 92       	push	r11
    4354:	cf 92       	push	r12
    4356:	df 92       	push	r13
    4358:	ef 92       	push	r14
    435a:	ff 92       	push	r15
    435c:	0f 93       	push	r16
    435e:	1f 93       	push	r17
    4360:	cf 93       	push	r28
    4362:	df 93       	push	r29
    4364:	5b 01       	movw	r10, r22
    4366:	6c 01       	movw	r12, r24
    4368:	00 e0       	ldi	r16, 0x00	; 0
    436a:	10 e8       	ldi	r17, 0x80	; 128
    436c:	c0 e0       	ldi	r28, 0x00	; 0
    436e:	d0 e8       	ldi	r29, 0x80	; 128
    4370:	ee 24       	eor	r14, r14
    4372:	ff 24       	eor	r15, r15
{
    uint16_t c = 0x8000;
    uint16_t g = 0x8000;

    for(;;) {
        if((uint32_t)g*g > n)
    4374:	9e 01       	movw	r18, r28
    4376:	40 e0       	ldi	r20, 0x00	; 0
    4378:	50 e0       	ldi	r21, 0x00	; 0
    437a:	ca 01       	movw	r24, r20
    437c:	b9 01       	movw	r22, r18
    437e:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    4382:	a6 16       	cp	r10, r22
    4384:	b7 06       	cpc	r11, r23
    4386:	c8 06       	cpc	r12, r24
    4388:	d9 06       	cpc	r13, r25
    438a:	10 f4       	brcc	.+4      	; 0x4390 <_Z7isqrt32m+0x40>
            g ^= c;
    438c:	c0 27       	eor	r28, r16
    438e:	d1 27       	eor	r29, r17
        c >>= 1;
    4390:	16 95       	lsr	r17
    4392:	07 95       	ror	r16
    4394:	08 94       	sec
    4396:	e1 1c       	adc	r14, r1
    4398:	f1 1c       	adc	r15, r1
        if(c == 0)
    439a:	80 e1       	ldi	r24, 0x10	; 16
    439c:	e8 16       	cp	r14, r24
    439e:	f1 04       	cpc	r15, r1
    43a0:	61 f4       	brne	.+24     	; 0x43ba <_Z7isqrt32m+0x6a>
            return g;
        g |= c;
    }
}
    43a2:	ce 01       	movw	r24, r28
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	ff 90       	pop	r15
    43ae:	ef 90       	pop	r14
    43b0:	df 90       	pop	r13
    43b2:	cf 90       	pop	r12
    43b4:	bf 90       	pop	r11
    43b6:	af 90       	pop	r10
    43b8:	08 95       	ret
        if((uint32_t)g*g > n)
            g ^= c;
        c >>= 1;
        if(c == 0)
            return g;
        g |= c;
    43ba:	c0 2b       	or	r28, r16
    43bc:	d1 2b       	or	r29, r17
    43be:	da cf       	rjmp	.-76     	; 0x4374 <_Z7isqrt32m+0x24>

000043c0 <_Z6intpolih>:
    }
}

int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
    43c0:	0f 93       	push	r16
    43c2:	df 93       	push	r29
    43c4:	cf 93       	push	r28
    43c6:	00 d0       	rcall	.+0      	; 0x43c8 <_Z6intpolih+0x8>
    43c8:	cd b7       	in	r28, 0x3d	; 61
    43ca:	de b7       	in	r29, 0x3e	; 62
    43cc:	9a 83       	std	Y+2, r25	; 0x02
    43ce:	89 83       	std	Y+1, r24	; 0x01
    43d0:	06 2f       	mov	r16, r22
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
    bool    cv9 = idx >= MAX_CURVE5;
		int8_t *crv = curveAddress( idx ) ;
    43d2:	86 2f       	mov	r24, r22
    43d4:	0e 94 b8 20 	call	0x4170	; 0x4170 <_ZL12curveAddressh>
    43d8:	fc 01       	movw	r30, r24
    int16_t erg;

    x+=RESXu;
    43da:	29 81       	ldd	r18, Y+1	; 0x01
    43dc:	3a 81       	ldd	r19, Y+2	; 0x02
    43de:	20 50       	subi	r18, 0x00	; 0
    43e0:	3c 4f       	sbci	r19, 0xFC	; 252
    if(x < 0) {
    43e2:	37 ff       	sbrs	r19, 7
    43e4:	02 c0       	rjmp	.+4      	; 0x43ea <_Z6intpolih+0x2a>
        erg = (int16_t)crv[0] * (RESX/4);
    43e6:	80 81       	ld	r24, Z
    43e8:	12 c0       	rjmp	.+36     	; 0x440e <_Z6intpolih+0x4e>

int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
    bool    cv9 = idx >= MAX_CURVE5;
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	08 30       	cpi	r16, 0x08	; 8
    43ee:	08 f0       	brcs	.+2      	; 0x43f2 <_Z6intpolih+0x32>
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    int16_t erg;

    x+=RESXu;
    if(x < 0) {
        erg = (int16_t)crv[0] * (RESX/4);
    } else if(x >= (RESX*2)) {
    43f2:	68 e0       	ldi	r22, 0x08	; 8
    43f4:	20 30       	cpi	r18, 0x00	; 0
    43f6:	36 07       	cpc	r19, r22
    43f8:	84 f0       	brlt	.+32     	; 0x441a <_Z6intpolih+0x5a>
        erg = (int16_t)crv[(cv9 ? 8 : 4)] * (RESX/4);
    43fa:	88 23       	and	r24, r24
    43fc:	19 f4       	brne	.+6      	; 0x4404 <_Z6intpolih+0x44>
    43fe:	a4 e0       	ldi	r26, 0x04	; 4
    4400:	b0 e0       	ldi	r27, 0x00	; 0
    4402:	02 c0       	rjmp	.+4      	; 0x4408 <_Z6intpolih+0x48>
    4404:	a8 e0       	ldi	r26, 0x08	; 8
    4406:	b0 e0       	ldi	r27, 0x00	; 0
    4408:	ae 0f       	add	r26, r30
    440a:	bf 1f       	adc	r27, r31
    440c:	8c 91       	ld	r24, X
    440e:	99 27       	eor	r25, r25
    4410:	87 fd       	sbrc	r24, 7
    4412:	90 95       	com	r25
    4414:	58 2f       	mov	r21, r24
    4416:	44 27       	eor	r20, r20
    4418:	32 c0       	rjmp	.+100    	; 0x447e <_Z6intpolih+0xbe>
    } else {
        int16_t a,dx;
        if(cv9){
    441a:	88 23       	and	r24, r24
    441c:	31 f0       	breq	.+12     	; 0x442a <_Z6intpolih+0x6a>
            a   = (uint16_t)x / D9;
    441e:	43 2f       	mov	r20, r19
            dx  =((uint16_t)x % D9) * 2;
    4420:	b9 01       	movw	r22, r18
    4422:	70 70       	andi	r23, 0x00	; 0
    4424:	66 0f       	add	r22, r22
    4426:	77 1f       	adc	r23, r23
    4428:	04 c0       	rjmp	.+8      	; 0x4432 <_Z6intpolih+0x72>
        } else {
            a   = (uint16_t)x / D5;
    442a:	43 2f       	mov	r20, r19
    442c:	46 95       	lsr	r20
            dx  = (uint16_t)x % D5;
    442e:	b9 01       	movw	r22, r18
    4430:	71 70       	andi	r23, 0x01	; 1
        }
        erg  = (int16_t)crv[a]*((D5-dx)/2) + (int16_t)crv[a+1]*(dx/2);
    4432:	84 2f       	mov	r24, r20
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	e8 0f       	add	r30, r24
    4438:	f9 1f       	adc	r31, r25
    443a:	81 81       	ldd	r24, Z+1	; 0x01
    443c:	99 27       	eor	r25, r25
    443e:	87 fd       	sbrc	r24, 7
    4440:	90 95       	com	r25
    4442:	9b 01       	movw	r18, r22
    4444:	35 95       	asr	r19
    4446:	27 95       	ror	r18
    4448:	82 9f       	mul	r24, r18
    444a:	a0 01       	movw	r20, r0
    444c:	83 9f       	mul	r24, r19
    444e:	50 0d       	add	r21, r0
    4450:	92 9f       	mul	r25, r18
    4452:	50 0d       	add	r21, r0
    4454:	11 24       	eor	r1, r1
    4456:	20 81       	ld	r18, Z
    4458:	33 27       	eor	r19, r19
    445a:	27 fd       	sbrc	r18, 7
    445c:	30 95       	com	r19
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	92 e0       	ldi	r25, 0x02	; 2
    4462:	86 1b       	sub	r24, r22
    4464:	97 0b       	sbc	r25, r23
    4466:	95 95       	asr	r25
    4468:	87 95       	ror	r24
    446a:	dc 01       	movw	r26, r24
    446c:	2a 9f       	mul	r18, r26
    446e:	c0 01       	movw	r24, r0
    4470:	2b 9f       	mul	r18, r27
    4472:	90 0d       	add	r25, r0
    4474:	3a 9f       	mul	r19, r26
    4476:	90 0d       	add	r25, r0
    4478:	11 24       	eor	r1, r1
    447a:	48 0f       	add	r20, r24
    447c:	59 1f       	adc	r21, r25
    447e:	ca 01       	movw	r24, r20
    4480:	69 e1       	ldi	r22, 0x19	; 25
    4482:	70 e0       	ldi	r23, 0x00	; 0
    4484:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    4488:	cb 01       	movw	r24, r22
    }
    return erg / 25; // 100*D5/RESX;
}
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	0f 91       	pop	r16
    4494:	08 95       	ret

00004496 <_Z10evalOffsetah>:
	}
	asm("") ;
}
//#endif // MODEL_INDEX

uint8_t evalOffset(int8_t sub, uint8_t max)
    4496:	28 2f       	mov	r18, r24
{
  uint8_t t_pgOfs = s_pgOfs ;
    4498:	90 91 e4 06 	lds	r25, 0x06E4
	int8_t x = sub-t_pgOfs ;
    if(sub<1) t_pgOfs=0;
    449c:	18 16       	cp	r1, r24
    449e:	14 f0       	brlt	.+4      	; 0x44a4 <_Z10evalOffsetah+0xe>
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	0d c0       	rjmp	.+26     	; 0x44be <_Z10evalOffsetah+0x28>
//#endif // MODEL_INDEX

uint8_t evalOffset(int8_t sub, uint8_t max)
{
  uint8_t t_pgOfs = s_pgOfs ;
	int8_t x = sub-t_pgOfs ;
    44a4:	38 2f       	mov	r19, r24
    44a6:	39 1b       	sub	r19, r25
    if(sub<1) t_pgOfs=0;
    else if(x>(int8_t)max) t_pgOfs = sub-(int8_t)max;
    44a8:	63 17       	cp	r22, r19
    44aa:	14 f4       	brge	.+4      	; 0x44b0 <_Z10evalOffsetah+0x1a>
    44ac:	98 2f       	mov	r25, r24
    44ae:	06 c0       	rjmp	.+12     	; 0x44bc <_Z10evalOffsetah+0x26>
    else if(x<(int8_t)(max-6)) t_pgOfs = sub-(int8_t)max+6;
    44b0:	86 2f       	mov	r24, r22
    44b2:	86 50       	subi	r24, 0x06	; 6
    44b4:	38 17       	cp	r19, r24
    44b6:	1c f4       	brge	.+6      	; 0x44be <_Z10evalOffsetah+0x28>
    44b8:	92 2f       	mov	r25, r18
    44ba:	9a 5f       	subi	r25, 0xFA	; 250
    44bc:	96 1b       	sub	r25, r22
		return (s_pgOfs = t_pgOfs) ;
    44be:	90 93 e4 06 	sts	0x06E4, r25
}
    44c2:	89 2f       	mov	r24, r25
    44c4:	08 95       	ret

000044c6 <_Z20reachMixerCountLimitv>:
//    lcd_puts_Pleft(4*FH, PSTR(STR_PRESS_EXIT_AB));
}

static uint8_t getMixerCount()
{
  if ( g_model.mixData[MAX_MIXERS-1].destCh )
    44c6:	80 91 fa 02 	lds	r24, 0x02FA
    44ca:	88 23       	and	r24, r24
    44cc:	29 f0       	breq	.+10     	; 0x44d8 <_Z20reachMixerCountLimitv+0x12>
bool reachMixerCountLimit()
{
    // check mixers count limit
    if (getMixerCount() >= MAX_MIXERS)
    {
        pushMenu(menuMixersLimit);
    44ce:	86 e1       	ldi	r24, 0x16	; 22
    44d0:	9d e2       	ldi	r25, 0x2D	; 45
    44d2:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return false;
    }
}
    44d8:	08 95       	ret

000044da <_Z13yesNoMenuExitPKc>:

uint8_t mixToDelete;

void yesNoMenuExit( const prog_char * s )
    44da:	bc 01       	movw	r22, r24
{
	lcd_puts_Pleft(1*FH, s ) ;	
    44dc:	88 e0       	ldi	r24, 0x08	; 8
    44de:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
  lcd_puts_Pleft( 5*FH,PSTR(STR_YES_NO_MENU_EXIT));
    44e2:	88 e2       	ldi	r24, 0x28	; 40
    44e4:	65 e7       	ldi	r22, 0x75	; 117
    44e6:	7e e0       	ldi	r23, 0x0E	; 14
    44e8:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
//  lcd_puts_Pleft( 6*FH,PSTR(STR_MENU_EXIT));
}
    44ec:	08 95       	ret

000044ee <_ZL13editSlowDelayhhh>:
	if(flags & EDIT_DR_SWITCH_EDIT) CHECK_INCDEC_MODELSWITCH( drswitch, min, max) ;
	asm("") ;
	return drswitch ;
}

static uint8_t editSlowDelay( uint8_t y, uint8_t attr, uint8_t value)
    44ee:	ff 92       	push	r15
    44f0:	0f 93       	push	r16
    44f2:	1f 93       	push	r17
    44f4:	f8 2e       	mov	r15, r24
    44f6:	06 2f       	mov	r16, r22
    44f8:	14 2f       	mov	r17, r20
{
  if(attr)  CHECK_INCDEC_H_MODELVAR_0( value, 15); //!! bitfield
    44fa:	66 23       	and	r22, r22
    44fc:	29 f0       	breq	.+10     	; 0x4508 <_ZL13editSlowDelayhhh+0x1a>
    44fe:	84 2f       	mov	r24, r20
    4500:	6f e0       	ldi	r22, 0x0F	; 15
    4502:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    4506:	18 2f       	mov	r17, r24
	uint8_t lval = value ;
	if ( g_model.mixTime )
    4508:	80 91 bb 01 	lds	r24, 0x01BB
    450c:	83 fd       	sbrc	r24, 3
    450e:	02 c0       	rjmp	.+4      	; 0x4514 <_ZL13editSlowDelayhhh+0x26>
    4510:	41 2f       	mov	r20, r17
    4512:	03 c0       	rjmp	.+6      	; 0x451a <_ZL13editSlowDelayhhh+0x2c>
	{
		lval *= 2 ;
    4514:	41 2f       	mov	r20, r17
    4516:	44 0f       	add	r20, r20
		attr |= PREC1 ;
    4518:	00 62       	ori	r16, 0x20	; 32
	}
//	lcd_xlabel_decimal( y, s, lval, attr, FW*16 ) ;
  lcd_outdezAtt(FW*16,y,lval,attr);
    451a:	80 e6       	ldi	r24, 0x60	; 96
    451c:	6f 2d       	mov	r22, r15
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	20 2f       	mov	r18, r16
    4522:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
//  lcd_puts_Pleft( y, s ) ;
//  lcd_outdezAtt(FW*16,y,lval,attr);
	return value ;
}
    4526:	81 2f       	mov	r24, r17
    4528:	1f 91       	pop	r17
    452a:	0f 91       	pop	r16
    452c:	ff 90       	pop	r15
    452e:	08 95       	ret

00004530 <_Z18lcd_xlabel_decimalhPKcjhh>:
//void lcd_outdezAttParam( uint8_t y, int16_t value, uint8_t attr )
//{
//	lcd_outdezAtt( PARAM_OFS, FH, g_model.frsky.FASoffset, attr ) ;
//}

void lcd_xlabel_decimal( uint8_t y, const prog_char * s, uint16_t value, uint8_t attr, uint8_t x )
    4530:	ef 92       	push	r14
    4532:	ff 92       	push	r15
    4534:	0f 93       	push	r16
    4536:	1f 93       	push	r17
    4538:	18 2f       	mov	r17, r24
    453a:	7b 01       	movw	r14, r22
    453c:	80 2f       	mov	r24, r16
{
  lcd_outdezAtt( x, y, value, attr ) ;
    453e:	61 2f       	mov	r22, r17
    4540:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
	lcd_puts_Pleft( y, s ) ;
    4544:	81 2f       	mov	r24, r17
    4546:	b7 01       	movw	r22, r14
    4548:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
}
    454c:	1f 91       	pop	r17
    454e:	0f 91       	pop	r16
    4550:	ff 90       	pop	r15
    4552:	ef 90       	pop	r14
    4554:	08 95       	ret

00004556 <_Z16menu_lcd_HYPHINVhhhh>:
void menu_lcd_onoff( uint8_t x,uint8_t y, uint8_t value, uint8_t mode )
{
    lcd_putsAtt( x, y, value ? Str_ON : Str_OFF,mode ? InverseBlink:0) ;
}

void menu_lcd_HYPHINV( uint8_t x,uint8_t y, uint8_t value, uint8_t mode )
    4556:	0f 93       	push	r16
    4558:	94 2f       	mov	r25, r20
{
    lcd_putsAttIdx( x, y, PSTR(STR_HYPH_INV),value,mode ? InverseBlink:0) ;
    455a:	22 23       	and	r18, r18
    455c:	11 f4       	brne	.+4      	; 0x4562 <_Z16menu_lcd_HYPHINVhhhh+0xc>
    455e:	00 e0       	ldi	r16, 0x00	; 0
    4560:	02 c0       	rjmp	.+4      	; 0x4566 <_Z16menu_lcd_HYPHINVhhhh+0x10>
    4562:	00 91 eb 06 	lds	r16, 0x06EB
    4566:	49 e9       	ldi	r20, 0x99	; 153
    4568:	50 e1       	ldi	r21, 0x10	; 16
    456a:	29 2f       	mov	r18, r25
    456c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
}
    4570:	0f 91       	pop	r16
    4572:	08 95       	ret

00004574 <_Z8putc_0_1hhh>:
//}
//#endif

void putc_0_1( uint8_t x, uint8_t y, uint8_t value )
{
  lcd_putcAtt( x, y, value+'0', value ? INVERS : 0 ) ;
    4574:	94 2f       	mov	r25, r20
    4576:	90 5d       	subi	r25, 0xD0	; 208
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	41 11       	cpse	r20, r1
    457c:	21 e0       	ldi	r18, 0x01	; 1
    457e:	49 2f       	mov	r20, r25
    4580:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
}
    4584:	08 95       	ret

00004586 <_Z9put_curvehhah>:



#endif

void put_curve( uint8_t x, uint8_t y, int8_t idx, uint8_t attr )
    4586:	ef 92       	push	r14
    4588:	ff 92       	push	r15
    458a:	0f 93       	push	r16
    458c:	1f 93       	push	r17
    458e:	08 2f       	mov	r16, r24
    4590:	f6 2e       	mov	r15, r22
    4592:	14 2f       	mov	r17, r20
    4594:	e2 2e       	mov	r14, r18
{
	if ( idx < 0 )
    4596:	47 ff       	sbrs	r20, 7
    4598:	07 c0       	rjmp	.+14     	; 0x45a8 <_Z9put_curvehhah+0x22>
	{
    lcd_putcAtt( x-FW, y, '!', attr ) ;
    459a:	86 50       	subi	r24, 0x06	; 6
    459c:	41 e2       	ldi	r20, 0x21	; 33
    459e:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
		idx = -idx + 6 ;
    45a2:	86 e0       	ldi	r24, 0x06	; 6
    45a4:	81 1b       	sub	r24, r17
    45a6:	18 2f       	mov	r17, r24
	}
	lcd_putsAttIdx( x, y,Curve_Str,idx,attr);
    45a8:	80 2f       	mov	r24, r16
    45aa:	6f 2d       	mov	r22, r15
    45ac:	48 e6       	ldi	r20, 0x68	; 104
    45ae:	53 e0       	ldi	r21, 0x03	; 3
    45b0:	21 2f       	mov	r18, r17
    45b2:	0e 2d       	mov	r16, r14
    45b4:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
}
    45b8:	1f 91       	pop	r17
    45ba:	0f 91       	pop	r16
    45bc:	ff 90       	pop	r15
    45be:	ef 90       	pop	r14
    45c0:	08 95       	ret

000045c2 <_Z17hyphinvMenuItem_mhhh>:
//	putsDrSwitches(PARAM_OFS-FW,y,g_eeGeneral.lightSw, condition ? INVERS : 0 ) ;
//	if( condition) { CHECK_INCDEC_H_GENVAR( value, -MAX_DRSWITCH, MAX_DRSWITCH);}
//	return value ;
//}

uint8_t hyphinvMenuItem_m( uint8_t value, uint8_t y, uint8_t condition )
    45c2:	0f 93       	push	r16
    45c4:	1f 93       	push	r17
    45c6:	08 2f       	mov	r16, r24
    45c8:	14 2f       	mov	r17, r20
{
	menu_lcd_HYPHINV( PARAM_OFS, y, value, condition ) ;
    45ca:	86 e6       	ldi	r24, 0x66	; 102
    45cc:	40 2f       	mov	r20, r16
    45ce:	21 2f       	mov	r18, r17
    45d0:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z16menu_lcd_HYPHINVhhhh>
  if(condition) value = checkIncDec( value, 0, 1, EE_MODEL ) ;
    45d4:	11 23       	and	r17, r17
    45d6:	39 f0       	breq	.+14     	; 0x45e6 <_Z17hyphinvMenuItem_mhhh+0x24>
    45d8:	80 2f       	mov	r24, r16
    45da:	60 e0       	ldi	r22, 0x00	; 0
    45dc:	41 e0       	ldi	r20, 0x01	; 1
    45de:	22 e0       	ldi	r18, 0x02	; 2
    45e0:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
    45e4:	08 2f       	mov	r16, r24
  return value ;
}
    45e6:	80 2f       	mov	r24, r16
    45e8:	1f 91       	pop	r17
    45ea:	0f 91       	pop	r16
    45ec:	08 95       	ret

000045ee <_Z9DO_SQUAREhhh>:
	
 	return (!getSwitch( ped->drSw1,0) ? DR_HIGH :
    !getSwitch( ped->drSw2,0) ? DR_MID : DR_LOW) ;
}

void DO_SQUARE(uint8_t x, uint8_t y, uint8_t w)
    45ee:	cf 92       	push	r12
    45f0:	df 92       	push	r13
    45f2:	ef 92       	push	r14
    45f4:	ff 92       	push	r15
    45f6:	0f 93       	push	r16
    45f8:	1f 93       	push	r17
    45fa:	c8 2e       	mov	r12, r24
    45fc:	16 2f       	mov	r17, r22
    45fe:	f4 2e       	mov	r15, r20
{
//	uint8_t x,y,w ; x = xx; y = yy; w = ww ;
    lcd_vline(x-w/2,y-w/2,w);
    4600:	04 2f       	mov	r16, r20
    4602:	06 95       	lsr	r16
    4604:	e8 2e       	mov	r14, r24
    4606:	e0 1a       	sub	r14, r16
    4608:	d6 2e       	mov	r13, r22
    460a:	d0 1a       	sub	r13, r16
    460c:	8e 2d       	mov	r24, r14
    460e:	6d 2d       	mov	r22, r13
    4610:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
    lcd_hline(x-w/2,y+w/2,w);
    4614:	10 0f       	add	r17, r16
    4616:	8e 2d       	mov	r24, r14
    4618:	61 2f       	mov	r22, r17
    461a:	4f 2d       	mov	r20, r15
    461c:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
    lcd_vline(x+w/2,y-w/2,w);
    4620:	80 2f       	mov	r24, r16
    4622:	8c 0d       	add	r24, r12
    4624:	6d 2d       	mov	r22, r13
    4626:	4f 2d       	mov	r20, r15
    4628:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
    lcd_hline(x-w/2,y-w/2,w);
    462c:	8e 2d       	mov	r24, r14
    462e:	6d 2d       	mov	r22, r13
    4630:	4f 2d       	mov	r20, r15
    4632:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
}
    4636:	1f 91       	pop	r17
    4638:	0f 91       	pop	r16
    463a:	ff 90       	pop	r15
    463c:	ef 90       	pop	r14
    463e:	df 90       	pop	r13
    4640:	cf 90       	pop	r12
    4642:	08 95       	ret

00004644 <_Z8telltalehaa>:
#define BOX_CENTERY  (SCREEN_HEIGHT-9-BOX_WIDTH/2)
#define RBOX_CENTERX  (3*SCREEN_WIDTH/4 - 10)
//#define BOX_CENTERY  (SCREEN_HEIGHT-9-BOX_WIDTH/2)


void telltale( uint8_t centrex, int8_t xval, int8_t yval )
    4644:	ff 92       	push	r15
    4646:	0f 93       	push	r16
    4648:	1f 93       	push	r17
    464a:	18 2f       	mov	r17, r24
    464c:	06 2f       	mov	r16, r22
    464e:	f4 2e       	mov	r15, r20
{
  DO_SQUARE( centrex, BOX_CENTERY, BOX_WIDTH ) ;
    4650:	6c e2       	ldi	r22, 0x2C	; 44
    4652:	47 e1       	ldi	r20, 0x17	; 23
    4654:	0e 94 f7 22 	call	0x45ee	; 0x45ee <_Z9DO_SQUAREhhh>
  DO_CROSS( centrex, BOX_CENTERY,3 ) ;
    4658:	81 2f       	mov	r24, r17
    465a:	6b e2       	ldi	r22, 0x2B	; 43
    465c:	43 e0       	ldi	r20, 0x03	; 3
    465e:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
    4662:	81 2f       	mov	r24, r17
    4664:	81 50       	subi	r24, 0x01	; 1
    4666:	6c e2       	ldi	r22, 0x2C	; 44
    4668:	43 e0       	ldi	r20, 0x03	; 3
    466a:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
	DO_SQUARE( centrex +( xval/((2*RESX/16)/BOX_LIMIT)), BOX_CENTERY-( yval/((2*RESX/16)/BOX_LIMIT)), MARKER_WIDTH ) ;
    466e:	80 2f       	mov	r24, r16
    4670:	67 e0       	ldi	r22, 0x07	; 7
    4672:	0e 94 77 7e 	call	0xfcee	; 0xfcee <__divmodqi4>
    4676:	18 0f       	add	r17, r24
    4678:	8f 2d       	mov	r24, r15
    467a:	69 ef       	ldi	r22, 0xF9	; 249
    467c:	0e 94 77 7e 	call	0xfcee	; 0xfcee <__divmodqi4>
    4680:	68 2f       	mov	r22, r24
    4682:	64 5d       	subi	r22, 0xD4	; 212
    4684:	81 2f       	mov	r24, r17
    4686:	45 e0       	ldi	r20, 0x05	; 5
    4688:	0e 94 f7 22 	call	0x45ee	; 0x45ee <_Z9DO_SQUAREhhh>
}
    468c:	1f 91       	pop	r17
    468e:	0f 91       	pop	r16
    4690:	ff 90       	pop	r15
    4692:	08 95       	ret

00004694 <_Z19doMainScreenGrphicsv>:

void doMainScreenGrphics()
    4694:	ef 92       	push	r14
    4696:	ff 92       	push	r15
    4698:	0f 93       	push	r16
    469a:	1f 93       	push	r17
    469c:	cf 93       	push	r28
    469e:	df 93       	push	r29
{
	{	
		int8_t *cs = phyStick ;
		FORCE_INDIRECT(cs) ;
    46a0:	02 eb       	ldi	r16, 0xB2	; 178
    46a2:	16 e0       	ldi	r17, 0x06	; 6
    46a4:	f8 01       	movw	r30, r16
    46a6:	8f 01       	movw	r16, r30
	
		telltale( LBOX_CENTERX, cs[0], cs[1] ) ;
    46a8:	8a e2       	ldi	r24, 0x2A	; 42
    46aa:	60 81       	ld	r22, Z
    46ac:	41 81       	ldd	r20, Z+1	; 0x01
    46ae:	0e 94 22 23 	call	0x4644	; 0x4644 <_Z8telltalehaa>
		telltale( RBOX_CENTERX, cs[3], cs[2] ) ;
    46b2:	86 e5       	ldi	r24, 0x56	; 86
    46b4:	f8 01       	movw	r30, r16
    46b6:	63 81       	ldd	r22, Z+3	; 0x03
    46b8:	42 81       	ldd	r20, Z+2	; 0x02
    46ba:	0e 94 22 23 	call	0x4644	; 0x4644 <_Z8telltalehaa>
    //    V_BAR(SCREEN_WIDTH/2  ,SCREEN_HEIGHT-10,((calibratedStick[5]+RESX)*BAR_HEIGHT/(RESX*2))+1l) //P2
    //    V_BAR(SCREEN_WIDTH/2+5,SCREEN_HEIGHT-10,((calibratedStick[6]+RESX)*BAR_HEIGHT/(RESX*2))+1l) //P3

    // Optimization by Mike Blandford
	int16_t *cs = calibratedStick ;
	FORCE_INDIRECT(cs) ;
    46be:	c6 eb       	ldi	r28, 0xB6	; 182
    46c0:	d6 e0       	ldi	r29, 0x06	; 6
    46c2:	9a e3       	ldi	r25, 0x3A	; 58
    46c4:	f9 2e       	mov	r15, r25
  {
    uint8_t x, y, len ;			// declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    {
      len = ((cs[y]+RESX)/((RESX*2)/BAR_HEIGHT))+1 ;  // calculate once per loop
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len ) ;
    46c6:	88 e3       	ldi	r24, 0x38	; 56
    46c8:	e8 2e       	mov	r14, r24
	FORCE_INDIRECT(cs) ;
  {
    uint8_t x, y, len ;			// declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    {
      len = ((cs[y]+RESX)/((RESX*2)/BAR_HEIGHT))+1 ;  // calculate once per loop
    46ca:	88 85       	ldd	r24, Y+8	; 0x08
    46cc:	99 85       	ldd	r25, Y+9	; 0x09
    46ce:	80 50       	subi	r24, 0x00	; 0
    46d0:	9c 4f       	sbci	r25, 0xFC	; 252
    46d2:	6d e5       	ldi	r22, 0x5D	; 93
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    46da:	16 2f       	mov	r17, r22
    46dc:	1f 5f       	subi	r17, 0xFF	; 255
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len ) ;
    46de:	0e 2d       	mov	r16, r14
    46e0:	01 1b       	sub	r16, r17
    46e2:	8f 2d       	mov	r24, r15
    46e4:	60 2f       	mov	r22, r16
    46e6:	41 2f       	mov	r20, r17
    46e8:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
    46ec:	8f 2d       	mov	r24, r15
    46ee:	8f 5f       	subi	r24, 0xFF	; 255
    46f0:	60 2f       	mov	r22, r16
    46f2:	41 2f       	mov	r20, r17
    46f4:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
    46f8:	8f 2d       	mov	r24, r15
    46fa:	8e 5f       	subi	r24, 0xFE	; 254
    46fc:	60 2f       	mov	r22, r16
    46fe:	41 2f       	mov	r20, r17
    4700:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
    4704:	22 96       	adiw	r28, 0x02	; 2
    4706:	f5 e0       	ldi	r31, 0x05	; 5
    4708:	ff 0e       	add	r15, r31
    // Optimization by Mike Blandford
	int16_t *cs = calibratedStick ;
	FORCE_INDIRECT(cs) ;
  {
    uint8_t x, y, len ;			// declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    470a:	89 e4       	ldi	r24, 0x49	; 73
    470c:	f8 16       	cp	r15, r24
    470e:	e9 f6       	brne	.-70     	; 0x46ca <_Z19doMainScreenGrphicsv+0x36>
    {
      len = ((cs[y]+RESX)/((RESX*2)/BAR_HEIGHT))+1 ;  // calculate once per loop
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len ) ;
    }
  }
}
    4710:	df 91       	pop	r29
    4712:	cf 91       	pop	r28
    4714:	1f 91       	pop	r17
    4716:	0f 91       	pop	r16
    4718:	ff 90       	pop	r15
    471a:	ef 90       	pop	r14
    471c:	08 95       	ret

0000471e <_Z8editNamehhPhhh>:
	}
	Rotary.Rotary_diff = 0 ;
	return diff ;
}

void editName( uint8_t x, uint8_t y, uint8_t *name, uint8_t len, uint8_t type )
    471e:	df 92       	push	r13
    4720:	ef 92       	push	r14
    4722:	ff 92       	push	r15
    4724:	0f 93       	push	r16
    4726:	1f 93       	push	r17
    4728:	cf 93       	push	r28
    472a:	df 93       	push	r29
    472c:	d8 2e       	mov	r13, r24
    472e:	f6 2e       	mov	r15, r22
    4730:	ea 01       	movw	r28, r20
    4732:	12 2f       	mov	r17, r18
    4734:	e0 2e       	mov	r14, r16
{
	lcd_puts_Pleft( y, PSTR(STR_NAME)) ;
    4736:	86 2f       	mov	r24, r22
    4738:	61 ea       	ldi	r22, 0xA1	; 161
    473a:	70 e1       	ldi	r23, 0x10	; 16
    473c:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
	lcd_putsnAtt( 11*FW, y, (const char *)name, len, BSS ) ;
    4740:	82 e4       	ldi	r24, 0x42	; 66
    4742:	6f 2d       	mov	r22, r15
    4744:	ae 01       	movw	r20, r28
    4746:	21 2f       	mov	r18, r17
    4748:	00 e1       	ldi	r16, 0x10	; 16
    474a:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
	if( type )
    474e:	ee 20       	and	r14, r14
    4750:	09 f4       	brne	.+2      	; 0x4754 <_Z8editNamehhPhhh+0x36>
    4752:	3c c0       	rjmp	.+120    	; 0x47cc <_Z8editNamehhPhhh+0xae>
	{
		lcd_char_inverse( (11+x)*FW, y, 1*FW, s_editMode ) ;
    4754:	06 e0       	ldi	r16, 0x06	; 6
    4756:	d0 9e       	mul	r13, r16
    4758:	c0 01       	movw	r24, r0
    475a:	11 24       	eor	r1, r1
    475c:	8e 5b       	subi	r24, 0xBE	; 190
    475e:	6f 2d       	mov	r22, r15
    4760:	46 e0       	ldi	r20, 0x06	; 6
    4762:	20 91 e5 06 	lds	r18, 0x06E5
    4766:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
		lcd_rect( 11*FW-2, y-1, len*FW+4, 9 ) ;
    476a:	fa 94       	dec	r15
    476c:	10 9f       	mul	r17, r16
    476e:	80 01       	movw	r16, r0
    4770:	11 24       	eor	r1, r1
    4772:	0c 5f       	subi	r16, 0xFC	; 252
    4774:	80 e4       	ldi	r24, 0x40	; 64
    4776:	6f 2d       	mov	r22, r15
    4778:	40 2f       	mov	r20, r16
    477a:	29 e0       	ldi	r18, 0x09	; 9
    477c:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
	  if(s_editMode)
    4780:	80 91 e5 06 	lds	r24, 0x06E5
    4784:	88 23       	and	r24, r24
    4786:	11 f1       	breq	.+68     	; 0x47cc <_Z8editNamehhPhhh+0xae>
		{
     	char v = name[x] ;
    4788:	cd 0d       	add	r28, r13
    478a:	d1 1d       	adc	r29, r1
    478c:	88 81       	ld	r24, Y
			if ( v )
    478e:	88 23       	and	r24, r24
    4790:	11 f0       	breq	.+4      	; 0x4796 <_Z8editNamehhPhhh+0x78>
			{
	  	  v = char2idx(v) ;
    4792:	0e 94 4f 21 	call	0x429e	; 0x429e <_Z8char2idxc>
			}
			v = checkIncDec( v, 0, NUMCHARS-1, type ) ;
    4796:	60 e0       	ldi	r22, 0x00	; 0
    4798:	41 e4       	ldi	r20, 0x41	; 65
    479a:	2e 2d       	mov	r18, r14
    479c:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
        if(cc==0) return 0;
    }
}
char idx2char(uint8_t idx)
{
    if(idx < NUMCHARS) return pgm_read_byte(s_charTab+idx);
    47a0:	82 34       	cpi	r24, 0x42	; 66
    47a2:	10 f0       	brcs	.+4      	; 0x47a8 <_Z8editNamehhPhhh+0x8a>
    47a4:	e0 e2       	ldi	r30, 0x20	; 32
    47a6:	05 c0       	rjmp	.+10     	; 0x47b2 <_Z8editNamehhPhhh+0x94>
    47a8:	e8 2f       	mov	r30, r24
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	e1 51       	subi	r30, 0x11	; 17
    47ae:	f2 4f       	sbci	r31, 0xF2	; 242
    47b0:	e4 91       	lpm	r30, Z+
	  	  v = char2idx(v) ;
			}
			v = checkIncDec( v, 0, NUMCHARS-1, type ) ;
//	  	CHECK_INCDEC_H_MODELVAR_0( v ,NUMCHARS-1);
  	  v = idx2char(v);
			if ( name[x] != v )
    47b2:	88 81       	ld	r24, Y
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	2e 2f       	mov	r18, r30
    47b8:	33 27       	eor	r19, r19
    47ba:	27 fd       	sbrc	r18, 7
    47bc:	30 95       	com	r19
    47be:	82 17       	cp	r24, r18
    47c0:	93 07       	cpc	r25, r19
    47c2:	21 f0       	breq	.+8      	; 0x47cc <_Z8editNamehhPhhh+0xae>
			{
				name[x] = v ;
    47c4:	e8 83       	st	Y, r30
    		eeDirty( type ) ;				// Do here or the last change is not stored in name[]
    47c6:	8e 2d       	mov	r24, r14
    47c8:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
			}
		}
	}
	asm("") ;
}
    47cc:	df 91       	pop	r29
    47ce:	cf 91       	pop	r28
    47d0:	1f 91       	pop	r17
    47d2:	0f 91       	pop	r16
    47d4:	ff 90       	pop	r15
    47d6:	ef 90       	pop	r14
    47d8:	df 90       	pop	r13
    47da:	08 95       	ret

000047dc <_ZL12indexProcesshP7MState2h>:
const prog_char APM Str_DiagAna[] =  "DiagAna" ;

#define MERGE_INDEX_PROCESS

#ifdef MERGE_INDEX_PROCESS
static uint8_t indexProcess( uint8_t event, MState2 *pmstate, uint8_t extra )
    47dc:	cf 93       	push	r28
    47de:	df 93       	push	r29
    47e0:	98 2f       	mov	r25, r24
    47e2:	eb 01       	movw	r28, r22
{
	if (event == EVT_ENTRY)
    47e4:	8f 3b       	cpi	r24, 0xBF	; 191
    47e6:	11 f0       	breq	.+4      	; 0x47ec <_ZL12indexProcesshP7MState2h+0x10>
//		MenuTimer = 2000 ;	// * 0.01 Seconds = 20 seconds
		pmstate->m_posVert = SubmenuIndex - 1 ;
		SubmenuIndex = 0 ;
//		SubMenuFromIndex = 0 ;
	}
	if (event == EVT_ENTRY_UP)
    47e8:	8e 3b       	cpi	r24, 0xBE	; 190
    47ea:	31 f4       	brne	.+12     	; 0x47f8 <_ZL12indexProcesshP7MState2h+0x1c>
	{
		pmstate->m_posVert = SubmenuIndex - 1 ;
    47ec:	80 91 c3 08 	lds	r24, 0x08C3
    47f0:	81 50       	subi	r24, 0x01	; 1
    47f2:	88 83       	st	Y, r24
		SubmenuIndex = 0 ;
    47f4:	10 92 c3 08 	sts	0x08C3, r1
//		SubMenuFromIndex = 0 ;
	}
	
	if ( UseLastSubmenuIndex )
    47f8:	80 91 c6 08 	lds	r24, 0x08C6
    47fc:	88 23       	and	r24, r24
    47fe:	39 f0       	breq	.+14     	; 0x480e <_ZL12indexProcesshP7MState2h+0x32>
	{
		SubmenuIndex = LastSubmenuIndex & 0x7F ;
    4800:	80 91 c7 08 	lds	r24, 0x08C7
    4804:	8f 77       	andi	r24, 0x7F	; 127
    4806:	80 93 c3 08 	sts	0x08C3, r24
		UseLastSubmenuIndex = 0 ;
    480a:	10 92 c6 08 	sts	0x08C6, r1
//		SubMenuFromIndex = 0 ;
	}
	
	if ( SubmenuIndex )
    480e:	20 91 c3 08 	lds	r18, 0x08C3
    4812:	22 23       	and	r18, r18
    4814:	21 f1       	breq	.+72     	; 0x485e <_ZL12indexProcesshP7MState2h+0x82>
	{
  	if (event == EVT_KEY_LONG(KEY_EXIT) )
    4816:	91 38       	cpi	r25, 0x81	; 129
    4818:	49 f4       	brne	.+18     	; 0x482c <_ZL12indexProcesshP7MState2h+0x50>
		{
      s_editMode = false;
    481a:	10 92 e5 06 	sts	0x06E5, r1
			pmstate->m_posVert = SubmenuIndex ;
    481e:	28 83       	st	Y, r18
			SubmenuIndex = 0 ;
    4820:	10 92 c3 08 	sts	0x08C3, r1
			killEvents(event) ;
    4824:	81 e8       	ldi	r24, 0x81	; 129
    4826:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
    482a:	17 c0       	rjmp	.+46     	; 0x485a <_ZL12indexProcesshP7MState2h+0x7e>
			event = 0 ;
		}
  	if (event == EVT_KEY_FIRST(KEY_EXIT) )
    482c:	91 36       	cpi	r25, 0x61	; 97
    482e:	a9 f0       	breq	.+42     	; 0x485a <_ZL12indexProcesshP7MState2h+0x7e>
		{
			event = 0 ;
		}
  	if ( (event == EVT_KEY_BREAK(KEY_EXIT) ) || (event == EVT_KEY_LONG(BTN_RE) ) )
    4830:	91 32       	cpi	r25, 0x21	; 33
    4832:	11 f0       	breq	.+4      	; 0x4838 <_ZL12indexProcesshP7MState2h+0x5c>
    4834:	9e 38       	cpi	r25, 0x8E	; 142
    4836:	a1 f5       	brne	.+104    	; 0x48a0 <_ZL12indexProcesshP7MState2h+0xc4>
		{
      if(s_editMode)
    4838:	80 91 e5 06 	lds	r24, 0x06E5
    483c:	88 23       	and	r24, r24
    483e:	19 f0       	breq	.+6      	; 0x4846 <_ZL12indexProcesshP7MState2h+0x6a>
			{
        s_editMode = false;
    4840:	10 92 e5 06 	sts	0x06E5, r1
    4844:	0a c0       	rjmp	.+20     	; 0x485a <_ZL12indexProcesshP7MState2h+0x7e>
			}
			else
			{
				pmstate->m_posVert = SubmenuIndex - 1 ;
    4846:	21 50       	subi	r18, 0x01	; 1
    4848:	28 83       	st	Y, r18
				SubmenuIndex = 0 ;
    484a:	10 92 c3 08 	sts	0x08C3, r1
				killEvents(event) ;
    484e:	89 2f       	mov	r24, r25
    4850:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
				audioDefevent(AU_MENUS) ;
    4854:	87 e1       	ldi	r24, 0x17	; 23
    4856:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	21 c0       	rjmp	.+66     	; 0x48a0 <_ZL12indexProcesshP7MState2h+0xc4>
			event = 0 ;
		}
	}
	else
	{
		uint8_t pv = pmstate->m_posVert ;
    485e:	88 81       	ld	r24, Y
		if (event == EVT_KEY_FIRST(KEY_RIGHT) )
    4860:	94 36       	cpi	r25, 0x64	; 100
    4862:	21 f4       	brne	.+8      	; 0x486c <_ZL12indexProcesshP7MState2h+0x90>
		{
			if ( pv < extra )
    4864:	84 17       	cp	r24, r20
    4866:	d8 f4       	brcc	.+54     	; 0x489e <_ZL12indexProcesshP7MState2h+0xc2>
			{
				pv += 7 ;
    4868:	89 5f       	subi	r24, 0xF9	; 249
    486a:	19 c0       	rjmp	.+50     	; 0x489e <_ZL12indexProcesshP7MState2h+0xc2>
			}
		}
		if (event == EVT_KEY_FIRST(KEY_LEFT) )
    486c:	95 36       	cpi	r25, 0x65	; 101
    486e:	21 f4       	brne	.+8      	; 0x4878 <_ZL12indexProcesshP7MState2h+0x9c>
		{
			if ( pv >= 7)
    4870:	87 30       	cpi	r24, 0x07	; 7
    4872:	a8 f0       	brcs	.+42     	; 0x489e <_ZL12indexProcesshP7MState2h+0xc2>
			{
				pv -= 7 ;
    4874:	87 50       	subi	r24, 0x07	; 7
    4876:	13 c0       	rjmp	.+38     	; 0x489e <_ZL12indexProcesshP7MState2h+0xc2>
			}
		}

 		if ( (event == EVT_KEY_FIRST(KEY_MENU) ) ||(event == EVT_KEY_BREAK(BTN_RE) ) )
    4878:	90 36       	cpi	r25, 0x60	; 96
    487a:	11 f0       	breq	.+4      	; 0x4880 <_ZL12indexProcesshP7MState2h+0xa4>
    487c:	9e 32       	cpi	r25, 0x2E	; 46
    487e:	79 f4       	brne	.+30     	; 0x489e <_ZL12indexProcesshP7MState2h+0xc2>
		{
			SubmenuIndex = pv + 1 ;
    4880:	8f 5f       	subi	r24, 0xFF	; 255
    4882:	80 93 c3 08 	sts	0x08C3, r24
			LastSubmenuIndex = SubmenuIndex | 0x80 ;
    4886:	80 68       	ori	r24, 0x80	; 128
    4888:	80 93 c7 08 	sts	0x08C7, r24
			pv = 0 ;
			killEvents(event) ;
    488c:	89 2f       	mov	r24, r25
    488e:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
			g_posHorz = Tevent = event = 0 ;
    4892:	10 92 aa 05 	sts	0x05AA, r1
    4896:	10 92 0c 07 	sts	0x070C, r1
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	80 e0       	ldi	r24, 0x00	; 0
		}
		pmstate->m_posVert = pv ;
    489e:	88 83       	st	Y, r24
	}
	return event ;
}
    48a0:	89 2f       	mov	r24, r25
    48a2:	df 91       	pop	r29
    48a4:	cf 91       	pop	r28
    48a6:	08 95       	ret

000048a8 <_ZL12displayIndexPKPKchhh>:
#endif // MERGE_INDEX_PROCESS

static void displayIndex( const prog_char *const strings[], uint8_t extra, uint8_t lines, uint8_t highlight )
    48a8:	df 92       	push	r13
    48aa:	ef 92       	push	r14
    48ac:	ff 92       	push	r15
    48ae:	0f 93       	push	r16
    48b0:	1f 93       	push	r17
    48b2:	cf 93       	push	r28
    48b4:	df 93       	push	r29
    48b6:	d6 2e       	mov	r13, r22
    48b8:	e4 2e       	mov	r14, r20
    48ba:	f2 2e       	mov	r15, r18
    48bc:	ec 01       	movw	r28, r24
    48be:	00 e0       	ldi	r16, 0x00	; 0
    48c0:	18 e0       	ldi	r17, 0x08	; 8
    48c2:	13 c0       	rjmp	.+38     	; 0x48ea <_ZL12displayIndexPKPKchhh+0x42>
{
	for ( uint8_t i = 0 ; i < lines ; i += 1 )
	{
		lcd_puts_Pleft((i+1)*FH, (const prog_char *)pgm_read_adr( &strings[i] ) ) ;
    48c4:	fe 01       	movw	r30, r28
    48c6:	65 91       	lpm	r22, Z+
    48c8:	74 91       	lpm	r23, Z+
    48ca:	81 2f       	mov	r24, r17
    48cc:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
		if ( i < extra )
    48d0:	0d 15       	cp	r16, r13
    48d2:	40 f4       	brcc	.+16     	; 0x48e4 <_ZL12displayIndexPKPKchhh+0x3c>
    48d4:	fe 01       	movw	r30, r28
    48d6:	3e 96       	adiw	r30, 0x0e	; 14
		{
			lcd_puts_P( 69, (i+1)*FH, (const prog_char *)pgm_read_adr( &strings[i+7] ) ) ;
    48d8:	45 91       	lpm	r20, Z+
    48da:	54 91       	lpm	r21, Z+
    48dc:	85 e4       	ldi	r24, 0x45	; 69
    48de:	61 2f       	mov	r22, r17
    48e0:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
}
#endif // MERGE_INDEX_PROCESS

static void displayIndex( const prog_char *const strings[], uint8_t extra, uint8_t lines, uint8_t highlight )
{
	for ( uint8_t i = 0 ; i < lines ; i += 1 )
    48e4:	0f 5f       	subi	r16, 0xFF	; 255
    48e6:	22 96       	adiw	r28, 0x02	; 2
    48e8:	18 5f       	subi	r17, 0xF8	; 248
    48ea:	0e 15       	cp	r16, r14
    48ec:	58 f3       	brcs	.-42     	; 0x48c4 <_ZL12displayIndexPKPKchhh+0x1c>
		{
			lcd_puts_P( 69, (i+1)*FH, (const prog_char *)pgm_read_adr( &strings[i+7] ) ) ;
		}
	} 
	
	lcd_vline( 67, 8, 55 ) ;
    48ee:	83 e4       	ldi	r24, 0x43	; 67
    48f0:	68 e0       	ldi	r22, 0x08	; 8
    48f2:	47 e3       	ldi	r20, 0x37	; 55
    48f4:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>

	if ( highlight )
    48f8:	ff 20       	and	r15, r15
    48fa:	c9 f0       	breq	.+50     	; 0x492e <_ZL12displayIndexPKPKchhh+0x86>
    48fc:	6f 2d       	mov	r22, r15
    48fe:	70 e0       	ldi	r23, 0x00	; 0
	{
		if ( highlight > 7 )
    4900:	87 e0       	ldi	r24, 0x07	; 7
    4902:	8f 15       	cp	r24, r15
    4904:	50 f4       	brcc	.+20     	; 0x491a <_ZL12displayIndexPKPKchhh+0x72>
		{
			lcd_char_inverse( 69, (highlight-7)*FH, 59, 0 ) ;
    4906:	67 50       	subi	r22, 0x07	; 7
    4908:	70 40       	sbci	r23, 0x00	; 0
    490a:	33 e0       	ldi	r19, 0x03	; 3
    490c:	66 0f       	add	r22, r22
    490e:	77 1f       	adc	r23, r23
    4910:	3a 95       	dec	r19
    4912:	e1 f7       	brne	.-8      	; 0x490c <_ZL12displayIndexPKPKchhh+0x64>
    4914:	85 e4       	ldi	r24, 0x45	; 69
    4916:	4b e3       	ldi	r20, 0x3B	; 59
    4918:	07 c0       	rjmp	.+14     	; 0x4928 <_ZL12displayIndexPKPKchhh+0x80>
		}
		else
		{
			lcd_char_inverse( 0, highlight*FH, 66, 0 ) ;
    491a:	23 e0       	ldi	r18, 0x03	; 3
    491c:	66 0f       	add	r22, r22
    491e:	77 1f       	adc	r23, r23
    4920:	2a 95       	dec	r18
    4922:	e1 f7       	brne	.-8      	; 0x491c <_ZL12displayIndexPKPKchhh+0x74>
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	42 e4       	ldi	r20, 0x42	; 66
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
		}
	}
}
    492e:	df 91       	pop	r29
    4930:	cf 91       	pop	r28
    4932:	1f 91       	pop	r17
    4934:	0f 91       	pop	r16
    4936:	ff 90       	pop	r15
    4938:	ef 90       	pop	r14
    493a:	df 90       	pop	r13
    493c:	08 95       	ret

0000493e <_Z12putsChnOpRawhhP9t_MixDatah>:
	return value ;
}

const prog_char APM SW_3_IDX[] = "\004sIDxsTHRsRUDsELEsAILsGEAsTRN" ;

void putsChnOpRaw( uint8_t x, uint8_t y, MixData *md2, uint8_t attr )
    493e:	ff 92       	push	r15
    4940:	0f 93       	push	r16
    4942:	1f 93       	push	r17
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	18 2f       	mov	r17, r24
    494a:	f6 2e       	mov	r15, r22
    494c:	ea 01       	movw	r28, r20
    494e:	02 2f       	mov	r16, r18
{
	if ( md2->srcRaw == MIX_3POS )
    4950:	49 81       	ldd	r20, Y+1	; 0x01
    4952:	45 32       	cpi	r20, 0x25	; 37
    4954:	49 f4       	brne	.+18     	; 0x4968 <_Z12putsChnOpRawhhP9t_MixDatah+0x2a>
	{
		lcd_putsAttIdx( x, y, SW_3_IDX, md2->sw23pos, attr ) ;
    4956:	29 85       	ldd	r18, Y+9	; 0x09
    4958:	22 95       	swap	r18
    495a:	26 95       	lsr	r18
    495c:	27 70       	andi	r18, 0x07	; 7
    495e:	4f e8       	ldi	r20, 0x8F	; 143
    4960:	5f e0       	ldi	r21, 0x0F	; 15
    4962:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    4966:	11 c0       	rjmp	.+34     	; 0x498a <_Z12putsChnOpRawhhP9t_MixDatah+0x4c>
	}
	else
	{
		putsChnRaw( x, y, md2->srcRaw, attr| MIX_SOURCE ) ;
    4968:	00 61       	ori	r16, 0x10	; 16
    496a:	20 2f       	mov	r18, r16
    496c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
		if ( ( md2->srcRaw >= CHOUT_BASE ) && ( md2->srcRaw < CHOUT_BASE + NUM_CHNOUT ) )
    4970:	89 81       	ldd	r24, Y+1	; 0x01
    4972:	84 51       	subi	r24, 0x14	; 20
    4974:	80 31       	cpi	r24, 0x10	; 16
    4976:	48 f4       	brcc	.+18     	; 0x498a <_Z12putsChnOpRawhhP9t_MixDatah+0x4c>
		{
			if ( md2->disableExpoDr )
    4978:	8f 81       	ldd	r24, Y+7	; 0x07
    497a:	86 ff       	sbrs	r24, 6
    497c:	06 c0       	rjmp	.+12     	; 0x498a <_Z12putsChnOpRawhhP9t_MixDatah+0x4c>
			{
				lcd_puts_P( x, y, PSTR("OP") ) ;
    497e:	81 2f       	mov	r24, r17
    4980:	6f 2d       	mov	r22, r15
    4982:	4d ea       	ldi	r20, 0xAD	; 173
    4984:	5f e0       	ldi	r21, 0x0F	; 15
    4986:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
			}
		}
	}
	asm("") ;
}
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	1f 91       	pop	r17
    4990:	0f 91       	pop	r16
    4992:	ff 90       	pop	r15
    4994:	08 95       	ret

00004996 <_Z11displayNextv>:
//	return value ;
//}

void displayNext()
{
	lcd_puts_P( 15*FW, 7*FH, PSTR("[More]") ) ;
    4996:	8a e5       	ldi	r24, 0x5A	; 90
    4998:	68 e3       	ldi	r22, 0x38	; 56
    499a:	42 e8       	ldi	r20, 0x82	; 130
    499c:	50 e1       	ldi	r21, 0x10	; 16
    499e:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
}
    49a2:	08 95       	ret

000049a4 <_Z18dispFlightModenamehhh>:
			break ;
	  }
	}
}

void dispFlightModename( uint8_t x, uint8_t y, uint8_t mode )
    49a4:	ff 92       	push	r15
    49a6:	0f 93       	push	r16
    49a8:	1f 93       	push	r17
    49aa:	18 2f       	mov	r17, r24
    49ac:	f6 2e       	mov	r15, r22
    49ae:	04 2f       	mov	r16, r20
{
  lcd_puts_P( x, y, PSTR(STR_SP_FM)+1 ) ;
    49b0:	49 e7       	ldi	r20, 0x79	; 121
    49b2:	5d e0       	ldi	r21, 0x0D	; 13
    49b4:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
  lcd_putc( x+2*FW, y, '0'+mode ) ;
    49b8:	00 5d       	subi	r16, 0xD0	; 208
    49ba:	81 2f       	mov	r24, r17
    49bc:	84 5f       	subi	r24, 0xF4	; 244
    49be:	6f 2d       	mov	r22, r15
    49c0:	40 2f       	mov	r20, r16
    49c2:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
}
    49c6:	1f 91       	pop	r17
    49c8:	0f 91       	pop	r16
    49ca:	ff 90       	pop	r15
    49cc:	08 95       	ret

000049ce <_Z12displayTimerhhhh>:
		return 0 ;
#endif
  }
}

void displayTimer( uint8_t x, uint8_t y, uint8_t timer, uint8_t att )
    49ce:	0f 93       	push	r16
    49d0:	98 2f       	mov	r25, r24
{
	struct t_timer *tptr = &s_timer[timer] ;
    49d2:	e4 2f       	mov	r30, r20
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	44 e0       	ldi	r20, 0x04	; 4
    49d8:	ee 0f       	add	r30, r30
    49da:	ff 1f       	adc	r31, r31
    49dc:	4a 95       	dec	r20
    49de:	e1 f7       	brne	.-8      	; 0x49d8 <_Z12displayTimerhhhh+0xa>
    49e0:	e1 57       	subi	r30, 0x71	; 113
    49e2:	f9 4f       	sbci	r31, 0xF9	; 249
	FORCE_INDIRECT(tptr) ;
  att |= (tptr->s_timerState==TMR_BEEPING ? BLINK : 0);
    49e4:	86 81       	ldd	r24, Z+6	; 0x06
    49e6:	82 30       	cpi	r24, 0x02	; 2
    49e8:	11 f0       	breq	.+4      	; 0x49ee <_Z12displayTimerhhhh+0x20>
    49ea:	00 e0       	ldi	r16, 0x00	; 0
    49ec:	01 c0       	rjmp	.+2      	; 0x49f0 <_Z12displayTimerhhhh+0x22>
    49ee:	02 e0       	ldi	r16, 0x02	; 2
    49f0:	02 2b       	or	r16, r18
  putsTime( x, y, tptr->s_timerVal, att, att ) ;
    49f2:	44 85       	ldd	r20, Z+12	; 0x0c
    49f4:	55 85       	ldd	r21, Z+13	; 0x0d
    49f6:	89 2f       	mov	r24, r25
    49f8:	20 2f       	mov	r18, r16
    49fa:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <_Z8putsTimehhihh>
}
    49fe:	0f 91       	pop	r16
    4a00:	08 95       	ret

00004a02 <_Z14menu_lcd_onoffhhhh>:
//    return PSTR(CURV_STR)	;
//}	

void menu_lcd_onoff( uint8_t x,uint8_t y, uint8_t value, uint8_t mode )
{
    lcd_putsAtt( x, y, value ? Str_ON : Str_OFF,mode ? InverseBlink:0) ;
    4a02:	44 23       	and	r20, r20
    4a04:	19 f4       	brne	.+6      	; 0x4a0c <_Z14menu_lcd_onoffhhhh+0xa>
    4a06:	4b e2       	ldi	r20, 0x2B	; 43
    4a08:	51 e0       	ldi	r21, 0x01	; 1
    4a0a:	02 c0       	rjmp	.+4      	; 0x4a10 <_Z14menu_lcd_onoffhhhh+0xe>
    4a0c:	4f e2       	ldi	r20, 0x2F	; 47
    4a0e:	51 e0       	ldi	r21, 0x01	; 1
    4a10:	22 23       	and	r18, r18
    4a12:	11 f0       	breq	.+4      	; 0x4a18 <_Z14menu_lcd_onoffhhhh+0x16>
    4a14:	20 91 eb 06 	lds	r18, 0x06EB
    4a18:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
}
    4a1c:	08 95       	ret

00004a1e <_ZL9onoffItemhhhh>:
//#endif




static uint8_t onoffItem( uint8_t value, uint8_t y, uint8_t condition, uint8_t flags )
    4a1e:	ff 92       	push	r15
    4a20:	0f 93       	push	r16
    4a22:	1f 93       	push	r17
    4a24:	08 2f       	mov	r16, r24
    4a26:	14 2f       	mov	r17, r20
    4a28:	f2 2e       	mov	r15, r18
{
	menu_lcd_onoff( PARAM_OFS, y, value, condition ) ;
    4a2a:	86 e6       	ldi	r24, 0x66	; 102
    4a2c:	40 2f       	mov	r20, r16
    4a2e:	21 2f       	mov	r18, r17
    4a30:	0e 94 01 25 	call	0x4a02	; 0x4a02 <_Z14menu_lcd_onoffhhhh>
  if(condition) value = checkIncDec( value, 0, 1, flags ) ;
    4a34:	11 23       	and	r17, r17
    4a36:	39 f0       	breq	.+14     	; 0x4a46 <_ZL9onoffItemhhhh+0x28>
    4a38:	80 2f       	mov	r24, r16
    4a3a:	60 e0       	ldi	r22, 0x00	; 0
    4a3c:	41 e0       	ldi	r20, 0x01	; 1
    4a3e:	2f 2d       	mov	r18, r15
    4a40:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
    4a44:	08 2f       	mov	r16, r24
  return value ;
}
    4a46:	80 2f       	mov	r24, r16
    4a48:	1f 91       	pop	r17
    4a4a:	0f 91       	pop	r16
    4a4c:	ff 90       	pop	r15
    4a4e:	08 95       	ret

00004a50 <_ZL15onoffMenuItem_ghhPKch>:
{
    lcd_puts_Pleft(y, s);
		return onoffItem(value, y, condition, EE_MODEL ) ;
}

static uint8_t onoffMenuItem_g( uint8_t value, uint8_t y, const prog_char *s, uint8_t condition )
    4a50:	ff 92       	push	r15
    4a52:	0f 93       	push	r16
    4a54:	1f 93       	push	r17
    4a56:	f8 2e       	mov	r15, r24
    4a58:	16 2f       	mov	r17, r22
    4a5a:	02 2f       	mov	r16, r18
	return 1-onoffItem_m( 1-value, y, condition ) ;
}

static uint8_t onoffMenuItem( uint8_t value, uint8_t y, const prog_char *s, uint8_t condition, uint8_t flags )
{
    lcd_puts_Pleft(y, s);
    4a5c:	86 2f       	mov	r24, r22
    4a5e:	ba 01       	movw	r22, r20
    4a60:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
		return onoffItem(value, y, condition, EE_MODEL ) ;
    4a64:	8f 2d       	mov	r24, r15
    4a66:	61 2f       	mov	r22, r17
    4a68:	40 2f       	mov	r20, r16
    4a6a:	22 e0       	ldi	r18, 0x02	; 2
    4a6c:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
}

static uint8_t onoffMenuItem_g( uint8_t value, uint8_t y, const prog_char *s, uint8_t condition )
{
	return onoffMenuItem( value, y, s, condition, EE_GENERAL ) ;
}
    4a70:	1f 91       	pop	r17
    4a72:	0f 91       	pop	r16
    4a74:	ff 90       	pop	r15
    4a76:	08 95       	ret

00004a78 <_ZL15offonMenuItem_ghhPKch>:

static uint8_t offonMenuItem_g( uint8_t value, uint8_t y, const prog_char *s, uint8_t condition )
    4a78:	1f 93       	push	r17
{
	return 1-onoffMenuItem_g( 1-value, y, s, condition ) ;
    4a7a:	11 e0       	ldi	r17, 0x01	; 1
    4a7c:	91 2f       	mov	r25, r17
    4a7e:	98 1b       	sub	r25, r24
    4a80:	89 2f       	mov	r24, r25
    4a82:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
}
    4a86:	18 1b       	sub	r17, r24
    4a88:	81 2f       	mov	r24, r17
    4a8a:	1f 91       	pop	r17
    4a8c:	08 95       	ret

00004a8e <_Z6TITLEPPKc>:
	}
	asm("") ;
}


uint8_t TITLEP( const prog_char *pstr) { return lcd_putsAtt(0,0,pstr,INVERS) ; }
    4a8e:	ac 01       	movw	r20, r24
    4a90:	80 e0       	ldi	r24, 0x00	; 0
    4a92:	60 e0       	ldi	r22, 0x00	; 0
    4a94:	21 e0       	ldi	r18, 0x01	; 1
    4a96:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
    4a9a:	08 95       	ret

00004a9c <_Z8dispGvarhhhh>:

#if GVARS

const prog_char APM Str_GV[] = STR_GV ;

void dispGvar( uint8_t x, uint8_t y, uint8_t gvar, uint8_t attr )
    4a9c:	ef 92       	push	r14
    4a9e:	ff 92       	push	r15
    4aa0:	0f 93       	push	r16
    4aa2:	1f 93       	push	r17
    4aa4:	08 2f       	mov	r16, r24
    4aa6:	f6 2e       	mov	r15, r22
    4aa8:	14 2f       	mov	r17, r20
    4aaa:	e2 2e       	mov	r14, r18
{
	lcd_putsAtt( x, y, Str_GV, attr ) ;
    4aac:	4d ec       	ldi	r20, 0xCD	; 205
    4aae:	5f e0       	ldi	r21, 0x0F	; 15
    4ab0:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
	lcd_putcAtt( x+2*FW, y, gvar+'0', attr ) ;
    4ab4:	10 5d       	subi	r17, 0xD0	; 208
    4ab6:	80 2f       	mov	r24, r16
    4ab8:	84 5f       	subi	r24, 0xF4	; 244
    4aba:	6f 2d       	mov	r22, r15
    4abc:	41 2f       	mov	r20, r17
    4abe:	2e 2d       	mov	r18, r14
    4ac0:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
}
    4ac4:	1f 91       	pop	r17
    4ac6:	0f 91       	pop	r16
    4ac8:	ff 90       	pop	r15
    4aca:	ef 90       	pop	r14
    4acc:	08 95       	ret

00004ace <_Z12gvarMenuItemhhaaah>:


int8_t gvarMenuItem(uint8_t x, uint8_t y, int8_t value, int8_t min, int8_t max, uint8_t attr )
    4ace:	df 92       	push	r13
    4ad0:	ef 92       	push	r14
    4ad2:	ff 92       	push	r15
    4ad4:	0f 93       	push	r16
    4ad6:	1f 93       	push	r17
    4ad8:	98 2f       	mov	r25, r24
    4ada:	14 2f       	mov	r17, r20
    4adc:	f2 2e       	mov	r15, r18
    4ade:	d0 2e       	mov	r13, r16
    4ae0:	2e 2d       	mov	r18, r14
{
  uint8_t invers = attr&(INVERS|BLINK);
    4ae2:	0e 2d       	mov	r16, r14
    4ae4:	03 70       	andi	r16, 0x03	; 3

  if (value >= 126 || value <= -126)
    4ae6:	84 2f       	mov	r24, r20
    4ae8:	83 58       	subi	r24, 0x83	; 131
    4aea:	8b 3f       	cpi	r24, 0xFB	; 251
    4aec:	88 f0       	brcs	.+34     	; 0x4b10 <_Z12gvarMenuItemhhaaah+0x42>
	{
		dispGvar( x-3*FW, y, (uint8_t)value - 125, attr ) ;
    4aee:	4d 57       	subi	r20, 0x7D	; 125
    4af0:	89 2f       	mov	r24, r25
    4af2:	82 51       	subi	r24, 0x12	; 18
    4af4:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_Z8dispGvarhhhh>
    if (invers) value = checkIncDec16((uint8_t)value, 126, 130, EE_MODEL);
    4af8:	00 23       	and	r16, r16
    4afa:	61 f1       	breq	.+88     	; 0x4b54 <_Z12gvarMenuItemhhaaah+0x86>
    4afc:	81 2f       	mov	r24, r17
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	6e e7       	ldi	r22, 0x7E	; 126
    4b02:	70 e0       	ldi	r23, 0x00	; 0
    4b04:	42 e8       	ldi	r20, 0x82	; 130
    4b06:	50 e0       	ldi	r21, 0x00	; 0
    4b08:	22 e0       	ldi	r18, 0x02	; 2
    4b0a:	0e 94 b2 12 	call	0x2564	; 0x2564 <_Z13checkIncDec16iiih>
    4b0e:	0d c0       	rjmp	.+26     	; 0x4b2a <_Z12gvarMenuItemhhaaah+0x5c>
  }
  else
	{
    lcd_outdezAtt(x, y, value, attr ) ;
    4b10:	55 27       	eor	r21, r21
    4b12:	47 fd       	sbrc	r20, 7
    4b14:	50 95       	com	r21
    4b16:	89 2f       	mov	r24, r25
    4b18:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    if (invers) CHECK_INCDEC_H_MODELVAR(value, min, max);
    4b1c:	00 23       	and	r16, r16
    4b1e:	d1 f0       	breq	.+52     	; 0x4b54 <_Z12gvarMenuItemhhaaah+0x86>
    4b20:	81 2f       	mov	r24, r17
    4b22:	6f 2d       	mov	r22, r15
    4b24:	4d 2d       	mov	r20, r13
    4b26:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    4b2a:	18 2f       	mov	r17, r24
  }
	if (invers)
	{
		if ( Tevent == EVT_TOGGLE_GVAR )
    4b2c:	80 91 aa 05 	lds	r24, 0x05AA
    4b30:	8d 3b       	cpi	r24, 0xBD	; 189
    4b32:	81 f4       	brne	.+32     	; 0x4b54 <_Z12gvarMenuItemhhaaah+0x86>
		{
    	value = ((value >= 126 || value <= -126) ? g_model.gvars[(uint8_t)value-126].gvar : 126);
    4b34:	81 2f       	mov	r24, r17
    4b36:	83 58       	subi	r24, 0x83	; 131
    4b38:	8b 3f       	cpi	r24, 0xFB	; 251
    4b3a:	10 f4       	brcc	.+4      	; 0x4b40 <_Z12gvarMenuItemhhaaah+0x72>
    4b3c:	1e e7       	ldi	r17, 0x7E	; 126
    4b3e:	07 c0       	rjmp	.+14     	; 0x4b4e <_Z12gvarMenuItemhhaaah+0x80>
    4b40:	e1 2f       	mov	r30, r17
    4b42:	f0 e0       	ldi	r31, 0x00	; 0
    4b44:	ee 0f       	add	r30, r30
    4b46:	ff 1f       	adc	r31, r31
    4b48:	eb 59       	subi	r30, 0x9B	; 155
    4b4a:	fc 4f       	sbci	r31, 0xFC	; 252
    4b4c:	10 81       	ld	r17, Z
	    eeDirty(EE_MODEL) ;
    4b4e:	82 e0       	ldi	r24, 0x02	; 2
    4b50:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
		}
	}
  return value ;
}
    4b54:	81 2f       	mov	r24, r17
    4b56:	1f 91       	pop	r17
    4b58:	0f 91       	pop	r16
    4b5a:	ff 90       	pop	r15
    4b5c:	ef 90       	pop	r14
    4b5e:	df 90       	pop	r13
    4b60:	08 95       	ret

00004b62 <_Z20putsAttIdxTelemItemshhhh>:

#define EDIT_DR_SWITCH_EDIT		0x01
#define EDIT_DR_SWITCH_MOMENT	0x02
int8_t edit_dr_switch( uint8_t x, uint8_t y, int8_t drswitch, uint8_t attr, uint8_t edit ) ;

void putsAttIdxTelemItems( uint8_t x, uint8_t y, uint8_t index, uint8_t attr )
    4b62:	0f 93       	push	r16
    4b64:	98 2f       	mov	r25, r24
    4b66:	34 2f       	mov	r19, r20
    4b68:	02 2f       	mov	r16, r18
{
	if ( index == 4 )
    4b6a:	44 30       	cpi	r20, 0x04	; 4
    4b6c:	59 f4       	brne	.+22     	; 0x4b84 <_Z20putsAttIdxTelemItemshhhh+0x22>
	{
		if ( g_model.protocol == PROTO_PXX )
    4b6e:	80 91 b9 01 	lds	r24, 0x01B9
    4b72:	8f 70       	andi	r24, 0x0F	; 15
    4b74:	81 30       	cpi	r24, 0x01	; 1
    4b76:	31 f4       	brne	.+12     	; 0x4b84 <_Z20putsAttIdxTelemItemshhhh+0x22>
		{
			lcd_putsAtt( x, y, PSTR("SWR "), attr ) ;
    4b78:	89 2f       	mov	r24, r25
    4b7a:	46 eb       	ldi	r20, 0xB6	; 182
    4b7c:	50 e1       	ldi	r21, 0x10	; 16
    4b7e:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
    4b82:	06 c0       	rjmp	.+12     	; 0x4b90 <_Z20putsAttIdxTelemItemshhhh+0x2e>
			return ;
		}
	}
	lcd_putsAttIdx( x, y, Str_telemItems, index, attr ) ;
    4b84:	89 2f       	mov	r24, r25
    4b86:	4f ea       	ldi	r20, 0xAF	; 175
    4b88:	53 e0       	ldi	r21, 0x03	; 3
    4b8a:	23 2f       	mov	r18, r19
    4b8c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>

}
    4b90:	0f 91       	pop	r16
    4b92:	08 95       	ret

00004b94 <_ZL22menuProcSafetySwitchesh>:
}
#endif

//FunctionData Function[1] ;

static void menuProcSafetySwitches(uint8_t sub)
    4b94:	8f 92       	push	r8
    4b96:	9f 92       	push	r9
    4b98:	af 92       	push	r10
    4b9a:	bf 92       	push	r11
    4b9c:	cf 92       	push	r12
    4b9e:	df 92       	push	r13
    4ba0:	ef 92       	push	r14
    4ba2:	ff 92       	push	r15
    4ba4:	0f 93       	push	r16
    4ba6:	1f 93       	push	r17
    4ba8:	cf 93       	push	r28
    4baa:	df 93       	push	r29
    4bac:	b8 2e       	mov	r11, r24
{
//#ifdef MODEL_INDEX
	
	TITLEP(PSTR(STR_SAFETY_SW)) ;
    4bae:	84 e8       	ldi	r24, 0x84	; 132
    4bb0:	98 e0       	ldi	r25, 0x08	; 8
    4bb2:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
//	}
//#else    
//	MENU(STR_SAFETY_SW, menuTabModel, e_SafetySwitches, NUM_CHNOUT+1+1+EXTRA_VOICE_SW, {0, 0, 2/*repeated*/});
//#endif

	IlinesCount = NUM_CHNOUT+1+1+EXTRA_VOICE_SW-1 ;
    4bb6:	89 e1       	ldi	r24, 0x19	; 25
    4bb8:	80 93 c2 08 	sts	0x08C2, r24
	Columns = &ProgColumns[COLUMNS_2] ;
    4bbc:	8a e2       	ldi	r24, 0x2A	; 42
    4bbe:	94 e0       	ldi	r25, 0x04	; 4
    4bc0:	90 93 c1 08 	sts	0x08C1, r25
    4bc4:	80 93 c0 08 	sts	0x08C0, r24
	uint8_t y = 0 ;
	uint8_t k = 0 ;
//	int8_t  sub    = mstate2.m_posVert ;
//	int8_t  sub    = mstate2.m_posVert - 1 ;
	uint8_t subSub = g_posHorz ;
    4bc8:	90 90 0c 07 	lds	r9, 0x070C
	uint8_t t_pgOfs ;

	t_pgOfs = evalOffset(sub, 6) ;
    4bcc:	8b 2d       	mov	r24, r11
    4bce:	66 e0       	ldi	r22, 0x06	; 6
    4bd0:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    4bd4:	c8 2e       	mov	r12, r24
    4bd6:	18 e0       	ldi	r17, 0x08	; 8
//		lcd_outdezAtt(  18*FW, y,g_model.numVoice, attr);
//#endif
	}
  else // if(k<NUM_CHNOUT+1)
	{
		uint8_t numSafety = 16 - g_model.numVoice ;
    4bd8:	a0 e1       	ldi	r26, 0x10	; 16
    4bda:	8a 2e       	mov	r8, r26
//  lcd_puts_P( 0*FW, 1*FH,PSTR("ch    sw     val"));
 for(uint8_t i=0; i<7; i++)
 {
  y=(i+1)*FH;
  k=i+t_pgOfs;
	if ( k == 0 )
    4bdc:	cc 20       	and	r12, r12
    4bde:	09 f5       	brne	.+66     	; 0x4c22 <_ZL22menuProcSafetySwitchesh+0x8e>
	{
    
		uint8_t attr = 0 ;
    if(sub==k)
    4be0:	bb 20       	and	r11, r11
    4be2:	11 f0       	breq	.+4      	; 0x4be8 <_ZL22menuProcSafetySwitchesh+0x54>
    4be4:	00 e0       	ldi	r16, 0x00	; 0
    4be6:	0f c0       	rjmp	.+30     	; 0x4c06 <_ZL22menuProcSafetySwitchesh+0x72>
		{
			attr = InverseBlink ;
    4be8:	00 91 eb 06 	lds	r16, 0x06EB
      CHECK_INCDEC_H_MODELVAR_0( g_model.numVoice, 16 ) ;
    4bec:	80 91 26 04 	lds	r24, 0x0426
    4bf0:	8f 71       	andi	r24, 0x1F	; 31
    4bf2:	60 e1       	ldi	r22, 0x10	; 16
    4bf4:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    4bf8:	8f 71       	andi	r24, 0x1F	; 31
    4bfa:	90 91 26 04 	lds	r25, 0x0426
    4bfe:	90 7e       	andi	r25, 0xE0	; 224
    4c00:	98 2b       	or	r25, r24
    4c02:	90 93 26 04 	sts	0x0426, r25
		}	
//#if defined(CPUM128) || defined(CPUM2561)
		lcd_xlabel_decimal( y, PSTR(STR_NUM_VOICE_SW), g_model.numVoice+8, attr, 18*FW ) ;
    4c06:	40 91 26 04 	lds	r20, 0x0426
    4c0a:	4f 71       	andi	r20, 0x1F	; 31
    4c0c:	50 e0       	ldi	r21, 0x00	; 0
    4c0e:	48 5f       	subi	r20, 0xF8	; 248
    4c10:	5f 4f       	sbci	r21, 0xFF	; 255
    4c12:	81 2f       	mov	r24, r17
    4c14:	64 e7       	ldi	r22, 0x74	; 116
    4c16:	78 e0       	ldi	r23, 0x08	; 8
    4c18:	20 2f       	mov	r18, r16
    4c1a:	0c e6       	ldi	r16, 0x6C	; 108
    4c1c:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
    4c20:	41 c1       	rjmp	.+642    	; 0x4ea4 <_ZL22menuProcSafetySwitchesh+0x310>
//		lcd_outdezAtt(  18*FW, y,g_model.numVoice, attr);
//#endif
	}
  else // if(k<NUM_CHNOUT+1)
	{
		uint8_t numSafety = 16 - g_model.numVoice ;
    4c22:	80 91 26 04 	lds	r24, 0x0426
    4c26:	8f 71       	andi	r24, 0x1F	; 31
    4c28:	a8 2c       	mov	r10, r8
    4c2a:	a8 1a       	sub	r10, r24
//    putsChn(0,y,k,0);
    SafetySwData *sd = &g_model.safetySw[k-1];
    4c2c:	2c 2d       	mov	r18, r12
    4c2e:	30 e0       	ldi	r19, 0x00	; 0
//#if defined(CPUM128) || defined(CPUM2561)
    	if ( k-1 >= NUM_CHNOUT )
    4c30:	21 31       	cpi	r18, 0x11	; 17
    4c32:	31 05       	cpc	r19, r1
    4c34:	34 f4       	brge	.+12     	; 0x4c42 <_ZL22menuProcSafetySwitchesh+0xae>
	}
  else // if(k<NUM_CHNOUT+1)
	{
		uint8_t numSafety = 16 - g_model.numVoice ;
//    putsChn(0,y,k,0);
    SafetySwData *sd = &g_model.safetySw[k-1];
    4c36:	e9 01       	movw	r28, r18
    4c38:	cc 0f       	add	r28, r28
    4c3a:	dd 1f       	adc	r29, r29
    4c3c:	cb 5d       	subi	r28, 0xDB	; 219
    4c3e:	db 4f       	sbci	r29, 0xFB	; 251
    4c40:	05 c0       	rjmp	.+10     	; 0x4c4c <_ZL22menuProcSafetySwitchesh+0xb8>
//#if defined(CPUM128) || defined(CPUM2561)
    	if ( k-1 >= NUM_CHNOUT )
			{
				sd = &g_model.xvoiceSw[k-1-NUM_CHNOUT];
    4c42:	e9 01       	movw	r28, r18
    4c44:	cc 0f       	add	r28, r28
    4c46:	dd 1f       	adc	r29, r29
    4c48:	c7 57       	subi	r28, 0x77	; 119
    4c4a:	db 4f       	sbci	r29, 0xFB	; 251
    4c4c:	dd 24       	eor	r13, r13
			}
//#endif
   	for(uint8_t j=0; j<3;j++)
		{
      uint8_t attr = ((sub==k && subSub==j) ? InverseBlink : 0);
    4c4e:	bc 14       	cp	r11, r12
    4c50:	29 f4       	brne	.+10     	; 0x4c5c <_ZL22menuProcSafetySwitchesh+0xc8>
    4c52:	9d 14       	cp	r9, r13
    4c54:	19 f4       	brne	.+6      	; 0x4c5c <_ZL22menuProcSafetySwitchesh+0xc8>
    4c56:	00 91 eb 06 	lds	r16, 0x06EB
    4c5a:	01 c0       	rjmp	.+2      	; 0x4c5e <_ZL22menuProcSafetySwitchesh+0xca>
    4c5c:	00 e0       	ldi	r16, 0x00	; 0
				
#ifndef NOPOTSCROLL
			uint8_t active = attr ;	// (attr && s_editing) ;
			if ( s_editing == 0 )
    4c5e:	80 91 e6 06 	lds	r24, 0x06E6
    4c62:	88 23       	and	r24, r24
    4c64:	11 f4       	brne	.+4      	; 0x4c6a <_ZL22menuProcSafetySwitchesh+0xd6>
    4c66:	ff 24       	eor	r15, r15
    4c68:	01 c0       	rjmp	.+2      	; 0x4c6c <_ZL22menuProcSafetySwitchesh+0xd8>
    4c6a:	f0 2e       	mov	r15, r16
				active = 0 ;
			}
#else
			uint8_t active = (attr && s_editMode) ;
#endif
			if ( k <= numSafety )
    4c6c:	ac 14       	cp	r10, r12
    4c6e:	08 f4       	brcc	.+2      	; 0x4c72 <_ZL22menuProcSafetySwitchesh+0xde>
    4c70:	a9 c0       	rjmp	.+338    	; 0x4dc4 <_ZL22menuProcSafetySwitchesh+0x230>
			{
	      if (j == 0)
    4c72:	dd 20       	and	r13, r13
    4c74:	19 f5       	brne	.+70     	; 0x4cbc <_ZL22menuProcSafetySwitchesh+0x128>
				{
    			putsChn(0,y,k,0);
    4c76:	80 e0       	ldi	r24, 0x00	; 0
    4c78:	61 2f       	mov	r22, r17
    4c7a:	4c 2d       	mov	r20, r12
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	0e 94 22 20 	call	0x4044	; 0x4044 <_Z7putsChnhhhh>
					lcd_putsAttIdx( 5*FW, y, PSTR("\001SAVX"), sd->opt.ss.mode, attr ) ;
    4c82:	28 81       	ld	r18, Y
    4c84:	22 95       	swap	r18
    4c86:	26 95       	lsr	r18
    4c88:	26 95       	lsr	r18
    4c8a:	23 70       	andi	r18, 0x03	; 3
    4c8c:	8e e1       	ldi	r24, 0x1E	; 30
    4c8e:	61 2f       	mov	r22, r17
    4c90:	4e e6       	ldi	r20, 0x6E	; 110
    4c92:	58 e0       	ldi	r21, 0x08	; 8
    4c94:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
      	  if(active)
    4c98:	ff 20       	and	r15, r15
    4c9a:	09 f4       	brne	.+2      	; 0x4c9e <_ZL22menuProcSafetySwitchesh+0x10a>
    4c9c:	fe c0       	rjmp	.+508    	; 0x4e9a <_ZL22menuProcSafetySwitchesh+0x306>
					{
	          CHECK_INCDEC_H_MODELVAR_0( sd->opt.ss.mode, 3 ) ;
    4c9e:	88 81       	ld	r24, Y
    4ca0:	82 95       	swap	r24
    4ca2:	86 95       	lsr	r24
    4ca4:	86 95       	lsr	r24
    4ca6:	83 70       	andi	r24, 0x03	; 3
    4ca8:	63 e0       	ldi	r22, 0x03	; 3
    4caa:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    4cae:	82 95       	swap	r24
    4cb0:	88 0f       	add	r24, r24
    4cb2:	88 0f       	add	r24, r24
    4cb4:	80 7c       	andi	r24, 0xC0	; 192
    4cb6:	98 81       	ld	r25, Y
    4cb8:	9f 73       	andi	r25, 0x3F	; 63
    4cba:	30 c0       	rjmp	.+96     	; 0x4d1c <_ZL22menuProcSafetySwitchesh+0x188>
    4cbc:	88 81       	ld	r24, Y
  	      }
				}
      	else if (j == 1)
    4cbe:	91 e0       	ldi	r25, 0x01	; 1
    4cc0:	d9 16       	cp	r13, r25
    4cc2:	79 f5       	brne	.+94     	; 0x4d22 <_ZL22menuProcSafetySwitchesh+0x18e>
        {
					int8_t max = MAX_DRSWITCH ;
#ifndef NOSAFETY_A_OR_V					
					if ( sd->opt.ss.mode == 2 )
    4cc4:	80 7c       	andi	r24, 0xC0	; 192
    4cc6:	80 38       	cpi	r24, 0x80	; 128
    4cc8:	19 f4       	brne	.+6      	; 0x4cd0 <_ZL22menuProcSafetySwitchesh+0x13c>
    4cca:	79 e1       	ldi	r23, 0x19	; 25
    4ccc:	e7 2e       	mov	r14, r23
    4cce:	02 c0       	rjmp	.+4      	; 0x4cd4 <_ZL22menuProcSafetySwitchesh+0x140>
    4cd0:	66 e1       	ldi	r22, 0x16	; 22
    4cd2:	e6 2e       	mov	r14, r22
					{
						max = MAX_DRSWITCH+3 ;
					}
					if ( sd->opt.ss.swtch > MAX_DRSWITCH )
    4cd4:	28 81       	ld	r18, Y
    4cd6:	22 0f       	add	r18, r18
    4cd8:	22 0f       	add	r18, r18
    4cda:	25 95       	asr	r18
    4cdc:	25 95       	asr	r18
    4cde:	27 31       	cpi	r18, 0x17	; 23
    4ce0:	44 f0       	brlt	.+16     	; 0x4cf2 <_ZL22menuProcSafetySwitchesh+0x15e>
					{
						lcd_putsAttIdx( 7*FW, y, PSTR(STR_V_OPT1), sd->opt.ss.swtch-MAX_DRSWITCH-1, attr ) ;
    4ce2:	27 51       	subi	r18, 0x17	; 23
    4ce4:	8a e2       	ldi	r24, 0x2A	; 42
    4ce6:	61 2f       	mov	r22, r17
    4ce8:	47 e5       	ldi	r20, 0x57	; 87
    4cea:	58 e0       	ldi	r21, 0x08	; 8
    4cec:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    4cf0:	06 c0       	rjmp	.+12     	; 0x4cfe <_ZL22menuProcSafetySwitchesh+0x16a>
					}
					else
					{
#endif
           	putsDrSwitches(7*FW, y, sd->opt.ss.swtch, attr);
    4cf2:	8a e2       	ldi	r24, 0x2A	; 42
    4cf4:	61 2f       	mov	r22, r17
    4cf6:	42 2f       	mov	r20, r18
    4cf8:	20 2f       	mov	r18, r16
    4cfa:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
#ifndef NOSAFETY_A_OR_V					
					}
#endif
          if(active)
    4cfe:	ff 20       	and	r15, r15
    4d00:	09 f4       	brne	.+2      	; 0x4d04 <_ZL22menuProcSafetySwitchesh+0x170>
    4d02:	cb c0       	rjmp	.+406    	; 0x4e9a <_ZL22menuProcSafetySwitchesh+0x306>
					{
            CHECK_INCDEC_MODELSWITCH( sd->opt.ss.swtch, -MAX_DRSWITCH, max ) ;
    4d04:	88 81       	ld	r24, Y
    4d06:	88 0f       	add	r24, r24
    4d08:	88 0f       	add	r24, r24
    4d0a:	85 95       	asr	r24
    4d0c:	85 95       	asr	r24
    4d0e:	6a ee       	ldi	r22, 0xEA	; 234
    4d10:	4e 2d       	mov	r20, r14
    4d12:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    4d16:	8f 73       	andi	r24, 0x3F	; 63
    4d18:	98 81       	ld	r25, Y
    4d1a:	90 7c       	andi	r25, 0xC0	; 192
    4d1c:	98 2b       	or	r25, r24
    4d1e:	98 83       	st	Y, r25
    4d20:	bc c0       	rjmp	.+376    	; 0x4e9a <_ZL22menuProcSafetySwitchesh+0x306>
				}
				else
				{
						int8_t min, max ;
#ifndef NOSAFETY_A_OR_V					
						if ( sd->opt.ss.mode == 1 )
    4d22:	98 2f       	mov	r25, r24
    4d24:	90 7c       	andi	r25, 0xC0	; 192
    4d26:	90 34       	cpi	r25, 0x40	; 64
    4d28:	91 f4       	brne	.+36     	; 0x4d4e <_ZL22menuProcSafetySwitchesh+0x1ba>
						{
							min = 0 ;
							max = 15 ;
							sd->opt.ss.val = limit( min, sd->opt.ss.val, max) ;
    4d2a:	29 81       	ldd	r18, Y+1	; 0x01
/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    4d2c:	27 ff       	sbrs	r18, 7
    4d2e:	02 c0       	rjmp	.+4      	; 0x4d34 <_ZL22menuProcSafetySwitchesh+0x1a0>
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	03 c0       	rjmp	.+6      	; 0x4d3a <_ZL22menuProcSafetySwitchesh+0x1a6>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    4d34:	2f 30       	cpi	r18, 0x0F	; 15
    4d36:	0c f0       	brlt	.+2      	; 0x4d3a <_ZL22menuProcSafetySwitchesh+0x1a6>
    4d38:	2f e0       	ldi	r18, 0x0F	; 15
    4d3a:	29 83       	std	Y+1, r18	; 0x01
         							lcd_putsAttIdx(16*FW, y, Str_Sounds, sd->opt.ss.val,attr);
    4d3c:	80 e6       	ldi	r24, 0x60	; 96
    4d3e:	61 2f       	mov	r22, r17
    4d40:	46 ec       	ldi	r20, 0xC6	; 198
    4d42:	57 e0       	ldi	r21, 0x07	; 7
    4d44:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    4d48:	60 e0       	ldi	r22, 0x00	; 0
    4d4a:	4f e0       	ldi	r20, 0x0F	; 15
    4d4c:	34 c0       	rjmp	.+104    	; 0x4db6 <_ZL22menuProcSafetySwitchesh+0x222>
//         							lcd_putsAttIdx_right( y, Str_Sounds, sd->opt.ss.val,attr);
						}
						else if ( sd->opt.ss.mode == 2 )
    4d4e:	90 38       	cpi	r25, 0x80	; 128
    4d50:	39 f5       	brne	.+78     	; 0x4da0 <_ZL22menuProcSafetySwitchesh+0x20c>
						{
							if ( sd->opt.ss.swtch > MAX_DRSWITCH )
    4d52:	88 0f       	add	r24, r24
    4d54:	88 0f       	add	r24, r24
    4d56:	49 81       	ldd	r20, Y+1	; 0x01
    4d58:	89 35       	cpi	r24, 0x59	; 89
    4d5a:	8c f0       	brlt	.+34     	; 0x4d7e <_ZL22menuProcSafetySwitchesh+0x1ea>
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    4d5c:	47 ff       	sbrs	r20, 7
    4d5e:	02 c0       	rjmp	.+4      	; 0x4d64 <_ZL22menuProcSafetySwitchesh+0x1d0>
    4d60:	40 e0       	ldi	r20, 0x00	; 0
    4d62:	03 c0       	rjmp	.+6      	; 0x4d6a <_ZL22menuProcSafetySwitchesh+0x1d6>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    4d64:	49 30       	cpi	r20, 0x09	; 9
    4d66:	0c f0       	brlt	.+2      	; 0x4d6a <_ZL22menuProcSafetySwitchesh+0x1d6>
    4d68:	49 e0       	ldi	r20, 0x09	; 9
							{
								min = 0 ;
								max = NUM_TELEM_ITEMS-1 ;
								sd->opt.ss.val = limit( min, sd->opt.ss.val, max) ;
    4d6a:	49 83       	std	Y+1, r20	; 0x01
  							putsAttIdxTelemItems( 16*FW, y, sd->opt.ss.val+1, attr ) ;
    4d6c:	4f 5f       	subi	r20, 0xFF	; 255
    4d6e:	80 e6       	ldi	r24, 0x60	; 96
    4d70:	61 2f       	mov	r22, r17
    4d72:	20 2f       	mov	r18, r16
    4d74:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <_Z20putsAttIdxTelemItemshhhh>
    4d78:	60 e0       	ldi	r22, 0x00	; 0
    4d7a:	49 e0       	ldi	r20, 0x09	; 9
    4d7c:	1c c0       	rjmp	.+56     	; 0x4db6 <_ZL22menuProcSafetySwitchesh+0x222>
    4d7e:	4f 36       	cpi	r20, 0x6F	; 111
    4d80:	0c f0       	brlt	.+2      	; 0x4d84 <_ZL22menuProcSafetySwitchesh+0x1f0>
    4d82:	4f e6       	ldi	r20, 0x6F	; 111
							}
							else
							{
								min = -128 ;
								max = 111 ;
								sd->opt.ss.val = limit( min, sd->opt.ss.val, max) ;
    4d84:	49 83       	std	Y+1, r20	; 0x01
        				lcd_outdezAtt( 16*FW, y, sd->opt.ss.val+128, attr);
    4d86:	55 27       	eor	r21, r21
    4d88:	47 fd       	sbrc	r20, 7
    4d8a:	50 95       	com	r21
    4d8c:	40 58       	subi	r20, 0x80	; 128
    4d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d90:	80 e6       	ldi	r24, 0x60	; 96
    4d92:	61 2f       	mov	r22, r17
    4d94:	20 2f       	mov	r18, r16
    4d96:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    4d9a:	60 e8       	ldi	r22, 0x80	; 128
    4d9c:	4f e6       	ldi	r20, 0x6F	; 111
    4d9e:	0b c0       	rjmp	.+22     	; 0x4db6 <_ZL22menuProcSafetySwitchesh+0x222>
#endif
						else
						{
							min = -125 ;
							max = 125 ;
        			lcd_outdezAtt(  16*FW, y, sd->opt.ss.val, attr);
    4da0:	49 81       	ldd	r20, Y+1	; 0x01
    4da2:	55 27       	eor	r21, r21
    4da4:	47 fd       	sbrc	r20, 7
    4da6:	50 95       	com	r21
    4da8:	80 e6       	ldi	r24, 0x60	; 96
    4daa:	61 2f       	mov	r22, r17
    4dac:	20 2f       	mov	r18, r16
    4dae:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    4db2:	63 e8       	ldi	r22, 0x83	; 131
    4db4:	4d e7       	ldi	r20, 0x7D	; 125
						}
            if(active) {
    4db6:	ff 20       	and	r15, r15
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <_ZL22menuProcSafetySwitchesh+0x228>
    4dba:	6f c0       	rjmp	.+222    	; 0x4e9a <_ZL22menuProcSafetySwitchesh+0x306>
		          CHECK_INCDEC_H_MODELVAR( sd->opt.ss.val, min,max);
    4dbc:	89 81       	ldd	r24, Y+1	; 0x01
    4dbe:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    4dc2:	6a c0       	rjmp	.+212    	; 0x4e98 <_ZL22menuProcSafetySwitchesh+0x304>
            }
        }
			}
			else
			{
    		if (j == 0)
    4dc4:	dd 20       	and	r13, r13
    4dc6:	01 f5       	brne	.+64     	; 0x4e08 <_ZL22menuProcSafetySwitchesh+0x274>
				{
			    lcd_puts_Pleft( y, PSTR(STR_VS) ) ;
    4dc8:	81 2f       	mov	r24, r17
    4dca:	64 e5       	ldi	r22, 0x54	; 84
    4dcc:	78 e0       	ldi	r23, 0x08	; 8
    4dce:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
					lcd_2_digits( 22, y, k, 0 ) ;
    4dd2:	86 e1       	ldi	r24, 0x16	; 22
    4dd4:	61 2f       	mov	r22, r17
    4dd6:	4c 2d       	mov	r20, r12
    4dd8:	20 e0       	ldi	r18, 0x00	; 0
    4dda:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <_Z12lcd_2_digitshhhh>
    		  if(active)
    4dde:	ff 20       	and	r15, r15
    4de0:	59 f0       	breq	.+22     	; 0x4df8 <_ZL22menuProcSafetySwitchesh+0x264>
					{
    		    CHECK_INCDEC_MODELSWITCH( sd->opt.vs.vswtch, 0, MAX_DRSWITCH-1 ) ;
    4de2:	88 81       	ld	r24, Y
    4de4:	8f 71       	andi	r24, 0x1F	; 31
    4de6:	60 e0       	ldi	r22, 0x00	; 0
    4de8:	45 e1       	ldi	r20, 0x15	; 21
    4dea:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    4dee:	8f 71       	andi	r24, 0x1F	; 31
    4df0:	98 81       	ld	r25, Y
    4df2:	90 7e       	andi	r25, 0xE0	; 224
    4df4:	98 2b       	or	r25, r24
    4df6:	98 83       	st	Y, r25
    		  }
  		    putsDrSwitches(5*FW, y, sd->opt.vs.vswtch, attr);
    4df8:	48 81       	ld	r20, Y
    4dfa:	4f 71       	andi	r20, 0x1F	; 31
    4dfc:	8e e1       	ldi	r24, 0x1E	; 30
    4dfe:	61 2f       	mov	r22, r17
    4e00:	20 2f       	mov	r18, r16
    4e02:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
    4e06:	49 c0       	rjmp	.+146    	; 0x4e9a <_ZL22menuProcSafetySwitchesh+0x306>
				}
    		else if (j == 1)
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	d8 16       	cp	r13, r24
    4e0c:	d9 f4       	brne	.+54     	; 0x4e44 <_ZL22menuProcSafetySwitchesh+0x2b0>
    		{
    		  if(active)
    4e0e:	ff 20       	and	r15, r15
    4e10:	71 f0       	breq	.+28     	; 0x4e2e <_ZL22menuProcSafetySwitchesh+0x29a>
					{
    		    CHECK_INCDEC_H_MODELVAR_0( sd->opt.vs.vmode, 6 ) ;
    4e12:	88 81       	ld	r24, Y
    4e14:	82 95       	swap	r24
    4e16:	86 95       	lsr	r24
    4e18:	87 70       	andi	r24, 0x07	; 7
    4e1a:	66 e0       	ldi	r22, 0x06	; 6
    4e1c:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    4e20:	82 95       	swap	r24
    4e22:	88 0f       	add	r24, r24
    4e24:	80 7e       	andi	r24, 0xE0	; 224
    4e26:	98 81       	ld	r25, Y
    4e28:	9f 71       	andi	r25, 0x1F	; 31
    4e2a:	98 2b       	or	r25, r24
    4e2c:	98 83       	st	Y, r25
    		  }
					lcd_putsAttIdx( 10*FW, y, PSTR(STR_VOICE_OPT), sd->opt.vs.vmode, attr ) ;
    4e2e:	28 81       	ld	r18, Y
    4e30:	22 95       	swap	r18
    4e32:	26 95       	lsr	r18
    4e34:	27 70       	andi	r18, 0x07	; 7
    4e36:	8c e3       	ldi	r24, 0x3C	; 60
    4e38:	61 2f       	mov	r22, r17
    4e3a:	48 e2       	ldi	r20, 0x28	; 40
    4e3c:	58 e0       	ldi	r21, 0x08	; 8
    4e3e:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    4e42:	2b c0       	rjmp	.+86     	; 0x4e9a <_ZL22menuProcSafetySwitchesh+0x306>
				}
				else
				{
					uint8_t max ;
					if ( sd->opt.vs.vmode > 5 )
    4e44:	88 81       	ld	r24, Y
    4e46:	82 95       	swap	r24
    4e48:	86 95       	lsr	r24
    4e4a:	87 70       	andi	r24, 0x07	; 7
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	49 81       	ldd	r20, Y+1	; 0x01
    4e50:	06 97       	sbiw	r24, 0x06	; 6
    4e52:	64 f0       	brlt	.+24     	; 0x4e6c <_ZL22menuProcSafetySwitchesh+0x2d8>
    4e54:	49 30       	cpi	r20, 0x09	; 9
    4e56:	08 f0       	brcs	.+2      	; 0x4e5a <_ZL22menuProcSafetySwitchesh+0x2c6>
    4e58:	49 e0       	ldi	r20, 0x09	; 9
					{
						max = NUM_TELEM_ITEMS-1 ;
						sd->opt.vs.vval = limit( (uint8_t)0, sd->opt.vs.vval, max) ;
    4e5a:	49 83       	std	Y+1, r20	; 0x01
						putsAttIdxTelemItems( 16*FW, y, sd->opt.vs.vval+1, attr ) ;
    4e5c:	4f 5f       	subi	r20, 0xFF	; 255
    4e5e:	80 e6       	ldi	r24, 0x60	; 96
    4e60:	61 2f       	mov	r22, r17
    4e62:	20 2f       	mov	r18, r16
    4e64:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <_Z20putsAttIdxTelemItemshhhh>
    4e68:	69 e0       	ldi	r22, 0x09	; 9
    4e6a:	10 c0       	rjmp	.+32     	; 0x4e8c <_ZL22menuProcSafetySwitchesh+0x2f8>
					else
					{
						// Allow 251-255 to represent GVAR3-GVAR7
						max = 255 ;
//						sd->opt.vs.vval = limit( (uint8_t)0, sd->opt.vs.vval, max) ;
						if ( sd->opt.vs.vval <= 250 )
    4e6c:	4b 3f       	cpi	r20, 0xFB	; 251
    4e6e:	38 f4       	brcc	.+14     	; 0x4e7e <_ZL22menuProcSafetySwitchesh+0x2ea>
						{
	  					lcd_outdezAtt( 17*FW, y, sd->opt.vs.vval, attr) ;
    4e70:	86 e6       	ldi	r24, 0x66	; 102
    4e72:	61 2f       	mov	r22, r17
    4e74:	50 e0       	ldi	r21, 0x00	; 0
    4e76:	20 2f       	mov	r18, r16
    4e78:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    4e7c:	06 c0       	rjmp	.+12     	; 0x4e8a <_ZL22menuProcSafetySwitchesh+0x2f6>
						}
						else
						{
							dispGvar( 14*FW, y, sd->opt.vs.vval-248, attr ) ;
    4e7e:	48 5f       	subi	r20, 0xF8	; 248
    4e80:	84 e5       	ldi	r24, 0x54	; 84
    4e82:	61 2f       	mov	r22, r17
    4e84:	20 2f       	mov	r18, r16
    4e86:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_Z8dispGvarhhhh>
    4e8a:	6f ef       	ldi	r22, 0xFF	; 255
						}
					}
    		  if(active)
    4e8c:	ff 20       	and	r15, r15
    4e8e:	29 f0       	breq	.+10     	; 0x4e9a <_ZL22menuProcSafetySwitchesh+0x306>
					{
    	      sd->opt.vs.vval = checkIncDec_hmu0( sd->opt.vs.vval, max ) ;
    4e90:	89 81       	ldd	r24, Y+1	; 0x01
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_Z16checkIncDec_hmu0ih>
    4e98:	89 83       	std	Y+1, r24	; 0x01
    	if ( k-1 >= NUM_CHNOUT )
			{
				sd = &g_model.xvoiceSw[k-1-NUM_CHNOUT];
			}
//#endif
   	for(uint8_t j=0; j<3;j++)
    4e9a:	d3 94       	inc	r13
    4e9c:	93 e0       	ldi	r25, 0x03	; 3
    4e9e:	d9 16       	cp	r13, r25
    4ea0:	09 f0       	breq	.+2      	; 0x4ea4 <_ZL22menuProcSafetySwitchesh+0x310>
    4ea2:	d5 ce       	rjmp	.-598    	; 0x4c4e <_ZL22menuProcSafetySwitchesh+0xba>
    4ea4:	c3 94       	inc	r12
    4ea6:	18 5f       	subi	r17, 0xF8	; 248
	uint8_t t_pgOfs ;

	t_pgOfs = evalOffset(sub, 6) ;

//  lcd_puts_P( 0*FW, 1*FH,PSTR("ch    sw     val"));
 for(uint8_t i=0; i<7; i++)
    4ea8:	10 34       	cpi	r17, 0x40	; 64
    4eaa:	09 f0       	breq	.+2      	; 0x4eae <_ZL22menuProcSafetySwitchesh+0x31a>
    4eac:	97 ce       	rjmp	.-722    	; 0x4bdc <_ZL22menuProcSafetySwitchesh+0x48>
//   		  }
//			}	
//		}
//	}
 }
}
    4eae:	df 91       	pop	r29
    4eb0:	cf 91       	pop	r28
    4eb2:	1f 91       	pop	r17
    4eb4:	0f 91       	pop	r16
    4eb6:	ff 90       	pop	r15
    4eb8:	ef 90       	pop	r14
    4eba:	df 90       	pop	r13
    4ebc:	cf 90       	pop	r12
    4ebe:	bf 90       	pop	r11
    4ec0:	af 90       	pop	r10
    4ec2:	9f 90       	pop	r9
    4ec4:	8f 90       	pop	r8
    4ec6:	08 95       	ret

00004ec8 <_Z13scalerDecimalhhh>:
#if GVARS

#ifdef SCALERS

//uint8_t scalerDecimal( uint8_t y, const prog_char *s, uint8_t val, uint8_t attr )
uint8_t scalerDecimal( uint8_t y, uint8_t val, uint8_t attr )
    4ec8:	0f 93       	push	r16
    4eca:	1f 93       	push	r17
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
    4ed0:	98 2f       	mov	r25, r24
    4ed2:	06 2f       	mov	r16, r22
    4ed4:	14 2f       	mov	r17, r20
{
//	lcd_label_decimal( y, s, val+1, attr ) ;
  lcd_outdezAtt( 17*FW, y, val+1, attr ) ;
    4ed6:	c6 2f       	mov	r28, r22
    4ed8:	d0 e0       	ldi	r29, 0x00	; 0
    4eda:	ae 01       	movw	r20, r28
    4edc:	4f 5f       	subi	r20, 0xFF	; 255
    4ede:	5f 4f       	sbci	r21, 0xFF	; 255
    4ee0:	86 e6       	ldi	r24, 0x66	; 102
    4ee2:	69 2f       	mov	r22, r25
    4ee4:	21 2f       	mov	r18, r17
    4ee6:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
//	lcd_puts_Pleft( y, s ) ;
//	lcd_outdezAtt( 14*FW, y, val+1, attr) ;
  if (attr) val = checkIncDec_hmu0( val, 255 ) ;
    4eea:	11 23       	and	r17, r17
    4eec:	29 f0       	breq	.+10     	; 0x4ef8 <_Z13scalerDecimalhhh+0x30>
    4eee:	ce 01       	movw	r24, r28
    4ef0:	6f ef       	ldi	r22, 0xFF	; 255
    4ef2:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_Z16checkIncDec_hmu0ih>
    4ef6:	08 2f       	mov	r16, r24
	return val ;
}
    4ef8:	80 2f       	mov	r24, r16
    4efa:	df 91       	pop	r29
    4efc:	cf 91       	pop	r28
    4efe:	1f 91       	pop	r17
    4f00:	0f 91       	pop	r16
    4f02:	08 95       	ret

00004f04 <_Z11calc_scalerhPhS_>:
  degrees >>= 6 ;
  return degrees ;
}
									 
#ifdef SCALERS
int16_t calc_scaler( uint8_t index, uint8_t *unit, uint8_t *num_decimals)
    4f04:	6f 92       	push	r6
    4f06:	7f 92       	push	r7
    4f08:	8f 92       	push	r8
    4f0a:	9f 92       	push	r9
    4f0c:	af 92       	push	r10
    4f0e:	bf 92       	push	r11
    4f10:	cf 92       	push	r12
    4f12:	df 92       	push	r13
    4f14:	ef 92       	push	r14
    4f16:	ff 92       	push	r15
    4f18:	0f 93       	push	r16
    4f1a:	1f 93       	push	r17
    4f1c:	cf 93       	push	r28
    4f1e:	df 93       	push	r29
    4f20:	4b 01       	movw	r8, r22
    4f22:	3a 01       	movw	r6, r20
{
	int32_t value ;
	uint8_t lnest ;
	ScaleData *pscaler ;
	
	lnest = CalcScaleNest ;
    4f24:	d0 90 b0 06 	lds	r13, 0x06B0
	if ( lnest > 5 )
    4f28:	95 e0       	ldi	r25, 0x05	; 5
    4f2a:	9d 15       	cp	r25, r13
    4f2c:	18 f4       	brcc	.+6      	; 0x4f34 <_Z11calc_scalerhPhS_+0x30>
    4f2e:	20 e0       	ldi	r18, 0x00	; 0
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	a6 c0       	rjmp	.+332    	; 0x5080 <_Z11calc_scalerhPhS_+0x17c>
	{
		return 0 ;
	}
	CalcScaleNest = lnest + 1 ;
    4f34:	d3 94       	inc	r13
    4f36:	d0 92 b0 06 	sts	0x06B0, r13
    4f3a:	da 94       	dec	r13
	// process
	pscaler = &g_model.Scalers[index] ;
    4f3c:	a8 2e       	mov	r10, r24
    4f3e:	bb 24       	eor	r11, r11
	if ( pscaler->source )
    4f40:	8b e0       	ldi	r24, 0x0B	; 11
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	a8 9e       	mul	r10, r24
    4f46:	f0 01       	movw	r30, r0
    4f48:	a9 9e       	mul	r10, r25
    4f4a:	f0 0d       	add	r31, r0
    4f4c:	b8 9e       	mul	r11, r24
    4f4e:	f0 0d       	add	r31, r0
    4f50:	11 24       	eor	r1, r1
    4f52:	e3 51       	subi	r30, 0x13	; 19
    4f54:	fb 4f       	sbci	r31, 0xFB	; 251
    4f56:	80 81       	ld	r24, Z
    4f58:	88 23       	and	r24, r24
    4f5a:	21 f4       	brne	.+8      	; 0x4f64 <_Z11calc_scalerhPhS_+0x60>
    4f5c:	ee 24       	eor	r14, r14
    4f5e:	ff 24       	eor	r15, r15
    4f60:	87 01       	movw	r16, r14
    4f62:	08 c0       	rjmp	.+16     	; 0x4f74 <_Z11calc_scalerhPhS_+0x70>
	{
		value = getValue( pscaler->source - 1 ) ;
    4f64:	81 50       	subi	r24, 0x01	; 1
    4f66:	0e 94 8c 14 	call	0x2918	; 0x2918 <_Z8getValueh>
    4f6a:	7c 01       	movw	r14, r24
    4f6c:	00 27       	eor	r16, r16
    4f6e:	f7 fc       	sbrc	r15, 7
    4f70:	00 95       	com	r16
    4f72:	10 2f       	mov	r17, r16
	}
	else
	{
		value = 0 ;
	}
	CalcScaleNest = lnest ;
    4f74:	d0 92 b0 06 	sts	0x06B0, r13
	if ( !pscaler->offsetLast )
    4f78:	8b e0       	ldi	r24, 0x0B	; 11
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	a8 9e       	mul	r10, r24
    4f7e:	90 01       	movw	r18, r0
    4f80:	a9 9e       	mul	r10, r25
    4f82:	30 0d       	add	r19, r0
    4f84:	b8 9e       	mul	r11, r24
    4f86:	30 0d       	add	r19, r0
    4f88:	11 24       	eor	r1, r1
    4f8a:	f9 01       	movw	r30, r18
    4f8c:	e3 51       	subi	r30, 0x13	; 19
    4f8e:	fb 4f       	sbci	r31, 0xFB	; 251
    4f90:	d6 80       	ldd	r13, Z+6	; 0x06
    4f92:	b8 e0       	ldi	r27, 0x08	; 8
    4f94:	cb 2e       	mov	r12, r27
    4f96:	cd 20       	and	r12, r13
    4f98:	d3 fc       	sbrc	r13, 3
    4f9a:	0d c0       	rjmp	.+26     	; 0x4fb6 <_Z11calc_scalerhPhS_+0xb2>
	{
		value += pscaler->offset ;
    4f9c:	f9 01       	movw	r30, r18
    4f9e:	e2 51       	subi	r30, 0x12	; 18
    4fa0:	fb 4f       	sbci	r31, 0xFB	; 251
    4fa2:	80 81       	ld	r24, Z
    4fa4:	91 81       	ldd	r25, Z+1	; 0x01
    4fa6:	aa 27       	eor	r26, r26
    4fa8:	97 fd       	sbrc	r25, 7
    4faa:	a0 95       	com	r26
    4fac:	ba 2f       	mov	r27, r26
    4fae:	e8 0e       	add	r14, r24
    4fb0:	f9 1e       	adc	r15, r25
    4fb2:	0a 1f       	adc	r16, r26
    4fb4:	1b 1f       	adc	r17, r27
	}
	value *= pscaler->mult+1 ;
    4fb6:	8b e0       	ldi	r24, 0x0B	; 11
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	a8 9e       	mul	r10, r24
    4fbc:	e0 01       	movw	r28, r0
    4fbe:	a9 9e       	mul	r10, r25
    4fc0:	d0 0d       	add	r29, r0
    4fc2:	b8 9e       	mul	r11, r24
    4fc4:	d0 0d       	add	r29, r0
    4fc6:	11 24       	eor	r1, r1
    4fc8:	c6 55       	subi	r28, 0x56	; 86
    4fca:	de 4f       	sbci	r29, 0xFE	; 254
    4fcc:	ca 5b       	subi	r28, 0xBA	; 186
    4fce:	dc 4f       	sbci	r29, 0xFC	; 252
    4fd0:	29 91       	ld	r18, Y+
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	2f 5f       	subi	r18, 0xFF	; 255
    4fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd8:	44 27       	eor	r20, r20
    4fda:	37 fd       	sbrc	r19, 7
    4fdc:	40 95       	com	r20
    4fde:	54 2f       	mov	r21, r20
    4fe0:	c8 01       	movw	r24, r16
    4fe2:	b7 01       	movw	r22, r14
    4fe4:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
	value /= pscaler->div+1 ;
    4fe8:	28 81       	ld	r18, Y
    4fea:	c7 54       	subi	r28, 0x47	; 71
    4fec:	d3 40       	sbci	r29, 0x03	; 3
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	2f 5f       	subi	r18, 0xFF	; 255
    4ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff4:	44 27       	eor	r20, r20
    4ff6:	37 fd       	sbrc	r19, 7
    4ff8:	40 95       	com	r20
    4ffa:	54 2f       	mov	r21, r20
    4ffc:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    5000:	c9 01       	movw	r24, r18
    5002:	da 01       	movw	r26, r20
    5004:	9c 01       	movw	r18, r24
    5006:	ad 01       	movw	r20, r26
	if ( pscaler->offsetLast )
    5008:	cc 20       	and	r12, r12
    500a:	69 f0       	breq	.+26     	; 0x5026 <_Z11calc_scalerhPhS_+0x122>
	{
		value += pscaler->offset ;
    500c:	fe 01       	movw	r30, r28
    500e:	ec 5b       	subi	r30, 0xBC	; 188
    5010:	fc 4f       	sbci	r31, 0xFC	; 252
    5012:	80 81       	ld	r24, Z
    5014:	91 81       	ldd	r25, Z+1	; 0x01
    5016:	aa 27       	eor	r26, r26
    5018:	97 fd       	sbrc	r25, 7
    501a:	a0 95       	com	r26
    501c:	ba 2f       	mov	r27, r26
    501e:	28 0f       	add	r18, r24
    5020:	39 1f       	adc	r19, r25
    5022:	4a 1f       	adc	r20, r26
    5024:	5b 1f       	adc	r21, r27
	}
	if ( pscaler->neg )
    5026:	d0 fe       	sbrs	r13, 0
    5028:	07 c0       	rjmp	.+14     	; 0x5038 <_Z11calc_scalerhPhS_+0x134>
	{
		value = -value ;
    502a:	50 95       	com	r21
    502c:	40 95       	com	r20
    502e:	30 95       	com	r19
    5030:	21 95       	neg	r18
    5032:	3f 4f       	sbci	r19, 0xFF	; 255
    5034:	4f 4f       	sbci	r20, 0xFF	; 255
    5036:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	if ( unit )
    5038:	81 14       	cp	r8, r1
    503a:	91 04       	cpc	r9, r1
    503c:	71 f0       	breq	.+28     	; 0x505a <_Z11calc_scalerhPhS_+0x156>
	{
		*unit = pscaler->unit ;
    503e:	8b e0       	ldi	r24, 0x0B	; 11
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	a8 9e       	mul	r10, r24
    5044:	f0 01       	movw	r30, r0
    5046:	a9 9e       	mul	r10, r25
    5048:	f0 0d       	add	r31, r0
    504a:	b8 9e       	mul	r11, r24
    504c:	f0 0d       	add	r31, r0
    504e:	11 24       	eor	r1, r1
    5050:	ee 50       	subi	r30, 0x0E	; 14
    5052:	fb 4f       	sbci	r31, 0xFB	; 251
    5054:	80 81       	ld	r24, Z
    5056:	f4 01       	movw	r30, r8
    5058:	80 83       	st	Z, r24
	}
	if ( num_decimals )
    505a:	61 14       	cp	r6, r1
    505c:	71 04       	cpc	r7, r1
    505e:	81 f0       	breq	.+32     	; 0x5080 <_Z11calc_scalerhPhS_+0x17c>
	{
		*num_decimals = pscaler->precision ;
    5060:	8b e0       	ldi	r24, 0x0B	; 11
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	a8 9e       	mul	r10, r24
    5066:	f0 01       	movw	r30, r0
    5068:	a9 9e       	mul	r10, r25
    506a:	f0 0d       	add	r31, r0
    506c:	b8 9e       	mul	r11, r24
    506e:	f0 0d       	add	r31, r0
    5070:	11 24       	eor	r1, r1
    5072:	ed 50       	subi	r30, 0x0D	; 13
    5074:	fb 4f       	sbci	r31, 0xFB	; 251
    5076:	80 81       	ld	r24, Z
    5078:	86 95       	lsr	r24
    507a:	83 70       	andi	r24, 0x03	; 3
    507c:	f3 01       	movw	r30, r6
    507e:	80 83       	st	Z, r24
	}

	return value ;
}
    5080:	c9 01       	movw	r24, r18
    5082:	df 91       	pop	r29
    5084:	cf 91       	pop	r28
    5086:	1f 91       	pop	r17
    5088:	0f 91       	pop	r16
    508a:	ff 90       	pop	r15
    508c:	ef 90       	pop	r14
    508e:	df 90       	pop	r13
    5090:	cf 90       	pop	r12
    5092:	bf 90       	pop	r11
    5094:	af 90       	pop	r10
    5096:	9f 90       	pop	r9
    5098:	8f 90       	pop	r8
    509a:	7f 90       	pop	r7
    509c:	6f 90       	pop	r6
    509e:	08 95       	ret

000050a0 <_Z20putsTelemetryChannelhhaihh>:
#define TELEM_UNIT    		0x02
#define TELEM_UNIT_LEFT		0x04
#define TELEM_VALUE_RIGHT	0x08
#define TELEM_CONSTANT		0x80

uint8_t putsTelemetryChannel(uint8_t x, uint8_t y, int8_t channel, int16_t val, uint8_t att, uint8_t style)
    50a0:	4f 92       	push	r4
    50a2:	5f 92       	push	r5
    50a4:	6f 92       	push	r6
    50a6:	7f 92       	push	r7
    50a8:	8f 92       	push	r8
    50aa:	9f 92       	push	r9
    50ac:	af 92       	push	r10
    50ae:	bf 92       	push	r11
    50b0:	cf 92       	push	r12
    50b2:	df 92       	push	r13
    50b4:	ef 92       	push	r14
    50b6:	ff 92       	push	r15
    50b8:	0f 93       	push	r16
    50ba:	1f 93       	push	r17
    50bc:	df 93       	push	r29
    50be:	cf 93       	push	r28
    50c0:	00 d0       	rcall	.+0      	; 0x50c2 <_Z20putsTelemetryChannelhhaihh+0x22>
    50c2:	cd b7       	in	r28, 0x3d	; 61
    50c4:	de b7       	in	r29, 0x3e	; 62
    50c6:	b8 2e       	mov	r11, r24
    50c8:	a6 2e       	mov	r10, r22
    50ca:	74 2f       	mov	r23, r20
    50cc:	52 2e       	mov	r5, r18
    50ce:	43 2e       	mov	r4, r19
    50d0:	10 2f       	mov	r17, r16
{
	uint8_t unit = ' ' ;
    50d2:	80 e2       	ldi	r24, 0x20	; 32
    50d4:	89 83       	std	Y+1, r24	; 0x01
	uint8_t xbase = x ;
	uint8_t fieldW = FW ;
	uint8_t displayed = 0 ;
	int8_t chanIndex ;

	chanIndex = pgm_read_byte( &TelemIndex[channel] ) ;
    50d6:	e4 2f       	mov	r30, r20
    50d8:	ff 27       	eor	r31, r31
    50da:	e7 fd       	sbrc	r30, 7
    50dc:	f0 95       	com	r31
    50de:	e3 52       	subi	r30, 0x23	; 35
    50e0:	fc 4f       	sbci	r31, 0xFC	; 252
    50e2:	f4 90       	lpm	r15, Z+
	if ( style & TELEM_LABEL )
    50e4:	ce 2c       	mov	r12, r14
    50e6:	dd 24       	eor	r13, r13
    50e8:	91 e0       	ldi	r25, 0x01	; 1
    50ea:	69 2e       	mov	r6, r25
    50ec:	71 2c       	mov	r7, r1
    50ee:	6c 20       	and	r6, r12
    50f0:	7d 20       	and	r7, r13
    50f2:	e0 fc       	sbrc	r14, 0
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <_Z20putsTelemetryChannelhhaihh+0x5a>
    50f6:	0b 2d       	mov	r16, r11
    50f8:	2b c0       	rjmp	.+86     	; 0x5150 <_Z20putsTelemetryChannelhhaihh+0xb0>
	{
#ifdef SCALERS
		uint8_t displayed = 0 ;
		int8_t index = chanIndex ;
		if ( (index >= V_SC1) && (index < V_SC1 + NUM_SCALERS) )
    50fa:	2f 2d       	mov	r18, r15
    50fc:	21 5f       	subi	r18, 0xF1	; 241
    50fe:	24 30       	cpi	r18, 0x04	; 4
    5100:	c8 f4       	brcc	.+50     	; 0x5134 <_Z20putsTelemetryChannelhhaihh+0x94>
		{
			index -= V_SC1 ;
			uint8_t *p = &g_model.Scalers[index].name[0] ;
    5102:	33 27       	eor	r19, r19
    5104:	27 fd       	sbrc	r18, 7
    5106:	30 95       	com	r19
			if ( *p )
    5108:	8b e0       	ldi	r24, 0x0B	; 11
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	28 9f       	mul	r18, r24
    510e:	a0 01       	movw	r20, r0
    5110:	29 9f       	mul	r18, r25
    5112:	50 0d       	add	r21, r0
    5114:	38 9f       	mul	r19, r24
    5116:	50 0d       	add	r21, r0
    5118:	11 24       	eor	r1, r1
    511a:	fa 01       	movw	r30, r20
    511c:	ec 50       	subi	r30, 0x0C	; 12
    511e:	fb 4f       	sbci	r31, 0xFB	; 251
    5120:	80 81       	ld	r24, Z
    5122:	88 23       	and	r24, r24
    5124:	39 f0       	breq	.+14     	; 0x5134 <_Z20putsTelemetryChannelhhaihh+0x94>
			{
				lcd_putsnAtt( x, y, (const char *)p, 4, BSS ) ;
    5126:	af 01       	movw	r20, r30
    5128:	8b 2d       	mov	r24, r11
    512a:	24 e0       	ldi	r18, 0x04	; 4
    512c:	00 e1       	ldi	r16, 0x10	; 16
    512e:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
    5132:	07 c0       	rjmp	.+14     	; 0x5142 <_Z20putsTelemetryChannelhhaihh+0xa2>
				displayed = 1 ;
			}
		}
		if ( displayed == 0 )
		{
  		putsAttIdxTelemItems( x, y, channel+1, 0 ) ;
    5134:	7f 5f       	subi	r23, 0xFF	; 255
    5136:	8b 2d       	mov	r24, r11
    5138:	6a 2d       	mov	r22, r10
    513a:	47 2f       	mov	r20, r23
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <_Z20putsAttIdxTelemItemshhhh>
		}
#else 
		lcd_putsAttIdx( x, y, Str_telemItems, channel+1, 0 ) ;
#endif		
		x += 4*FW ;
    5142:	0b 2d       	mov	r16, r11
    5144:	08 5e       	subi	r16, 0xE8	; 232
		if ( att & DBLSIZE )
    5146:	12 ff       	sbrs	r17, 2
    5148:	03 c0       	rjmp	.+6      	; 0x5150 <_Z20putsTelemetryChannelhhaihh+0xb0>
		{
			x += 4 ;
    514a:	0c 5f       	subi	r16, 0xFC	; 252
			y -= FH ;
    514c:	88 ef       	ldi	r24, 0xF8	; 248
    514e:	a8 0e       	add	r10, r24
			fieldW += FW ;
		}
	}

	if (style & TELEM_VALUE_RIGHT)
    5150:	88 e0       	ldi	r24, 0x08	; 8
    5152:	88 2e       	mov	r8, r24
    5154:	91 2c       	mov	r9, r1
    5156:	8c 20       	and	r8, r12
    5158:	9d 20       	and	r9, r13
    515a:	c3 fc       	sbrc	r12, 3
	{
		att &= ~LEFT ;
    515c:	1f 7b       	andi	r17, 0xBF	; 191
	}
	channel = chanIndex ;
  switch (channel)
    515e:	81 ef       	ldi	r24, 0xF1	; 241
    5160:	f8 16       	cp	r15, r24
    5162:	d4 f1       	brlt	.+116    	; 0x51d8 <_Z20putsTelemetryChannelhhaihh+0x138>
    5164:	84 ef       	ldi	r24, 0xF4	; 244
    5166:	8f 15       	cp	r24, r15
    5168:	2c f4       	brge	.+10     	; 0x5174 <_Z20putsTelemetryChannelhhaihh+0xd4>
    516a:	8f 2d       	mov	r24, r15
    516c:	8e 5f       	subi	r24, 0xFE	; 254
    516e:	82 30       	cpi	r24, 0x02	; 2
    5170:	98 f5       	brcc	.+102    	; 0x51d8 <_Z20putsTelemetryChannelhhaihh+0x138>
    5172:	1b c0       	rjmp	.+54     	; 0x51aa <_Z20putsTelemetryChannelhhaihh+0x10a>
		case V_SC3 :
		case V_SC4 :
		{
			int16_t cvalue ;
			uint8_t precision ;
			cvalue = calc_scaler( channel-V_SC1, &unit, &precision ) ;
    5174:	8f 2d       	mov	r24, r15
    5176:	81 5f       	subi	r24, 0xF1	; 241
    5178:	be 01       	movw	r22, r28
    517a:	6f 5f       	subi	r22, 0xFF	; 255
    517c:	7f 4f       	sbci	r23, 0xFF	; 255
    517e:	ae 01       	movw	r20, r28
    5180:	4e 5f       	subi	r20, 0xFE	; 254
    5182:	5f 4f       	sbci	r21, 0xFF	; 255
    5184:	0e 94 82 27 	call	0x4f04	; 0x4f04 <_Z11calc_scalerhPhS_>
			if ( precision == 1 )
    5188:	2a 81       	ldd	r18, Y+2	; 0x02
    518a:	21 30       	cpi	r18, 0x01	; 1
    518c:	11 f4       	brne	.+4      	; 0x5192 <_Z20putsTelemetryChannelhhaihh+0xf2>
			{
				att |= PREC1 ;
    518e:	10 62       	ori	r17, 0x20	; 32
    5190:	03 c0       	rjmp	.+6      	; 0x5198 <_Z20putsTelemetryChannelhhaihh+0xf8>
			}
			else if ( precision == 2 )
    5192:	22 30       	cpi	r18, 0x02	; 2
    5194:	09 f4       	brne	.+2      	; 0x5198 <_Z20putsTelemetryChannelhhaihh+0xf8>
			{
				att |= PREC2 ;
    5196:	10 63       	ori	r17, 0x30	; 48
			}
			// Sort units here
			unit = pgm_read_byte( &UnitsText[unit]) ;
    5198:	e9 81       	ldd	r30, Y+1	; 0x01
    519a:	f0 e0       	ldi	r31, 0x00	; 0
    519c:	ea 55       	subi	r30, 0x5A	; 90
    519e:	ff 4e       	sbci	r31, 0xEF	; 239
    51a0:	e4 91       	lpm	r30, Z+
    51a2:	e9 83       	std	Y+1, r30	; 0x01
			if ( (style & TELEM_CONSTANT) == 0)
    51a4:	e7 fe       	sbrs	r14, 7
    51a6:	16 c0       	rjmp	.+44     	; 0x51d4 <_Z20putsTelemetryChannelhhaihh+0x134>
    51a8:	17 c0       	rjmp	.+46     	; 0x51d8 <_Z20putsTelemetryChannelhhaihh+0x138>
		break ;
#endif		
		
    case TIMER1 :
    case TIMER2 :
			if ( (att & DBLSIZE) == 0 )
    51aa:	12 ff       	sbrs	r17, 2
			{
				x -= 4 ;
    51ac:	04 50       	subi	r16, 0x04	; 4
			}
			if ( style & TELEM_LABEL )
    51ae:	67 28       	or	r6, r7
    51b0:	09 f0       	breq	.+2      	; 0x51b4 <_Z20putsTelemetryChannelhhaihh+0x114>
			{
				x += FW+4 ;
    51b2:	06 5f       	subi	r16, 0xF6	; 246
			}
			att &= DBLSIZE | INVERS | BLINK ;
    51b4:	17 70       	andi	r17, 0x07	; 7
      putsTime(x-FW, y, val, att, att) ;
    51b6:	80 2f       	mov	r24, r16
    51b8:	86 50       	subi	r24, 0x06	; 6
    51ba:	6a 2d       	mov	r22, r10
    51bc:	45 2d       	mov	r20, r5
    51be:	54 2d       	mov	r21, r4
    51c0:	21 2f       	mov	r18, r17
    51c2:	01 2f       	mov	r16, r17
    51c4:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <_Z8putsTimehhihh>
			displayed = 1 ;
    	unit = channel + 2 + '1';
    51c8:	83 e3       	ldi	r24, 0x33	; 51
    51ca:	f8 0e       	add	r15, r24
    51cc:	f9 82       	std	Y+1, r15	; 0x01
			xbase -= FW ;
    51ce:	2b 2d       	mov	r18, r11
    51d0:	26 50       	subi	r18, 0x06	; 6
    51d2:	0e c0       	rjmp	.+28     	; 0x51f0 <_Z20putsTelemetryChannelhhaihh+0x150>
    51d4:	58 2e       	mov	r5, r24
    51d6:	49 2e       	mov	r4, r25
    break;
#endif
  }
	if ( !displayed )
	{
  	lcd_outdezAtt( (style & TELEM_VALUE_RIGHT) ? xbase+61 : x, y, val, att ) ;
    51d8:	89 28       	or	r8, r9
    51da:	11 f0       	breq	.+4      	; 0x51e0 <_Z20putsTelemetryChannelhhaihh+0x140>
    51dc:	0b 2d       	mov	r16, r11
    51de:	03 5c       	subi	r16, 0xC3	; 195
    51e0:	80 2f       	mov	r24, r16
    51e2:	6a 2d       	mov	r22, r10
    51e4:	45 2d       	mov	r20, r5
    51e6:	54 2d       	mov	r21, r4
    51e8:	21 2f       	mov	r18, r17
    51ea:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    51ee:	2b 2d       	mov	r18, r11
	}
	if ( style & ( TELEM_UNIT | TELEM_UNIT_LEFT ) )
    51f0:	c6 01       	movw	r24, r12
    51f2:	86 70       	andi	r24, 0x06	; 6
    51f4:	90 70       	andi	r25, 0x00	; 0
    51f6:	89 2b       	or	r24, r25
    51f8:	69 f0       	breq	.+26     	; 0x5214 <_Z20putsTelemetryChannelhhaihh+0x174>
	{
		if ( style & TELEM_UNIT_LEFT )
    51fa:	c2 fe       	sbrs	r12, 2
    51fc:	04 c0       	rjmp	.+8      	; 0x5206 <_Z20putsTelemetryChannelhhaihh+0x166>
		{
			x = xbase + FW + 4 ;
    51fe:	82 2f       	mov	r24, r18
    5200:	86 5f       	subi	r24, 0xF6	; 246
			att &= ~DBLSIZE ;			 
    5202:	1b 7f       	andi	r17, 0xFB	; 251
    5204:	02 c0       	rjmp	.+4      	; 0x520a <_Z20putsTelemetryChannelhhaihh+0x16a>
		}
		else
		{
			x = lcd_lastPos ;
    5206:	80 91 45 09 	lds	r24, 0x0945
		}
  	lcd_putcAtt( x, y, unit, att);
    520a:	6a 2d       	mov	r22, r10
    520c:	49 81       	ldd	r20, Y+1	; 0x01
    520e:	21 2f       	mov	r18, r17
    5210:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
	}
	return unit ;
}
    5214:	89 81       	ldd	r24, Y+1	; 0x01
    5216:	0f 90       	pop	r0
    5218:	0f 90       	pop	r0
    521a:	cf 91       	pop	r28
    521c:	df 91       	pop	r29
    521e:	1f 91       	pop	r17
    5220:	0f 91       	pop	r16
    5222:	ff 90       	pop	r15
    5224:	ef 90       	pop	r14
    5226:	df 90       	pop	r13
    5228:	cf 90       	pop	r12
    522a:	bf 90       	pop	r11
    522c:	af 90       	pop	r10
    522e:	9f 90       	pop	r9
    5230:	8f 90       	pop	r8
    5232:	7f 90       	pop	r7
    5234:	6f 90       	pop	r6
    5236:	5f 90       	pop	r5
    5238:	4f 90       	pop	r4
    523a:	08 95       	ret

0000523c <_ZL16menuProcSwitchesh>:
//		}
//	}
 }
}

static void menuProcSwitches(uint8_t sub)  //Issue 78
    523c:	6f 92       	push	r6
    523e:	7f 92       	push	r7
    5240:	8f 92       	push	r8
    5242:	9f 92       	push	r9
    5244:	af 92       	push	r10
    5246:	bf 92       	push	r11
    5248:	cf 92       	push	r12
    524a:	df 92       	push	r13
    524c:	ef 92       	push	r14
    524e:	ff 92       	push	r15
    5250:	0f 93       	push	r16
    5252:	1f 93       	push	r17
    5254:	cf 93       	push	r28
    5256:	df 93       	push	r29
    5258:	68 2e       	mov	r6, r24
{
//#ifdef MODEL_INDEX
  
	
	TITLEP(PSTR(STR_CUST_SWITCH)) ;
    525a:	84 ea       	ldi	r24, 0xA4	; 164
    525c:	97 e0       	ldi	r25, 0x07	; 7
    525e:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
//	MENU(STR_CUST_SWITCH, menuTabModel, e_Switches, NUM_CSW+1, {0, 3/*repeated...*/});
//#endif
#if defined(CPUM128) || defined(CPUM2561)
	IlinesCount = NUM_CSW+EXTRA_CSW+1-1 ;
#else
	IlinesCount = NUM_CSW+1-1 ;
    5262:	8c e0       	ldi	r24, 0x0C	; 12
    5264:	80 93 c2 08 	sts	0x08C2, r24
#endif
	Columns = &ProgColumns[COLUMNS_3] ;
    5268:	8b e2       	ldi	r24, 0x2B	; 43
    526a:	94 e0       	ldi	r25, 0x04	; 4
    526c:	90 93 c1 08 	sts	0x08C1, r25
    5270:	80 93 c0 08 	sts	0x08C0, r24
	uint8_t y = 0;
	uint8_t k = 0;
//	int8_t  sub    = mstate2.m_posVert ;
//	int8_t  sub    = mstate2.m_posVert - 1;
	uint8_t subSub = g_posHorz;
    5274:	90 90 0c 07 	lds	r9, 0x070C
  uint8_t t_pgOfs ;

	t_pgOfs = evalOffset(sub, 6);
    5278:	86 2d       	mov	r24, r6
    527a:	66 e0       	ldi	r22, 0x06	; 6
    527c:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    5280:	78 2e       	mov	r7, r24
    5282:	b8 e0       	ldi	r27, 0x08	; 8
    5284:	ab 2e       	mov	r10, r27
	for(uint8_t i=0; i<7; i++)
	{
    y=(i+1)*FH;
    k=i+t_pgOfs;
//    if(k==NUM_CSW) break;
    uint8_t attr = (sub==k ? InverseBlink  : 0);
    5286:	67 14       	cp	r6, r7
    5288:	11 f0       	breq	.+4      	; 0x528e <_ZL16menuProcSwitchesh+0x52>
    528a:	88 24       	eor	r8, r8
    528c:	02 c0       	rjmp	.+4      	; 0x5292 <_ZL16menuProcSwitchesh+0x56>
    528e:	80 90 eb 06 	lds	r8, 0x06EB
    
		//write SW names here
//    lcd_puts_Pleft( y, PSTR(STR_S) ) ;
    lcd_putc(  0 , y, 'L' );
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	6a 2d       	mov	r22, r10
    5296:	4c e4       	ldi	r20, 0x4C	; 76
    5298:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
    lcd_putc(  FW-1 , y, k + (k>8 ? 'A'-9: '1'));
    529c:	88 e0       	ldi	r24, 0x08	; 8
    529e:	87 15       	cp	r24, r7
    52a0:	10 f0       	brcs	.+4      	; 0x52a6 <_ZL16menuProcSwitchesh+0x6a>
    52a2:	41 e3       	ldi	r20, 0x31	; 49
    52a4:	01 c0       	rjmp	.+2      	; 0x52a8 <_ZL16menuProcSwitchesh+0x6c>
    52a6:	48 e3       	ldi	r20, 0x38	; 56
    52a8:	47 0d       	add	r20, r7
    52aa:	85 e0       	ldi	r24, 0x05	; 5
    52ac:	6a 2d       	mov	r22, r10
    52ae:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
			continue ;
		}
		
#endif

		uint8_t att1 = subSub==1 ? attr : 0 ;
    52b2:	e1 e0       	ldi	r30, 0x01	; 1
    52b4:	9e 16       	cp	r9, r30
    52b6:	19 f4       	brne	.+6      	; 0x52be <_ZL16menuProcSwitchesh+0x82>
    52b8:	f8 2c       	mov	r15, r8
    52ba:	ee 24       	eor	r14, r14
    52bc:	07 c0       	rjmp	.+14     	; 0x52cc <_ZL16menuProcSwitchesh+0x90>
		uint8_t att2 = subSub==2 ? attr : 0 ;
    52be:	f2 e0       	ldi	r31, 0x02	; 2
    52c0:	9f 16       	cp	r9, r31
    52c2:	11 f4       	brne	.+4      	; 0x52c8 <_ZL16menuProcSwitchesh+0x8c>
    52c4:	e8 2c       	mov	r14, r8
    52c6:	01 c0       	rjmp	.+2      	; 0x52ca <_ZL16menuProcSwitchesh+0x8e>
    52c8:	ee 24       	eor	r14, r14
    52ca:	ff 24       	eor	r15, r15
		CSwData *cs = &g_model.customSw[k];
    52cc:	c7 2c       	mov	r12, r7
    52ce:	dd 24       	eor	r13, r13

		lcd_putsAttIdx( 2*FW+1, y, Str_Cswitch,cs->func,subSub==0 ? attr : 0);
    52d0:	f6 01       	movw	r30, r12
    52d2:	ee 0f       	add	r30, r30
    52d4:	ff 1f       	adc	r31, r31
    52d6:	ec 0d       	add	r30, r12
    52d8:	fd 1d       	adc	r31, r13
    52da:	ee 5f       	subi	r30, 0xFE	; 254
    52dc:	fb 4f       	sbci	r31, 0xFB	; 251
    52de:	20 81       	ld	r18, Z
    52e0:	2f 70       	andi	r18, 0x0F	; 15
    52e2:	99 20       	and	r9, r9
    52e4:	11 f0       	breq	.+4      	; 0x52ea <_ZL16menuProcSwitchesh+0xae>
    52e6:	00 e0       	ldi	r16, 0x00	; 0
    52e8:	01 c0       	rjmp	.+2      	; 0x52ec <_ZL16menuProcSwitchesh+0xb0>
    52ea:	08 2d       	mov	r16, r8
    52ec:	8d e0       	ldi	r24, 0x0D	; 13
    52ee:	6a 2d       	mov	r22, r10
    52f0:	4e e2       	ldi	r20, 0x2E	; 46
    52f2:	57 e0       	ldi	r21, 0x07	; 7
    52f4:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>

    uint8_t cstate = CS_STATE(cs->func);
    52f8:	e6 01       	movw	r28, r12
    52fa:	cc 0f       	add	r28, r28
    52fc:	dd 1f       	adc	r29, r29
    52fe:	cc 0d       	add	r28, r12
    5300:	dd 1d       	adc	r29, r13
    5302:	fe 01       	movw	r30, r28
    5304:	ee 5f       	subi	r30, 0xFE	; 254
    5306:	fb 4f       	sbci	r31, 0xFB	; 251
    5308:	80 81       	ld	r24, Z
    530a:	8f 70       	andi	r24, 0x0F	; 15
    530c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_Z8CS_STATEh>
    5310:	b8 2e       	mov	r11, r24

    if(cstate == CS_VOFS)
    5312:	88 23       	and	r24, r24
    5314:	09 f0       	breq	.+2      	; 0x5318 <_ZL16menuProcSwitchesh+0xdc>
    5316:	3f c0       	rjmp	.+126    	; 0x5396 <_ZL16menuProcSwitchesh+0x15a>
    {
        if (cs->v1 > CHOUT_BASE+NUM_CHNOUT)
    5318:	fe 01       	movw	r30, r28
    531a:	e6 55       	subi	r30, 0x56	; 86
    531c:	fe 4f       	sbci	r31, 0xFE	; 254
    531e:	ea 5a       	subi	r30, 0xAA	; 170
    5320:	fd 4f       	sbci	r31, 0xFD	; 253
    5322:	41 91       	ld	r20, Z+
    5324:	df 01       	movw	r26, r30
    5326:	45 32       	cpi	r20, 0x25	; 37
    5328:	14 f1       	brlt	.+68     	; 0x536e <_ZL16menuProcSwitchesh+0x132>
				{
					int16_t value = convertTelemConstant( cs->v1-CHOUT_BASE-NUM_CHNOUT-1, cs->v2 ) ;
    532a:	45 52       	subi	r20, 0x25	; 37
int16_t convertTelemConstant( uint8_t channelin, int8_t value)
{
  int16_t result;
	int8_t channel ;

	channel = pgm_read_byte( &TelemIndex[channelin] ) ;
    532c:	e4 2f       	mov	r30, r20
    532e:	f0 e0       	ldi	r31, 0x00	; 0
    5330:	e3 52       	subi	r30, 0x23	; 35
    5332:	fc 4f       	sbci	r31, 0xFC	; 252
    5334:	e4 91       	lpm	r30, Z+
	result = value + 125 ;
    5336:	8c 91       	ld	r24, X
    5338:	28 2f       	mov	r18, r24
    533a:	33 27       	eor	r19, r19
    533c:	27 fd       	sbrc	r18, 7
    533e:	30 95       	com	r19
    5340:	23 58       	subi	r18, 0x83	; 131
    5342:	3f 4f       	sbci	r19, 0xFF	; 255
  switch (channel)
    5344:	ee 5f       	subi	r30, 0xFE	; 254
    5346:	e2 30       	cpi	r30, 0x02	; 2
    5348:	50 f4       	brcc	.+20     	; 0x535e <_ZL16menuProcSwitchesh+0x122>
		// case FR_FUEL :
		// case FR_CURRENT :
		
    case TIMER1 :
    case TIMER2 :
      result *= 10 ;
    534a:	c9 01       	movw	r24, r18
    534c:	88 0f       	add	r24, r24
    534e:	99 1f       	adc	r25, r25
    5350:	53 e0       	ldi	r21, 0x03	; 3
    5352:	22 0f       	add	r18, r18
    5354:	33 1f       	adc	r19, r19
    5356:	5a 95       	dec	r21
    5358:	e1 f7       	brne	.-8      	; 0x5352 <_ZL16menuProcSwitchesh+0x116>
    535a:	28 0f       	add	r18, r24
    535c:	39 1f       	adc	r19, r25
    if(cstate == CS_VOFS)
    {
        if (cs->v1 > CHOUT_BASE+NUM_CHNOUT)
				{
					int16_t value = convertTelemConstant( cs->v1-CHOUT_BASE-NUM_CHNOUT-1, cs->v2 ) ;
					putsTelemetryChannel( 18*FW-8, y, cs->v1-CHOUT_BASE-NUM_CHNOUT-1, value, att2, TELEM_UNIT | TELEM_CONSTANT ) ;
    535e:	84 e6       	ldi	r24, 0x64	; 100
    5360:	6a 2d       	mov	r22, r10
    5362:	0e 2d       	mov	r16, r14
    5364:	92 e8       	ldi	r25, 0x82	; 130
    5366:	e9 2e       	mov	r14, r25
    5368:	0e 94 50 28 	call	0x50a0	; 0x50a0 <_Z20putsTelemetryChannelhhaihh>
    536c:	09 c0       	rjmp	.+18     	; 0x5380 <_ZL16menuProcSwitchesh+0x144>
				}
        else
				{
          lcd_outdezAtt( 18*FW-9, y, cs->v2  , att2);
    536e:	40 81       	ld	r20, Z
    5370:	55 27       	eor	r21, r21
    5372:	47 fd       	sbrc	r20, 7
    5374:	50 95       	com	r21
    5376:	83 e6       	ldi	r24, 0x63	; 99
    5378:	6a 2d       	mov	r22, r10
    537a:	2e 2d       	mov	r18, r14
    537c:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
				}
        putsChnRaw(    10*FW-6, y, cs->v1, att1 );
    5380:	f6 01       	movw	r30, r12
    5382:	ee 0f       	add	r30, r30
    5384:	ff 1f       	adc	r31, r31
    5386:	ec 0d       	add	r30, r12
    5388:	fd 1d       	adc	r31, r13
    538a:	e0 50       	subi	r30, 0x00	; 0
    538c:	fc 4f       	sbci	r31, 0xFC	; 252
    538e:	86 e3       	ldi	r24, 0x36	; 54
    5390:	6a 2d       	mov	r22, r10
    5392:	40 81       	ld	r20, Z
    5394:	29 c0       	rjmp	.+82     	; 0x53e8 <_ZL16menuProcSwitchesh+0x1ac>
    }
    else if(cstate == CS_VBOOL)
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	b8 16       	cp	r11, r24
    539a:	a9 f4       	brne	.+42     	; 0x53c6 <_ZL16menuProcSwitchesh+0x18a>
    {
        putsDrSwitches(10*FW-6, y, cs->v1  , att1 ) ;
    539c:	8e 01       	movw	r16, r28
    539e:	06 55       	subi	r16, 0x56	; 86
    53a0:	1e 4f       	sbci	r17, 0xFE	; 254
    53a2:	0a 5a       	subi	r16, 0xAA	; 170
    53a4:	1d 4f       	sbci	r17, 0xFD	; 253
    53a6:	86 e3       	ldi	r24, 0x36	; 54
    53a8:	6a 2d       	mov	r22, r10
    53aa:	f8 01       	movw	r30, r16
    53ac:	41 91       	ld	r20, Z+
    53ae:	8f 01       	movw	r16, r30
    53b0:	2f 2d       	mov	r18, r15
    53b2:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
        putsDrSwitches(14*FW-7, y, cs->v2  ,att2) ;
    53b6:	8d e4       	ldi	r24, 0x4D	; 77
    53b8:	6a 2d       	mov	r22, r10
    53ba:	f8 01       	movw	r30, r16
    53bc:	40 81       	ld	r20, Z
    53be:	2e 2d       	mov	r18, r14
    53c0:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
    53c4:	44 c0       	rjmp	.+136    	; 0x544e <_ZL16menuProcSwitchesh+0x212>
    53c6:	c6 55       	subi	r28, 0x56	; 86
    53c8:	de 4f       	sbci	r29, 0xFE	; 254
    }
    else if(cstate == CS_VCOMP)
    53ca:	f2 e0       	ldi	r31, 0x02	; 2
    53cc:	bf 16       	cp	r11, r31
    53ce:	81 f4       	brne	.+32     	; 0x53f0 <_ZL16menuProcSwitchesh+0x1b4>
    {
        putsChnRaw(    14*FW-4, y, cs->v2  ,att2 ) ;
    53d0:	c9 5a       	subi	r28, 0xA9	; 169
    53d2:	dd 4f       	sbci	r29, 0xFD	; 253
    53d4:	80 e5       	ldi	r24, 0x50	; 80
    53d6:	6a 2d       	mov	r22, r10
    53d8:	48 81       	ld	r20, Y
    53da:	2e 2d       	mov	r18, r14
    53dc:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
        putsChnRaw(    10*FW-6, y, cs->v1  , att1 ) ;
    53e0:	fe 01       	movw	r30, r28
    53e2:	86 e3       	ldi	r24, 0x36	; 54
    53e4:	6a 2d       	mov	r22, r10
    53e6:	42 91       	ld	r20, -Z
    53e8:	2f 2d       	mov	r18, r15
    53ea:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
    53ee:	2f c0       	rjmp	.+94     	; 0x544e <_ZL16menuProcSwitchesh+0x212>
    }
		else // cstate == CS_TIMER
		{
			int8_t x ;
			uint8_t att = att1 ;
			x = cs->v1 ;
    53f0:	ca 5a       	subi	r28, 0xAA	; 170
    53f2:	dd 4f       	sbci	r29, 0xFD	; 253
    53f4:	08 81       	ld	r16, Y
			if ( x < 0 )
    53f6:	07 fd       	sbrc	r16, 7
    53f8:	02 c0       	rjmp	.+4      	; 0x53fe <_ZL16menuProcSwitchesh+0x1c2>
    53fa:	2f 2d       	mov	r18, r15
    53fc:	03 c0       	rjmp	.+6      	; 0x5404 <_ZL16menuProcSwitchesh+0x1c8>
			{
				x = -x-1 ;
    53fe:	00 95       	com	r16
				att |= PREC1 ;
    5400:	2f 2d       	mov	r18, r15
    5402:	20 62       	ori	r18, 0x20	; 32
			}
			lcd_xlabel_decimal( y, PSTR(STR_15_ON), x+1, att, 13*FW-5 ) ;
    5404:	40 2f       	mov	r20, r16
    5406:	55 27       	eor	r21, r21
    5408:	47 fd       	sbrc	r20, 7
    540a:	50 95       	com	r21
    540c:	4f 5f       	subi	r20, 0xFF	; 255
    540e:	5f 4f       	sbci	r21, 0xFF	; 255
    5410:	8a 2d       	mov	r24, r10
    5412:	60 ea       	ldi	r22, 0xA0	; 160
    5414:	77 e0       	ldi	r23, 0x07	; 7
    5416:	09 e4       	ldi	r16, 0x49	; 73
    5418:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
//	    lcd_puts_Pleft( y, PSTR(STR_15_ON) ) ;
//      lcd_outdezAtt( 13*FW-5, y, x+1  ,att ) ;
			att = att2 ;
			x = cs->v2 ;
    541c:	f6 01       	movw	r30, r12
    541e:	ee 0f       	add	r30, r30
    5420:	ff 1f       	adc	r31, r31
    5422:	ec 0d       	add	r30, r12
    5424:	fd 1d       	adc	r31, r13
    5426:	ef 5f       	subi	r30, 0xFF	; 255
    5428:	fb 4f       	sbci	r31, 0xFB	; 251
    542a:	40 81       	ld	r20, Z
			if ( x < 0 )
    542c:	47 fd       	sbrc	r20, 7
    542e:	02 c0       	rjmp	.+4      	; 0x5434 <_ZL16menuProcSwitchesh+0x1f8>
    5430:	0e 2d       	mov	r16, r14
    5432:	03 c0       	rjmp	.+6      	; 0x543a <_ZL16menuProcSwitchesh+0x1fe>
			{
				x = -x-1 ;
    5434:	40 95       	com	r20
				att |= PREC1 ;
    5436:	0e 2d       	mov	r16, r14
    5438:	00 62       	ori	r16, 0x20	; 32
			}
      lcd_outdezAtt( 18*FW-1, y, x+1 , att ) ;
    543a:	55 27       	eor	r21, r21
    543c:	47 fd       	sbrc	r20, 7
    543e:	50 95       	com	r21
    5440:	4f 5f       	subi	r20, 0xFF	; 255
    5442:	5f 4f       	sbci	r21, 0xFF	; 255
    5444:	8b e6       	ldi	r24, 0x6B	; 107
    5446:	6a 2d       	mov	r22, r10
    5448:	20 2f       	mov	r18, r16
    544a:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
		}
		{
			int8_t as ;
			as = cs->andsw ;
    544e:	f6 01       	movw	r30, r12
    5450:	ee 0f       	add	r30, r30
    5452:	ff 1f       	adc	r31, r31
    5454:	ec 0d       	add	r30, r12
    5456:	fd 1d       	adc	r31, r13
    5458:	ee 5f       	subi	r30, 0xFE	; 254
    545a:	fb 4f       	sbci	r31, 0xFB	; 251
    545c:	40 81       	ld	r20, Z
    545e:	42 95       	swap	r20
    5460:	4f 70       	andi	r20, 0x0F	; 15
			if ( as > 8 )
    5462:	49 30       	cpi	r20, 0x09	; 9
    5464:	0c f0       	brlt	.+2      	; 0x5468 <_ZL16menuProcSwitchesh+0x22c>
			{
				as += 1 ;				
    5466:	4f 5f       	subi	r20, 0xFF	; 255
			}
			putsDrSwitches( 17*FW+2, y, as,(subSub==3 ? attr : 0)) ;
    5468:	83 e0       	ldi	r24, 0x03	; 3
    546a:	98 16       	cp	r9, r24
    546c:	11 f0       	breq	.+4      	; 0x5472 <_ZL16menuProcSwitchesh+0x236>
    546e:	20 e0       	ldi	r18, 0x00	; 0
    5470:	01 c0       	rjmp	.+2      	; 0x5474 <_ZL16menuProcSwitchesh+0x238>
    5472:	28 2d       	mov	r18, r8
    5474:	88 e6       	ldi	r24, 0x68	; 104
    5476:	6a 2d       	mov	r22, r10
    5478:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
		}
		
		
#ifndef NOPOTSCROLL
		if((s_editing ) && attr)	// Use s_editing???
    547c:	80 91 e6 06 	lds	r24, 0x06E6
    5480:	88 23       	and	r24, r24
    5482:	09 f4       	brne	.+2      	; 0x5486 <_ZL16menuProcSwitchesh+0x24a>
    5484:	ae c0       	rjmp	.+348    	; 0x55e2 <_ZL16menuProcSwitchesh+0x3a6>
    5486:	88 20       	and	r8, r8
    5488:	09 f4       	brne	.+2      	; 0x548c <_ZL16menuProcSwitchesh+0x250>
    548a:	ab c0       	rjmp	.+342    	; 0x55e2 <_ZL16menuProcSwitchesh+0x3a6>
#else		
		if( s_editMode && attr)
#endif
		{
    	switch (subSub)
    548c:	e1 e0       	ldi	r30, 0x01	; 1
    548e:	9e 16       	cp	r9, r30
    5490:	61 f1       	breq	.+88     	; 0x54ea <_ZL16menuProcSwitchesh+0x2ae>
    5492:	9e 16       	cp	r9, r30
    5494:	48 f0       	brcs	.+18     	; 0x54a8 <_ZL16menuProcSwitchesh+0x26c>
    5496:	f2 e0       	ldi	r31, 0x02	; 2
    5498:	9f 16       	cp	r9, r31
    549a:	09 f4       	brne	.+2      	; 0x549e <_ZL16menuProcSwitchesh+0x262>
    549c:	4b c0       	rjmp	.+150    	; 0x5534 <_ZL16menuProcSwitchesh+0x2f8>
    549e:	83 e0       	ldi	r24, 0x03	; 3
    54a0:	98 16       	cp	r9, r24
    54a2:	09 f0       	breq	.+2      	; 0x54a6 <_ZL16menuProcSwitchesh+0x26a>
    54a4:	9e c0       	rjmp	.+316    	; 0x55e2 <_ZL16menuProcSwitchesh+0x3a6>
    54a6:	88 c0       	rjmp	.+272    	; 0x55b8 <_ZL16menuProcSwitchesh+0x37c>
			{
    	  case 0:
    	    CHECK_INCDEC_H_MODELVAR_0( cs->func, CS_MAXF);
    54a8:	e6 01       	movw	r28, r12
    54aa:	cc 0f       	add	r28, r28
    54ac:	dd 1f       	adc	r29, r29
    54ae:	cc 0d       	add	r28, r12
    54b0:	dd 1d       	adc	r29, r13
    54b2:	8e 01       	movw	r16, r28
    54b4:	0e 5f       	subi	r16, 0xFE	; 254
    54b6:	1b 4f       	sbci	r17, 0xFB	; 251
    54b8:	f8 01       	movw	r30, r16
    54ba:	80 81       	ld	r24, Z
    54bc:	8f 70       	andi	r24, 0x0F	; 15
    54be:	6e e0       	ldi	r22, 0x0E	; 14
    54c0:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    54c4:	8f 70       	andi	r24, 0x0F	; 15
    54c6:	f8 01       	movw	r30, r16
    54c8:	90 81       	ld	r25, Z
    54ca:	90 7f       	andi	r25, 0xF0	; 240
    54cc:	98 2b       	or	r25, r24
    54ce:	90 83       	st	Z, r25
    	    if(cstate != CS_STATE(cs->func))
    54d0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_Z8CS_STATEh>
    54d4:	b8 16       	cp	r11, r24
    54d6:	09 f4       	brne	.+2      	; 0x54da <_ZL16menuProcSwitchesh+0x29e>
    54d8:	84 c0       	rjmp	.+264    	; 0x55e2 <_ZL16menuProcSwitchesh+0x3a6>
    	    {
    	      cs->v1  = 0;
    54da:	fe 01       	movw	r30, r28
    54dc:	e6 55       	subi	r30, 0x56	; 86
    54de:	fe 4f       	sbci	r31, 0xFE	; 254
    54e0:	ea 5a       	subi	r30, 0xAA	; 170
    54e2:	fd 4f       	sbci	r31, 0xFD	; 253
    54e4:	11 92       	st	Z+, r1
    	      cs->v2 = 0;
    54e6:	10 82       	st	Z, r1
    54e8:	7c c0       	rjmp	.+248    	; 0x55e2 <_ZL16menuProcSwitchesh+0x3a6>
    	    }
    	  break;
      
				case 1:
    	    switch (cstate)
    54ea:	f1 e0       	ldi	r31, 0x01	; 1
    54ec:	bf 16       	cp	r11, r31
    54ee:	51 f0       	breq	.+20     	; 0x5504 <_ZL16menuProcSwitchesh+0x2c8>
    54f0:	bf 16       	cp	r11, r31
    54f2:	80 f0       	brcs	.+32     	; 0x5514 <_ZL16menuProcSwitchesh+0x2d8>
    54f4:	82 e0       	ldi	r24, 0x02	; 2
    54f6:	b8 16       	cp	r11, r24
    54f8:	69 f0       	breq	.+26     	; 0x5514 <_ZL16menuProcSwitchesh+0x2d8>
    54fa:	e3 e0       	ldi	r30, 0x03	; 3
    54fc:	be 16       	cp	r11, r30
    54fe:	09 f0       	breq	.+2      	; 0x5502 <_ZL16menuProcSwitchesh+0x2c6>
    5500:	70 c0       	rjmp	.+224    	; 0x55e2 <_ZL16menuProcSwitchesh+0x3a6>
    5502:	10 c0       	rjmp	.+32     	; 0x5524 <_ZL16menuProcSwitchesh+0x2e8>
					{
    	      case (CS_VOFS):
    	        CHECK_INCDEC_H_MODELVAR_0( cs->v1, NUM_XCHNRAW+NUM_TELEM_ITEMS);
    	      break;
    	      case (CS_VBOOL):
    	        CHECK_INCDEC_MODELSWITCH( cs->v1, -MAX_DRSWITCH,MAX_DRSWITCH);
    5504:	86 01       	movw	r16, r12
    5506:	00 0f       	add	r16, r16
    5508:	11 1f       	adc	r17, r17
    550a:	0c 0d       	add	r16, r12
    550c:	1d 1d       	adc	r17, r13
    550e:	00 50       	subi	r16, 0x00	; 0
    5510:	1c 4f       	sbci	r17, 0xFC	; 252
    5512:	30 c0       	rjmp	.+96     	; 0x5574 <_ZL16menuProcSwitchesh+0x338>
    	      break;
    	      case (CS_VCOMP):
    	        CHECK_INCDEC_H_MODELVAR_0( cs->v1, NUM_XCHNRAW+NUM_TELEM_ITEMS);
    5514:	86 01       	movw	r16, r12
    5516:	00 0f       	add	r16, r16
    5518:	11 1f       	adc	r17, r17
    551a:	0c 0d       	add	r16, r12
    551c:	1d 1d       	adc	r17, r13
    551e:	00 50       	subi	r16, 0x00	; 0
    5520:	1c 4f       	sbci	r17, 0xFC	; 252
    5522:	34 c0       	rjmp	.+104    	; 0x558c <_ZL16menuProcSwitchesh+0x350>
    	      break;
    	      case (CS_TIMER):
    	        CHECK_INCDEC_H_MODELVAR( cs->v1, -50, 99);
    5524:	86 01       	movw	r16, r12
    5526:	00 0f       	add	r16, r16
    5528:	11 1f       	adc	r17, r17
    552a:	0c 0d       	add	r16, r12
    552c:	1d 1d       	adc	r17, r13
    552e:	00 50       	subi	r16, 0x00	; 0
    5530:	1c 4f       	sbci	r17, 0xFC	; 252
    5532:	3b c0       	rjmp	.+118    	; 0x55aa <_ZL16menuProcSwitchesh+0x36e>
    	      break;
    	    }
    	  break;
      
				case 2:
    	    switch (cstate)
    5534:	f1 e0       	ldi	r31, 0x01	; 1
    5536:	bf 16       	cp	r11, r31
    5538:	b1 f0       	breq	.+44     	; 0x5566 <_ZL16menuProcSwitchesh+0x32a>
    553a:	bf 16       	cp	r11, r31
    553c:	40 f0       	brcs	.+16     	; 0x554e <_ZL16menuProcSwitchesh+0x312>
    553e:	82 e0       	ldi	r24, 0x02	; 2
    5540:	b8 16       	cp	r11, r24
    5542:	e9 f0       	breq	.+58     	; 0x557e <_ZL16menuProcSwitchesh+0x342>
    5544:	e3 e0       	ldi	r30, 0x03	; 3
    5546:	be 16       	cp	r11, r30
    5548:	09 f0       	breq	.+2      	; 0x554c <_ZL16menuProcSwitchesh+0x310>
    554a:	4b c0       	rjmp	.+150    	; 0x55e2 <_ZL16menuProcSwitchesh+0x3a6>
    554c:	27 c0       	rjmp	.+78     	; 0x559c <_ZL16menuProcSwitchesh+0x360>
					{
    	      case (CS_VOFS):
    	        CHECK_INCDEC_H_MODELVAR( cs->v2, -125,125);
    554e:	86 01       	movw	r16, r12
    5550:	00 0f       	add	r16, r16
    5552:	11 1f       	adc	r17, r17
    5554:	0c 0d       	add	r16, r12
    5556:	1d 1d       	adc	r17, r13
    5558:	0f 5f       	subi	r16, 0xFF	; 255
    555a:	1b 4f       	sbci	r17, 0xFB	; 251
    555c:	f8 01       	movw	r30, r16
    555e:	80 81       	ld	r24, Z
    5560:	63 e8       	ldi	r22, 0x83	; 131
    5562:	4d e7       	ldi	r20, 0x7D	; 125
    5564:	26 c0       	rjmp	.+76     	; 0x55b2 <_ZL16menuProcSwitchesh+0x376>
    	      break;
    	      case (CS_VBOOL):
    	        CHECK_INCDEC_MODELSWITCH( cs->v2, -MAX_DRSWITCH,MAX_DRSWITCH);
    5566:	86 01       	movw	r16, r12
    5568:	00 0f       	add	r16, r16
    556a:	11 1f       	adc	r17, r17
    556c:	0c 0d       	add	r16, r12
    556e:	1d 1d       	adc	r17, r13
    5570:	0f 5f       	subi	r16, 0xFF	; 255
    5572:	1b 4f       	sbci	r17, 0xFB	; 251
    5574:	f8 01       	movw	r30, r16
    5576:	80 81       	ld	r24, Z
    5578:	6a ee       	ldi	r22, 0xEA	; 234
    557a:	46 e1       	ldi	r20, 0x16	; 22
    557c:	1a c0       	rjmp	.+52     	; 0x55b2 <_ZL16menuProcSwitchesh+0x376>
    	      break;
    	      case (CS_VCOMP):
    	        CHECK_INCDEC_H_MODELVAR_0( cs->v2, NUM_XCHNRAW+NUM_TELEM_ITEMS);
    557e:	86 01       	movw	r16, r12
    5580:	00 0f       	add	r16, r16
    5582:	11 1f       	adc	r17, r17
    5584:	0c 0d       	add	r16, r12
    5586:	1d 1d       	adc	r17, r13
    5588:	0f 5f       	subi	r16, 0xFF	; 255
    558a:	1b 4f       	sbci	r17, 0xFB	; 251
    558c:	f8 01       	movw	r30, r16
    558e:	80 81       	ld	r24, Z
    5590:	6e e2       	ldi	r22, 0x2E	; 46
    5592:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    5596:	f8 01       	movw	r30, r16
    5598:	80 83       	st	Z, r24
    559a:	23 c0       	rjmp	.+70     	; 0x55e2 <_ZL16menuProcSwitchesh+0x3a6>
    	      break;
    	      case (CS_TIMER):
    	        CHECK_INCDEC_H_MODELVAR( cs->v2, -50, 99);
    559c:	86 01       	movw	r16, r12
    559e:	00 0f       	add	r16, r16
    55a0:	11 1f       	adc	r17, r17
    55a2:	0c 0d       	add	r16, r12
    55a4:	1d 1d       	adc	r17, r13
    55a6:	0f 5f       	subi	r16, 0xFF	; 255
    55a8:	1b 4f       	sbci	r17, 0xFB	; 251
    55aa:	f8 01       	movw	r30, r16
    55ac:	80 81       	ld	r24, Z
    55ae:	6e ec       	ldi	r22, 0xCE	; 206
    55b0:	43 e6       	ldi	r20, 0x63	; 99
    55b2:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    55b6:	ef cf       	rjmp	.-34     	; 0x5596 <_ZL16menuProcSwitchesh+0x35a>
    	      default:
    	      break;
    	    }
    	  break;
    	  case 3:
    	    CHECK_INCDEC_H_MODELVAR_0( cs->andsw, 15 ) ;
    55b8:	86 01       	movw	r16, r12
    55ba:	00 0f       	add	r16, r16
    55bc:	11 1f       	adc	r17, r17
    55be:	0c 0d       	add	r16, r12
    55c0:	1d 1d       	adc	r17, r13
    55c2:	0e 5f       	subi	r16, 0xFE	; 254
    55c4:	1b 4f       	sbci	r17, 0xFB	; 251
    55c6:	f8 01       	movw	r30, r16
    55c8:	80 81       	ld	r24, Z
    55ca:	82 95       	swap	r24
    55cc:	8f 70       	andi	r24, 0x0F	; 15
    55ce:	6f e0       	ldi	r22, 0x0F	; 15
    55d0:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    55d4:	82 95       	swap	r24
    55d6:	80 7f       	andi	r24, 0xF0	; 240
    55d8:	f8 01       	movw	r30, r16
    55da:	90 81       	ld	r25, Z
    55dc:	9f 70       	andi	r25, 0x0F	; 15
    55de:	98 2b       	or	r25, r24
    55e0:	90 83       	st	Z, r25
    55e2:	73 94       	inc	r7
    55e4:	f8 e0       	ldi	r31, 0x08	; 8
    55e6:	af 0e       	add	r10, r31
  uint8_t t_pgOfs ;

	t_pgOfs = evalOffset(sub, 6);

//  lcd_puts_P( 4*FW, 1*FH,PSTR("Function V1  V2"));
	for(uint8_t i=0; i<7; i++)
    55e8:	80 e4       	ldi	r24, 0x40	; 64
    55ea:	a8 16       	cp	r10, r24
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <_ZL16menuProcSwitchesh+0x3b4>
    55ee:	4b ce       	rjmp	.-874    	; 0x5286 <_ZL16menuProcSwitchesh+0x4a>
    	    CHECK_INCDEC_H_MODELVAR_0( cs->andsw, 15 ) ;
				break;
    	}
		}
	}
}
    55f0:	df 91       	pop	r29
    55f2:	cf 91       	pop	r28
    55f4:	1f 91       	pop	r17
    55f6:	0f 91       	pop	r16
    55f8:	ff 90       	pop	r15
    55fa:	ef 90       	pop	r14
    55fc:	df 90       	pop	r13
    55fe:	cf 90       	pop	r12
    5600:	bf 90       	pop	r11
    5602:	af 90       	pop	r10
    5604:	9f 90       	pop	r9
    5606:	8f 90       	pop	r8
    5608:	7f 90       	pop	r7
    560a:	6f 90       	pop	r6
    560c:	08 95       	ret

0000560e <_Z13switchDisplayhh>:
int8_t longpress = 0 ;
int8_t unit ;
#endif
#endif

void switchDisplay( uint8_t j, uint8_t a )
    560e:	cf 92       	push	r12
    5610:	df 92       	push	r13
    5612:	ef 92       	push	r14
    5614:	ff 92       	push	r15
    5616:	0f 93       	push	r16
    5618:	1f 93       	push	r17
{
	uint8_t b = a + 3 ;
    561a:	03 e0       	ldi	r16, 0x03	; 3
    561c:	c0 2e       	mov	r12, r16
    561e:	c6 0e       	add	r12, r22
	uint8_t y = 4*FH ;
	for(uint8_t i=a; i<b; y += FH, i += 1 ) lcd_putsAttIdx((2+j*15)*FW-2, y, Str_Switches, i, getSwitch(i+1, 0) ? INVERS : 0) ;
    5620:	9a e5       	ldi	r25, 0x5A	; 90
    5622:	89 9f       	mul	r24, r25
    5624:	c0 01       	movw	r24, r0
    5626:	11 24       	eor	r1, r1
    5628:	1a e0       	ldi	r17, 0x0A	; 10
    562a:	d1 2e       	mov	r13, r17
    562c:	d8 0e       	add	r13, r24
    562e:	f6 2e       	mov	r15, r22
    5630:	10 e2       	ldi	r17, 0x20	; 32
    5632:	11 c0       	rjmp	.+34     	; 0x5656 <_Z13switchDisplayhh+0x48>
    5634:	ef 2c       	mov	r14, r15
    5636:	e3 94       	inc	r14
    5638:	8e 2d       	mov	r24, r14
    563a:	60 e0       	ldi	r22, 0x00	; 0
    563c:	40 e0       	ldi	r20, 0x00	; 0
    563e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    5642:	08 2f       	mov	r16, r24
    5644:	8d 2d       	mov	r24, r13
    5646:	61 2f       	mov	r22, r17
    5648:	4a ee       	ldi	r20, 0xEA	; 234
    564a:	50 e0       	ldi	r21, 0x00	; 0
    564c:	2f 2d       	mov	r18, r15
    564e:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    5652:	18 5f       	subi	r17, 0xF8	; 248
    5654:	fe 2c       	mov	r15, r14
    5656:	fc 14       	cp	r15, r12
    5658:	68 f3       	brcs	.-38     	; 0x5634 <_Z13switchDisplayhh+0x26>
}
    565a:	1f 91       	pop	r17
    565c:	0f 91       	pop	r16
    565e:	ff 90       	pop	r15
    5660:	ef 90       	pop	r14
    5662:	df 90       	pop	r13
    5664:	cf 90       	pop	r12
    5666:	08 95       	ret

00005668 <_Z12get_dr_stateh>:
//    lcd_outdez(x, y, value ) ;
//  }
//}
#endif

uint8_t get_dr_state(uint8_t x)
    5668:	1f 93       	push	r17
    566a:	18 2f       	mov	r17, r24
	ExpoData *ped ;

	ped = &g_model.expoData[x] ;
	
 	return (!getSwitch( ped->drSw1,0) ? DR_HIGH :
    !getSwitch( ped->drSw2,0) ? DR_MID : DR_LOW) ;
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	88 0f       	add	r24, r24
    5670:	99 1f       	adc	r25, r25
    5672:	fc 01       	movw	r30, r24
    5674:	43 e0       	ldi	r20, 0x03	; 3
    5676:	ee 0f       	add	r30, r30
    5678:	ff 1f       	adc	r31, r31
    567a:	4a 95       	dec	r20
    567c:	e1 f7       	brne	.-8      	; 0x5676 <_Z12get_dr_stateh+0xe>
    567e:	e8 1b       	sub	r30, r24
    5680:	f9 0b       	sbc	r31, r25
    5682:	e0 5a       	subi	r30, 0xA0	; 160
    5684:	fc 4f       	sbci	r31, 0xFC	; 252
    5686:	80 81       	ld	r24, Z
    5688:	60 e0       	ldi	r22, 0x00	; 0
    568a:	40 e0       	ldi	r20, 0x00	; 0
    568c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    5690:	88 23       	and	r24, r24
    5692:	c1 f0       	breq	.+48     	; 0x56c4 <_Z12get_dr_stateh+0x5c>
    5694:	81 2f       	mov	r24, r17
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	88 0f       	add	r24, r24
    569a:	99 1f       	adc	r25, r25
    569c:	fc 01       	movw	r30, r24
    569e:	23 e0       	ldi	r18, 0x03	; 3
    56a0:	ee 0f       	add	r30, r30
    56a2:	ff 1f       	adc	r31, r31
    56a4:	2a 95       	dec	r18
    56a6:	e1 f7       	brne	.-8      	; 0x56a0 <_Z12get_dr_stateh+0x38>
    56a8:	e8 1b       	sub	r30, r24
    56aa:	f9 0b       	sbc	r31, r25
    56ac:	ef 59       	subi	r30, 0x9F	; 159
    56ae:	fc 4f       	sbci	r31, 0xFC	; 252
    56b0:	80 81       	ld	r24, Z
    56b2:	60 e0       	ldi	r22, 0x00	; 0
    56b4:	40 e0       	ldi	r20, 0x00	; 0
    56b6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    56ba:	88 23       	and	r24, r24
    56bc:	11 f0       	breq	.+4      	; 0x56c2 <_Z12get_dr_stateh+0x5a>
    56be:	82 e0       	ldi	r24, 0x02	; 2
    56c0:	01 c0       	rjmp	.+2      	; 0x56c4 <_Z12get_dr_stateh+0x5c>
    56c2:	81 e0       	ldi	r24, 0x01	; 1
}
    56c4:	1f 91       	pop	r17
    56c6:	08 95       	ret

000056c8 <_Z7moveMixhh>:
        *x++ = *y ;
        *y++ = temp ;
    }
}

void moveMix(uint8_t idx, uint8_t dir) //true=inc=down false=dec=up - Issue 49
    56c8:	0f 93       	push	r16
    56ca:	1f 93       	push	r17
    56cc:	cf 93       	push	r28
    56ce:	df 93       	push	r29
    56d0:	18 2f       	mov	r17, r24
    56d2:	06 2f       	mov	r16, r22
{
    MixData *src= mixaddress( idx ) ; //&g_model.mixData[idx];
    56d4:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z10mixaddressh>
    56d8:	ec 01       	movw	r28, r24
    if(idx==0 && !dir)
    56da:	11 23       	and	r17, r17
    56dc:	39 f4       	brne	.+14     	; 0x56ec <_Z7moveMixhh+0x24>
    56de:	00 23       	and	r16, r16
    56e0:	71 f4       	brne	.+28     	; 0x56fe <_Z7moveMixhh+0x36>
		{
      if (src->destCh>1)
    56e2:	88 81       	ld	r24, Y
    56e4:	82 30       	cpi	r24, 0x02	; 2
    56e6:	98 f1       	brcs	.+102    	; 0x574e <_Z7moveMixhh+0x86>
			{
			  src->destCh--;
    56e8:	81 50       	subi	r24, 0x01	; 1
    56ea:	1f c0       	rjmp	.+62     	; 0x572a <_Z7moveMixhh+0x62>
			}
			STORE_MODELVARS;
			return ;
		}

    if(idx>MAX_MIXERS || (idx==MAX_MIXERS && dir)) return ;
    56ec:	11 32       	cpi	r17, 0x21	; 33
    56ee:	90 f5       	brcc	.+100    	; 0x5754 <_Z7moveMixhh+0x8c>
    56f0:	10 32       	cpi	r17, 0x20	; 32
    56f2:	19 f4       	brne	.+6      	; 0x56fa <_Z7moveMixhh+0x32>
    56f4:	00 23       	and	r16, r16
    56f6:	29 f0       	breq	.+10     	; 0x5702 <_Z7moveMixhh+0x3a>
    56f8:	2d c0       	rjmp	.+90     	; 0x5754 <_Z7moveMixhh+0x8c>
    uint8_t tdx = dir ? idx+1 : idx-1;
    56fa:	00 23       	and	r16, r16
    56fc:	11 f0       	breq	.+4      	; 0x5702 <_Z7moveMixhh+0x3a>
    56fe:	1f 5f       	subi	r17, 0xFF	; 255
    5700:	01 c0       	rjmp	.+2      	; 0x5704 <_Z7moveMixhh+0x3c>
    5702:	11 50       	subi	r17, 0x01	; 1
    MixData *tgt= mixaddress( tdx ) ; //&g_model.mixData[tdx];
    5704:	81 2f       	mov	r24, r17
    5706:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z10mixaddressh>
    570a:	fc 01       	movw	r30, r24

    if((src->destCh==0) || (src->destCh>NUM_CHNOUT) || (tgt->destCh>NUM_CHNOUT)) return ;
    570c:	88 81       	ld	r24, Y
    570e:	28 2f       	mov	r18, r24
    5710:	21 50       	subi	r18, 0x01	; 1
    5712:	20 31       	cpi	r18, 0x10	; 16
    5714:	f8 f4       	brcc	.+62     	; 0x5754 <_Z7moveMixhh+0x8c>
    5716:	90 81       	ld	r25, Z
    5718:	91 31       	cpi	r25, 0x11	; 17
    571a:	e0 f4       	brcc	.+56     	; 0x5754 <_Z7moveMixhh+0x8c>

    if(tgt->destCh!=src->destCh)
    571c:	98 17       	cp	r25, r24
    571e:	59 f0       	breq	.+22     	; 0x5736 <_Z7moveMixhh+0x6e>
		{
      if ((dir)  && (src->destCh<NUM_CHNOUT)) src->destCh++;
    5720:	00 23       	and	r16, r16
    5722:	29 f0       	breq	.+10     	; 0x572e <_Z7moveMixhh+0x66>
    5724:	80 31       	cpi	r24, 0x10	; 16
    5726:	98 f4       	brcc	.+38     	; 0x574e <_Z7moveMixhh+0x86>
    5728:	8f 5f       	subi	r24, 0xFF	; 255
    572a:	88 83       	st	Y, r24
    572c:	10 c0       	rjmp	.+32     	; 0x574e <_Z7moveMixhh+0x86>
      if ((!dir) && (src->destCh>0))          src->destCh--;
    572e:	88 23       	and	r24, r24
    5730:	71 f0       	breq	.+28     	; 0x574e <_Z7moveMixhh+0x86>
    5732:	28 83       	st	Y, r18
    5734:	0c c0       	rjmp	.+24     	; 0x574e <_Z7moveMixhh+0x86>
{
    uint8_t *x ;
    uint8_t *y ;
    uint8_t temp ;

    x = (unsigned char *) a ;
    5736:	df 01       	movw	r26, r30
    y = (unsigned char *) b ;
    5738:	fe 01       	movw	r30, r28
    573a:	2a e0       	ldi	r18, 0x0A	; 10
    573c:	04 c0       	rjmp	.+8      	; 0x5746 <_Z7moveMixhh+0x7e>
    while ( size-- )
    {
        temp = *x ;
    573e:	9c 91       	ld	r25, X
        *x++ = *y ;
    5740:	80 81       	ld	r24, Z
    5742:	8d 93       	st	X+, r24
        *y++ = temp ;
    5744:	91 93       	st	Z+, r25
    uint8_t *y ;
    uint8_t temp ;

    x = (unsigned char *) a ;
    y = (unsigned char *) b ;
    while ( size-- )
    5746:	21 50       	subi	r18, 0x01	; 1
    5748:	d0 f7       	brcc	.-12     	; 0x573e <_Z7moveMixhh+0x76>
			return ;
    }

    //flip between idx and tgt
    memswap( tgt, src, sizeof(MixData) ) ;
		s_moveMixIdx = tdx ;
    574a:	10 93 da 08 	sts	0x08DA, r17
    
		STORE_MODELVARS;
    574e:	82 e0       	ldi	r24, 0x02	; 2
    5750:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
//    eeWaitComplete() ;
}
    5754:	df 91       	pop	r29
    5756:	cf 91       	pop	r28
    5758:	1f 91       	pop	r17
    575a:	0f 91       	pop	r16
    575c:	08 95       	ret

0000575e <_Z8calcExpohi>:
        erg  = (int16_t)crv[a]*((D5-dx)/2) + (int16_t)crv[a+1]*(dx/2);
    }
    return erg / 25; // 100*D5/RESX;
}

int16_t calcExpo( uint8_t channel, int16_t value )
    575e:	df 92       	push	r13
    5760:	ef 92       	push	r14
    5762:	ff 92       	push	r15
    5764:	0f 93       	push	r16
    5766:	1f 93       	push	r17
    5768:	cf 93       	push	r28
    576a:	df 93       	push	r29
    576c:	d8 2e       	mov	r13, r24
    576e:	7b 01       	movw	r14, r22
{
  uint8_t expoDrOn = get_dr_state(channel);
    5770:	0e 94 34 2b 	call	0x5668	; 0x5668 <_Z12get_dr_stateh>
    5774:	18 2f       	mov	r17, r24
  uint8_t stkDir = value > 0 ? DR_RIGHT : DR_LEFT;
  if(IS_EXPO_THROTTLE(channel)) stkDir = DR_RIGHT ;
    5776:	8d 2d       	mov	r24, r13
    5778:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z16IS_EXPO_THROTTLEh>
    577c:	88 23       	and	r24, r24
    577e:	11 f0       	breq	.+4      	; 0x5784 <_Z8calcExpohi+0x26>
    5780:	00 e0       	ldi	r16, 0x00	; 0
    5782:	05 c0       	rjmp	.+10     	; 0x578e <_Z8calcExpohi+0x30>
}

int16_t calcExpo( uint8_t channel, int16_t value )
{
  uint8_t expoDrOn = get_dr_state(channel);
  uint8_t stkDir = value > 0 ? DR_RIGHT : DR_LEFT;
    5784:	00 e0       	ldi	r16, 0x00	; 0
    5786:	1e 14       	cp	r1, r14
    5788:	1f 04       	cpc	r1, r15
    578a:	0c f0       	brlt	.+2      	; 0x578e <_Z8calcExpohi+0x30>
    578c:	01 e0       	ldi	r16, 0x01	; 1
  if(IS_EXPO_THROTTLE(channel)) stkDir = DR_RIGHT ;
  ExpoData *peData = &g_model.expoData[channel] ;

	int8_t expoval = peData->expo[expoDrOn][DR_EXPO][stkDir] ;
    578e:	c1 2f       	mov	r28, r17
    5790:	d0 e0       	ldi	r29, 0x00	; 0
    5792:	8d 2d       	mov	r24, r13
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	88 0f       	add	r24, r24
    5798:	99 1f       	adc	r25, r25
    579a:	fc 01       	movw	r30, r24
    579c:	b3 e0       	ldi	r27, 0x03	; 3
    579e:	ee 0f       	add	r30, r30
    57a0:	ff 1f       	adc	r31, r31
    57a2:	ba 95       	dec	r27
    57a4:	e1 f7       	brne	.-8      	; 0x579e <_Z8calcExpohi+0x40>
    57a6:	e8 1b       	sub	r30, r24
    57a8:	f9 0b       	sbc	r31, r25
    57aa:	ce 01       	movw	r24, r28
    57ac:	88 0f       	add	r24, r24
    57ae:	99 1f       	adc	r25, r25
    57b0:	88 0f       	add	r24, r24
    57b2:	99 1f       	adc	r25, r25
    57b4:	e8 0f       	add	r30, r24
    57b6:	f9 1f       	adc	r31, r25
    57b8:	e6 55       	subi	r30, 0x56	; 86
    57ba:	fe 4f       	sbci	r31, 0xFE	; 254
    57bc:	e0 0f       	add	r30, r16
    57be:	f1 1d       	adc	r31, r1
    57c0:	e6 55       	subi	r30, 0x56	; 86
    57c2:	fe 4f       	sbci	r31, 0xFE	; 254
    57c4:	10 81       	ld	r17, Z

  if(IS_EXPO_THROTTLE(channel)){
    57c6:	8d 2d       	mov	r24, r13
    57c8:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z16IS_EXPO_THROTTLEh>
    57cc:	88 23       	and	r24, r24
    57ce:	b9 f0       	breq	.+46     	; 0x57fe <_Z8calcExpohi+0xa0>
#if GVARS
      value  = 2*expo((value+RESX)/2,REG100_100(expoval));
    57d0:	81 2f       	mov	r24, r17
    57d2:	0e 94 bf 11 	call	0x237e	; 0x237e <_Z10REG100_100a>
    57d6:	28 2f       	mov	r18, r24
    57d8:	c7 01       	movw	r24, r14
    57da:	80 50       	subi	r24, 0x00	; 0
    57dc:	9c 4f       	sbci	r25, 0xFC	; 252
    57de:	62 e0       	ldi	r22, 0x02	; 2
    57e0:	70 e0       	ldi	r23, 0x00	; 0
    57e2:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    57e6:	cb 01       	movw	r24, r22
    57e8:	33 27       	eor	r19, r19
    57ea:	27 fd       	sbrc	r18, 7
    57ec:	30 95       	com	r19
    57ee:	b9 01       	movw	r22, r18
    57f0:	0e 94 1c 21 	call	0x4238	; 0x4238 <_Z4expoii>
    57f4:	7c 01       	movw	r14, r24
    57f6:	ee 0c       	add	r14, r14
    57f8:	ff 1c       	adc	r15, r15
    57fa:	00 e0       	ldi	r16, 0x00	; 0
    57fc:	0b c0       	rjmp	.+22     	; 0x5814 <_Z8calcExpohi+0xb6>
#endif                    
			stkDir = DR_RIGHT;
  }
  else
#if GVARS
      value  = expo(value,REG100_100(expoval));
    57fe:	81 2f       	mov	r24, r17
    5800:	0e 94 bf 11 	call	0x237e	; 0x237e <_Z10REG100_100a>
    5804:	68 2f       	mov	r22, r24
    5806:	77 27       	eor	r23, r23
    5808:	67 fd       	sbrc	r22, 7
    580a:	70 95       	com	r23
    580c:	c7 01       	movw	r24, r14
    580e:	0e 94 1c 21 	call	0x4238	; 0x4238 <_Z4expoii>
    5812:	7c 01       	movw	r14, r24
#else
      value  = expo(value,expoval);
#endif                    

#if GVARS
  int32_t x = (int32_t)value * (REG(peData->expo[expoDrOn][DR_WEIGHT][stkDir]+100, 0, 100))/100;
    5814:	cc 0f       	add	r28, r28
    5816:	dd 1f       	adc	r29, r29
    5818:	cc 0f       	add	r28, r28
    581a:	dd 1f       	adc	r29, r29
    581c:	8d 2d       	mov	r24, r13
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	88 0f       	add	r24, r24
    5822:	99 1f       	adc	r25, r25
    5824:	9c 01       	movw	r18, r24
    5826:	63 e0       	ldi	r22, 0x03	; 3
    5828:	22 0f       	add	r18, r18
    582a:	33 1f       	adc	r19, r19
    582c:	6a 95       	dec	r22
    582e:	e1 f7       	brne	.-8      	; 0x5828 <_Z8calcExpohi+0xca>
    5830:	28 1b       	sub	r18, r24
    5832:	39 0b       	sbc	r19, r25
    5834:	c2 0f       	add	r28, r18
    5836:	d3 1f       	adc	r29, r19
    5838:	c6 55       	subi	r28, 0x56	; 86
    583a:	de 4f       	sbci	r29, 0xFE	; 254
    583c:	c0 0f       	add	r28, r16
    583e:	d1 1d       	adc	r29, r1
    5840:	c4 55       	subi	r28, 0x54	; 84
    5842:	de 4f       	sbci	r29, 0xFE	; 254
    5844:	88 81       	ld	r24, Y
    5846:	8c 59       	subi	r24, 0x9C	; 156
    5848:	60 e0       	ldi	r22, 0x00	; 0
    584a:	44 e6       	ldi	r20, 0x64	; 100
    584c:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z3REGaaa>
    5850:	99 27       	eor	r25, r25
    5852:	87 fd       	sbrc	r24, 7
    5854:	90 95       	com	r25
    5856:	a9 2f       	mov	r26, r25
    5858:	b9 2f       	mov	r27, r25
    585a:	97 01       	movw	r18, r14
    585c:	44 27       	eor	r20, r20
    585e:	37 fd       	sbrc	r19, 7
    5860:	40 95       	com	r20
    5862:	54 2f       	mov	r21, r20
    5864:	bc 01       	movw	r22, r24
    5866:	cd 01       	movw	r24, r26
    5868:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    586c:	24 e6       	ldi	r18, 0x64	; 100
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	40 e0       	ldi	r20, 0x00	; 0
    5872:	50 e0       	ldi	r21, 0x00	; 0
    5874:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
#else
  int32_t x = (int32_t)value * (peData->expo[expoDrOn][DR_WEIGHT][stkDir]+100)/100;
#endif                    
  value = (int16_t)x;
    5878:	e9 01       	movw	r28, r18
  if (IS_EXPO_THROTTLE(channel)) value -= RESX;
    587a:	8d 2d       	mov	r24, r13
    587c:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z16IS_EXPO_THROTTLEh>
    5880:	88 23       	and	r24, r24
    5882:	11 f0       	breq	.+4      	; 0x5888 <_Z8calcExpohi+0x12a>
    5884:	c0 50       	subi	r28, 0x00	; 0
    5886:	d4 40       	sbci	r29, 0x04	; 4
	return value ;
}
    5888:	ce 01       	movw	r24, r28
    588a:	df 91       	pop	r29
    588c:	cf 91       	pop	r28
    588e:	1f 91       	pop	r17
    5890:	0f 91       	pop	r16
    5892:	ff 90       	pop	r15
    5894:	ef 90       	pop	r14
    5896:	df 90       	pop	r13
    5898:	08 95       	ret

0000589a <_Z17menuProcStatistich>:
        jeti_keys = JETI_KEY_NOCHANGE;
    }
}
#endif

void menuProcStatistic(uint8_t event)
    589a:	ef 92       	push	r14
    589c:	ff 92       	push	r15
    589e:	0f 93       	push	r16
    58a0:	cf 93       	push	r28
    58a2:	df 93       	push	r29
    58a4:	08 2f       	mov	r16, r24
{
	static uint8_t statMenuIndex ;
  TITLE(STR_STAT) ;
    58a6:	84 e3       	ldi	r24, 0x34	; 52
    58a8:	9d e0       	ldi	r25, 0x0D	; 13
    58aa:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
  switch(event)
    58ae:	06 36       	cpi	r16, 0x66	; 102
    58b0:	28 f4       	brcc	.+10     	; 0x58bc <_Z17menuProcStatistich+0x22>
    58b2:	04 36       	cpi	r16, 0x64	; 100
    58b4:	30 f4       	brcc	.+12     	; 0x58c2 <_Z17menuProcStatistich+0x28>
    58b6:	01 36       	cpi	r16, 0x61	; 97
    58b8:	81 f4       	brne	.+32     	; 0x58da <_Z17menuProcStatistich+0x40>
    58ba:	0a c0       	rjmp	.+20     	; 0x58d0 <_Z17menuProcStatistich+0x36>
    58bc:	0e 38       	cpi	r16, 0x8E	; 142
    58be:	69 f4       	brne	.+26     	; 0x58da <_Z17menuProcStatistich+0x40>
    58c0:	07 c0       	rjmp	.+14     	; 0x58d0 <_Z17menuProcStatistich+0x36>
  {
    case EVT_KEY_FIRST(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_LEFT) :
			statMenuIndex ^= 1 ;
    58c2:	80 91 d0 08 	lds	r24, 0x08D0
    58c6:	91 e0       	ldi	r25, 0x01	; 1
    58c8:	89 27       	eor	r24, r25
    58ca:	80 93 d0 08 	sts	0x08D0, r24
    58ce:	05 c0       	rjmp	.+10     	; 0x58da <_Z17menuProcStatistich+0x40>
    break ;
		case EVT_KEY_LONG(BTN_RE) :
    case EVT_KEY_FIRST(KEY_EXIT):
			statMenuIndex = 0 ;
    58d0:	10 92 d0 08 	sts	0x08D0, r1
      popMenu(false) ;
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	0e 94 14 1a 	call	0x3428	; 0x3428 <_Z7popMenub>
    break ;
  }

	if ( statMenuIndex )
    58da:	80 91 d0 08 	lds	r24, 0x08D0
    58de:	88 23       	and	r24, r24
    58e0:	09 f4       	brne	.+2      	; 0x58e4 <_Z17menuProcStatistich+0x4a>
    58e2:	42 c0       	rjmp	.+132    	; 0x5968 <_Z17menuProcStatistich+0xce>
	{
		struct t_latency *ptrLat = &g_latency ;
		FORCE_INDIRECT(ptrLat) ;
    58e4:	c6 e0       	ldi	r28, 0x06	; 6
    58e6:	d1 e0       	ldi	r29, 0x01	; 1
    if ( event == EVT_KEY_FIRST(KEY_MENU) )
    58e8:	00 36       	cpi	r16, 0x60	; 96
    58ea:	41 f4       	brne	.+16     	; 0x58fc <_Z17menuProcStatistich+0x62>
		{
      ptrLat->g_tmr1Latency_min = 0xff;
    58ec:	8f ef       	ldi	r24, 0xFF	; 255
    58ee:	88 83       	st	Y, r24
      ptrLat->g_tmr1Latency_max = 0;
    58f0:	19 82       	std	Y+1, r1	; 0x01
      ptrLat->g_timeMain    = 0;
    58f2:	1b 82       	std	Y+3, r1	; 0x03
    58f4:	1a 82       	std	Y+2, r1	; 0x02
      audioDefevent(AU_MENUS);
    58f6:	87 e1       	ldi	r24, 0x17	; 23
    58f8:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    }
		
    lcd_puts_Pleft(  FH, PSTR("tmr1Lat max\022us\037tmr1Lat min\022us\037tmr1 Jitter\022us\037tmain\022ms" ) ) ;
    58fc:	88 e0       	ldi	r24, 0x08	; 8
    58fe:	6e ef       	ldi	r22, 0xFE	; 254
    5900:	7c e0       	ldi	r23, 0x0C	; 12
    5902:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
		
		lcd_outdez( PARAM_OFS, FH, ptrLat->g_tmr1Latency_max/2) ;
    5906:	49 81       	ldd	r20, Y+1	; 0x01
    5908:	46 95       	lsr	r20
    590a:	86 e6       	ldi	r24, 0x66	; 102
    590c:	68 e0       	ldi	r22, 0x08	; 8
    590e:	50 e0       	ldi	r21, 0x00	; 0
    5910:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
		lcd_outdez( PARAM_OFS, 2*FH, ptrLat->g_tmr1Latency_min/2) ;
    5914:	48 81       	ld	r20, Y
    5916:	46 95       	lsr	r20
    5918:	86 e6       	ldi	r24, 0x66	; 102
    591a:	60 e1       	ldi	r22, 0x10	; 16
    591c:	50 e0       	ldi	r21, 0x00	; 0
    591e:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
		lcd_outdez( PARAM_OFS, 3*FH, (uint8_t)(ptrLat->g_tmr1Latency_max - ptrLat->g_tmr1Latency_min) /2) ;
    5922:	49 81       	ldd	r20, Y+1	; 0x01
    5924:	88 81       	ld	r24, Y
    5926:	48 1b       	sub	r20, r24
    5928:	46 95       	lsr	r20
    592a:	86 e6       	ldi	r24, 0x66	; 102
    592c:	68 e1       	ldi	r22, 0x18	; 24
    592e:	50 e0       	ldi	r21, 0x00	; 0
    5930:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
	  lcd_outdezAtt( PARAM_OFS, 4*FH, (ptrLat->g_timeMain*25)/4 ,PREC2 ) ;
    5934:	2a 81       	ldd	r18, Y+2	; 0x02
    5936:	3b 81       	ldd	r19, Y+3	; 0x03
    5938:	89 e1       	ldi	r24, 0x19	; 25
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	28 9f       	mul	r18, r24
    593e:	a0 01       	movw	r20, r0
    5940:	29 9f       	mul	r18, r25
    5942:	50 0d       	add	r21, r0
    5944:	38 9f       	mul	r19, r24
    5946:	50 0d       	add	r21, r0
    5948:	11 24       	eor	r1, r1
    594a:	56 95       	lsr	r21
    594c:	47 95       	ror	r20
    594e:	56 95       	lsr	r21
    5950:	47 95       	ror	r20
    5952:	86 e6       	ldi	r24, 0x66	; 102
    5954:	60 e2       	ldi	r22, 0x20	; 32
    5956:	20 e3       	ldi	r18, 0x30	; 48
    5958:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
#ifdef CPUM2561
extern uint8_t SaveMcusr ;
    lcd_outhex4( 17*FW, 6*FH, SaveMcusr ) ;
#endif
    
		lcd_puts_Pleft( 7*FH, PSTR("\003[MENU] to refresh"));
    595c:	88 e3       	ldi	r24, 0x38	; 56
    595e:	6b ee       	ldi	r22, 0xEB	; 235
    5960:	7c e0       	ldi	r23, 0x0C	; 12
    5962:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    5966:	3b c0       	rjmp	.+118    	; 0x59de <_Z17menuProcStatistich+0x144>

//		tptr = &TimerG ;
//		FORCE_INDIRECT(tptr) ;
//#else
		struct t_timer *tptr = &s_timer[0] ;
		FORCE_INDIRECT(tptr) ;
    5968:	9f e8       	ldi	r25, 0x8F	; 143
    596a:	e9 2e       	mov	r14, r25
    596c:	96 e0       	ldi	r25, 0x06	; 6
    596e:	f9 2e       	mov	r15, r25
    5970:	f7 01       	movw	r30, r14
    5972:	7f 01       	movw	r14, r30

//    lcd_puts_Pleft( FH*0, PSTR("\021TOT"));
//    putsTime(   13*FW, FH*0, tptr->s_timeCumTot, 0, 0);
//#else

    lcd_puts_Pleft( FH*0, PSTR("\021TOT\037\001TME\021TSW\037\001STK\021ST%"));
    5974:	80 e0       	ldi	r24, 0x00	; 0
    5976:	64 ed       	ldi	r22, 0xD4	; 212
    5978:	7c e0       	ldi	r23, 0x0C	; 12
    597a:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>

//    lcd_puts_Pleft(  FH*1, PSTR("\001TME\021TSW"));
    putsTime(    7*FW, FH*1, TimeGlobals.s_timeCumAbs, 0, 0);
    597e:	40 91 15 07 	lds	r20, 0x0715
    5982:	50 91 16 07 	lds	r21, 0x0716
    5986:	8a e2       	ldi	r24, 0x2A	; 42
    5988:	68 e0       	ldi	r22, 0x08	; 8
    598a:	20 e0       	ldi	r18, 0x00	; 0
    598c:	00 e0       	ldi	r16, 0x00	; 0
    598e:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <_Z8putsTimehhihh>
    putsTime(   13*FW, FH*1, tptr->s_timeCumSw,      0, 0);
    5992:	f7 01       	movw	r30, r14
    5994:	44 81       	ldd	r20, Z+4	; 0x04
    5996:	55 81       	ldd	r21, Z+5	; 0x05
    5998:	8e e4       	ldi	r24, 0x4E	; 78
    599a:	68 e0       	ldi	r22, 0x08	; 8
    599c:	20 e0       	ldi	r18, 0x00	; 0
    599e:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <_Z8putsTimehhihh>

//    lcd_puts_Pleft(  FH*2, PSTR("\001STK\021ST%"));
    putsTime(    7*FW, FH*2, tptr->s_timeCumThr, 0, 0);
    59a2:	f7 01       	movw	r30, r14
    59a4:	40 85       	ldd	r20, Z+8	; 0x08
    59a6:	51 85       	ldd	r21, Z+9	; 0x09
    59a8:	8a e2       	ldi	r24, 0x2A	; 42
    59aa:	60 e1       	ldi	r22, 0x10	; 16
    59ac:	20 e0       	ldi	r18, 0x00	; 0
    59ae:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <_Z8putsTimehhihh>
    putsTime(   13*FW, FH*2, tptr->s_timeCum16ThrP/16, 0, 0);
    59b2:	f7 01       	movw	r30, r14
    59b4:	42 85       	ldd	r20, Z+10	; 0x0a
    59b6:	53 85       	ldd	r21, Z+11	; 0x0b
    59b8:	84 e0       	ldi	r24, 0x04	; 4
    59ba:	56 95       	lsr	r21
    59bc:	47 95       	ror	r20
    59be:	8a 95       	dec	r24
    59c0:	e1 f7       	brne	.-8      	; 0x59ba <_Z17menuProcStatistich+0x120>
    59c2:	8e e4       	ldi	r24, 0x4E	; 78
    59c4:	60 e1       	ldi	r22, 0x10	; 16
    59c6:	20 e0       	ldi	r18, 0x00	; 0
    59c8:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <_Z8putsTimehhihh>

//    lcd_puts_Pleft( FH*0, PSTR("\021TOT"));
    putsTime(   13*FW, FH*0, TimeGlobals.s_timeCumTot, 0, 0);
    59cc:	40 91 13 07 	lds	r20, 0x0713
    59d0:	50 91 14 07 	lds	r21, 0x0714
    59d4:	8e e4       	ldi	r24, 0x4E	; 78
    59d6:	60 e0       	ldi	r22, 0x00	; 0
    59d8:	20 e0       	ldi	r18, 0x00	; 0
    59da:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <_Z8putsTimehhihh>
    }
#endif
	}
	asm("") ;

}
    59de:	df 91       	pop	r29
    59e0:	cf 91       	pop	r28
    59e2:	0f 91       	pop	r16
    59e4:	ff 90       	pop	r15
    59e6:	ef 90       	pop	r14
    59e8:	08 95       	ret

000059ea <_Z13menuRangeBindh>:
        break;
    }
}


void menuRangeBind(uint8_t event)
    59ea:	1f 93       	push	r17
    59ec:	18 2f       	mov	r17, r24
{
	static uint8_t timer ;
	uint8_t flag = pxxFlag & PXX_BIND ;
	lcd_puts_Pleft( 3*FH, (flag) ? PSTR("\006BINDING") : PSTR("RANGE CHECK RSSI:") ) ;
    59ee:	80 91 0d 0e 	lds	r24, 0x0E0D
    59f2:	80 fd       	sbrc	r24, 0
    59f4:	03 c0       	rjmp	.+6      	; 0x59fc <_Z13menuRangeBindh+0x12>
    59f6:	65 ea       	ldi	r22, 0xA5	; 165
    59f8:	7d e0       	ldi	r23, 0x0D	; 13
    59fa:	02 c0       	rjmp	.+4      	; 0x5a00 <_Z13menuRangeBindh+0x16>
    59fc:	67 eb       	ldi	r22, 0xB7	; 183
    59fe:	7d e0       	ldi	r23, 0x0D	; 13
    5a00:	88 e1       	ldi	r24, 0x18	; 24
    5a02:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
  if ( event == EVT_KEY_FIRST(KEY_EXIT) )
    5a06:	11 36       	cpi	r17, 0x61	; 97
    5a08:	29 f4       	brne	.+10     	; 0x5a14 <_Z13menuRangeBindh+0x2a>
	{
		pxxFlag = 0 ;
    5a0a:	10 92 0d 0e 	sts	0x0E0D, r1
		popMenu(false) ;
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	0e 94 14 1a 	call	0x3428	; 0x3428 <_Z7popMenub>
	if ( flag == 0 )
	{
		lcd_outdezAtt( 12 * FW, 6*FH, FrskyHubData[FR_RXRSI_COPY], DBLSIZE);
	}
#endif
	if ( --timer == 0 )
    5a14:	80 91 d7 08 	lds	r24, 0x08D7
    5a18:	81 50       	subi	r24, 0x01	; 1
    5a1a:	80 93 d7 08 	sts	0x08D7, r24
    5a1e:	88 23       	and	r24, r24
    5a20:	19 f4       	brne	.+6      	; 0x5a28 <_Z13menuRangeBindh+0x3e>
	{
  	audioDefevent(AU_WARNING2) ;
    5a22:	81 e0       	ldi	r24, 0x01	; 1
    5a24:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
	}
	asm("") ;
}
    5a28:	1f 91       	pop	r17
    5a2a:	08 95       	ret

00005a2c <_Z15menuMixersLimith>:
//    eeWaitComplete() ;
}

void menuMixersLimit(uint8_t event)
{
    switch(event)
    5a2c:	81 36       	cpi	r24, 0x61	; 97
    5a2e:	51 f4       	brne	.+20     	; 0x5a44 <_Z15menuMixersLimith+0x18>
    {
    case  EVT_KEY_FIRST(KEY_EXIT):
        killEvents(event);
    5a30:	81 e6       	ldi	r24, 0x61	; 97
    5a32:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        popMenu(true);
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	0e 94 14 1a 	call	0x3428	; 0x3428 <_Z7popMenub>
        pushMenu(menuProcMix);
    5a3c:	8a ed       	ldi	r24, 0xDA	; 218
    5a3e:	99 e5       	ldi	r25, 0x59	; 89
    5a40:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
        break;
    }
		lcd_puts_Pleft(2*FH, PSTR(STR_MAX_MIXERS_EXAB));
    5a44:	80 e1       	ldi	r24, 0x10	; 16
    5a46:	6c e8       	ldi	r22, 0x8C	; 140
    5a48:	7e e0       	ldi	r23, 0x0E	; 14
    5a4a:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
//		lcd_puts_Pleft(2*FH, PSTR(STR_MAX_MIXERS));
//    lcd_outdez(20*FW, 2*FH, MAX_MIXERS ) ;		//getMixerCount() );

//    lcd_puts_Pleft(4*FH, PSTR(STR_PRESS_EXIT_AB));
}
    5a4e:	08 95       	ret

00005a50 <_Z5timerv>:
    }
  }
}
//#endif	// TWO_TIMERS

void timer()
    5a50:	3f 92       	push	r3
    5a52:	4f 92       	push	r4
    5a54:	5f 92       	push	r5
    5a56:	6f 92       	push	r6
    5a58:	7f 92       	push	r7
    5a5a:	8f 92       	push	r8
    5a5c:	9f 92       	push	r9
    5a5e:	af 92       	push	r10
    5a60:	bf 92       	push	r11
    5a62:	cf 92       	push	r12
    5a64:	df 92       	push	r13
    5a66:	ef 92       	push	r14
    5a68:	ff 92       	push	r15
    5a6a:	0f 93       	push	r16
    5a6c:	1f 93       	push	r17
    5a6e:	cf 93       	push	r28
    5a70:	df 93       	push	r29
//		abstm = -tma ;
//	}
//#endif	// TWO_TIMERS

	struct t_timeGlobals *tgptr = &TimeGlobals ;
	FORCE_INDIRECT(tgptr) ;
    5a72:	03 e1       	ldi	r16, 0x13	; 19
    5a74:	17 e0       	ldi	r17, 0x07	; 7
    5a76:	f8 01       	movw	r30, r16
    5a78:	8f 01       	movw	r16, r30
  tgptr->s_cnt++ ;
    5a7a:	86 81       	ldd	r24, Z+6	; 0x06
    5a7c:	8f 5f       	subi	r24, 0xFF	; 255
    5a7e:	86 83       	std	Z+6, r24	; 0x06
    5a80:	ab ea       	ldi	r26, 0xAB	; 171
    5a82:	8a 2e       	mov	r8, r26
    5a84:	a5 e0       	ldi	r26, 0x05	; 5
    5a86:	9a 2e       	mov	r9, r26
    5a88:	aa 24       	eor	r10, r10
    5a8a:	bb 24       	eor	r11, r11
			{
				resetTimer1() ;
			}
			else
			{
				resetTimer2() ;
    5a8c:	55 24       	eor	r5, r5
    5a8e:	53 94       	inc	r5
    {
    case TMR_OFF:
        if(tma != TMRMODE_NONE) ptimer->s_timerState=TMR_RUNNING;
        break;
    case TMR_RUNNING:
        if(ptimer->s_timerVal<0 && tv) ptimer->s_timerState=TMR_BEEPING;
    5a90:	f2 e0       	ldi	r31, 0x02	; 2
    5a92:	4f 2e       	mov	r4, r31
        break;
    case TMR_BEEPING:
        if(ptimer->s_timerVal <= -MAX_ALERT_TIME)   ptimer->s_timerState=TMR_STOPPED;
    5a94:	e3 e0       	ldi	r30, 0x03	; 3
    5a96:	3e 2e       	mov	r3, r30


//#ifdef TWO_TIMERS
	for( timer = 0 ; timer < 2 ; timer += 1 )
	{
		struct t_timer *ptimer = &s_timer[timer] ;
    5a98:	e5 01       	movw	r28, r10
    5a9a:	74 e0       	ldi	r23, 0x04	; 4
    5a9c:	cc 0f       	add	r28, r28
    5a9e:	dd 1f       	adc	r29, r29
    5aa0:	7a 95       	dec	r23
    5aa2:	e1 f7       	brne	.-8      	; 0x5a9c <_Z5timerv+0x4c>
    5aa4:	c1 57       	subi	r28, 0x71	; 113
    5aa6:	d9 4f       	sbci	r29, 0xF9	; 249
		FORCE_INDIRECT(ptimer) ;
    5aa8:	6a 2c       	mov	r6, r10
		
		uint8_t resetting = 0 ;
		if ( timer == 0 )
    5aaa:	aa 20       	and	r10, r10
    5aac:	19 f4       	brne	.+6      	; 0x5ab4 <_Z5timerv+0x64>
		{
			tmb = g_model.timer1RstSw ;
    5aae:	80 91 19 05 	lds	r24, 0x0519
    5ab2:	02 c0       	rjmp	.+4      	; 0x5ab8 <_Z5timerv+0x68>
		}
		else
		{
			tmb = g_model.timer2RstSw ;
    5ab4:	80 91 1a 05 	lds	r24, 0x051A
		}
		if ( tmb )
    5ab8:	88 23       	and	r24, r24
    5aba:	b9 f0       	breq	.+46     	; 0x5aea <_Z5timerv+0x9a>
		{
    	if(tmb>=(MAX_DRSWITCH-1))	 // toggeled switch
    5abc:	85 31       	cpi	r24, 0x15	; 21
    5abe:	74 f0       	brlt	.+28     	; 0x5adc <_Z5timerv+0x8c>
			{
				uint8_t swPos = getSwitch( tmb-(MAX_DRSWITCH-1), 0, 0) ;
    5ac0:	85 51       	subi	r24, 0x15	; 21
    5ac2:	60 e0       	ldi	r22, 0x00	; 0
    5ac4:	40 e0       	ldi	r20, 0x00	; 0
    5ac6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    5aca:	98 2f       	mov	r25, r24
				if ( swPos != ptimer->lastResetSwPos )
    5acc:	8f 81       	ldd	r24, Y+7	; 0x07
    5ace:	98 17       	cp	r25, r24
    5ad0:	61 f0       	breq	.+24     	; 0x5aea <_Z5timerv+0x9a>
				{
					ptimer->lastResetSwPos = swPos ;
    5ad2:	9f 83       	std	Y+7, r25	; 0x07
					if ( swPos )	// Now on
    5ad4:	99 23       	and	r25, r25
    5ad6:	09 f0       	breq	.+2      	; 0x5ada <_Z5timerv+0x8a>
    5ad8:	9d c1       	rjmp	.+826    	; 0x5e14 <_Z5timerv+0x3c4>
    5ada:	07 c0       	rjmp	.+14     	; 0x5aea <_Z5timerv+0x9a>
					}
				}
			}
			else
			{
				if ( getSwitch( tmb, 0, 0) )
    5adc:	60 e0       	ldi	r22, 0x00	; 0
    5ade:	40 e0       	ldi	r20, 0x00	; 0
    5ae0:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    5ae4:	88 23       	and	r24, r24
    5ae6:	09 f0       	breq	.+2      	; 0x5aea <_Z5timerv+0x9a>
    5ae8:	95 c1       	rjmp	.+810    	; 0x5e14 <_Z5timerv+0x3c4>
    5aea:	77 24       	eor	r7, r7
    5aec:	07 c0       	rjmp	.+14     	; 0x5afc <_Z5timerv+0xac>
		}
		if ( resetting )
		{
			if ( timer == 0 )
			{
				resetTimer1() ;
    5aee:	0e 94 9c 21 	call	0x4338	; 0x4338 <_Z11resetTimer1v>
    5af2:	02 c0       	rjmp	.+4      	; 0x5af8 <_Z5timerv+0xa8>
			}
			else
			{
				resetTimer2() ;
    5af4:	0e 94 a4 21 	call	0x4348	; 0x4348 <_Z11resetTimer2v>
    5af8:	77 24       	eor	r7, r7
    5afa:	73 94       	inc	r7
			}
		}
		TimerMode *ptConfig = &TimerConfig[timer] ;
//		FORCE_INDIRECT(ptConfig) ;
		
		tma = ptConfig->tmrModeA ;
    5afc:	f4 01       	movw	r30, r8
    5afe:	d2 80       	ldd	r13, Z+2	; 0x02
    tmb = ptConfig->tmrModeB ;
    5b00:	c3 80       	ldd	r12, Z+3	; 0x03
//		int8_t tmode = tma ;
//		if ( tmode < 0 )
//		{
//			tmode = -tmode ;			
//		}
    if(( tma > 1 ) && ( tma < TMR_VAROFS ) )
    5b02:	8d 2d       	mov	r24, r13
    5b04:	82 50       	subi	r24, 0x02	; 2
    5b06:	82 30       	cpi	r24, 0x02	; 2
    5b08:	18 f0       	brcs	.+6      	; 0x5b10 <_Z5timerv+0xc0>
    5b0a:	ee 24       	eor	r14, r14
    5b0c:	ff 24       	eor	r15, r15
    5b0e:	04 c0       	rjmp	.+8      	; 0x5b18 <_Z5timerv+0xc8>
		{
#ifdef FIX_MODE
 			v = calibratedStick[3-1] ;
    5b10:	e0 90 ba 06 	lds	r14, 0x06BA
    5b14:	f0 90 bb 06 	lds	r15, 0x06BB
#else
			v = calibratedStick[CONVERT_MODE(3)-1] ;
#endif
    }
		if ( ThrottleStickyOn )
    5b18:	80 91 b1 06 	lds	r24, 0x06B1
    5b1c:	88 23       	and	r24, r24
    5b1e:	19 f0       	breq	.+6      	; 0x5b26 <_Z5timerv+0xd6>
    5b20:	e1 2c       	mov	r14, r1
    5b22:	6c ef       	ldi	r22, 0xFC	; 252
    5b24:	f6 2e       	mov	r15, r22
		{
			v = -RESX ;
		}
   	if(tma>=TMR_VAROFS) // Cxx%
    5b26:	f3 e0       	ldi	r31, 0x03	; 3
    5b28:	fd 15       	cp	r31, r13
    5b2a:	48 f4       	brcc	.+18     	; 0x5b3e <_Z5timerv+0xee>
		{
			v = g_chans512[tma-TMR_VAROFS] ;
    5b2c:	ed 2d       	mov	r30, r13
    5b2e:	f0 e0       	ldi	r31, 0x00	; 0
    5b30:	ee 0f       	add	r30, r30
    5b32:	ff 1f       	adc	r31, r31
    5b34:	ec 51       	subi	r30, 0x1C	; 28
    5b36:	f9 4f       	sbci	r31, 0xF9	; 249
    5b38:	e0 80       	ld	r14, Z
    5b3a:	f1 80       	ldd	r15, Z+1	; 0x01
    5b3c:	02 c0       	rjmp	.+4      	; 0x5b42 <_Z5timerv+0xf2>
		}		
		val = ( v + RESX ) / (RESX/16) ;

		if ( tma != TMRMODE_NONE )		// Timer is not off
    5b3e:	dd 20       	and	r13, r13
    5b40:	b9 f1       	breq	.+110    	; 0x5bb0 <_Z5timerv+0x160>
		{ // We have a triggerA so timer is running 
			if ( tmb >= MAX_DRSWITCH - 1 )
    5b42:	24 e1       	ldi	r18, 0x14	; 20
    5b44:	2c 15       	cp	r18, r12
    5b46:	54 f5       	brge	.+84     	; 0x5b9c <_Z5timerv+0x14c>
			{
	    	if(!( ptimer->sw_toggled | ptimer->s_sum | tgptr->s_cnt | tgptr->s_time | ptimer->lastSwPos)) ptimer->lastSwPos = 0 ;  // if initializing then init the lastSwPos
    5b48:	f8 01       	movw	r30, r16
    5b4a:	24 81       	ldd	r18, Z+4	; 0x04
    5b4c:	35 81       	ldd	r19, Z+5	; 0x05
    5b4e:	88 81       	ld	r24, Y
    5b50:	99 81       	ldd	r25, Y+1	; 0x01
    5b52:	28 2b       	or	r18, r24
    5b54:	39 2b       	or	r19, r25
    5b56:	8b 81       	ldd	r24, Y+3	; 0x03
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	28 2b       	or	r18, r24
    5b5c:	39 2b       	or	r19, r25
    5b5e:	86 81       	ldd	r24, Z+6	; 0x06
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	28 2b       	or	r18, r24
    5b64:	39 2b       	or	r19, r25
    5b66:	8a 81       	ldd	r24, Y+2	; 0x02
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	28 2b       	or	r18, r24
    5b6c:	39 2b       	or	r19, r25
    5b6e:	23 2b       	or	r18, r19
    5b70:	09 f4       	brne	.+2      	; 0x5b74 <_Z5timerv+0x124>
    5b72:	1a 82       	std	Y+2, r1	; 0x02
  	  	uint8_t swPos = getSwitch( tmb-(MAX_DRSWITCH-1), 0 ) ;
    5b74:	8c 2d       	mov	r24, r12
    5b76:	85 51       	subi	r24, 0x15	; 21
    5b78:	60 e0       	ldi	r22, 0x00	; 0
    5b7a:	40 e0       	ldi	r20, 0x00	; 0
    5b7c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    5b80:	28 2f       	mov	r18, r24
	    	if(swPos && !ptimer->lastSwPos)
    5b82:	88 23       	and	r24, r24
    5b84:	49 f0       	breq	.+18     	; 0x5b98 <_Z5timerv+0x148>
    5b86:	8a 81       	ldd	r24, Y+2	; 0x02
    5b88:	88 23       	and	r24, r24
    5b8a:	31 f4       	brne	.+12     	; 0x5b98 <_Z5timerv+0x148>
				{
					ptimer->sw_toggled = !ptimer->sw_toggled ;  //if switch is flipped first time -> change counter state
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b90:	88 23       	and	r24, r24
    5b92:	09 f4       	brne	.+2      	; 0x5b96 <_Z5timerv+0x146>
    5b94:	91 e0       	ldi	r25, 0x01	; 1
    5b96:	9b 83       	std	Y+3, r25	; 0x03
				}
    		ptimer->lastSwPos = swPos;
    5b98:	2a 83       	std	Y+2, r18	; 0x02
    5b9a:	0a c0       	rjmp	.+20     	; 0x5bb0 <_Z5timerv+0x160>
			}
			else
			{
				if ( tmb )
    5b9c:	cc 20       	and	r12, r12
    5b9e:	39 f0       	breq	.+14     	; 0x5bae <_Z5timerv+0x15e>
				{
  	  		ptimer->sw_toggled = getSwitch( tmb, 0 ) ; //normal switch
    5ba0:	8c 2d       	mov	r24, r12
    5ba2:	60 e0       	ldi	r22, 0x00	; 0
    5ba4:	40 e0       	ldi	r20, 0x00	; 0
    5ba6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    5baa:	8b 83       	std	Y+3, r24	; 0x03
    5bac:	01 c0       	rjmp	.+2      	; 0x5bb0 <_Z5timerv+0x160>
				}
				else
				{
					ptimer->sw_toggled = 1 ;	// No trigger B so use as active
    5bae:	5b 82       	std	Y+3, r5	; 0x03
				}
			}
		}
		
		if ( ( ptimer->sw_toggled == 0 ) || resetting )
    5bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    5bb2:	88 23       	and	r24, r24
    5bb4:	51 f0       	breq	.+20     	; 0x5bca <_Z5timerv+0x17a>
    5bb6:	77 20       	and	r7, r7
    5bb8:	41 f4       	brne	.+16     	; 0x5bca <_Z5timerv+0x17a>
		}
   	if(tma>=TMR_VAROFS) // Cxx%
		{
			v = g_chans512[tma-TMR_VAROFS] ;
		}		
		val = ( v + RESX ) / (RESX/16) ;
    5bba:	c7 01       	movw	r24, r14
    5bbc:	80 50       	subi	r24, 0x00	; 0
    5bbe:	9c 4f       	sbci	r25, 0xFC	; 252
    5bc0:	60 e4       	ldi	r22, 0x40	; 64
    5bc2:	70 e0       	ldi	r23, 0x00	; 0
    5bc4:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    5bc8:	01 c0       	rjmp	.+2      	; 0x5bcc <_Z5timerv+0x17c>
    5bca:	60 e0       	ldi	r22, 0x00	; 0
		if ( ( ptimer->sw_toggled == 0 ) || resetting )
		{
			val = 0 ;
		}
    
		ptimer->s_sum += val ;
    5bcc:	88 81       	ld	r24, Y
    5bce:	99 81       	ldd	r25, Y+1	; 0x01
    5bd0:	86 0f       	add	r24, r22
    5bd2:	91 1d       	adc	r25, r1
    5bd4:	99 83       	std	Y+1, r25	; 0x01
    5bd6:	88 83       	st	Y, r24
    if(( get_tmr10ms()-tgptr->s_time)<100) continue ; //1 sec
    5bd8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    5bdc:	f8 01       	movw	r30, r16
    5bde:	24 81       	ldd	r18, Z+4	; 0x04
    5be0:	35 81       	ldd	r19, Z+5	; 0x05
    5be2:	82 1b       	sub	r24, r18
    5be4:	93 0b       	sbc	r25, r19
    5be6:	84 36       	cpi	r24, 0x64	; 100
    5be8:	91 05       	cpc	r25, r1
    5bea:	08 f4       	brcc	.+2      	; 0x5bee <_Z5timerv+0x19e>
    5bec:	88 c0       	rjmp	.+272    	; 0x5cfe <_Z5timerv+0x2ae>
//		uint8_t ls_cnt = tgptr->s_cnt ;
//		val     = ptimer->s_sum/ls_cnt;
//    ptimer->s_sum  -= val*ls_cnt; //rest

		div_t qr ;
		qr = div( ptimer->s_sum, tgptr->s_cnt ) ;
    5bee:	66 81       	ldd	r22, Z+6	; 0x06
    5bf0:	88 81       	ld	r24, Y
    5bf2:	99 81       	ldd	r25, Y+1	; 0x01
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
		val = qr.quot ;
		ptimer->s_sum = qr.rem ;
    5bfa:	9c 01       	movw	r18, r24
    5bfc:	88 83       	st	Y, r24
    5bfe:	39 83       	std	Y+1, r19	; 0x01

		if ( timer == 0 )
    5c00:	66 20       	and	r6, r6
    5c02:	61 f4       	brne	.+24     	; 0x5c1c <_Z5timerv+0x1cc>
		{
    	tgptr->s_timeCumTot += 1;
    5c04:	f8 01       	movw	r30, r16
    5c06:	80 81       	ld	r24, Z
    5c08:	91 81       	ldd	r25, Z+1	; 0x01
    5c0a:	01 96       	adiw	r24, 0x01	; 1
    5c0c:	91 83       	std	Z+1, r25	; 0x01
    5c0e:	80 83       	st	Z, r24
	    tgptr->s_timeCumAbs += 1;
    5c10:	82 81       	ldd	r24, Z+2	; 0x02
    5c12:	93 81       	ldd	r25, Z+3	; 0x03
    5c14:	01 96       	adiw	r24, 0x01	; 1
    5c16:	93 83       	std	Z+3, r25	; 0x03
    5c18:	82 83       	std	Z+2, r24	; 0x02
    5c1a:	08 c0       	rjmp	.+16     	; 0x5c2c <_Z5timerv+0x1dc>
//			g_eeGeneral.totalElapsedTime += 1 ;
		}
		else
		{
	    tgptr->s_cnt   = 0;    // ready for next 100mS
    5c1c:	f8 01       	movw	r30, r16
    5c1e:	16 82       	std	Z+6, r1	; 0x06
			tgptr->s_time += 100;  // 100*10mS passed
    5c20:	84 81       	ldd	r24, Z+4	; 0x04
    5c22:	95 81       	ldd	r25, Z+5	; 0x05
    5c24:	8c 59       	subi	r24, 0x9C	; 156
    5c26:	9f 4f       	sbci	r25, 0xFF	; 255
    5c28:	95 83       	std	Z+5, r25	; 0x05
    5c2a:	84 83       	std	Z+4, r24	; 0x04
		}

    if(val) ptimer->s_timeCumThr += 1 ;
    5c2c:	66 23       	and	r22, r22
    5c2e:	29 f0       	breq	.+10     	; 0x5c3a <_Z5timerv+0x1ea>
    5c30:	88 85       	ldd	r24, Y+8	; 0x08
    5c32:	99 85       	ldd	r25, Y+9	; 0x09
    5c34:	01 96       	adiw	r24, 0x01	; 1
    5c36:	99 87       	std	Y+9, r25	; 0x09
    5c38:	88 87       	std	Y+8, r24	; 0x08
		if ( !resetting )
    5c3a:	77 20       	and	r7, r7
    5c3c:	41 f4       	brne	.+16     	; 0x5c4e <_Z5timerv+0x1fe>
		{
    	if(ptimer->sw_toggled) ptimer->s_timeCumSw += 1;
    5c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5c40:	88 23       	and	r24, r24
    5c42:	29 f0       	breq	.+10     	; 0x5c4e <_Z5timerv+0x1fe>
    5c44:	8c 81       	ldd	r24, Y+4	; 0x04
    5c46:	9d 81       	ldd	r25, Y+5	; 0x05
    5c48:	01 96       	adiw	r24, 0x01	; 1
    5c4a:	9d 83       	std	Y+5, r25	; 0x05
    5c4c:	8c 83       	std	Y+4, r24	; 0x04
		}
    ptimer->s_timeCum16ThrP += val >> 1 ; // val/2 ;
    5c4e:	86 2f       	mov	r24, r22
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	95 95       	asr	r25
    5c54:	87 95       	ror	r24
    5c56:	2a 85       	ldd	r18, Y+10	; 0x0a
    5c58:	3b 85       	ldd	r19, Y+11	; 0x0b
    5c5a:	28 0f       	add	r18, r24
    5c5c:	39 1f       	adc	r19, r25
    5c5e:	3b 87       	std	Y+11, r19	; 0x0b
    5c60:	2a 87       	std	Y+10, r18	; 0x0a

		uint16_t tv ;
    tv = ptimer->s_timerVal = TimerConfig[timer].tmrVal ;
    5c62:	f4 01       	movw	r30, r8
    5c64:	40 81       	ld	r20, Z
    5c66:	51 81       	ldd	r21, Z+1	; 0x01
    5c68:	5d 87       	std	Y+13, r21	; 0x0d
    5c6a:	4c 87       	std	Y+12, r20	; 0x0c
    if(tma == TMRMODE_NONE)
    5c6c:	dd 20       	and	r13, r13
    5c6e:	11 f4       	brne	.+4      	; 0x5c74 <_Z5timerv+0x224>
		{
    	ptimer->s_timerState = TMR_OFF ;
    5c70:	1e 82       	std	Y+6, r1	; 0x06
    5c72:	1d c0       	rjmp	.+58     	; 0x5cae <_Z5timerv+0x25e>
		}
    else
		{
			uint16_t subtrahend ;
			if(tma == TMRMODE_ABS)
    5c74:	f1 e0       	ldi	r31, 0x01	; 1
    5c76:	df 16       	cp	r13, r31
    5c78:	49 f4       	brne	.+18     	; 0x5c8c <_Z5timerv+0x23c>
			{
				if ( tmb == 0 ) subtrahend = tgptr->s_timeCumAbs ;
    5c7a:	cc 20       	and	r12, r12
    5c7c:	21 f4       	brne	.+8      	; 0x5c86 <_Z5timerv+0x236>
    5c7e:	f8 01       	movw	r30, r16
    5c80:	82 81       	ldd	r24, Z+2	; 0x02
    5c82:	93 81       	ldd	r25, Z+3	; 0x03
    5c84:	0f c0       	rjmp	.+30     	; 0x5ca4 <_Z5timerv+0x254>
    		else subtrahend = ptimer->s_timeCumSw ; //switch
    5c86:	8c 81       	ldd	r24, Y+4	; 0x04
    5c88:	9d 81       	ldd	r25, Y+5	; 0x05
    5c8a:	0c c0       	rjmp	.+24     	; 0x5ca4 <_Z5timerv+0x254>
			}
    	else if(tma<TMR_VAROFS-1) subtrahend = ptimer->s_timeCumThr ;// stick
    5c8c:	f2 e0       	ldi	r31, 0x02	; 2
    5c8e:	fd 15       	cp	r31, r13
    5c90:	18 f0       	brcs	.+6      	; 0x5c98 <_Z5timerv+0x248>
    5c92:	88 85       	ldd	r24, Y+8	; 0x08
    5c94:	99 85       	ldd	r25, Y+9	; 0x09
    5c96:	06 c0       	rjmp	.+12     	; 0x5ca4 <_Z5timerv+0x254>
		  else subtrahend = ptimer->s_timeCum16ThrP/16 ; // stick% or Cx%
    5c98:	c9 01       	movw	r24, r18
    5c9a:	34 e0       	ldi	r19, 0x04	; 4
    5c9c:	96 95       	lsr	r25
    5c9e:	87 95       	ror	r24
    5ca0:	3a 95       	dec	r19
    5ca2:	e1 f7       	brne	.-8      	; 0x5c9c <_Z5timerv+0x24c>
			ptimer->s_timerVal -= subtrahend ;
    5ca4:	9a 01       	movw	r18, r20
    5ca6:	28 1b       	sub	r18, r24
    5ca8:	39 0b       	sbc	r19, r25
    5caa:	3d 87       	std	Y+13, r19	; 0x0d
    5cac:	2c 87       	std	Y+12, r18	; 0x0c
		}	

    switch(ptimer->s_timerState)
    5cae:	8e 81       	ldd	r24, Y+6	; 0x06
    5cb0:	81 30       	cpi	r24, 0x01	; 1
    5cb2:	41 f0       	breq	.+16     	; 0x5cc4 <_Z5timerv+0x274>
    5cb4:	81 30       	cpi	r24, 0x01	; 1
    5cb6:	18 f0       	brcs	.+6      	; 0x5cbe <_Z5timerv+0x26e>
    5cb8:	82 30       	cpi	r24, 0x02	; 2
    5cba:	b9 f4       	brne	.+46     	; 0x5cea <_Z5timerv+0x29a>
    5cbc:	0c c0       	rjmp	.+24     	; 0x5cd6 <_Z5timerv+0x286>
    {
    case TMR_OFF:
        if(tma != TMRMODE_NONE) ptimer->s_timerState=TMR_RUNNING;
    5cbe:	dd 20       	and	r13, r13
    5cc0:	a1 f0       	breq	.+40     	; 0x5cea <_Z5timerv+0x29a>
    5cc2:	12 c0       	rjmp	.+36     	; 0x5ce8 <_Z5timerv+0x298>
        break;
    case TMR_RUNNING:
        if(ptimer->s_timerVal<0 && tv) ptimer->s_timerState=TMR_BEEPING;
    5cc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    5cc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    5cc8:	97 ff       	sbrs	r25, 7
    5cca:	0f c0       	rjmp	.+30     	; 0x5cea <_Z5timerv+0x29a>
    5ccc:	41 15       	cp	r20, r1
    5cce:	51 05       	cpc	r21, r1
    5cd0:	61 f0       	breq	.+24     	; 0x5cea <_Z5timerv+0x29a>
    5cd2:	4e 82       	std	Y+6, r4	; 0x06
    5cd4:	0a c0       	rjmp	.+20     	; 0x5cea <_Z5timerv+0x29a>
        break;
    case TMR_BEEPING:
        if(ptimer->s_timerVal <= -MAX_ALERT_TIME)   ptimer->s_timerState=TMR_STOPPED;
    5cd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    5cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    5cda:	85 5c       	subi	r24, 0xC5	; 197
    5cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cde:	0c f4       	brge	.+2      	; 0x5ce2 <_Z5timerv+0x292>
    5ce0:	3e 82       	std	Y+6, r3	; 0x06
        if(tv == 0)             ptimer->s_timerState=TMR_RUNNING;
    5ce2:	41 15       	cp	r20, r1
    5ce4:	51 05       	cpc	r21, r1
    5ce6:	09 f4       	brne	.+2      	; 0x5cea <_Z5timerv+0x29a>
    5ce8:	5e 82       	std	Y+6, r5	; 0x06
        break;
    case TMR_STOPPED:
        break;
    }

    if(TimerConfig[timer].tmrDir) ptimer->s_timerVal = tv-ptimer->s_timerVal ; //if counting backwards - display backwards
    5cea:	f4 01       	movw	r30, r8
    5cec:	84 81       	ldd	r24, Z+4	; 0x04
    5cee:	88 23       	and	r24, r24
    5cf0:	31 f0       	breq	.+12     	; 0x5cfe <_Z5timerv+0x2ae>
    5cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    5cf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    5cf6:	48 1b       	sub	r20, r24
    5cf8:	59 0b       	sbc	r21, r25
    5cfa:	5d 87       	std	Y+13, r21	; 0x0d
    5cfc:	4c 87       	std	Y+12, r20	; 0x0c
    5cfe:	08 94       	sec
    5d00:	a1 1c       	adc	r10, r1
    5d02:	b1 1c       	adc	r11, r1
    5d04:	25 e0       	ldi	r18, 0x05	; 5
    5d06:	30 e0       	ldi	r19, 0x00	; 0
    5d08:	82 0e       	add	r8, r18
    5d0a:	93 1e       	adc	r9, r19
//#endif	// nTWO_TIMERS
//#endif	// 128/2561


//#ifdef TWO_TIMERS
	for( timer = 0 ; timer < 2 ; timer += 1 )
    5d0c:	32 e0       	ldi	r19, 0x02	; 2
    5d0e:	a3 16       	cp	r10, r19
    5d10:	b1 04       	cpc	r11, r1
    5d12:	09 f0       	breq	.+2      	; 0x5d16 <_Z5timerv+0x2c6>
    5d14:	c1 ce       	rjmp	.-638    	; 0x5a98 <_Z5timerv+0x48>
//#ifdef TWO_TIMERS

static void timerBeeps()
{
	struct t_timer *tptr = &s_timer[0] ;
	FORCE_INDIRECT(tptr) ;
    5d16:	ef e8       	ldi	r30, 0x8F	; 143
    5d18:	f6 e0       	ldi	r31, 0x06	; 6
  if(tptr->last_tmr != tptr->s_timerVal)  //beep only if seconds advance
    5d1a:	c4 85       	ldd	r28, Z+12	; 0x0c
    5d1c:	d5 85       	ldd	r29, Z+13	; 0x0d
    5d1e:	86 85       	ldd	r24, Z+14	; 0x0e
    5d20:	97 85       	ldd	r25, Z+15	; 0x0f
    5d22:	8c 17       	cp	r24, r28
    5d24:	9d 07       	cpc	r25, r29
    5d26:	09 f4       	brne	.+2      	; 0x5d2a <_Z5timerv+0x2da>
    5d28:	79 c0       	rjmp	.+242    	; 0x5e1c <_Z5timerv+0x3cc>
	{
	  tptr->last_tmr = tptr->s_timerVal;
    5d2a:	d7 87       	std	Z+15, r29	; 0x0f
    5d2c:	c6 87       	std	Z+14, r28	; 0x0e
    if(tptr->s_timerState==TMR_RUNNING)
    5d2e:	86 81       	ldd	r24, Z+6	; 0x06
    5d30:	81 30       	cpi	r24, 0x01	; 1
    5d32:	09 f0       	breq	.+2      	; 0x5d36 <_Z5timerv+0x2e6>
    5d34:	5f c0       	rjmp	.+190    	; 0x5df4 <_Z5timerv+0x3a4>
    {
			int16_t tval = tptr->s_timerVal ;
    5d36:	8e 01       	movw	r16, r28
#ifdef GLOBAL_COUNTDOWN
      if(g_eeGeneral.preBeep && TimerConfig[0].tmrVal) // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
    5d38:	80 91 7e 01 	lds	r24, 0x017E
    5d3c:	82 ff       	sbrs	r24, 2
    5d3e:	34 c0       	rjmp	.+104    	; 0x5da8 <_Z5timerv+0x358>
    5d40:	80 91 ab 05 	lds	r24, 0x05AB
    5d44:	90 91 ac 05 	lds	r25, 0x05AC
    5d48:	89 2b       	or	r24, r25
    5d4a:	71 f1       	breq	.+92     	; 0x5da8 <_Z5timerv+0x358>
#else
      if(g_model.timer1Cdown && TimerConfig[0].tmrVal) // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
#endif
      {
				uint8_t flasht = 0 ;
        if(tval==30) {audioVoiceDefevent(AU_TIMER_30, V_30SECS);flasht = 1;}	
    5d4c:	ce 31       	cpi	r28, 0x1E	; 30
    5d4e:	d1 05       	cpc	r29, r1
    5d50:	19 f4       	brne	.+6      	; 0x5d58 <_Z5timerv+0x308>
    5d52:	89 e1       	ldi	r24, 0x19	; 25
    5d54:	69 e2       	ldi	r22, 0x29	; 41
    5d56:	15 c0       	rjmp	.+42     	; 0x5d82 <_Z5timerv+0x332>
        if(tval==20) {audioVoiceDefevent(AU_TIMER_20, V_20SECS);flasht = 1;}		
    5d58:	c4 31       	cpi	r28, 0x14	; 20
    5d5a:	d1 05       	cpc	r29, r1
    5d5c:	19 f4       	brne	.+6      	; 0x5d64 <_Z5timerv+0x314>
    5d5e:	8a e1       	ldi	r24, 0x1A	; 26
    5d60:	6a e2       	ldi	r22, 0x2A	; 42
    5d62:	0f c0       	rjmp	.+30     	; 0x5d82 <_Z5timerv+0x332>
        if(tval==10) {audioVoiceDefevent(AU_TIMER_10, V_10SECS);flasht = 1;}	
    5d64:	ca 30       	cpi	r28, 0x0A	; 10
    5d66:	d1 05       	cpc	r29, r1
    5d68:	19 f4       	brne	.+6      	; 0x5d70 <_Z5timerv+0x320>
    5d6a:	8b e1       	ldi	r24, 0x1B	; 27
    5d6c:	6b e2       	ldi	r22, 0x2B	; 43
    5d6e:	09 c0       	rjmp	.+18     	; 0x5d82 <_Z5timerv+0x332>
        if(tval<= 5) { flasht = 1;	if(tval >= 0) {audioVoiceDefevent(AU_TIMER_LT3, tval) ;} else audioDefevent(AU_TIMER_LT3);}
    5d70:	c6 30       	cpi	r28, 0x06	; 6
    5d72:	d1 05       	cpc	r29, r1
    5d74:	14 f0       	brlt	.+4      	; 0x5d7a <_Z5timerv+0x32a>
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	0b c0       	rjmp	.+22     	; 0x5d90 <_Z5timerv+0x340>
    5d7a:	d7 fd       	sbrc	r29, 7
    5d7c:	05 c0       	rjmp	.+10     	; 0x5d88 <_Z5timerv+0x338>
    5d7e:	8c e1       	ldi	r24, 0x1C	; 28
    5d80:	6c 2f       	mov	r22, r28
    5d82:	0e 94 e4 79 	call	0xf3c8	; 0xf3c8 <_Z18audioVoiceDefeventhh>
    5d86:	03 c0       	rjmp	.+6      	; 0x5d8e <_Z5timerv+0x33e>
    5d88:	8c e1       	ldi	r24, 0x1C	; 28
    5d8a:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    5d8e:	91 e0       	ldi	r25, 0x01	; 1

        if(g_eeGeneral.flashBeep && flasht )
    5d90:	80 91 7e 01 	lds	r24, 0x017E
    5d94:	83 ff       	sbrs	r24, 3
    5d96:	08 c0       	rjmp	.+16     	; 0x5da8 <_Z5timerv+0x358>
    5d98:	99 23       	and	r25, r25
    5d9a:	31 f0       	breq	.+12     	; 0x5da8 <_Z5timerv+0x358>
            g_LightOffCounter = FLASH_DURATION;
    5d9c:	82 e3       	ldi	r24, 0x32	; 50
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	90 93 22 06 	sts	0x0622, r25
    5da4:	80 93 21 06 	sts	0x0621, r24
      }

			div_t mins ;
			mins = div( TimerConfig[0].tmrDir ? TimerConfig[0].tmrVal-tval : tval, 60 ) ;
    5da8:	80 91 af 05 	lds	r24, 0x05AF
    5dac:	88 23       	and	r24, r24
    5dae:	31 f0       	breq	.+12     	; 0x5dbc <_Z5timerv+0x36c>
    5db0:	00 91 ab 05 	lds	r16, 0x05AB
    5db4:	10 91 ac 05 	lds	r17, 0x05AC
    5db8:	0c 1b       	sub	r16, r28
    5dba:	1d 0b       	sbc	r17, r29
    5dbc:	c8 01       	movw	r24, r16
    5dbe:	6c e3       	ldi	r22, 0x3C	; 60
    5dc0:	70 e0       	ldi	r23, 0x00	; 0
    5dc2:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    5dc6:	9b 01       	movw	r18, r22
    5dc8:	ac 01       	movw	r20, r24

#ifdef GLOBAL_COUNTDOWN
      if(g_eeGeneral.minuteBeep && ((mins.rem)==0)) //short beep every minute
    5dca:	80 91 7e 01 	lds	r24, 0x017E
    5dce:	81 ff       	sbrs	r24, 1
    5dd0:	25 c0       	rjmp	.+74     	; 0x5e1c <_Z5timerv+0x3cc>
    5dd2:	45 2b       	or	r20, r21
    5dd4:	19 f5       	brne	.+70     	; 0x5e1c <_Z5timerv+0x3cc>
#else
      if(g_model.timer1Mbeep && ((mins.rem)==0)) //short beep every minute
#endif
      {
				if ( g_eeGeneral.speakerMode & 2 )
    5dd6:	80 91 87 01 	lds	r24, 0x0187
    5dda:	81 ff       	sbrs	r24, 1
    5ddc:	09 c0       	rjmp	.+18     	; 0x5df0 <_Z5timerv+0x3a0>
				{
					if ( mins.quot ) {voice_numeric( mins.quot, 0, V_MINUTES ) ;}
    5dde:	21 15       	cp	r18, r1
    5de0:	31 05       	cpc	r19, r1
    5de2:	69 f0       	breq	.+26     	; 0x5dfe <_Z5timerv+0x3ae>
    5de4:	c9 01       	movw	r24, r18
    5de6:	60 e0       	ldi	r22, 0x00	; 0
    5de8:	46 e2       	ldi	r20, 0x26	; 38
    5dea:	0e 94 f1 79 	call	0xf3e2	; 0xf3e2 <_Z13voice_numericihh>
    5dee:	07 c0       	rjmp	.+14     	; 0x5dfe <_Z5timerv+0x3ae>
				}
				else
				{
          audioDefevent(AU_WARNING1);
    5df0:	80 e0       	ldi	r24, 0x00	; 0
    5df2:	03 c0       	rjmp	.+6      	; 0x5dfa <_Z5timerv+0x3aa>
				}
        if(g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
      }
    }
    else if(tptr->s_timerState==TMR_BEEPING)
    5df4:	82 30       	cpi	r24, 0x02	; 2
    5df6:	91 f4       	brne	.+36     	; 0x5e1c <_Z5timerv+0x3cc>
    {
      audioDefevent(AU_TIMER_LT3);
    5df8:	8c e1       	ldi	r24, 0x1C	; 28
    5dfa:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
      if(g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
    5dfe:	80 91 7e 01 	lds	r24, 0x017E
    5e02:	83 ff       	sbrs	r24, 3
    5e04:	0b c0       	rjmp	.+22     	; 0x5e1c <_Z5timerv+0x3cc>
    5e06:	82 e3       	ldi	r24, 0x32	; 50
    5e08:	90 e0       	ldi	r25, 0x00	; 0
    5e0a:	90 93 22 06 	sts	0x0622, r25
    5e0e:	80 93 21 06 	sts	0x0621, r24
    5e12:	04 c0       	rjmp	.+8      	; 0x5e1c <_Z5timerv+0x3cc>
				}
			}
		}
		if ( resetting )
		{
			if ( timer == 0 )
    5e14:	66 20       	and	r6, r6
    5e16:	09 f4       	brne	.+2      	; 0x5e1a <_Z5timerv+0x3ca>
    5e18:	6a ce       	rjmp	.-812    	; 0x5aee <_Z5timerv+0x9e>
    5e1a:	6c ce       	rjmp	.-808    	; 0x5af4 <_Z5timerv+0xa4>
//        }
//    }
//    tptr->last_tmr = tptr->s_timerVal;
//    if(g_model.tmrDir) tptr->s_timerVal = gtval-tptr->s_timerVal; //if counting backwards - display backwards
//#endif	// TWO_TIMERS
}
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	1f 91       	pop	r17
    5e22:	0f 91       	pop	r16
    5e24:	ff 90       	pop	r15
    5e26:	ef 90       	pop	r14
    5e28:	df 90       	pop	r13
    5e2a:	cf 90       	pop	r12
    5e2c:	bf 90       	pop	r11
    5e2e:	af 90       	pop	r10
    5e30:	9f 90       	pop	r9
    5e32:	8f 90       	pop	r8
    5e34:	7f 90       	pop	r7
    5e36:	6f 90       	pop	r6
    5e38:	5f 90       	pop	r5
    5e3a:	4f 90       	pop	r4
    5e3c:	3f 90       	pop	r3
    5e3e:	08 95       	ret

00005e40 <_Z5tracev>:
uint8_t s_traceWr;
uint8_t s_traceCnt;
#endif // THROTTLE_TRACE
void trace()   // called in perOut - once envery 0.01sec
{
    timer() ;
    5e40:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <_Z5timerv>
#else
    static uint16_t s_time;
#endif // THROTTLE_TRACE

		uint16_t t10ms ;
		t10ms = get_tmr10ms() ;
    5e44:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    5e48:	9c 01       	movw	r18, r24

#if THROTTLE_TRACE
    if(( t10ms-tracePtr->s_time)<1000) //10 sec
#else
    if(( t10ms-s_time)<1000) //10 sec
    5e4a:	80 91 d1 08 	lds	r24, 0x08D1
    5e4e:	90 91 d2 08 	lds	r25, 0x08D2
    5e52:	a9 01       	movw	r20, r18
    5e54:	48 1b       	sub	r20, r24
    5e56:	59 0b       	sbc	r21, r25
    5e58:	ca 01       	movw	r24, r20
    5e5a:	88 5e       	subi	r24, 0xE8	; 232
    5e5c:	93 40       	sbci	r25, 0x03	; 3
    5e5e:	98 f0       	brcs	.+38     	; 0x5e86 <_Z5tracev+0x46>
				return;

#if THROTTLE_TRACE
    tracePtr->s_time= t10ms ;
#else
    s_time= t10ms ;
    5e60:	30 93 d2 08 	sts	0x08D2, r19
    5e64:	20 93 d1 08 	sts	0x08D1, r18
#endif // THROTTLE_TRACE
 
    if ((g_model.protocol==PROTO_DSM2)&&getSwitch(MAX_DRSWITCH-1,0,0) ) audioDefevent(AU_TADA);   //DSM2 bind mode warning
    5e68:	80 91 b9 01 	lds	r24, 0x01B9
    5e6c:	8f 70       	andi	r24, 0x0F	; 15
    5e6e:	82 30       	cpi	r24, 0x02	; 2
    5e70:	51 f4       	brne	.+20     	; 0x5e86 <_Z5tracev+0x46>
    5e72:	85 e1       	ldi	r24, 0x15	; 21
    5e74:	60 e0       	ldi	r22, 0x00	; 0
    5e76:	40 e0       	ldi	r20, 0x00	; 0
    5e78:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    5e7c:	88 23       	and	r24, r24
    5e7e:	19 f0       	breq	.+6      	; 0x5e86 <_Z5tracev+0x46>
    5e80:	87 e0       	ldi	r24, 0x07	; 7
    5e82:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    5e86:	08 95       	ret

00005e88 <_Z6perOutPih>:
	}


}

void perOut(int16_t *chanOut, uint8_t att)
    5e88:	2f 92       	push	r2
    5e8a:	3f 92       	push	r3
    5e8c:	4f 92       	push	r4
    5e8e:	5f 92       	push	r5
    5e90:	6f 92       	push	r6
    5e92:	7f 92       	push	r7
    5e94:	8f 92       	push	r8
    5e96:	9f 92       	push	r9
    5e98:	af 92       	push	r10
    5e9a:	bf 92       	push	r11
    5e9c:	cf 92       	push	r12
    5e9e:	df 92       	push	r13
    5ea0:	ef 92       	push	r14
    5ea2:	ff 92       	push	r15
    5ea4:	0f 93       	push	r16
    5ea6:	1f 93       	push	r17
    5ea8:	df 93       	push	r29
    5eaa:	cf 93       	push	r28
    5eac:	cd b7       	in	r28, 0x3d	; 61
    5eae:	de b7       	in	r29, 0x3e	; 62
    5eb0:	af 97       	sbiw	r28, 0x2f	; 47
    5eb2:	0f b6       	in	r0, 0x3f	; 63
    5eb4:	f8 94       	cli
    5eb6:	de bf       	out	0x3e, r29	; 62
    5eb8:	0f be       	out	0x3f, r0	; 63
    5eba:	cd bf       	out	0x3d, r28	; 61
    5ebc:	99 a3       	std	Y+33, r25	; 0x21
    5ebe:	88 a3       	std	Y+32, r24	; 0x20
    5ec0:	86 2e       	mov	r8, r22
    
        uint8_t ele_stick, ail_stick ;
        ele_stick = 1 ; //ELE_STICK ;
        ail_stick = 3 ; //AIL_STICK ;
        //===========Swash Ring================
        if(g_model.swashRingValue)
    5ec2:	90 90 c2 01 	lds	r9, 0x01C2
    5ec6:	99 20       	and	r9, r9
    5ec8:	c1 f1       	breq	.+112    	; 0x5f3a <_Z6perOutPih+0xb2>
        {
            uint32_t v = (int32_t(calibratedStick[ele_stick])*calibratedStick[ele_stick] +
                          int32_t(calibratedStick[ail_stick])*calibratedStick[ail_stick]);
    5eca:	e0 90 b8 06 	lds	r14, 0x06B8
    5ece:	f0 90 b9 06 	lds	r15, 0x06B9
    5ed2:	00 27       	eor	r16, r16
    5ed4:	f7 fc       	sbrc	r15, 7
    5ed6:	00 95       	com	r16
    5ed8:	10 2f       	mov	r17, r16
    5eda:	20 91 bc 06 	lds	r18, 0x06BC
    5ede:	30 91 bd 06 	lds	r19, 0x06BD
    5ee2:	44 27       	eor	r20, r20
    5ee4:	37 fd       	sbrc	r19, 7
    5ee6:	40 95       	com	r20
    5ee8:	54 2f       	mov	r21, r20
    5eea:	ca 01       	movw	r24, r20
    5eec:	b9 01       	movw	r22, r18
    5eee:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    5ef2:	5b 01       	movw	r10, r22
    5ef4:	6c 01       	movw	r12, r24
    5ef6:	c8 01       	movw	r24, r16
    5ef8:	b7 01       	movw	r22, r14
    5efa:	a8 01       	movw	r20, r16
    5efc:	97 01       	movw	r18, r14
    5efe:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    5f02:	a6 0e       	add	r10, r22
    5f04:	b7 1e       	adc	r11, r23
    5f06:	c8 1e       	adc	r12, r24
    5f08:	d9 1e       	adc	r13, r25
						uint32_t q = calc100toRESX(g_model.swashRingValue) ;
    5f0a:	89 2d       	mov	r24, r9
    5f0c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_Z13calc100toRESXa>
    5f10:	9c 01       	movw	r18, r24
    5f12:	44 27       	eor	r20, r20
    5f14:	37 fd       	sbrc	r19, 7
    5f16:	40 95       	com	r20
    5f18:	54 2f       	mov	r21, r20
            q *= q;
            if(v>q)
    5f1a:	ca 01       	movw	r24, r20
    5f1c:	b9 01       	movw	r22, r18
    5f1e:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    5f22:	6a 15       	cp	r22, r10
    5f24:	7b 05       	cpc	r23, r11
    5f26:	8c 05       	cpc	r24, r12
    5f28:	9d 05       	cpc	r25, r13
    5f2a:	38 f4       	brcc	.+14     	; 0x5f3a <_Z6perOutPih+0xb2>
                d = isqrt32(v);
    5f2c:	c6 01       	movw	r24, r12
    5f2e:	b5 01       	movw	r22, r10
    5f30:	0e 94 a8 21 	call	0x4350	; 0x4350 <_Z7isqrt32m>
    5f34:	9e 8f       	std	Y+30, r25	; 0x1e
    5f36:	8d 8f       	std	Y+29, r24	; 0x1d
    5f38:	02 c0       	rjmp	.+4      	; 0x5f3e <_Z6perOutPih+0xb6>
    5f3a:	1e 8e       	std	Y+30, r1	; 0x1e
    5f3c:	1d 8e       	std	Y+29, r1	; 0x1d
    5f3e:	39 e3       	ldi	r19, 0x39	; 57
    5f40:	43 2e       	mov	r4, r19
    5f42:	31 e0       	ldi	r19, 0x01	; 1
    5f44:	53 2e       	mov	r5, r19
    5f46:	28 e5       	ldi	r18, 0x58	; 88
    5f48:	38 e0       	ldi	r19, 0x08	; 8
    5f4a:	3c 87       	std	Y+12, r19	; 0x0c
    5f4c:	2b 87       	std	Y+11, r18	; 0x0b
    5f4e:	1e 01       	movw	r2, r28
    5f50:	08 94       	sec
    5f52:	21 1c       	adc	r2, r1
    5f54:	31 1c       	adc	r3, r1
    5f56:	80 91 7c 01 	lds	r24, 0x017C
    5f5a:	88 0f       	add	r24, r24
    5f5c:	88 0f       	add	r24, r24
    5f5e:	68 2e       	mov	r6, r24
    5f60:	77 24       	eor	r7, r7
    5f62:	65 e4       	ldi	r22, 0x45	; 69
    5f64:	71 e0       	ldi	r23, 0x01	; 1
    5f66:	66 0e       	add	r6, r22
    5f68:	77 1e       	adc	r7, r23
    5f6a:	1f 8e       	std	Y+31, r1	; 0x1f
    5f6c:	1c 8e       	std	Y+28, r1	; 0x1c
    5f6e:	1b 8e       	std	Y+27, r1	; 0x1b
    5f70:	1a 8e       	std	Y+26, r1	; 0x1a
    5f72:	aa 24       	eor	r10, r10
    5f74:	bb 24       	eor	r11, r11
							}
						}

            if(i<4) { //only do this for sticks
                //===========Trainer mode================
                if (!(att&NO_TRAINER) && g_model.traineron) {
    5f76:	88 2d       	mov	r24, r8
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	9d a3       	std	Y+37, r25	; 0x25
    5f7c:	8c a3       	std	Y+36, r24	; 0x24
    5f7e:	81 70       	andi	r24, 0x01	; 1
    5f80:	90 70       	andi	r25, 0x00	; 0
    5f82:	9f a3       	std	Y+39, r25	; 0x27
    5f84:	8e a3       	std	Y+38, r24	; 0x26
                //===========Swash Ring================
                if(d && (index==ele_stick || index==ail_stick))
                    v = int32_t(v)*calc100toRESX(g_model.swashRingValue)/int32_t(d) ;
                //===========Swash Ring================

								if ( att & FADE_FIRST )
    5f86:	ac a1       	ldd	r26, Y+36	; 0x24
    5f88:	bd a1       	ldd	r27, Y+37	; 0x25
    5f8a:	a0 72       	andi	r26, 0x20	; 32
    5f8c:	b0 70       	andi	r27, 0x00	; 0
    5f8e:	b9 a7       	std	Y+41, r27	; 0x29
    5f90:	a8 a7       	std	Y+40, r26	; 0x28
                    }
                }

                //===========Swash Ring================
                if(d && (index==ele_stick || index==ail_stick))
                    v = int32_t(v)*calc100toRESX(g_model.swashRingValue)/int32_t(d) ;
    5f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5f96:	bc 01       	movw	r22, r24
    5f98:	80 e0       	ldi	r24, 0x00	; 0
    5f9a:	90 e0       	ldi	r25, 0x00	; 0
    5f9c:	6a a7       	std	Y+42, r22	; 0x2a
    5f9e:	7b a7       	std	Y+43, r23	; 0x2b
    5fa0:	8c a7       	std	Y+44, r24	; 0x2c
    5fa2:	9d a7       	std	Y+45, r25	; 0x2d
            	Output.anas[index] = v; //set values for mixer
#else
            	Output.anas[i] = v; //set values for mixer
#endif
						}
    				if(att&NO_INPUT)
    5fa4:	ac a1       	ldd	r26, Y+36	; 0x24
    5fa6:	bd a1       	ldd	r27, Y+37	; 0x25
    5fa8:	a2 70       	andi	r26, 0x02	; 2
    5faa:	b0 70       	andi	r27, 0x00	; 0
    5fac:	bf a7       	std	Y+47, r27	; 0x2f
    5fae:	ae a7       	std	Y+46, r26	; 0x2e
            uint32_t v = (int32_t(calibratedStick[ele_stick])*calibratedStick[ele_stick] +
                          int32_t(calibratedStick[ail_stick])*calibratedStick[ail_stick]);
						uint32_t q = calc100toRESX(g_model.swashRingValue) ;
            q *= q;
            if(v>q)
                d = isqrt32(v);
    5fb0:	8a 2c       	mov	r8, r10
#endif        
				for(uint8_t i=0;i<7;i++){        // calc Sticks

            //Normalization  [0..2048] ->   [-1024..1024]

            int16_t v = anaIn(i);
    5fb2:	8a 2d       	mov	r24, r10
    5fb4:	0e 94 33 10 	call	0x2066	; 0x2066 <_Z5anaInh>
    5fb8:	9c 01       	movw	r18, r24
#ifndef SIMU
            v -= g_eeGeneral.calibMid[i];
    5fba:	f2 01       	movw	r30, r4
    5fbc:	80 81       	ld	r24, Z
    5fbe:	91 81       	ldd	r25, Z+1	; 0x01
    5fc0:	28 1b       	sub	r18, r24
    5fc2:	39 0b       	sbc	r19, r25
            v  =  v * (int32_t)RESX /  (max((int16_t)100,(v>0 ?
                                                              g_eeGeneral.calibSpanPos[i] :
                                                              g_eeGeneral.calibSpanNeg[i])));
    5fc4:	12 16       	cp	r1, r18
    5fc6:	13 06       	cpc	r1, r19
    5fc8:	24 f4       	brge	.+8      	; 0x5fd2 <_Z6perOutPih+0x14a>
    5fca:	04 8c       	ldd	r0, Z+28	; 0x1c
    5fcc:	f5 8d       	ldd	r31, Z+29	; 0x1d
    5fce:	e0 2d       	mov	r30, r0
    5fd0:	05 c0       	rjmp	.+10     	; 0x5fdc <_Z6perOutPih+0x154>
    5fd2:	d2 01       	movw	r26, r4
    5fd4:	1e 96       	adiw	r26, 0x0e	; 14
    5fd6:	ed 91       	ld	r30, X+
    5fd8:	fc 91       	ld	r31, X
    5fda:	1f 97       	sbiw	r26, 0x0f	; 15
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    5fdc:	e4 36       	cpi	r30, 0x64	; 100
    5fde:	f1 05       	cpc	r31, r1
    5fe0:	14 f4       	brge	.+4      	; 0x5fe6 <_Z6perOutPih+0x15e>
    5fe2:	e4 e6       	ldi	r30, 0x64	; 100
    5fe4:	f0 e0       	ldi	r31, 0x00	; 0
    5fe6:	b9 01       	movw	r22, r18
    5fe8:	88 27       	eor	r24, r24
    5fea:	77 fd       	sbrc	r23, 7
    5fec:	80 95       	com	r24
    5fee:	98 2f       	mov	r25, r24
    5ff0:	2a e0       	ldi	r18, 0x0A	; 10
    5ff2:	66 0f       	add	r22, r22
    5ff4:	77 1f       	adc	r23, r23
    5ff6:	88 1f       	adc	r24, r24
    5ff8:	99 1f       	adc	r25, r25
    5ffa:	2a 95       	dec	r18
    5ffc:	d1 f7       	brne	.-12     	; 0x5ff2 <_Z6perOutPih+0x16a>
    5ffe:	9f 01       	movw	r18, r30
    6000:	44 27       	eor	r20, r20
    6002:	37 fd       	sbrc	r19, 7
    6004:	40 95       	com	r20
    6006:	54 2f       	mov	r21, r20
    6008:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    600c:	79 01       	movw	r14, r18
#endif
            if(v <= -RESX) v = -RESX;
    600e:	bc ef       	ldi	r27, 0xFC	; 252
    6010:	21 30       	cpi	r18, 0x01	; 1
    6012:	3b 07       	cpc	r19, r27
    6014:	24 f4       	brge	.+8      	; 0x601e <_Z6perOutPih+0x196>
    6016:	e1 2c       	mov	r14, r1
    6018:	0c ef       	ldi	r16, 0xFC	; 252
    601a:	f0 2e       	mov	r15, r16
    601c:	07 c0       	rjmp	.+14     	; 0x602c <_Z6perOutPih+0x1a4>
            if(v >=  RESX) v =  RESX;
    601e:	e4 e0       	ldi	r30, 0x04	; 4
    6020:	20 30       	cpi	r18, 0x00	; 0
    6022:	3e 07       	cpc	r19, r30
    6024:	1c f0       	brlt	.+6      	; 0x602c <_Z6perOutPih+0x1a4>
    6026:	e1 2c       	mov	r14, r1
    6028:	14 e0       	ldi	r17, 0x04	; 4
    602a:	f1 2e       	mov	r15, r17
	  				if ( g_eeGeneral.throttleReversed )
    602c:	80 91 7e 01 	lds	r24, 0x017E
    6030:	80 ff       	sbrs	r24, 0
    6032:	10 c0       	rjmp	.+32     	; 0x6054 <_Z6perOutPih+0x1cc>
						{
							if ( i == THR_STICK )
    6034:	80 91 7c 01 	lds	r24, 0x017C
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	81 70       	andi	r24, 0x01	; 1
    603c:	90 70       	andi	r25, 0x00	; 0
    603e:	22 e0       	ldi	r18, 0x02	; 2
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	28 1b       	sub	r18, r24
    6044:	39 0b       	sbc	r19, r25
    6046:	a2 16       	cp	r10, r18
    6048:	b3 06       	cpc	r11, r19
    604a:	21 f4       	brne	.+8      	; 0x6054 <_Z6perOutPih+0x1cc>
							{
								v = -v ;
    604c:	f0 94       	com	r15
    604e:	e1 94       	neg	r14
    6050:	f1 08       	sbc	r15, r1
    6052:	f3 94       	inc	r15
							}
						}
#ifdef FIX_MODE
						uint8_t index = i ;
						if ( i < 4 )
    6054:	33 e0       	ldi	r19, 0x03	; 3
    6056:	38 15       	cp	r19, r8
    6058:	10 f4       	brcc	.+4      	; 0x605e <_Z6perOutPih+0x1d6>
    605a:	98 2c       	mov	r9, r8
    605c:	0c c0       	rjmp	.+24     	; 0x6076 <_Z6perOutPih+0x1ee>
						{
            	phyStick[i] = v >> 4 ;
    605e:	f5 01       	movw	r30, r10
    6060:	ee 54       	subi	r30, 0x4E	; 78
    6062:	f9 4f       	sbci	r31, 0xF9	; 249
    6064:	c7 01       	movw	r24, r14
    6066:	b4 e0       	ldi	r27, 0x04	; 4
    6068:	95 95       	asr	r25
    606a:	87 95       	ror	r24
    606c:	ba 95       	dec	r27
    606e:	e1 f7       	brne	.-8      	; 0x6068 <_Z6perOutPih+0x1e0>
    6070:	80 83       	st	Z, r24
							index = pgm_read_byte(stickScramble+stickIndex+i) ;
    6072:	f3 01       	movw	r30, r6
    6074:	94 90       	lpm	r9, Z+
						}
#else
						uint8_t index = i ;
#endif
            calibratedStick[index] = v; //for show in expo
    6076:	c9 2c       	mov	r12, r9
    6078:	dd 24       	eor	r13, r13
    607a:	f6 01       	movw	r30, r12
    607c:	ee 0f       	add	r30, r30
    607e:	ff 1f       	adc	r31, r31
    6080:	ea 54       	subi	r30, 0x4A	; 74
    6082:	f9 4f       	sbci	r31, 0xF9	; 249
    6084:	f1 82       	std	Z+1, r15	; 0x01
    6086:	e0 82       	st	Z, r14
						// Filter beep centre
						{
							int8_t t = v/16 ;
    6088:	c7 01       	movw	r24, r14
    608a:	60 e1       	ldi	r22, 0x10	; 16
    608c:	70 e0       	ldi	r23, 0x00	; 0
    608e:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    6092:	67 fd       	sbrc	r22, 7
    6094:	61 95       	neg	r22
#endif
							if ( t < 0 )
							{
								t = -t ;		//abs(t)
							}
							if ( t <= 1 )
    6096:	62 30       	cpi	r22, 0x02	; 2
    6098:	8c f4       	brge	.+34     	; 0x60bc <_Z6perOutPih+0x234>
            calibratedStick[index] = v; //for show in expo
						// Filter beep centre
						{
							int8_t t = v/16 ;
#ifdef FIX_MODE
							uint8_t mask = 1 << index ;
    609a:	81 e0       	ldi	r24, 0x01	; 1
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	09 2c       	mov	r0, r9
    60a0:	02 c0       	rjmp	.+4      	; 0x60a6 <_Z6perOutPih+0x21e>
    60a2:	88 0f       	add	r24, r24
    60a4:	99 1f       	adc	r25, r25
    60a6:	0a 94       	dec	r0
    60a8:	e2 f7       	brpl	.-8      	; 0x60a2 <_Z6perOutPih+0x21a>
    60aa:	28 2f       	mov	r18, r24
							{
								t = -t ;		//abs(t)
							}
							if ( t <= 1 )
							{
            		anaCenter |= ( t == 0 ) ? mask : bpanaCenter & mask ;
    60ac:	66 23       	and	r22, r22
    60ae:	19 f0       	breq	.+6      	; 0x60b6 <_Z6perOutPih+0x22e>
    60b0:	80 91 5f 07 	lds	r24, 0x075F
    60b4:	82 23       	and	r24, r18
    60b6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    60b8:	f8 2b       	or	r31, r24
    60ba:	ff 8f       	std	Y+31, r31	; 0x1f
							}
						}

            if(i<4) { //only do this for sticks
    60bc:	23 e0       	ldi	r18, 0x03	; 3
    60be:	28 15       	cp	r18, r8
    60c0:	08 f4       	brcc	.+2      	; 0x60c4 <_Z6perOutPih+0x23c>
    60c2:	a7 c0       	rjmp	.+334    	; 0x6212 <_Z6perOutPih+0x38a>
                //===========Trainer mode================
                if (!(att&NO_TRAINER) && g_model.traineron) {
    60c4:	3e a1       	ldd	r19, Y+38	; 0x26
    60c6:	33 23       	and	r19, r19
    60c8:	09 f0       	breq	.+2      	; 0x60cc <_Z6perOutPih+0x244>
    60ca:	67 c0       	rjmp	.+206    	; 0x619a <_Z6perOutPih+0x312>
    60cc:	80 91 b6 01 	lds	r24, 0x01B6
    60d0:	81 ff       	sbrs	r24, 1
    60d2:	63 c0       	rjmp	.+198    	; 0x619a <_Z6perOutPih+0x312>
                    TrainerMix* td = &g_eeGeneral.trainer.mix[index];
                    if (td->mode && getSwitch(td->swtch, 1))
    60d4:	86 01       	movw	r16, r12
    60d6:	00 0f       	add	r16, r16
    60d8:	11 1f       	adc	r17, r17
    60da:	0e 58       	subi	r16, 0x8E	; 142
    60dc:	1e 4f       	sbci	r17, 0xFE	; 254
    60de:	d8 01       	movw	r26, r16
    60e0:	11 96       	adiw	r26, 0x01	; 1
    60e2:	8c 91       	ld	r24, X
    60e4:	11 97       	sbiw	r26, 0x01	; 1
    60e6:	80 7c       	andi	r24, 0xC0	; 192
    60e8:	09 f4       	brne	.+2      	; 0x60ec <_Z6perOutPih+0x264>
    60ea:	57 c0       	rjmp	.+174    	; 0x619a <_Z6perOutPih+0x312>
    60ec:	8c 91       	ld	r24, X
    60ee:	85 95       	asr	r24
    60f0:	85 95       	asr	r24
    60f2:	85 95       	asr	r24
    60f4:	61 e0       	ldi	r22, 0x01	; 1
    60f6:	40 e0       	ldi	r20, 0x00	; 0
    60f8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    60fc:	88 23       	and	r24, r24
    60fe:	09 f4       	brne	.+2      	; 0x6102 <_Z6perOutPih+0x27a>
    6100:	4c c0       	rjmp	.+152    	; 0x619a <_Z6perOutPih+0x312>
										{
											if ( ppmInValid )
    6102:	80 91 a0 05 	lds	r24, 0x05A0
    6106:	88 23       	and	r24, r24
    6108:	09 f4       	brne	.+2      	; 0x610c <_Z6perOutPih+0x284>
    610a:	47 c0       	rjmp	.+142    	; 0x619a <_Z6perOutPih+0x312>
											{
                        uint8_t chStud = td->srcChn ;
                        int16_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]) /* *2 */ ;
    610c:	d8 01       	movw	r26, r16
    610e:	ec 91       	ld	r30, X
    6110:	e7 70       	andi	r30, 0x07	; 7
    6112:	f0 e0       	ldi	r31, 0x00	; 0
    6114:	ee 0f       	add	r30, r30
    6116:	ff 1f       	adc	r31, r31
    6118:	df 01       	movw	r26, r30
    611a:	a6 59       	subi	r26, 0x96	; 150
    611c:	be 4f       	sbci	r27, 0xFE	; 254
    611e:	ec 5d       	subi	r30, 0xDC	; 220
    6120:	f9 4f       	sbci	r31, 0xF9	; 249
    6122:	80 81       	ld	r24, Z
    6124:	91 81       	ldd	r25, Z+1	; 0x01
    6126:	2d 91       	ld	r18, X+
    6128:	3c 91       	ld	r19, X
                        vStud /= 2 ;		// Only 2, because no *2 above
    612a:	82 1b       	sub	r24, r18
    612c:	93 0b       	sbc	r25, r19
    612e:	62 e0       	ldi	r22, 0x02	; 2
    6130:	70 e0       	ldi	r23, 0x00	; 0
    6132:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
                        vStud *= td->studWeight ;
    6136:	f6 01       	movw	r30, r12
    6138:	ee 0f       	add	r30, r30
    613a:	ff 1f       	adc	r31, r31
    613c:	ed 58       	subi	r30, 0x8D	; 141
    613e:	fe 4f       	sbci	r31, 0xFE	; 254
    6140:	40 81       	ld	r20, Z
    6142:	84 2f       	mov	r24, r20
    6144:	88 0f       	add	r24, r24
    6146:	88 0f       	add	r24, r24
    6148:	85 95       	asr	r24
    614a:	85 95       	asr	r24
    614c:	99 27       	eor	r25, r25
    614e:	87 fd       	sbrc	r24, 7
    6150:	90 95       	com	r25
                        vStud /= 31 ;
    6152:	fc 01       	movw	r30, r24
    6154:	6e 9f       	mul	r22, r30
    6156:	c0 01       	movw	r24, r0
    6158:	6f 9f       	mul	r22, r31
    615a:	90 0d       	add	r25, r0
    615c:	7e 9f       	mul	r23, r30
    615e:	90 0d       	add	r25, r0
    6160:	11 24       	eor	r1, r1
    6162:	6f e1       	ldi	r22, 0x1F	; 31
    6164:	70 e0       	ldi	r23, 0x00	; 0
    6166:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    616a:	cb 01       	movw	r24, r22
                        vStud *= 4 ;
    616c:	88 0f       	add	r24, r24
    616e:	99 1f       	adc	r25, r25
    6170:	88 0f       	add	r24, r24
    6172:	99 1f       	adc	r25, r25
                        switch ((uint8_t)td->mode) {
    6174:	42 95       	swap	r20
    6176:	46 95       	lsr	r20
    6178:	46 95       	lsr	r20
    617a:	43 70       	andi	r20, 0x03	; 3
    617c:	41 30       	cpi	r20, 0x01	; 1
    617e:	21 f0       	breq	.+8      	; 0x6188 <_Z6perOutPih+0x300>
    6180:	42 30       	cpi	r20, 0x02	; 2
    6182:	21 f4       	brne	.+8      	; 0x618c <_Z6perOutPih+0x304>
    6184:	7c 01       	movw	r14, r24
    6186:	02 c0       	rjmp	.+4      	; 0x618c <_Z6perOutPih+0x304>
                        case 1: v += vStud;   break; // add-mode
    6188:	e8 0e       	add	r14, r24
    618a:	f9 1e       	adc	r15, r25
                        case 2: v  = vStud;   break; // subst-mode
                        }
#ifdef FIX_MODE
												if ( index == 2 )
    618c:	f2 e0       	ldi	r31, 0x02	; 2
    618e:	9f 16       	cp	r9, r31
    6190:	21 f4       	brne	.+8      	; 0x619a <_Z6perOutPih+0x312>
    6192:	9c 8f       	std	Y+28, r25	; 0x1c
    6194:	8b 8f       	std	Y+27, r24	; 0x1b
    6196:	21 e0       	ldi	r18, 0x01	; 1
    6198:	2a 8f       	std	Y+26, r18	; 0x1a
											}
                    }
                }

                //===========Swash Ring================
                if(d && (index==ele_stick || index==ail_stick))
    619a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    619c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    619e:	67 2b       	or	r22, r23
    61a0:	f1 f0       	breq	.+60     	; 0x61de <_Z6perOutPih+0x356>
    61a2:	71 e0       	ldi	r23, 0x01	; 1
    61a4:	97 16       	cp	r9, r23
    61a6:	19 f0       	breq	.+6      	; 0x61ae <_Z6perOutPih+0x326>
    61a8:	83 e0       	ldi	r24, 0x03	; 3
    61aa:	98 16       	cp	r9, r24
    61ac:	c1 f4       	brne	.+48     	; 0x61de <_Z6perOutPih+0x356>
                    v = int32_t(v)*calc100toRESX(g_model.swashRingValue)/int32_t(d) ;
    61ae:	80 91 c2 01 	lds	r24, 0x01C2
    61b2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_Z13calc100toRESXa>
    61b6:	aa 27       	eor	r26, r26
    61b8:	97 fd       	sbrc	r25, 7
    61ba:	a0 95       	com	r26
    61bc:	ba 2f       	mov	r27, r26
    61be:	97 01       	movw	r18, r14
    61c0:	44 27       	eor	r20, r20
    61c2:	37 fd       	sbrc	r19, 7
    61c4:	40 95       	com	r20
    61c6:	54 2f       	mov	r21, r20
    61c8:	bc 01       	movw	r22, r24
    61ca:	cd 01       	movw	r24, r26
    61cc:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    61d0:	2a a5       	ldd	r18, Y+42	; 0x2a
    61d2:	3b a5       	ldd	r19, Y+43	; 0x2b
    61d4:	4c a5       	ldd	r20, Y+44	; 0x2c
    61d6:	5d a5       	ldd	r21, Y+45	; 0x2d
    61d8:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    61dc:	79 01       	movw	r14, r18
                //===========Swash Ring================

								if ( att & FADE_FIRST )
    61de:	a8 a5       	ldd	r26, Y+40	; 0x28
    61e0:	b9 a5       	ldd	r27, Y+41	; 0x29
    61e2:	ab 2b       	or	r26, r27
    61e4:	39 f0       	breq	.+14     	; 0x61f4 <_Z6perOutPih+0x36c>
								{
#ifdef FIX_MODE
    		        	Output.rawSticks[index] = v; //set values for mixer
    61e6:	f6 01       	movw	r30, r12
    61e8:	ee 0f       	add	r30, r30
    61ea:	ff 1f       	adc	r31, r31
    61ec:	e8 59       	subi	r30, 0x98	; 152
    61ee:	f7 4f       	sbci	r31, 0xF7	; 247
    61f0:	f1 82       	std	Z+1, r15	; 0x01
    61f2:	e0 82       	st	Z, r14
#else
      		      	Output.rawSticks[i] = v; //set values for mixer
#endif
								}
								v = calcExpo( index, v ) ;
    61f4:	89 2d       	mov	r24, r9
    61f6:	b7 01       	movw	r22, r14
    61f8:	0e 94 af 2b 	call	0x575e	; 0x575e <_Z8calcExpohi>
    61fc:	7c 01       	movw	r14, r24
//#endif                    
//                v = (int16_t)x;
//                if (IS_EXPO_THROTTLE(index)) v -= RESX;

#ifdef PHASES		
                trimA[i] = getTrimValue( CurrentPhase, i )*2 ;
    61fe:	80 91 70 08 	lds	r24, 0x0870
    6202:	68 2d       	mov	r22, r8
    6204:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    6208:	88 0f       	add	r24, r24
    620a:	99 1f       	adc	r25, r25
    620c:	f1 01       	movw	r30, r2
    620e:	91 83       	std	Z+1, r25	; 0x01
    6210:	80 83       	st	Z, r24
#else
                trimA[i] = g_model.trim[i]*2 ;
#endif
#endif
            }
						if ( att & FADE_FIRST )
    6212:	28 a5       	ldd	r18, Y+40	; 0x28
    6214:	39 a5       	ldd	r19, Y+41	; 0x29
    6216:	23 2b       	or	r18, r19
    6218:	39 f0       	breq	.+14     	; 0x6228 <_Z6perOutPih+0x3a0>
						{
#ifdef FIX_MODE
            	Output.anas[index] = v; //set values for mixer
    621a:	f6 01       	movw	r30, r12
    621c:	ee 0f       	add	r30, r30
    621e:	ff 1f       	adc	r31, r31
    6220:	e0 5c       	subi	r30, 0xC0	; 192
    6222:	f7 4f       	sbci	r31, 0xF7	; 247
    6224:	f1 82       	std	Z+1, r15	; 0x01
    6226:	e0 82       	st	Z, r14
#else
            	Output.anas[i] = v; //set values for mixer
#endif
						}
    				if(att&NO_INPUT)
    6228:	6e a5       	ldd	r22, Y+46	; 0x2e
    622a:	7f a5       	ldd	r23, Y+47	; 0x2f
    622c:	67 2b       	or	r22, r23
    622e:	f1 f0       	breq	.+60     	; 0x626c <_Z6perOutPih+0x3e4>
						{ //zero input for setStickCenter()
   				    if ( i < 4 )
    6230:	73 e0       	ldi	r23, 0x03	; 3
    6232:	78 15       	cp	r23, r8
    6234:	d8 f0       	brcs	.+54     	; 0x626c <_Z6perOutPih+0x3e4>
							{
 				        if(!IS_THROTTLE(index))
    6236:	82 e0       	ldi	r24, 0x02	; 2
    6238:	98 16       	cp	r9, r24
    623a:	a1 f0       	breq	.+40     	; 0x6264 <_Z6perOutPih+0x3dc>
								{
									if ( ( v > (RESX/100 ) ) || ( v < -(RESX/100) ) )
    623c:	aa e0       	ldi	r26, 0x0A	; 10
    623e:	b0 e0       	ldi	r27, 0x00	; 0
    6240:	ea 0e       	add	r14, r26
    6242:	fb 1e       	adc	r15, r27
    6244:	b5 e1       	ldi	r27, 0x15	; 21
    6246:	eb 16       	cp	r14, r27
    6248:	f1 04       	cpc	r15, r1
    624a:	48 f0       	brcs	.+18     	; 0x625e <_Z6perOutPih+0x3d6>
									{
#ifdef FIX_MODE
				            Output.anas[index] = 0; //set values for mixer
    624c:	cc 0c       	add	r12, r12
    624e:	dd 1c       	adc	r13, r13
    6250:	e0 e4       	ldi	r30, 0x40	; 64
    6252:	f8 e0       	ldi	r31, 0x08	; 8
    6254:	ce 0e       	add	r12, r30
    6256:	df 1e       	adc	r13, r31
    6258:	d6 01       	movw	r26, r12
    625a:	1d 92       	st	X+, r1
    625c:	1c 92       	st	X, r1
#else
										Output.anas[i]  = 0 ;
#endif
									}
		            	trimA[i] = 0;
    625e:	f1 01       	movw	r30, r2
    6260:	11 82       	std	Z+1, r1	; 0x01
    6262:	10 82       	st	Z, r1
 				        }
   				    	Output.anas[i+PPM_BASE] = 0 ;
    6264:	ab 85       	ldd	r26, Y+11	; 0x0b
    6266:	bc 85       	ldd	r27, Y+12	; 0x0c
    6268:	1d 92       	st	X+, r1
    626a:	1c 92       	st	X, r1
    626c:	08 94       	sec
    626e:	a1 1c       	adc	r10, r1
    6270:	b1 1c       	adc	r11, r1
    6272:	e2 e0       	ldi	r30, 0x02	; 2
    6274:	f0 e0       	ldi	r31, 0x00	; 0
    6276:	4e 0e       	add	r4, r30
    6278:	5f 1e       	adc	r5, r31
    627a:	2b 85       	ldd	r18, Y+11	; 0x0b
    627c:	3c 85       	ldd	r19, Y+12	; 0x0c
    627e:	2e 5f       	subi	r18, 0xFE	; 254
    6280:	3f 4f       	sbci	r19, 0xFF	; 255
    6282:	3c 87       	std	Y+12, r19	; 0x0c
    6284:	2b 87       	std	Y+11, r18	; 0x0b
    6286:	2e 0e       	add	r2, r30
    6288:	3f 1e       	adc	r3, r31
    628a:	08 94       	sec
    628c:	61 1c       	adc	r6, r1
    628e:	71 1c       	adc	r7, r1
        //===========Swash Ring================

#ifdef FIX_MODE
				uint8_t stickIndex = g_eeGeneral.stickMode*4 ;
#endif        
				for(uint8_t i=0;i<7;i++){        // calc Sticks
    6290:	37 e0       	ldi	r19, 0x07	; 7
    6292:	a3 16       	cp	r10, r19
    6294:	b1 04       	cpc	r11, r1
    6296:	09 f0       	breq	.+2      	; 0x629a <_Z6perOutPih+0x412>
    6298:	8b ce       	rjmp	.-746    	; 0x5fb0 <_Z6perOutPih+0x128>
   				    }
    				}

        }
				//    if throttle trim -> trim low end
        if(g_model.thrTrim)
    629a:	80 91 bb 01 	lds	r24, 0x01BB
    629e:	80 ff       	sbrs	r24, 0
    62a0:	29 c0       	rjmp	.+82     	; 0x62f4 <_Z6perOutPih+0x46c>
				{
					int8_t ttrim ;
#ifdef PHASES		
					ttrim = getTrimValue( CurrentPhase, 2 ) ;
    62a2:	80 91 70 08 	lds	r24, 0x0870
    62a6:	62 e0       	ldi	r22, 0x02	; 2
    62a8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    62ac:	68 2f       	mov	r22, r24
					ttrim = *TrimPtr[2] ;
#else
					ttrim = g_model.trim[2] ;
#endif
#endif
					if(g_eeGeneral.throttleReversed)
    62ae:	80 91 7e 01 	lds	r24, 0x017E
    62b2:	80 fd       	sbrc	r24, 0
					{
						ttrim = -ttrim ;
    62b4:	61 95       	neg	r22
					}
         	trimA[2] = ((int32_t)ttrim+125)*(RESX-Output.anas[2])/(RESX) ;
    62b6:	77 27       	eor	r23, r23
    62b8:	67 fd       	sbrc	r22, 7
    62ba:	70 95       	com	r23
    62bc:	87 2f       	mov	r24, r23
    62be:	97 2f       	mov	r25, r23
    62c0:	63 58       	subi	r22, 0x83	; 131
    62c2:	7f 4f       	sbci	r23, 0xFF	; 255
    62c4:	8f 4f       	sbci	r24, 0xFF	; 255
    62c6:	9f 4f       	sbci	r25, 0xFF	; 255
    62c8:	20 e0       	ldi	r18, 0x00	; 0
    62ca:	34 e0       	ldi	r19, 0x04	; 4
    62cc:	e0 91 44 08 	lds	r30, 0x0844
    62d0:	f0 91 45 08 	lds	r31, 0x0845
    62d4:	2e 1b       	sub	r18, r30
    62d6:	3f 0b       	sbc	r19, r31
    62d8:	44 27       	eor	r20, r20
    62da:	37 fd       	sbrc	r19, 7
    62dc:	40 95       	com	r20
    62de:	54 2f       	mov	r21, r20
    62e0:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    62e4:	20 e0       	ldi	r18, 0x00	; 0
    62e6:	34 e0       	ldi	r19, 0x04	; 4
    62e8:	40 e0       	ldi	r20, 0x00	; 0
    62ea:	50 e0       	ldi	r21, 0x00	; 0
    62ec:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    62f0:	3e 83       	std	Y+6, r19	; 0x06
    62f2:	2d 83       	std	Y+5, r18	; 0x05
				}
			if ( att & FADE_FIRST )
    62f4:	6c a1       	ldd	r22, Y+36	; 0x24
    62f6:	7d a1       	ldd	r23, Y+37	; 0x25
    62f8:	60 72       	andi	r22, 0x20	; 32
    62fa:	70 70       	andi	r23, 0x00	; 0
    62fc:	7a 87       	std	Y+10, r23	; 0x0a
    62fe:	69 87       	std	Y+9, r22	; 0x09
    6300:	7c a1       	ldd	r23, Y+36	; 0x24
    6302:	75 ff       	sbrs	r23, 5
    6304:	d7 c1       	rjmp	.+942    	; 0x66b4 <_Z6perOutPih+0x82c>
			{

        //===========BEEP CENTER================
        anaCenter &= g_model.beepANACenter;
    6306:	10 91 bf 01 	lds	r17, 0x01BF
    630a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    630c:	18 23       	and	r17, r24
        if(((bpanaCenter ^ anaCenter) & anaCenter)) audioDefevent(AU_POT_STICK_MIDDLE);
    630e:	21 2f       	mov	r18, r17
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	80 91 5f 07 	lds	r24, 0x075F
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	82 27       	eor	r24, r18
    631a:	93 27       	eor	r25, r19
    631c:	82 23       	and	r24, r18
    631e:	93 23       	and	r25, r19
    6320:	89 2b       	or	r24, r25
    6322:	19 f0       	breq	.+6      	; 0x632a <_Z6perOutPih+0x4a2>
    6324:	88 e1       	ldi	r24, 0x18	; 24
    6326:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
        bpanaCenter = anaCenter;
    632a:	10 93 5f 07 	sts	0x075F, r17

        Output.anas[MIX_MAX-1]  = RESX;     // MAX
    632e:	80 e0       	ldi	r24, 0x00	; 0
    6330:	94 e0       	ldi	r25, 0x04	; 4
    6332:	90 93 4f 08 	sts	0x084F, r25
    6336:	80 93 4e 08 	sts	0x084E, r24
        Output.anas[MIX_FULL-1] = RESX;     // FULL
    633a:	90 93 51 08 	sts	0x0851, r25
    633e:	80 93 50 08 	sts	0x0850, r24
    6342:	60 e0       	ldi	r22, 0x00	; 0
    6344:	40 e0       	ldi	r20, 0x00	; 0
    6346:	50 e0       	ldi	r21, 0x00	; 0
//        for(uint8_t i=0;i<4;i++) Output.anas[i+PPM_BASE] = (g_ppmIns[i] - g_eeGeneral.trainer.calib[i])*2; //add ppm channels
//        for(uint8_t i=4;i<NUM_PPM;i++)    Output.anas[i+PPM_BASE]   = g_ppmIns[i]*2; //add ppm channels
        for(uint8_t i=0;i<NUM_PPM;i++)
				{
					int16_t x ;
					x = g_ppmIns[i] ;
    6348:	fa 01       	movw	r30, r20
    634a:	ec 5d       	subi	r30, 0xDC	; 220
    634c:	f9 4f       	sbci	r31, 0xF9	; 249
    634e:	20 81       	ld	r18, Z
    6350:	31 81       	ldd	r19, Z+1	; 0x01
					if ( i < 4 ) x -= g_eeGeneral.trainer.calib[i] ;  //add ppm channels
    6352:	64 30       	cpi	r22, 0x04	; 4
    6354:	38 f4       	brcc	.+14     	; 0x6364 <_Z6perOutPih+0x4dc>
    6356:	fa 01       	movw	r30, r20
    6358:	e8 5c       	subi	r30, 0xC8	; 200
    635a:	fe 4f       	sbci	r31, 0xFE	; 254
    635c:	82 a9       	ldd	r24, Z+50	; 0x32
    635e:	93 a9       	ldd	r25, Z+51	; 0x33
    6360:	28 1b       	sub	r18, r24
    6362:	39 0b       	sbc	r19, r25
					Output.anas[i+PPM_BASE] = x*2 ;
    6364:	fa 01       	movw	r30, r20
    6366:	e8 5a       	subi	r30, 0xA8	; 168
    6368:	f7 4f       	sbci	r31, 0xF7	; 247
    636a:	22 0f       	add	r18, r18
    636c:	33 1f       	adc	r19, r19
    636e:	31 83       	std	Z+1, r19	; 0x01
    6370:	20 83       	st	Z, r18
        Output.anas[MIX_FULL-1] = RESX;     // FULL
//        Output.anas[MIX_3POS-1] = keyState(SW_ID0) ? -1024 : (keyState(SW_ID1) ? 0 : 1024) ;

//        for(uint8_t i=0;i<4;i++) Output.anas[i+PPM_BASE] = (g_ppmIns[i] - g_eeGeneral.trainer.calib[i])*2; //add ppm channels
//        for(uint8_t i=4;i<NUM_PPM;i++)    Output.anas[i+PPM_BASE]   = g_ppmIns[i]*2; //add ppm channels
        for(uint8_t i=0;i<NUM_PPM;i++)
    6372:	6f 5f       	subi	r22, 0xFF	; 255
    6374:	4e 5f       	subi	r20, 0xFE	; 254
    6376:	5f 4f       	sbci	r21, 0xFF	; 255
    6378:	68 30       	cpi	r22, 0x08	; 8
    637a:	31 f7       	brne	.-52     	; 0x6348 <_Z6perOutPih+0x4c0>
//#if GVARS
//        for(uint8_t i=0;i<MAX_GVARS;i++) Output.anas[i+MIX_3POS] = g_model.gvars[i].gvar * 8 ;
//#endif

        //===========Swash Ring================
        if(g_model.swashRingValue)
    637c:	90 90 c2 01 	lds	r9, 0x01C2
    6380:	99 20       	and	r9, r9
    6382:	09 f4       	brne	.+2      	; 0x6386 <_Z6perOutPih+0x4fe>
    6384:	62 c0       	rjmp	.+196    	; 0x644a <_Z6perOutPih+0x5c2>
        {
          uint32_t v = ((int32_t)Output.anas[ele_stick]*Output.anas[ele_stick] + (int32_t)Output.anas[ail_stick]*Output.anas[ail_stick]);
    6386:	e0 90 42 08 	lds	r14, 0x0842
    638a:	f0 90 43 08 	lds	r15, 0x0843
    638e:	00 27       	eor	r16, r16
    6390:	f7 fc       	sbrc	r15, 7
    6392:	00 95       	com	r16
    6394:	10 2f       	mov	r17, r16
    6396:	20 91 46 08 	lds	r18, 0x0846
    639a:	30 91 47 08 	lds	r19, 0x0847
    639e:	44 27       	eor	r20, r20
    63a0:	37 fd       	sbrc	r19, 7
    63a2:	40 95       	com	r20
    63a4:	54 2f       	mov	r21, r20
    63a6:	ca 01       	movw	r24, r20
    63a8:	b9 01       	movw	r22, r18
    63aa:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    63ae:	5b 01       	movw	r10, r22
    63b0:	6c 01       	movw	r12, r24
    63b2:	c8 01       	movw	r24, r16
    63b4:	b7 01       	movw	r22, r14
    63b6:	a8 01       	movw	r20, r16
    63b8:	97 01       	movw	r18, r14
    63ba:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    63be:	a6 0e       	add	r10, r22
    63c0:	b7 1e       	adc	r11, r23
    63c2:	c8 1e       	adc	r12, r24
    63c4:	d9 1e       	adc	r13, r25
		      int16_t tmp = calc100toRESX(g_model.swashRingValue) ;
    63c6:	89 2d       	mov	r24, r9
    63c8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_Z13calc100toRESXa>
          uint32_t q ;
          q = (int32_t)tmp * tmp ;
    63cc:	3c 01       	movw	r6, r24
    63ce:	88 24       	eor	r8, r8
    63d0:	77 fc       	sbrc	r7, 7
    63d2:	80 94       	com	r8
    63d4:	98 2c       	mov	r9, r8
          if(v>q)
    63d6:	c4 01       	movw	r24, r8
    63d8:	b3 01       	movw	r22, r6
    63da:	a4 01       	movw	r20, r8
    63dc:	93 01       	movw	r18, r6
    63de:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    63e2:	6a 15       	cp	r22, r10
    63e4:	7b 05       	cpc	r23, r11
    63e6:	8c 05       	cpc	r24, r12
    63e8:	9d 05       	cpc	r25, r13
    63ea:	78 f5       	brcc	.+94     	; 0x644a <_Z6perOutPih+0x5c2>
          {
            uint16_t d = isqrt32(v);
    63ec:	c6 01       	movw	r24, r12
    63ee:	b5 01       	movw	r22, r10
    63f0:	0e 94 a8 21 	call	0x4350	; 0x4350 <_Z7isqrt32m>
            Output.anas[ele_stick] = (int32_t)Output.anas[ele_stick]*tmp/((int32_t)d) ;
    63f4:	7c 01       	movw	r14, r24
    63f6:	00 e0       	ldi	r16, 0x00	; 0
    63f8:	10 e0       	ldi	r17, 0x00	; 0
    63fa:	20 91 42 08 	lds	r18, 0x0842
    63fe:	30 91 43 08 	lds	r19, 0x0843
    6402:	44 27       	eor	r20, r20
    6404:	37 fd       	sbrc	r19, 7
    6406:	40 95       	com	r20
    6408:	54 2f       	mov	r21, r20
    640a:	c4 01       	movw	r24, r8
    640c:	b3 01       	movw	r22, r6
    640e:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    6412:	a8 01       	movw	r20, r16
    6414:	97 01       	movw	r18, r14
    6416:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    641a:	30 93 43 08 	sts	0x0843, r19
    641e:	20 93 42 08 	sts	0x0842, r18
            Output.anas[ail_stick] = (int32_t)Output.anas[ail_stick]*tmp/((int32_t)d) ;
    6422:	20 91 46 08 	lds	r18, 0x0846
    6426:	30 91 47 08 	lds	r19, 0x0847
    642a:	44 27       	eor	r20, r20
    642c:	37 fd       	sbrc	r19, 7
    642e:	40 95       	com	r20
    6430:	54 2f       	mov	r21, r20
    6432:	c4 01       	movw	r24, r8
    6434:	b3 01       	movw	r22, r6
    6436:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    643a:	a8 01       	movw	r20, r16
    643c:	97 01       	movw	r18, r14
    643e:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6442:	30 93 47 08 	sts	0x0847, r19
    6446:	20 93 46 08 	sts	0x0846, r18
//#define REZ_SWASH_X(x)  ((x) - (x)/8 - (x)/128 - (x)/512)   //  1024*sin(60) ~= 886
// Correction sin(60) * 1024 = 886.8 so 887 is closer
#define REZ_SWASH_X(x)  ((x) - (x)/8 - (x)/128 - (x)/1024 )   //  1024*sin(60) ~= 887
#define REZ_SWASH_Y(x)  ((x))   //  1024 => 1024

        if(g_model.swashType)
    644a:	20 91 c0 01 	lds	r18, 0x01C0
    644e:	82 2f       	mov	r24, r18
    6450:	80 7e       	andi	r24, 0xE0	; 224
    6452:	09 f4       	brne	.+2      	; 0x6456 <_Z6perOutPih+0x5ce>
    6454:	d8 c0       	rjmp	.+432    	; 0x6606 <_Z6perOutPih+0x77e>
        {
            int16_t vp = 0 ;
            int16_t vr = 0 ;

            if( !(att & NO_INPUT) )  //zero input for setStickCenter()
    6456:	9c a1       	ldd	r25, Y+36	; 0x24
    6458:	91 ff       	sbrs	r25, 1
    645a:	05 c0       	rjmp	.+10     	; 0x6466 <_Z6perOutPih+0x5de>
    645c:	aa 24       	eor	r10, r10
    645e:	bb 24       	eor	r11, r11
    6460:	ee 24       	eor	r14, r14
    6462:	ff 24       	eor	r15, r15
    6464:	10 c0       	rjmp	.+32     	; 0x6486 <_Z6perOutPih+0x5fe>
						{
            	vp += Output.anas[ele_stick] + trimA[ele_stick] ;
    6466:	ab 80       	ldd	r10, Y+3	; 0x03
    6468:	bc 80       	ldd	r11, Y+4	; 0x04
    646a:	80 91 42 08 	lds	r24, 0x0842
    646e:	90 91 43 08 	lds	r25, 0x0843
    6472:	a8 0e       	add	r10, r24
    6474:	b9 1e       	adc	r11, r25
            	vr += Output.anas[ail_stick] + trimA[ail_stick] ;
    6476:	ef 80       	ldd	r14, Y+7	; 0x07
    6478:	f8 84       	ldd	r15, Y+8	; 0x08
    647a:	80 91 46 08 	lds	r24, 0x0846
    647e:	90 91 47 08 	lds	r25, 0x0847
    6482:	e8 0e       	add	r14, r24
    6484:	f9 1e       	adc	r15, r25
						}
            
            int16_t vc = 0;
						int16_t *panas = Output.anas ;
						FORCE_INDIRECT(panas) ;
    6486:	e0 e4       	ldi	r30, 0x40	; 64
    6488:	ce 2e       	mov	r12, r30
    648a:	e8 e0       	ldi	r30, 0x08	; 8
    648c:	de 2e       	mov	r13, r30
    648e:	d6 01       	movw	r26, r12
    6490:	6d 01       	movw	r12, r26

            if(g_model.swashCollectiveSource)
    6492:	80 91 c1 01 	lds	r24, 0x01C1
    6496:	88 23       	and	r24, r24
    6498:	19 f4       	brne	.+6      	; 0x64a0 <_Z6perOutPih+0x618>
    649a:	00 e0       	ldi	r16, 0x00	; 0
    649c:	10 e0       	ldi	r17, 0x00	; 0
    649e:	10 c0       	rjmp	.+32     	; 0x64c0 <_Z6perOutPih+0x638>
						{
							uint8_t k = g_model.swashCollectiveSource - 1 ;
    64a0:	81 50       	subi	r24, 0x01	; 1
    64a2:	e8 2f       	mov	r30, r24
    64a4:	f0 e0       	ldi	r31, 0x00	; 0
							if ( k < CHOUT_BASE )
    64a6:	84 31       	cpi	r24, 0x14	; 20
    64a8:	28 f4       	brcc	.+10     	; 0x64b4 <_Z6perOutPih+0x62c>
							{
              	vc = panas[k] ;
    64aa:	ee 0f       	add	r30, r30
    64ac:	ff 1f       	adc	r31, r31
    64ae:	ea 0f       	add	r30, r26
    64b0:	fb 1f       	adc	r31, r27
    64b2:	04 c0       	rjmp	.+8      	; 0x64bc <_Z6perOutPih+0x634>
							}
							else
							{
								vc = ex_chans[k-CHOUT_BASE] ;
    64b4:	ee 0f       	add	r30, r30
    64b6:	ff 1f       	adc	r31, r31
    64b8:	e4 56       	subi	r30, 0x64	; 100
    64ba:	f9 4f       	sbci	r31, 0xF9	; 249
    64bc:	00 81       	ld	r16, Z
    64be:	11 81       	ldd	r17, Z+1	; 0x01
							}
						}

            if(g_model.swashInvertELE) vp = -vp;
    64c0:	22 ff       	sbrs	r18, 2
    64c2:	04 c0       	rjmp	.+8      	; 0x64cc <_Z6perOutPih+0x644>
    64c4:	b0 94       	com	r11
    64c6:	a1 94       	neg	r10
    64c8:	b1 08       	sbc	r11, r1
    64ca:	b3 94       	inc	r11
            if(g_model.swashInvertAIL) vr = -vr;
    64cc:	23 ff       	sbrs	r18, 3
    64ce:	04 c0       	rjmp	.+8      	; 0x64d8 <_Z6perOutPih+0x650>
    64d0:	f0 94       	com	r15
    64d2:	e1 94       	neg	r14
    64d4:	f1 08       	sbc	r15, r1
    64d6:	f3 94       	inc	r15
            if(g_model.swashInvertCOL) vc = -vc;
    64d8:	24 ff       	sbrs	r18, 4
    64da:	03 c0       	rjmp	.+6      	; 0x64e2 <_Z6perOutPih+0x65a>
    64dc:	10 95       	com	r17
    64de:	01 95       	neg	r16
    64e0:	1f 4f       	sbci	r17, 0xFF	; 255

            switch (( uint8_t)g_model.swashType)
    64e2:	80 91 c0 01 	lds	r24, 0x01C0
    64e6:	82 95       	swap	r24
    64e8:	86 95       	lsr	r24
    64ea:	87 70       	andi	r24, 0x07	; 7
    64ec:	82 30       	cpi	r24, 0x02	; 2
    64ee:	81 f1       	breq	.+96     	; 0x6550 <_Z6perOutPih+0x6c8>
    64f0:	83 30       	cpi	r24, 0x03	; 3
    64f2:	20 f4       	brcc	.+8      	; 0x64fc <_Z6perOutPih+0x674>
    64f4:	81 30       	cpi	r24, 0x01	; 1
    64f6:	09 f0       	breq	.+2      	; 0x64fa <_Z6perOutPih+0x672>
    64f8:	86 c0       	rjmp	.+268    	; 0x6606 <_Z6perOutPih+0x77e>
    64fa:	07 c0       	rjmp	.+14     	; 0x650a <_Z6perOutPih+0x682>
    64fc:	83 30       	cpi	r24, 0x03	; 3
    64fe:	09 f4       	brne	.+2      	; 0x6502 <_Z6perOutPih+0x67a>
    6500:	5a c0       	rjmp	.+180    	; 0x65b6 <_Z6perOutPih+0x72e>
    6502:	84 30       	cpi	r24, 0x04	; 4
    6504:	09 f0       	breq	.+2      	; 0x6508 <_Z6perOutPih+0x680>
    6506:	7f c0       	rjmp	.+254    	; 0x6606 <_Z6perOutPih+0x77e>
    6508:	6f c0       	rjmp	.+222    	; 0x65e8 <_Z6perOutPih+0x760>
            {
            case (SWASH_TYPE_120):
                vp = REZ_SWASH_Y(vp);
                vr = REZ_SWASH_X(vr);
    650a:	c7 01       	movw	r24, r14
    650c:	60 e0       	ldi	r22, 0x00	; 0
    650e:	74 e0       	ldi	r23, 0x04	; 4
    6510:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    6514:	fb 01       	movw	r30, r22
    6516:	c7 01       	movw	r24, r14
    6518:	68 e0       	ldi	r22, 0x08	; 8
    651a:	70 e0       	ldi	r23, 0x00	; 0
    651c:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    6520:	9b 01       	movw	r18, r22
    6522:	c7 01       	movw	r24, r14
    6524:	60 e8       	ldi	r22, 0x80	; 128
    6526:	70 e0       	ldi	r23, 0x00	; 0
    6528:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    652c:	c7 01       	movw	r24, r14
    652e:	82 1b       	sub	r24, r18
    6530:	93 0b       	sbc	r25, r19
    6532:	9c 01       	movw	r18, r24
    6534:	26 1b       	sub	r18, r22
    6536:	37 0b       	sbc	r19, r23
    6538:	2e 1b       	sub	r18, r30
    653a:	3f 0b       	sbc	r19, r31
                panas[MIX_CYC1-1] = vc - vp;
    653c:	c8 01       	movw	r24, r16
    653e:	8a 19       	sub	r24, r10
    6540:	9b 09       	sbc	r25, r11
    6542:	d6 01       	movw	r26, r12
    6544:	53 96       	adiw	r26, 0x13	; 19
    6546:	9c 93       	st	X, r25
    6548:	8e 93       	st	-X, r24
    654a:	52 97       	sbiw	r26, 0x12	; 18
                panas[MIX_CYC2-1] = vc + vp/2 + vr;
    654c:	c5 01       	movw	r24, r10
    654e:	22 c0       	rjmp	.+68     	; 0x6594 <_Z6perOutPih+0x70c>
                panas[MIX_CYC3-1] = vc + vp/2 - vr;
                break;
            case (SWASH_TYPE_120X):
                vp = REZ_SWASH_X(vp);
    6550:	c5 01       	movw	r24, r10
    6552:	60 e0       	ldi	r22, 0x00	; 0
    6554:	74 e0       	ldi	r23, 0x04	; 4
    6556:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    655a:	fb 01       	movw	r30, r22
    655c:	c5 01       	movw	r24, r10
    655e:	68 e0       	ldi	r22, 0x08	; 8
    6560:	70 e0       	ldi	r23, 0x00	; 0
    6562:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    6566:	9b 01       	movw	r18, r22
    6568:	c5 01       	movw	r24, r10
    656a:	60 e8       	ldi	r22, 0x80	; 128
    656c:	70 e0       	ldi	r23, 0x00	; 0
    656e:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    6572:	c5 01       	movw	r24, r10
    6574:	82 1b       	sub	r24, r18
    6576:	93 0b       	sbc	r25, r19
    6578:	9c 01       	movw	r18, r24
    657a:	26 1b       	sub	r18, r22
    657c:	37 0b       	sbc	r19, r23
    657e:	2e 1b       	sub	r18, r30
    6580:	3f 0b       	sbc	r19, r31
                vr = REZ_SWASH_Y(vr);
                panas[MIX_CYC1-1] = vc - vr;
    6582:	c8 01       	movw	r24, r16
    6584:	8e 19       	sub	r24, r14
    6586:	9f 09       	sbc	r25, r15
    6588:	d6 01       	movw	r26, r12
    658a:	53 96       	adiw	r26, 0x13	; 19
    658c:	9c 93       	st	X, r25
    658e:	8e 93       	st	-X, r24
    6590:	52 97       	sbiw	r26, 0x12	; 18
                panas[MIX_CYC2-1] = vc + vr/2 + vp;
    6592:	c7 01       	movw	r24, r14
    6594:	62 e0       	ldi	r22, 0x02	; 2
    6596:	70 e0       	ldi	r23, 0x00	; 0
    6598:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    659c:	60 0f       	add	r22, r16
    659e:	71 1f       	adc	r23, r17
    65a0:	cb 01       	movw	r24, r22
    65a2:	82 0f       	add	r24, r18
    65a4:	93 1f       	adc	r25, r19
    65a6:	f6 01       	movw	r30, r12
    65a8:	95 8b       	std	Z+21, r25	; 0x15
    65aa:	84 8b       	std	Z+20, r24	; 0x14
                panas[MIX_CYC3-1] = vc + vr/2 - vp;
    65ac:	62 1b       	sub	r22, r18
    65ae:	73 0b       	sbc	r23, r19
    65b0:	77 8b       	std	Z+23, r23	; 0x17
    65b2:	66 8b       	std	Z+22, r22	; 0x16
    65b4:	28 c0       	rjmp	.+80     	; 0x6606 <_Z6perOutPih+0x77e>
                break;
            case (SWASH_TYPE_140):
                vp = REZ_SWASH_Y(vp);
                vr = REZ_SWASH_Y(vr);
                panas[MIX_CYC1-1] = vc - vp;
    65b6:	c8 01       	movw	r24, r16
    65b8:	8a 19       	sub	r24, r10
    65ba:	9b 09       	sbc	r25, r11
    65bc:	d6 01       	movw	r26, r12
    65be:	53 96       	adiw	r26, 0x13	; 19
    65c0:	9c 93       	st	X, r25
    65c2:	8e 93       	st	-X, r24
    65c4:	52 97       	sbiw	r26, 0x12	; 18
                panas[MIX_CYC2-1] = vc + vp + vr;
    65c6:	c8 01       	movw	r24, r16
    65c8:	8a 0d       	add	r24, r10
    65ca:	9b 1d       	adc	r25, r11
    65cc:	9c 01       	movw	r18, r24
    65ce:	2e 0d       	add	r18, r14
    65d0:	3f 1d       	adc	r19, r15
    65d2:	55 96       	adiw	r26, 0x15	; 21
    65d4:	3c 93       	st	X, r19
    65d6:	2e 93       	st	-X, r18
    65d8:	54 97       	sbiw	r26, 0x14	; 20
                panas[MIX_CYC3-1] = vc + vp - vr;
    65da:	8e 19       	sub	r24, r14
    65dc:	9f 09       	sbc	r25, r15
    65de:	57 96       	adiw	r26, 0x17	; 23
    65e0:	9c 93       	st	X, r25
    65e2:	8e 93       	st	-X, r24
    65e4:	56 97       	sbiw	r26, 0x16	; 22
    65e6:	0f c0       	rjmp	.+30     	; 0x6606 <_Z6perOutPih+0x77e>
                break;
            case (SWASH_TYPE_90):
                vp = REZ_SWASH_Y(vp);
                vr = REZ_SWASH_Y(vr);
                panas[MIX_CYC1-1] = vc - vp;
    65e8:	c8 01       	movw	r24, r16
    65ea:	8a 19       	sub	r24, r10
    65ec:	9b 09       	sbc	r25, r11
    65ee:	f6 01       	movw	r30, r12
    65f0:	93 8b       	std	Z+19, r25	; 0x13
    65f2:	82 8b       	std	Z+18, r24	; 0x12
                panas[MIX_CYC2-1] = vc + vr;
    65f4:	c8 01       	movw	r24, r16
    65f6:	8e 0d       	add	r24, r14
    65f8:	9f 1d       	adc	r25, r15
    65fa:	95 8b       	std	Z+21, r25	; 0x15
    65fc:	84 8b       	std	Z+20, r24	; 0x14
                panas[MIX_CYC3-1] = vc - vr;
    65fe:	0e 19       	sub	r16, r14
    6600:	1f 09       	sbc	r17, r15
    6602:	17 8b       	std	Z+23, r17	; 0x17
    6604:	06 8b       	std	Z+22, r16	; 0x16
            default:
                break;
            }
        }

  		  if(tick10ms)
    6606:	80 91 20 06 	lds	r24, 0x0620
    660a:	88 23       	and	r24, r24
    660c:	09 f4       	brne	.+2      	; 0x6610 <_Z6perOutPih+0x788>
    660e:	52 c0       	rjmp	.+164    	; 0x66b4 <_Z6perOutPih+0x82c>
} Fade ;

static void inactivityCheck()
{
	struct t_inactivity *PtrInactivity = &Inactivity ;
	FORCE_INDIRECT(PtrInactivity) ;
    6610:	0a e5       	ldi	r16, 0x5A	; 90
    6612:	17 e0       	ldi	r17, 0x07	; 7
    6614:	d8 01       	movw	r26, r16
    6616:	8d 01       	movw	r16, r26

  if(s_noHi) s_noHi--;
    6618:	80 91 e7 06 	lds	r24, 0x06E7
    661c:	88 23       	and	r24, r24
    661e:	19 f0       	breq	.+6      	; 0x6626 <_Z6perOutPih+0x79e>
    6620:	81 50       	subi	r24, 0x01	; 1
    6622:	80 93 e7 06 	sts	0x06E7, r24
  uint16_t tsum = stickMoveValue() ;
    6626:	0e 94 65 10 	call	0x20ca	; 0x20ca <_Z14stickMoveValuev>
    662a:	9c 01       	movw	r18, r24
  if (tsum != PtrInactivity->inacSum)
    662c:	f8 01       	movw	r30, r16
    662e:	83 81       	ldd	r24, Z+3	; 0x03
    6630:	94 81       	ldd	r25, Z+4	; 0x04
    6632:	28 17       	cp	r18, r24
    6634:	39 07       	cpc	r19, r25
    6636:	41 f0       	breq	.+16     	; 0x6648 <_Z6perOutPih+0x7c0>
	{
    PtrInactivity->inacSum = tsum;
    6638:	34 83       	std	Z+4, r19	; 0x04
    663a:	23 83       	std	Z+3, r18	; 0x03
    PtrInactivity->inacCounter = 0;
    663c:	12 82       	std	Z+2, r1	; 0x02
    663e:	11 82       	std	Z+1, r1	; 0x01
    stickMoved = 1;  // reset in perMain
    6640:	81 e0       	ldi	r24, 0x01	; 1
    6642:	80 93 23 06 	sts	0x0623, r24
    6646:	34 c0       	rjmp	.+104    	; 0x66b0 <_Z6perOutPih+0x828>
  }
  else
	{
		uint8_t timer = g_eeGeneral.inactivityTimer + 10 ;
    6648:	90 91 7d 01 	lds	r25, 0x017D
    664c:	96 5f       	subi	r25, 0xF6	; 246
		if( ( timer) && (g_vbat100mV>49))
    664e:	81 f1       	breq	.+96     	; 0x66b0 <_Z6perOutPih+0x828>
    6650:	80 91 1f 06 	lds	r24, 0x061F
    6654:	82 33       	cpi	r24, 0x32	; 50
    6656:	60 f1       	brcs	.+88     	; 0x66b0 <_Z6perOutPih+0x828>
  	{
      if (++PtrInactivity->inacPrescale > 15 )
    6658:	d8 01       	movw	r26, r16
    665a:	8c 91       	ld	r24, X
    665c:	8f 5f       	subi	r24, 0xFF	; 255
    665e:	8c 93       	st	X, r24
    6660:	80 31       	cpi	r24, 0x10	; 16
    6662:	30 f1       	brcs	.+76     	; 0x66b0 <_Z6perOutPih+0x828>
      {
      	PtrInactivity->inacCounter++;
    6664:	11 96       	adiw	r26, 0x01	; 1
    6666:	4d 91       	ld	r20, X+
    6668:	5c 91       	ld	r21, X
    666a:	12 97       	sbiw	r26, 0x02	; 2
    666c:	4f 5f       	subi	r20, 0xFF	; 255
    666e:	5f 4f       	sbci	r21, 0xFF	; 255
    6670:	12 96       	adiw	r26, 0x02	; 2
    6672:	5c 93       	st	X, r21
    6674:	4e 93       	st	-X, r20
    6676:	11 97       	sbiw	r26, 0x01	; 1
      	PtrInactivity->inacPrescale = 0 ;
    6678:	1c 92       	st	X, r1
      	if(PtrInactivity->inacCounter>(uint16_t)((timer)*(100*60/16)))
    667a:	89 2f       	mov	r24, r25
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	27 e7       	ldi	r18, 0x77	; 119
    6680:	31 e0       	ldi	r19, 0x01	; 1
    6682:	fc 01       	movw	r30, r24
    6684:	e2 9f       	mul	r30, r18
    6686:	c0 01       	movw	r24, r0
    6688:	e3 9f       	mul	r30, r19
    668a:	90 0d       	add	r25, r0
    668c:	f2 9f       	mul	r31, r18
    668e:	90 0d       	add	r25, r0
    6690:	11 24       	eor	r1, r1
    6692:	84 17       	cp	r24, r20
    6694:	95 07       	cpc	r25, r21
    6696:	60 f4       	brcc	.+24     	; 0x66b0 <_Z6perOutPih+0x828>
      	  if((PtrInactivity->inacCounter&0x1F)==1)
    6698:	4f 71       	andi	r20, 0x1F	; 31
    669a:	50 70       	andi	r21, 0x00	; 0
    669c:	41 30       	cpi	r20, 0x01	; 1
    669e:	51 05       	cpc	r21, r1
    66a0:	39 f4       	brne	.+14     	; 0x66b0 <_Z6perOutPih+0x828>
					{
							setVolume(NUM_VOL_LEVELS-2) ;		// Nearly full volume
    66a2:	86 e0       	ldi	r24, 0x06	; 6
    66a4:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_Z9setVolumeh>
      	      audioVoiceDefevent( AU_INACTIVITY, V_INACTIVE ) ;
    66a8:	80 e1       	ldi	r24, 0x10	; 16
    66aa:	6d e2       	ldi	r22, 0x2D	; 45
    66ac:	0e 94 e4 79 	call	0xf3c8	; 0xf3c8 <_Z18audioVoiceDefeventhh>
        }

  		  if(tick10ms)
				{
					inactivityCheck() ;
					trace(); //trace thr 0..32  (/32)
    66b0:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <_Z5tracev>
				}
	    }
    memset(chans,0,sizeof(chans));        // All outputs to 0
    66b4:	80 e4       	ldi	r24, 0x40	; 64
    66b6:	ea e1       	ldi	r30, 0x1A	; 26
    66b8:	f7 e0       	ldi	r31, 0x07	; 7
    66ba:	df 01       	movw	r26, r30
    66bc:	1d 92       	st	X+, r1
    66be:	8a 95       	dec	r24
    66c0:	e9 f7       	brne	.-6      	; 0x66bc <_Z6perOutPih+0x834>
    66c2:	e0 ea       	ldi	r30, 0xA0	; 160
    66c4:	f7 e0       	ldi	r31, 0x07	; 7
    66c6:	fa 8b       	std	Y+18, r31	; 0x12
    66c8:	e9 8b       	std	Y+17, r30	; 0x11
    66ca:	20 e6       	ldi	r18, 0x60	; 96
    66cc:	37 e0       	ldi	r19, 0x07	; 7
    66ce:	38 8b       	std	Y+16, r19	; 0x10
    66d0:	2f 87       	std	Y+15, r18	; 0x0f
    66d2:	60 e2       	ldi	r22, 0x20	; 32
    66d4:	78 e0       	ldi	r23, 0x08	; 8
    66d6:	7e 87       	std	Y+14, r23	; 0x0e
    66d8:	6d 87       	std	Y+13, r22	; 0x0d
    66da:	19 8e       	std	Y+25, r1	; 0x19
    66dc:	18 8e       	std	Y+24, r1	; 0x18
    p[3] = &g_model.trim[3] ;
#endif

    for(uint8_t i=0;i<MAX_MIXERS;i++)
		{
        MixData *md = mixaddress( i ) ;
    66de:	88 8d       	ldd	r24, Y+24	; 0x18
    66e0:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z10mixaddressh>
    66e4:	3c 01       	movw	r6, r24
#if GVARS
				int8_t mixweight = REG100_100( md->weight) ;
    66e6:	dc 01       	movw	r26, r24
    66e8:	12 96       	adiw	r26, 0x02	; 2
    66ea:	8c 91       	ld	r24, X
    66ec:	0e 94 bf 11 	call	0x237e	; 0x237e <_Z10REG100_100a>
    66f0:	28 2e       	mov	r2, r24
#endif

        if((md->destCh==0) || (md->destCh>NUM_CHNOUT)) break;
    66f2:	f3 01       	movw	r30, r6
    66f4:	80 81       	ld	r24, Z
    66f6:	81 50       	subi	r24, 0x01	; 1
    66f8:	80 31       	cpi	r24, 0x10	; 16
    66fa:	08 f0       	brcs	.+2      	; 0x66fe <_Z6perOutPih+0x876>
    66fc:	a0 c3       	rjmp	.+1856   	; 0x6e3e <_Z6perOutPih+0xfb6>

        //Notice 0 = NC switch means not used -> always on line
        int16_t v  = 0;
        uint8_t swTog;
        uint8_t swon = Output.swOn[i] ;
    66fe:	ad 85       	ldd	r26, Y+13	; 0x0d
    6700:	be 85       	ldd	r27, Y+14	; 0x0e
    6702:	0c 91       	ld	r16, X

				bool t_switch = getSwitch(md->swtch,1) ;
    6704:	83 81       	ldd	r24, Z+3	; 0x03
    6706:	61 e0       	ldi	r22, 0x01	; 1
    6708:	40 e0       	ldi	r20, 0x00	; 0
    670a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    670e:	98 2f       	mov	r25, r24
        if (md->swtch && (md->srcRaw >= PPM_BASE) && (md->srcRaw < PPM_BASE+NUM_PPM)	&& (ppmInValid == 0) )
    6710:	f3 01       	movw	r30, r6
    6712:	83 81       	ldd	r24, Z+3	; 0x03
    6714:	88 23       	and	r24, r24
    6716:	59 f0       	breq	.+22     	; 0x672e <_Z6perOutPih+0x8a6>
    6718:	81 81       	ldd	r24, Z+1	; 0x01
    671a:	8c 30       	cpi	r24, 0x0C	; 12
    671c:	40 f0       	brcs	.+16     	; 0x672e <_Z6perOutPih+0x8a6>
    671e:	84 31       	cpi	r24, 0x14	; 20
    6720:	30 f4       	brcc	.+12     	; 0x672e <_Z6perOutPih+0x8a6>
    6722:	80 91 a0 05 	lds	r24, 0x05A0
    6726:	88 23       	and	r24, r24
    6728:	11 f4       	brne	.+4      	; 0x672e <_Z6perOutPih+0x8a6>
    672a:	90 e0       	ldi	r25, 0x00	; 0
    672c:	14 c0       	rjmp	.+40     	; 0x6756 <_Z6perOutPih+0x8ce>
				{
					// then treat switch as false ???				
					t_switch = 0 ;
				}	
				
        if ( t_switch )
    672e:	99 23       	and	r25, r25
    6730:	91 f0       	breq	.+36     	; 0x6756 <_Z6perOutPih+0x8ce>
    6732:	d3 01       	movw	r26, r6
    6734:	19 96       	adiw	r26, 0x09	; 9
    6736:	8c 91       	ld	r24, X
    6738:	8f 71       	andi	r24, 0x1F	; 31
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	00 90 70 08 	lds	r0, 0x0870
    6740:	02 c0       	rjmp	.+4      	; 0x6746 <_Z6perOutPih+0x8be>
    6742:	95 95       	asr	r25
    6744:	87 95       	ror	r24
    6746:	0a 94       	dec	r0
    6748:	e2 f7       	brpl	.-8      	; 0x6742 <_Z6perOutPih+0x8ba>
    674a:	e1 e0       	ldi	r30, 0x01	; 1
    674c:	f0 e0       	ldi	r31, 0x00	; 0
    674e:	8e 27       	eor	r24, r30
    6750:	9f 27       	eor	r25, r31
    6752:	98 2f       	mov	r25, r24
    6754:	91 70       	andi	r25, 0x01	; 1
					{
						t_switch = 0 ;
					}
				}

        uint8_t k = md->srcRaw ;
    6756:	d3 01       	movw	r26, r6
    6758:	11 96       	adiw	r26, 0x01	; 1
    675a:	1c 91       	ld	r17, X
    675c:	11 97       	sbiw	r26, 0x01	; 1
				
#define DEL_MULT 256
				//swOn[i]=false;
        if(!t_switch)
    675e:	99 23       	and	r25, r25
    6760:	d1 f5       	brne	.+116    	; 0x67d6 <_Z6perOutPih+0x94e>
				{ // switch on?  if no switch selected => on
            swTog = swon ;
        		Output.swOn[i] = swon = false ;	// In case we do a "continue" just below
    6762:	ed 85       	ldd	r30, Y+13	; 0x0d
    6764:	fe 85       	ldd	r31, Y+14	; 0x0e
    6766:	10 82       	st	Z, r1
            if (k == MIX_3POS+MAX_GVARS+1)	// "THIS"
    6768:	1d 32       	cpi	r17, 0x2D	; 45
    676a:	f9 f4       	brne	.+62     	; 0x67aa <_Z6perOutPih+0x922>
						{
							int32_t temp = chans[md->destCh-1] * ((int32_t)DEL_MULT * 256 / 100 ) ;
							Output.act[i] =  temp >> 8 ;
    676c:	ec 91       	ld	r30, X
    676e:	f0 e0       	ldi	r31, 0x00	; 0
    6770:	ee 0f       	add	r30, r30
    6772:	ff 1f       	adc	r31, r31
    6774:	ee 0f       	add	r30, r30
    6776:	ff 1f       	adc	r31, r31
    6778:	ea 5e       	subi	r30, 0xEA	; 234
    677a:	f8 4f       	sbci	r31, 0xF8	; 248
    677c:	60 81       	ld	r22, Z
    677e:	71 81       	ldd	r23, Z+1	; 0x01
    6780:	82 81       	ldd	r24, Z+2	; 0x02
    6782:	93 81       	ldd	r25, Z+3	; 0x03
    6784:	2f e8       	ldi	r18, 0x8F	; 143
    6786:	32 e0       	ldi	r19, 0x02	; 2
    6788:	40 e0       	ldi	r20, 0x00	; 0
    678a:	50 e0       	ldi	r21, 0x00	; 0
    678c:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    6790:	67 2f       	mov	r22, r23
    6792:	78 2f       	mov	r23, r24
    6794:	89 2f       	mov	r24, r25
    6796:	99 27       	eor	r25, r25
    6798:	87 fd       	sbrc	r24, 7
    679a:	9a 95       	dec	r25
    679c:	a9 89       	ldd	r26, Y+17	; 0x11
    679e:	ba 89       	ldd	r27, Y+18	; 0x12
    67a0:	6d 93       	st	X+, r22
    67a2:	7d 93       	st	X+, r23
    67a4:	8d 93       	st	X+, r24
    67a6:	9c 93       	st	X, r25
    67a8:	13 97       	sbiw	r26, 0x03	; 3
						}
            if(k!=MIX_MAX && k!=MIX_FULL) continue;// if not MAX or FULL - next loop
    67aa:	81 2f       	mov	r24, r17
    67ac:	88 50       	subi	r24, 0x08	; 8
    67ae:	82 30       	cpi	r24, 0x02	; 2
    67b0:	08 f0       	brcs	.+2      	; 0x67b4 <_Z6perOutPih+0x92c>
    67b2:	2e c3       	rjmp	.+1628   	; 0x6e10 <_Z6perOutPih+0xf88>
            if(md->mltpx==MLTPX_REP) continue; // if switch is off and REPLACE then off
    67b4:	f3 01       	movw	r30, r6
    67b6:	87 81       	ldd	r24, Z+7	; 0x07
    67b8:	86 70       	andi	r24, 0x06	; 6
    67ba:	84 30       	cpi	r24, 0x04	; 4
    67bc:	09 f4       	brne	.+2      	; 0x67c0 <_Z6perOutPih+0x938>
    67be:	28 c3       	rjmp	.+1616   	; 0x6e10 <_Z6perOutPih+0xf88>
            v = (k == MIX_FULL ? -RESX : 0); // switch is off and it is either MAX=0 or FULL=-512
    67c0:	19 30       	cpi	r17, 0x09	; 9
    67c2:	21 f0       	breq	.+8      	; 0x67cc <_Z6perOutPih+0x944>
    67c4:	d0 2e       	mov	r13, r16
    67c6:	00 e0       	ldi	r16, 0x00	; 0
    67c8:	10 e0       	ldi	r17, 0x00	; 0
    67ca:	03 c0       	rjmp	.+6      	; 0x67d2 <_Z6perOutPih+0x94a>
    67cc:	d0 2e       	mov	r13, r16
    67ce:	00 e0       	ldi	r16, 0x00	; 0
    67d0:	1c ef       	ldi	r17, 0xFC	; 252
    67d2:	80 e0       	ldi	r24, 0x00	; 0
    67d4:	b8 c0       	rjmp	.+368    	; 0x6946 <_Z6perOutPih+0xabe>
        }
        else {
            swTog = !swon ;
    67d6:	dd 24       	eor	r13, r13
    67d8:	00 23       	and	r16, r16
    67da:	11 f4       	brne	.+4      	; 0x67e0 <_Z6perOutPih+0x958>
    67dc:	dd 24       	eor	r13, r13
    67de:	d3 94       	inc	r13
            swon = true;
            k -= 1 ;
    67e0:	91 2f       	mov	r25, r17
    67e2:	91 50       	subi	r25, 0x01	; 1

//            v = Output.anas[k]; //Switch is on. MAX=FULL=512 or value.
						if ( k < CHOUT_BASE )
    67e4:	94 31       	cpi	r25, 0x14	; 20
    67e6:	a8 f4       	brcc	.+42     	; 0x6812 <_Z6perOutPih+0x98a>
						{
            	v = Output.anas[k]; //Switch is on. MAX=FULL=512 or value.
    67e8:	a9 2f       	mov	r26, r25
    67ea:	b0 e0       	ldi	r27, 0x00	; 0
    67ec:	fd 01       	movw	r30, r26
    67ee:	ee 0f       	add	r30, r30
    67f0:	ff 1f       	adc	r31, r31
    67f2:	e0 5c       	subi	r30, 0xC0	; 192
    67f4:	f7 4f       	sbci	r31, 0xF7	; 247
    67f6:	00 81       	ld	r16, Z
    67f8:	11 81       	ldd	r17, Z+1	; 0x01
							if ( k < 4 )
    67fa:	94 30       	cpi	r25, 0x04	; 4
    67fc:	08 f0       	brcs	.+2      	; 0x6800 <_Z6perOutPih+0x978>
    67fe:	8d c0       	rjmp	.+282    	; 0x691a <_Z6perOutPih+0xa92>
							{
								if ( md->disableExpoDr )
    6800:	f3 01       	movw	r30, r6
    6802:	87 81       	ldd	r24, Z+7	; 0x07
    6804:	86 ff       	sbrs	r24, 6
    6806:	89 c0       	rjmp	.+274    	; 0x691a <_Z6perOutPih+0xa92>
								{
      		      	v = Output.rawSticks[k]; //Switch is on. MAX=FULL=512 or value.
    6808:	aa 0f       	add	r26, r26
    680a:	bb 1f       	adc	r27, r27
    680c:	a8 59       	subi	r26, 0x98	; 152
    680e:	b7 4f       	sbci	r27, 0xF7	; 247
    6810:	0d c0       	rjmp	.+26     	; 0x682c <_Z6perOutPih+0x9a4>
								}
							}
						}
						else if(k<CHOUT_BASE+NUM_CHNOUT)
    6812:	94 32       	cpi	r25, 0x24	; 36
    6814:	28 f5       	brcc	.+74     	; 0x6860 <_Z6perOutPih+0x9d8>
						{
							if ( md->disableExpoDr )
    6816:	d3 01       	movw	r26, r6
    6818:	17 96       	adiw	r26, 0x07	; 7
    681a:	8c 91       	ld	r24, X
    681c:	a9 2f       	mov	r26, r25
    681e:	b0 e0       	ldi	r27, 0x00	; 0
    6820:	86 ff       	sbrs	r24, 6
    6822:	07 c0       	rjmp	.+14     	; 0x6832 <_Z6perOutPih+0x9aa>
							{
								v = g_chans512[k-CHOUT_BASE] ;
    6824:	aa 0f       	add	r26, r26
    6826:	bb 1f       	adc	r27, r27
    6828:	ac 53       	subi	r26, 0x3C	; 60
    682a:	b9 4f       	sbci	r27, 0xF9	; 249
    682c:	0d 91       	ld	r16, X+
    682e:	1c 91       	ld	r17, X
    6830:	74 c0       	rjmp	.+232    	; 0x691a <_Z6perOutPih+0xa92>
							}
							else
							{
            		if(k<CHOUT_BASE+md->destCh-1)
    6832:	f3 01       	movw	r30, r6
    6834:	80 81       	ld	r24, Z
    6836:	90 e0       	ldi	r25, 0x00	; 0
    6838:	42 96       	adiw	r24, 0x12	; 18
    683a:	fd 01       	movw	r30, r26
    683c:	74 97       	sbiw	r30, 0x14	; 20
    683e:	8a 17       	cp	r24, r26
    6840:	9b 07       	cpc	r25, r27
    6842:	3c f0       	brlt	.+14     	; 0x6852 <_Z6perOutPih+0x9ca>
								{
									v = chans[k-CHOUT_BASE] / 100 ; // if we've already calculated the value - take it instead // anas[i+CHOUT_BASE] = chans[i]
    6844:	ee 0f       	add	r30, r30
    6846:	ff 1f       	adc	r31, r31
    6848:	ee 0f       	add	r30, r30
    684a:	ff 1f       	adc	r31, r31
    684c:	e6 5e       	subi	r30, 0xE6	; 230
    684e:	f8 4f       	sbci	r31, 0xF8	; 248
    6850:	4c c0       	rjmp	.+152    	; 0x68ea <_Z6perOutPih+0xa62>
								}
								else
								{
									v = ex_chans[k-CHOUT_BASE] ;
    6852:	ee 0f       	add	r30, r30
    6854:	ff 1f       	adc	r31, r31
    6856:	ec 53       	subi	r30, 0x3C	; 60
    6858:	f9 4f       	sbci	r31, 0xF9	; 249
    685a:	00 81       	ld	r16, Z
    685c:	11 81       	ldd	r17, Z+1	; 0x01
    685e:	5d c0       	rjmp	.+186    	; 0x691a <_Z6perOutPih+0xa92>
								}
							}
						}
						else if ( k == MIX_3POS-1 )
    6860:	94 32       	cpi	r25, 0x24	; 36
    6862:	29 f5       	brne	.+74     	; 0x68ae <_Z6perOutPih+0xa26>
						{
							uint8_t sw = md->sw23pos ;
    6864:	d3 01       	movw	r26, r6
    6866:	19 96       	adiw	r26, 0x09	; 9
    6868:	9c 91       	ld	r25, X
    686a:	92 95       	swap	r25
    686c:	96 95       	lsr	r25
    686e:	97 70       	andi	r25, 0x07	; 7
							if ( sw )
    6870:	61 f0       	breq	.+24     	; 0x688a <_Z6perOutPih+0xa02>
							{
								sw += SW_ThrCt - KEY_MENU - 1 ;
    6872:	89 2f       	mov	r24, r25
    6874:	82 5f       	subi	r24, 0xF2	; 242
								if ( sw >= SW_ID0 )
    6876:	82 31       	cpi	r24, 0x12	; 18
    6878:	08 f0       	brcs	.+2      	; 0x687c <_Z6perOutPih+0x9f4>
								{
									sw += SW_AileDR - SW_ID0 ;
    687a:	8d 5f       	subi	r24, 0xFD	; 253
								}
        				v = keyState((EnumKeys)sw) ? 1024 : -1024 ;
    687c:	90 e0       	ldi	r25, 0x00	; 0
    687e:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    6882:	88 23       	and	r24, r24
    6884:	09 f0       	breq	.+2      	; 0x6888 <_Z6perOutPih+0xa00>
    6886:	47 c0       	rjmp	.+142    	; 0x6916 <_Z6perOutPih+0xa8e>
    6888:	06 c0       	rjmp	.+12     	; 0x6896 <_Z6perOutPih+0xa0e>
							}
							else
							{
        				v = keyState(SW_ID0) ? -1024 : (keyState(SW_ID1) ? 0 : 1024) ;
    688a:	82 e1       	ldi	r24, 0x12	; 18
    688c:	90 e0       	ldi	r25, 0x00	; 0
    688e:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    6892:	88 23       	and	r24, r24
    6894:	19 f0       	breq	.+6      	; 0x689c <_Z6perOutPih+0xa14>
    6896:	00 e0       	ldi	r16, 0x00	; 0
    6898:	1c ef       	ldi	r17, 0xFC	; 252
    689a:	3f c0       	rjmp	.+126    	; 0x691a <_Z6perOutPih+0xa92>
    689c:	83 e1       	ldi	r24, 0x13	; 19
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    68a4:	88 23       	and	r24, r24
    68a6:	b9 f1       	breq	.+110    	; 0x6916 <_Z6perOutPih+0xa8e>
    68a8:	00 e0       	ldi	r16, 0x00	; 0
    68aa:	10 e0       	ldi	r17, 0x00	; 0
    68ac:	36 c0       	rjmp	.+108    	; 0x691a <_Z6perOutPih+0xa92>
							}
						}
						else if ( k < MIX_3POS+MAX_GVARS )
    68ae:	9c 32       	cpi	r25, 0x2C	; 44
    68b0:	88 f4       	brcc	.+34     	; 0x68d4 <_Z6perOutPih+0xa4c>
						{
			        v = g_model.gvars[k-MIX_3POS].gvar * 8 ;
    68b2:	e9 2f       	mov	r30, r25
    68b4:	f0 e0       	ldi	r31, 0x00	; 0
    68b6:	ee 0f       	add	r30, r30
    68b8:	ff 1f       	adc	r31, r31
    68ba:	e9 5e       	subi	r30, 0xE9	; 233
    68bc:	fb 4f       	sbci	r31, 0xFB	; 251
    68be:	80 81       	ld	r24, Z
    68c0:	08 2f       	mov	r16, r24
    68c2:	11 27       	eor	r17, r17
    68c4:	07 fd       	sbrc	r16, 7
    68c6:	10 95       	com	r17
    68c8:	b3 e0       	ldi	r27, 0x03	; 3
    68ca:	00 0f       	add	r16, r16
    68cc:	11 1f       	adc	r17, r17
    68ce:	ba 95       	dec	r27
    68d0:	e1 f7       	brne	.-8      	; 0x68ca <_Z6perOutPih+0xa42>
    68d2:	23 c0       	rjmp	.+70     	; 0x691a <_Z6perOutPih+0xa92>
						}
						else if ( k == MIX_3POS+MAX_GVARS )	// "THIS"
    68d4:	9c 32       	cpi	r25, 0x2C	; 44
    68d6:	a9 f4       	brne	.+42     	; 0x6902 <_Z6perOutPih+0xa7a>
						{
							v = chans[md->destCh-1] / 100 ;
    68d8:	d3 01       	movw	r26, r6
    68da:	ec 91       	ld	r30, X
    68dc:	f0 e0       	ldi	r31, 0x00	; 0
    68de:	ee 0f       	add	r30, r30
    68e0:	ff 1f       	adc	r31, r31
    68e2:	ee 0f       	add	r30, r30
    68e4:	ff 1f       	adc	r31, r31
    68e6:	ea 5e       	subi	r30, 0xEA	; 234
    68e8:	f8 4f       	sbci	r31, 0xF8	; 248
    68ea:	60 81       	ld	r22, Z
    68ec:	71 81       	ldd	r23, Z+1	; 0x01
    68ee:	82 81       	ldd	r24, Z+2	; 0x02
    68f0:	93 81       	ldd	r25, Z+3	; 0x03
    68f2:	24 e6       	ldi	r18, 0x64	; 100
    68f4:	30 e0       	ldi	r19, 0x00	; 0
    68f6:	40 e0       	ldi	r20, 0x00	; 0
    68f8:	50 e0       	ldi	r21, 0x00	; 0
    68fa:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    68fe:	89 01       	movw	r16, r18
    6900:	0c c0       	rjmp	.+24     	; 0x691a <_Z6perOutPih+0xa92>
						}
            else
						{
							v = calc_scaler( k - (MIX_3POS+MAX_GVARS+1), 0, 0 ) ;
    6902:	81 2f       	mov	r24, r17
    6904:	8e 52       	subi	r24, 0x2E	; 46
    6906:	60 e0       	ldi	r22, 0x00	; 0
    6908:	70 e0       	ldi	r23, 0x00	; 0
    690a:	40 e0       	ldi	r20, 0x00	; 0
    690c:	50 e0       	ldi	r21, 0x00	; 0
    690e:	0e 94 82 27 	call	0x4f04	; 0x4f04 <_Z11calc_scalerhPhS_>
    6912:	8c 01       	movw	r16, r24
    6914:	02 c0       	rjmp	.+4      	; 0x691a <_Z6perOutPih+0xa92>
    6916:	00 e0       	ldi	r16, 0x00	; 0
    6918:	14 e0       	ldi	r17, 0x04	; 4
						}
            
						if(md->mixWarn) mixWarning |= 1<<(md->mixWarn-1); // Mix warning
    691a:	f3 01       	movw	r30, r6
    691c:	97 81       	ldd	r25, Z+7	; 0x07
    691e:	89 2f       	mov	r24, r25
    6920:	80 73       	andi	r24, 0x30	; 48
    6922:	81 f0       	breq	.+32     	; 0x6944 <_Z6perOutPih+0xabc>
    6924:	92 95       	swap	r25
    6926:	93 70       	andi	r25, 0x03	; 3
    6928:	89 2f       	mov	r24, r25
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	01 97       	sbiw	r24, 0x01	; 1
    692e:	21 e0       	ldi	r18, 0x01	; 1
    6930:	30 e0       	ldi	r19, 0x00	; 0
    6932:	02 c0       	rjmp	.+4      	; 0x6938 <_Z6perOutPih+0xab0>
    6934:	22 0f       	add	r18, r18
    6936:	33 1f       	adc	r19, r19
    6938:	8a 95       	dec	r24
    693a:	e2 f7       	brpl	.-8      	; 0x6934 <_Z6perOutPih+0xaac>
    693c:	c9 01       	movw	r24, r18
    693e:	39 8d       	ldd	r19, Y+25	; 0x19
    6940:	38 2b       	or	r19, r24
    6942:	39 8f       	std	Y+25, r19	; 0x19
    6944:	81 e0       	ldi	r24, 0x01	; 1
                    TrimPtr[md->srcRaw-1] = &md->sOffset ;		// Use the value stored here for the trim
                }
            }
#endif
        }
        Output.swOn[i] = swon ;
    6946:	ad 85       	ldd	r26, Y+13	; 0x0d
    6948:	be 85       	ldd	r27, Y+14	; 0x0e
    694a:	8c 93       	st	X, r24

        //========== INPUT OFFSET ===============
#ifdef FMODE_TRIM
        if ( ( md->enableFmTrim == 0 ) && ( md->lateOffset == 0 ) )
#else
        if ( md->lateOffset == 0 )
    694c:	f3 01       	movw	r30, r6
    694e:	87 81       	ldd	r24, Z+7	; 0x07
    6950:	83 fd       	sbrc	r24, 3
    6952:	0b c0       	rjmp	.+22     	; 0x696a <_Z6perOutPih+0xae2>
#endif
        {
#if GVARS
            if(md->sOffset) v += calc100toRESX( REG( md->sOffset, -125, 125 )	) ;
    6954:	80 85       	ldd	r24, Z+8	; 0x08
    6956:	88 23       	and	r24, r24
    6958:	41 f0       	breq	.+16     	; 0x696a <_Z6perOutPih+0xae2>
    695a:	63 e8       	ldi	r22, 0x83	; 131
    695c:	4d e7       	ldi	r20, 0x7D	; 125
    695e:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z3REGaaa>
    6962:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_Z13calc100toRESXa>
    6966:	08 0f       	add	r16, r24
    6968:	19 1f       	adc	r17, r25
            if(md->sOffset) v += calc100toRESX(md->sOffset);
#endif
        }

        //========== DELAY and PAUSE ===============
        if (md->speedUp || md->speedDown || md->delayUp || md->delayDown)  // there are delay values
    696a:	d3 01       	movw	r26, r6
    696c:	16 96       	adiw	r26, 0x06	; 6
    696e:	8c 91       	ld	r24, X
    6970:	16 97       	sbiw	r26, 0x06	; 6
    6972:	88 23       	and	r24, r24
    6974:	29 f4       	brne	.+10     	; 0x6980 <_Z6perOutPih+0xaf8>
    6976:	15 96       	adiw	r26, 0x05	; 5
    6978:	8c 91       	ld	r24, X
    697a:	88 23       	and	r24, r24
    697c:	09 f4       	brne	.+2      	; 0x6980 <_Z6perOutPih+0xaf8>
    697e:	14 c1       	rjmp	.+552    	; 0x6ba8 <_Z6perOutPih+0xd20>
        {
					uint8_t timing = g_model.mixTime ? 20 : 100 ;
    6980:	80 91 bb 01 	lds	r24, 0x01BB
    6984:	83 fd       	sbrc	r24, 3
    6986:	03 c0       	rjmp	.+6      	; 0x698e <_Z6perOutPih+0xb06>
    6988:	f4 e6       	ldi	r31, 0x64	; 100
    698a:	3f 2e       	mov	r3, r31
    698c:	02 c0       	rjmp	.+4      	; 0x6992 <_Z6perOutPih+0xb0a>
    698e:	e4 e1       	ldi	r30, 0x14	; 20
    6990:	3e 2e       	mov	r3, r30
					uint16_t my_delay = Output.sDelay[i] ;
    6992:	ef 85       	ldd	r30, Y+15	; 0x0f
    6994:	f8 89       	ldd	r31, Y+16	; 0x10
    6996:	e0 80       	ld	r14, Z
    6998:	f1 80       	ldd	r15, Z+1	; 0x01
					int32_t tact = Output.act[i] ;
    699a:	a9 89       	ldd	r26, Y+17	; 0x11
    699c:	ba 89       	ldd	r27, Y+18	; 0x12
    699e:	8d 90       	ld	r8, X+
    69a0:	9d 90       	ld	r9, X+
    69a2:	ad 90       	ld	r10, X+
    69a4:	bc 90       	ld	r11, X
#if DEL_MULT == 256
						int16_t diff = v-(tact>>8) ;
    69a6:	bb 27       	eor	r27, r27
    69a8:	b7 fc       	sbrc	r11, 7
    69aa:	ba 95       	dec	r27
    69ac:	ab 2d       	mov	r26, r11
    69ae:	9a 2d       	mov	r25, r10
    69b0:	89 2d       	mov	r24, r9
    69b2:	98 01       	movw	r18, r16
    69b4:	28 1b       	sub	r18, r24
    69b6:	39 0b       	sbc	r19, r25
#else
            int16_t diff = v-tact/DEL_MULT;
#endif

						if ( ( diff > 10 ) || ( diff < -10 ) )
    69b8:	c9 01       	movw	r24, r18
    69ba:	0a 96       	adiw	r24, 0x0a	; 10
    69bc:	45 97       	sbiw	r24, 0x15	; 21
    69be:	38 f0       	brcs	.+14     	; 0x69ce <_Z6perOutPih+0xb46>
						{
							if ( my_delay == 0 )
    69c0:	e1 14       	cp	r14, r1
    69c2:	f1 04       	cpc	r15, r1
    69c4:	21 f4       	brne	.+8      	; 0x69ce <_Z6perOutPih+0xb46>
							{
      				  if (md->delayUp || md->delayDown)  // there are delay values
    69c6:	f3 01       	movw	r30, r6
    69c8:	85 81       	ldd	r24, Z+5	; 0x05
    69ca:	88 23       	and	r24, r24
    69cc:	21 f4       	brne	.+8      	; 0x69d6 <_Z6perOutPih+0xb4e>
									swTog = 1 ;
								}
							}
						}

            if(swTog) {
    69ce:	dd 20       	and	r13, r13
    69d0:	11 f4       	brne	.+4      	; 0x69d6 <_Z6perOutPih+0xb4e>
        {
					uint8_t timing = g_model.mixTime ? 20 : 100 ;
					uint16_t my_delay = Output.sDelay[i] ;
					int32_t tact = Output.act[i] ;
#if DEL_MULT == 256
						int16_t diff = v-(tact>>8) ;
    69d2:	29 01       	movw	r4, r18
    69d4:	3b c0       	rjmp	.+118    	; 0x6a4c <_Z6perOutPih+0xbc4>

            if(swTog) {
                //need to know which "v" will give "anas".
                //curves(v)*weight/100 -> anas
                // v * weight / 100 = anas => anas*100/weight = v
                if(md->mltpx==MLTPX_REP)
    69d6:	d3 01       	movw	r26, r6
    69d8:	17 96       	adiw	r26, 0x07	; 7
    69da:	8c 91       	ld	r24, X
    69dc:	17 97       	sbiw	r26, 0x07	; 7
    69de:	86 70       	andi	r24, 0x06	; 6
    69e0:	84 30       	cpi	r24, 0x04	; 4
    69e2:	11 f5       	brne	.+68     	; 0x6a28 <_Z6perOutPih+0xba0>
                {
//                    tact = (int32_t)Output.anas[md->destCh-1+CHOUT_BASE]*DEL_MULT * 100 ;
                    tact = (int32_t)ex_chans[md->destCh-1]*DEL_MULT * 100 ;
    69e4:	ec 91       	ld	r30, X
    69e6:	f0 e0       	ldi	r31, 0x00	; 0
    69e8:	ee 0f       	add	r30, r30
    69ea:	ff 1f       	adc	r31, r31
    69ec:	ee 53       	subi	r30, 0x3E	; 62
    69ee:	f9 4f       	sbci	r31, 0xF9	; 249
    69f0:	60 81       	ld	r22, Z
    69f2:	71 81       	ldd	r23, Z+1	; 0x01
    69f4:	88 27       	eor	r24, r24
    69f6:	77 fd       	sbrc	r23, 7
    69f8:	80 95       	com	r24
    69fa:	98 2f       	mov	r25, r24
    69fc:	20 e0       	ldi	r18, 0x00	; 0
    69fe:	34 e6       	ldi	r19, 0x64	; 100
    6a00:	40 e0       	ldi	r20, 0x00	; 0
    6a02:	50 e0       	ldi	r21, 0x00	; 0
    6a04:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    6a08:	4b 01       	movw	r8, r22
    6a0a:	5c 01       	movw	r10, r24
#if GVARS
                    if(mixweight) tact /= mixweight ;
    6a0c:	22 20       	and	r2, r2
    6a0e:	61 f0       	breq	.+24     	; 0x6a28 <_Z6perOutPih+0xba0>
    6a10:	22 2d       	mov	r18, r2
    6a12:	33 27       	eor	r19, r19
    6a14:	27 fd       	sbrc	r18, 7
    6a16:	30 95       	com	r19
    6a18:	43 2f       	mov	r20, r19
    6a1a:	53 2f       	mov	r21, r19
    6a1c:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6a20:	c9 01       	movw	r24, r18
    6a22:	da 01       	movw	r26, r20
    6a24:	4c 01       	movw	r8, r24
    6a26:	5d 01       	movw	r10, r26
#else
                    if(md->weight) tact /= md->weight;
#endif
                }
#if DEL_MULT == 256
								diff = v-(tact>>8) ;
    6a28:	bb 27       	eor	r27, r27
    6a2a:	b7 fc       	sbrc	r11, 7
    6a2c:	ba 95       	dec	r27
    6a2e:	ab 2d       	mov	r26, r11
    6a30:	9a 2d       	mov	r25, r10
    6a32:	89 2d       	mov	r24, r9
    6a34:	28 01       	movw	r4, r16
    6a36:	48 1a       	sub	r4, r24
    6a38:	59 0a       	sbc	r5, r25
#else
            		diff = v-tact/DEL_MULT;
#endif
                if(diff) my_delay = (diff<0 ? md->delayUp :  md->delayDown) * timing ;
    6a3a:	41 f0       	breq	.+16     	; 0x6a4c <_Z6perOutPih+0xbc4>
    6a3c:	f3 01       	movw	r30, r6
    6a3e:	85 81       	ldd	r24, Z+5	; 0x05
    6a40:	57 fe       	sbrs	r5, 7
    6a42:	82 95       	swap	r24
    6a44:	8f 70       	andi	r24, 0x0F	; 15
    6a46:	38 9e       	mul	r3, r24
    6a48:	70 01       	movw	r14, r0
    6a4a:	11 24       	eor	r1, r1
            }

            if(my_delay)
    6a4c:	e1 14       	cp	r14, r1
    6a4e:	f1 04       	cpc	r15, r1
    6a50:	99 f0       	breq	.+38     	; 0x6a78 <_Z6perOutPih+0xbf0>
						{ // perform delay
                if(tick10ms)
    6a52:	80 91 20 06 	lds	r24, 0x0620
    6a56:	88 23       	and	r24, r24
    6a58:	31 f0       	breq	.+12     	; 0x6a66 <_Z6perOutPih+0xbde>
                {
                  my_delay-- ;
    6a5a:	08 94       	sec
    6a5c:	e1 08       	sbc	r14, r1
    6a5e:	f1 08       	sbc	r15, r1
                }
                if (my_delay != 0)
    6a60:	e1 14       	cp	r14, r1
    6a62:	f1 04       	cpc	r15, r1
    6a64:	49 f0       	breq	.+18     	; 0x6a78 <_Z6perOutPih+0xbf0>
                { // At end of delay, use new V and diff
#if DEL_MULT == 256
	                v = tact >> 8 ;	   // Stay in old position until delay over
    6a66:	bb 27       	eor	r27, r27
    6a68:	b7 fc       	sbrc	r11, 7
    6a6a:	ba 95       	dec	r27
    6a6c:	ab 2d       	mov	r26, r11
    6a6e:	9a 2d       	mov	r25, r10
    6a70:	89 2d       	mov	r24, r9
    6a72:	8c 01       	movw	r16, r24
    6a74:	44 24       	eor	r4, r4
    6a76:	55 24       	eor	r5, r5
#endif
                  diff = 0;
                }
            }

					Output.sDelay[i] = my_delay ;
    6a78:	af 85       	ldd	r26, Y+15	; 0x0f
    6a7a:	b8 89       	ldd	r27, Y+16	; 0x10
    6a7c:	ed 92       	st	X+, r14
    6a7e:	fc 92       	st	X, r15

            if(diff && (md->speedUp || md->speedDown)){
    6a80:	41 14       	cp	r4, r1
    6a82:	51 04       	cpc	r5, r1
    6a84:	09 f4       	brne	.+2      	; 0x6a88 <_Z6perOutPih+0xc00>
    6a86:	8a c0       	rjmp	.+276    	; 0x6b9c <_Z6perOutPih+0xd14>
    6a88:	f3 01       	movw	r30, r6
    6a8a:	86 81       	ldd	r24, Z+6	; 0x06
    6a8c:	88 23       	and	r24, r24
    6a8e:	09 f4       	brne	.+2      	; 0x6a92 <_Z6perOutPih+0xc0a>
    6a90:	7c c0       	rjmp	.+248    	; 0x6b8a <_Z6perOutPih+0xd02>
                //rate = steps/sec => 32*1024/100*md->speedUp/Down
                //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
                //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 sincde it's asymmetrical
                if(tick10ms) {
    6a92:	80 91 20 06 	lds	r24, 0x0620
    6a96:	88 23       	and	r24, r24
    6a98:	09 f4       	brne	.+2      	; 0x6a9c <_Z6perOutPih+0xc14>
    6a9a:	4d c0       	rjmp	.+154    	; 0x6b36 <_Z6perOutPih+0xcae>
                    int32_t rate = (int32_t)DEL_MULT * 2048 * 100 ;
#if GVARS
                    if(mixweight)
    6a9c:	22 20       	and	r2, r2
    6a9e:	39 f4       	brne	.+14     	; 0x6aae <_Z6perOutPih+0xc26>
    6aa0:	c1 2c       	mov	r12, r1
    6aa2:	d1 2c       	mov	r13, r1
    6aa4:	30 e2       	ldi	r19, 0x20	; 32
    6aa6:	e3 2e       	mov	r14, r19
    6aa8:	33 e0       	ldi	r19, 0x03	; 3
    6aaa:	f3 2e       	mov	r15, r19
    6aac:	10 c0       	rjmp	.+32     	; 0x6ace <_Z6perOutPih+0xc46>
										{
											uint8_t mweight = mixweight ;
    6aae:	22 2d       	mov	r18, r2
    6ab0:	27 fd       	sbrc	r18, 7
    6ab2:	21 95       	neg	r18
											if ( mixweight < 0 )
											{
												mweight = -mixweight ;
											}
											rate /= mweight ;
    6ab4:	30 e0       	ldi	r19, 0x00	; 0
    6ab6:	40 e0       	ldi	r20, 0x00	; 0
    6ab8:	50 e0       	ldi	r21, 0x00	; 0
    6aba:	60 e0       	ldi	r22, 0x00	; 0
    6abc:	70 e0       	ldi	r23, 0x00	; 0
    6abe:	80 e2       	ldi	r24, 0x20	; 32
    6ac0:	93 e0       	ldi	r25, 0x03	; 3
    6ac2:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6ac6:	c9 01       	movw	r24, r18
    6ac8:	da 01       	movw	r26, r20
    6aca:	6c 01       	movw	r12, r24
    6acc:	7d 01       	movw	r14, r26
    6ace:	d3 01       	movw	r26, r6
    6ad0:	16 96       	adiw	r26, 0x06	; 6
    6ad2:	2c 91       	ld	r18, X
#else
                    if(md->weight) rate /= abs(md->weight);
#endif

										int16_t speed ;
                    if ( diff>0 )
    6ad4:	14 14       	cp	r1, r4
    6ad6:	15 04       	cpc	r1, r5
    6ad8:	4c f0       	brlt	.+18     	; 0x6aec <_Z6perOutPih+0xc64>
										{
											speed = md->speedUp ;
										}
										else
										{
											rate = -rate ;											
    6ada:	f0 94       	com	r15
    6adc:	e0 94       	com	r14
    6ade:	d0 94       	com	r13
    6ae0:	c0 94       	com	r12
    6ae2:	c1 1c       	adc	r12, r1
    6ae4:	d1 1c       	adc	r13, r1
    6ae6:	e1 1c       	adc	r14, r1
    6ae8:	f1 1c       	adc	r15, r1
											speed = md->speedDown ;
    6aea:	22 95       	swap	r18
    6aec:	2f 70       	andi	r18, 0x0F	; 15
    6aee:	42 2f       	mov	r20, r18
    6af0:	50 e0       	ldi	r21, 0x00	; 0
										}
										tact = (speed) ? tact+(rate)/((int16_t)timing*speed) : (int32_t)v*DEL_MULT ;
    6af2:	41 15       	cp	r20, r1
    6af4:	51 05       	cpc	r21, r1
    6af6:	b1 f0       	breq	.+44     	; 0x6b24 <_Z6perOutPih+0xc9c>
    6af8:	83 2d       	mov	r24, r3
    6afa:	90 e0       	ldi	r25, 0x00	; 0
    6afc:	48 9f       	mul	r20, r24
    6afe:	90 01       	movw	r18, r0
    6b00:	49 9f       	mul	r20, r25
    6b02:	30 0d       	add	r19, r0
    6b04:	58 9f       	mul	r21, r24
    6b06:	30 0d       	add	r19, r0
    6b08:	11 24       	eor	r1, r1
    6b0a:	44 27       	eor	r20, r20
    6b0c:	37 fd       	sbrc	r19, 7
    6b0e:	40 95       	com	r20
    6b10:	54 2f       	mov	r21, r20
    6b12:	c7 01       	movw	r24, r14
    6b14:	b6 01       	movw	r22, r12
    6b16:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6b1a:	82 0e       	add	r8, r18
    6b1c:	93 1e       	adc	r9, r19
    6b1e:	a4 1e       	adc	r10, r20
    6b20:	b5 1e       	adc	r11, r21
    6b22:	09 c0       	rjmp	.+18     	; 0x6b36 <_Z6perOutPih+0xcae>
    6b24:	c8 01       	movw	r24, r16
    6b26:	aa 27       	eor	r26, r26
    6b28:	97 fd       	sbrc	r25, 7
    6b2a:	a0 95       	com	r26
    6b2c:	ba 2f       	mov	r27, r26
    6b2e:	88 24       	eor	r8, r8
    6b30:	98 2e       	mov	r9, r24
    6b32:	a9 2e       	mov	r10, r25
    6b34:	ba 2e       	mov	r11, r26

                }
								{
#if DEL_MULT == 256
									int32_t tmp = tact>>8 ;
    6b36:	55 27       	eor	r21, r21
    6b38:	b7 fc       	sbrc	r11, 7
    6b3a:	5a 95       	dec	r21
    6b3c:	4b 2d       	mov	r20, r11
    6b3e:	3a 2d       	mov	r19, r10
    6b40:	29 2d       	mov	r18, r9
    6b42:	c8 01       	movw	r24, r16
    6b44:	aa 27       	eor	r26, r26
    6b46:	97 fd       	sbrc	r25, 7
    6b48:	a0 95       	com	r26
    6b4a:	ba 2f       	mov	r27, r26
#else
									int32_t tmp = tact/DEL_MULT ;
#endif
                	if(((diff>0) && (v<tmp)) || ((diff<0) && (v>tmp))) tact=(int32_t)v*DEL_MULT; //deal with overflow
    6b4c:	14 14       	cp	r1, r4
    6b4e:	15 04       	cpc	r1, r5
    6b50:	34 f4       	brge	.+12     	; 0x6b5e <_Z6perOutPih+0xcd6>
    6b52:	82 17       	cp	r24, r18
    6b54:	93 07       	cpc	r25, r19
    6b56:	a4 07       	cpc	r26, r20
    6b58:	b5 07       	cpc	r27, r21
    6b5a:	34 f0       	brlt	.+12     	; 0x6b68 <_Z6perOutPih+0xce0>
    6b5c:	0e c0       	rjmp	.+28     	; 0x6b7a <_Z6perOutPih+0xcf2>
    6b5e:	28 17       	cp	r18, r24
    6b60:	39 07       	cpc	r19, r25
    6b62:	4a 07       	cpc	r20, r26
    6b64:	5b 07       	cpc	r21, r27
    6b66:	4c f4       	brge	.+18     	; 0x6b7a <_Z6perOutPih+0xcf2>
    6b68:	c8 01       	movw	r24, r16
    6b6a:	aa 27       	eor	r26, r26
    6b6c:	97 fd       	sbrc	r25, 7
    6b6e:	a0 95       	com	r26
    6b70:	ba 2f       	mov	r27, r26
    6b72:	88 24       	eor	r8, r8
    6b74:	98 2e       	mov	r9, r24
    6b76:	a9 2e       	mov	r10, r25
    6b78:	ba 2e       	mov	r11, r26
								}
#if DEL_MULT == 256
                v = tact >> 8 ;
    6b7a:	bb 27       	eor	r27, r27
    6b7c:	b7 fc       	sbrc	r11, 7
    6b7e:	ba 95       	dec	r27
    6b80:	ab 2d       	mov	r26, r11
    6b82:	9a 2d       	mov	r25, r10
    6b84:	89 2d       	mov	r24, r9
    6b86:	8c 01       	movw	r16, r24
    6b88:	09 c0       	rjmp	.+18     	; 0x6b9c <_Z6perOutPih+0xd14>
                v = tact/DEL_MULT;
#endif
            }
            else if (diff)
            {
              tact=(int32_t)v*DEL_MULT;
    6b8a:	c8 01       	movw	r24, r16
    6b8c:	aa 27       	eor	r26, r26
    6b8e:	97 fd       	sbrc	r25, 7
    6b90:	a0 95       	com	r26
    6b92:	ba 2f       	mov	r27, r26
    6b94:	88 24       	eor	r8, r8
    6b96:	98 2e       	mov	r9, r24
    6b98:	a9 2e       	mov	r10, r25
    6b9a:	ba 2e       	mov	r11, r26
            }
					Output.act[i] = tact ;
    6b9c:	e9 89       	ldd	r30, Y+17	; 0x11
    6b9e:	fa 89       	ldd	r31, Y+18	; 0x12
    6ba0:	80 82       	st	Z, r8
    6ba2:	91 82       	std	Z+1, r9	; 0x01
    6ba4:	a2 82       	std	Z+2, r10	; 0x02
    6ba6:	b3 82       	std	Z+3, r11	; 0x03
        
				}

        //========== CURVES ===============
				if ( md->differential )
    6ba8:	d3 01       	movw	r26, r6
    6baa:	17 96       	adiw	r26, 0x07	; 7
    6bac:	8c 91       	ld	r24, X
    6bae:	17 97       	sbiw	r26, 0x07	; 7
    6bb0:	87 ff       	sbrs	r24, 7
    6bb2:	36 c0       	rjmp	.+108    	; 0x6c20 <_Z6perOutPih+0xd98>
				{
      		//========== DIFFERENTIAL =========
      		int16_t curveParam = REG( md->curve, -100, 100 ) ;
    6bb4:	14 96       	adiw	r26, 0x04	; 4
    6bb6:	8c 91       	ld	r24, X
    6bb8:	6c e9       	ldi	r22, 0x9C	; 156
    6bba:	44 e6       	ldi	r20, 0x64	; 100
    6bbc:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z3REGaaa>
    6bc0:	28 2f       	mov	r18, r24
    6bc2:	33 27       	eor	r19, r19
    6bc4:	27 fd       	sbrc	r18, 7
    6bc6:	30 95       	com	r19
      		if (curveParam > 0 && v < 0)
    6bc8:	12 16       	cp	r1, r18
    6bca:	13 06       	cpc	r1, r19
    6bcc:	5c f4       	brge	.+22     	; 0x6be4 <_Z6perOutPih+0xd5c>
    6bce:	17 ff       	sbrs	r17, 7
    6bd0:	8b c0       	rjmp	.+278    	; 0x6ce8 <_Z6perOutPih+0xe60>
      		  v = ((int32_t)v * (100 - curveParam)) / 100;
    6bd2:	64 e6       	ldi	r22, 0x64	; 100
    6bd4:	70 e0       	ldi	r23, 0x00	; 0
    6bd6:	62 1b       	sub	r22, r18
    6bd8:	73 0b       	sbc	r23, r19
    6bda:	88 27       	eor	r24, r24
    6bdc:	77 fd       	sbrc	r23, 7
    6bde:	80 95       	com	r24
    6be0:	98 2f       	mov	r25, r24
    6be2:	0f c0       	rjmp	.+30     	; 0x6c02 <_Z6perOutPih+0xd7a>
      		else if (curveParam < 0 && v > 0)
    6be4:	21 15       	cp	r18, r1
    6be6:	31 05       	cpc	r19, r1
    6be8:	09 f4       	brne	.+2      	; 0x6bec <_Z6perOutPih+0xd64>
    6bea:	7e c0       	rjmp	.+252    	; 0x6ce8 <_Z6perOutPih+0xe60>
    6bec:	10 16       	cp	r1, r16
    6bee:	11 06       	cpc	r1, r17
    6bf0:	0c f0       	brlt	.+2      	; 0x6bf4 <_Z6perOutPih+0xd6c>
    6bf2:	7a c0       	rjmp	.+244    	; 0x6ce8 <_Z6perOutPih+0xe60>
      		  v = ((int32_t)v * (100 + curveParam)) / 100;
    6bf4:	2c 59       	subi	r18, 0x9C	; 156
    6bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    6bf8:	b9 01       	movw	r22, r18
    6bfa:	88 27       	eor	r24, r24
    6bfc:	77 fd       	sbrc	r23, 7
    6bfe:	80 95       	com	r24
    6c00:	98 2f       	mov	r25, r24
    6c02:	98 01       	movw	r18, r16
    6c04:	44 27       	eor	r20, r20
    6c06:	37 fd       	sbrc	r19, 7
    6c08:	40 95       	com	r20
    6c0a:	54 2f       	mov	r21, r20
    6c0c:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    6c10:	24 e6       	ldi	r18, 0x64	; 100
    6c12:	30 e0       	ldi	r19, 0x00	; 0
    6c14:	40 e0       	ldi	r20, 0x00	; 0
    6c16:	50 e0       	ldi	r21, 0x00	; 0
    6c18:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6c1c:	c9 01       	movw	r24, r18
    6c1e:	5d c0       	rjmp	.+186    	; 0x6cda <_Z6perOutPih+0xe52>
				}
				else
				{
					if ( ( md->curve <= -28 ) || ( md->curve > 27 ) )
    6c20:	f3 01       	movw	r30, r6
    6c22:	64 81       	ldd	r22, Z+4	; 0x04
    6c24:	86 2f       	mov	r24, r22
    6c26:	85 5e       	subi	r24, 0xE5	; 229
    6c28:	87 33       	cpi	r24, 0x37	; 55
    6c2a:	40 f0       	brcs	.+16     	; 0x6c3c <_Z6perOutPih+0xdb4>
					{
						// do expo using md->curve + 128
						int8_t x = md->curve + 128 ;
      			v = expo( v, x ) ;
    6c2c:	60 58       	subi	r22, 0x80	; 128
    6c2e:	77 27       	eor	r23, r23
    6c30:	67 fd       	sbrc	r22, 7
    6c32:	70 95       	com	r23
    6c34:	c8 01       	movw	r24, r16
    6c36:	0e 94 1c 21 	call	0x4238	; 0x4238 <_Z4expoii>
    6c3a:	4f c0       	rjmp	.+158    	; 0x6cda <_Z6perOutPih+0xe52>
					}
					else
					{
      	  	switch(md->curve)
    6c3c:	63 30       	cpi	r22, 0x03	; 3
    6c3e:	71 f1       	breq	.+92     	; 0x6c9c <_Z6perOutPih+0xe14>
    6c40:	64 30       	cpi	r22, 0x04	; 4
    6c42:	44 f4       	brge	.+16     	; 0x6c54 <_Z6perOutPih+0xdcc>
    6c44:	61 30       	cpi	r22, 0x01	; 1
    6c46:	69 f0       	breq	.+26     	; 0x6c62 <_Z6perOutPih+0xdda>
    6c48:	62 30       	cpi	r22, 0x02	; 2
    6c4a:	c4 f4       	brge	.+48     	; 0x6c7c <_Z6perOutPih+0xdf4>
    6c4c:	66 23       	and	r22, r22
    6c4e:	09 f4       	brne	.+2      	; 0x6c52 <_Z6perOutPih+0xdca>
    6c50:	4b c0       	rjmp	.+150    	; 0x6ce8 <_Z6perOutPih+0xe60>
    6c52:	37 c0       	rjmp	.+110    	; 0x6cc2 <_Z6perOutPih+0xe3a>
    6c54:	65 30       	cpi	r22, 0x05	; 5
    6c56:	61 f1       	breq	.+88     	; 0x6cb0 <_Z6perOutPih+0xe28>
    6c58:	65 30       	cpi	r22, 0x05	; 5
    6c5a:	34 f1       	brlt	.+76     	; 0x6ca8 <_Z6perOutPih+0xe20>
    6c5c:	66 30       	cpi	r22, 0x06	; 6
    6c5e:	89 f5       	brne	.+98     	; 0x6cc2 <_Z6perOutPih+0xe3a>
    6c60:	2a c0       	rjmp	.+84     	; 0x6cb6 <_Z6perOutPih+0xe2e>
						{
      	  	case 0:
      	  	    break;
      	  	case 1:
      	  	    if(md->srcRaw == MIX_FULL) //FUL
    6c62:	d3 01       	movw	r26, r6
    6c64:	11 96       	adiw	r26, 0x01	; 1
    6c66:	8c 91       	ld	r24, X
    6c68:	89 30       	cpi	r24, 0x09	; 9
    6c6a:	29 f4       	brne	.+10     	; 0x6c76 <_Z6perOutPih+0xdee>
      	  	    {
      	  	        if( v<0 ) v=-RESX;   //x|x>0
    6c6c:	17 fd       	sbrc	r17, 7
    6c6e:	26 c0       	rjmp	.+76     	; 0x6cbc <_Z6perOutPih+0xe34>
      	  	        else      v=-RESX+2*v;
    6c70:	00 50       	subi	r16, 0x00	; 0
    6c72:	12 40       	sbci	r17, 0x02	; 2
    6c74:	0c c0       	rjmp	.+24     	; 0x6c8e <_Z6perOutPih+0xe06>
      	  	    }else{
      	  	        if( v<0 ) v=0;   //x|x>0
    6c76:	17 ff       	sbrs	r17, 7
    6c78:	37 c0       	rjmp	.+110    	; 0x6ce8 <_Z6perOutPih+0xe60>
    6c7a:	31 c0       	rjmp	.+98     	; 0x6cde <_Z6perOutPih+0xe56>
      	  	    }
      	  	    break;
      	  	case 2:
      	  	    if(md->srcRaw == MIX_FULL) //FUL
    6c7c:	f3 01       	movw	r30, r6
    6c7e:	81 81       	ldd	r24, Z+1	; 0x01
    6c80:	89 30       	cpi	r24, 0x09	; 9
    6c82:	41 f4       	brne	.+16     	; 0x6c94 <_Z6perOutPih+0xe0c>
      	  	    {
      	  	        if( v>0 ) v=RESX;   //x|x<0
    6c84:	10 16       	cp	r1, r16
    6c86:	11 06       	cpc	r1, r17
    6c88:	6c f1       	brlt	.+90     	; 0x6ce4 <_Z6perOutPih+0xe5c>
      	  	        else      v=RESX+2*v;
    6c8a:	00 50       	subi	r16, 0x00	; 0
    6c8c:	1e 4f       	sbci	r17, 0xFE	; 254
    6c8e:	00 0f       	add	r16, r16
    6c90:	11 1f       	adc	r17, r17
    6c92:	2a c0       	rjmp	.+84     	; 0x6ce8 <_Z6perOutPih+0xe60>
      	  	    }else{
      	  	        if( v>0 ) v=0;   //x|x<0
    6c94:	10 16       	cp	r1, r16
    6c96:	11 06       	cpc	r1, r17
    6c98:	14 f1       	brlt	.+68     	; 0x6cde <_Z6perOutPih+0xe56>
    6c9a:	26 c0       	rjmp	.+76     	; 0x6ce8 <_Z6perOutPih+0xe60>
      	  	    }
      	  	    break;
      	  	case 3:       // x|abs(x)
      	  	    v = abs(v);
    6c9c:	17 ff       	sbrs	r17, 7
    6c9e:	24 c0       	rjmp	.+72     	; 0x6ce8 <_Z6perOutPih+0xe60>
    6ca0:	10 95       	com	r17
    6ca2:	01 95       	neg	r16
    6ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    6ca6:	20 c0       	rjmp	.+64     	; 0x6ce8 <_Z6perOutPih+0xe60>
      	  	    break;
      	  	case 4:       //f|f>0
      	  	    v = v>0 ? RESX : 0;
    6ca8:	10 16       	cp	r1, r16
    6caa:	11 06       	cpc	r1, r17
    6cac:	dc f0       	brlt	.+54     	; 0x6ce4 <_Z6perOutPih+0xe5c>
    6cae:	17 c0       	rjmp	.+46     	; 0x6cde <_Z6perOutPih+0xe56>
      	  	    break;
      	  	case 5:       //f|f<0
      	  	    v = v<0 ? -RESX : 0;
    6cb0:	17 ff       	sbrs	r17, 7
    6cb2:	15 c0       	rjmp	.+42     	; 0x6cde <_Z6perOutPih+0xe56>
    6cb4:	03 c0       	rjmp	.+6      	; 0x6cbc <_Z6perOutPih+0xe34>
      	  	    break;
      	  	case 6:       //f|abs(f)
      	  	    v = v>0 ? RESX : -RESX;
    6cb6:	10 16       	cp	r1, r16
    6cb8:	11 06       	cpc	r1, r17
    6cba:	a4 f0       	brlt	.+40     	; 0x6ce4 <_Z6perOutPih+0xe5c>
    6cbc:	00 e0       	ldi	r16, 0x00	; 0
    6cbe:	1c ef       	ldi	r17, 0xFC	; 252
    6cc0:	13 c0       	rjmp	.+38     	; 0x6ce8 <_Z6perOutPih+0xe60>
      	  	    break;
      	  	default: //c1..c16
								{
									int8_t idx = md->curve ;
									if ( idx < 0 )
    6cc2:	67 ff       	sbrs	r22, 7
    6cc4:	06 c0       	rjmp	.+12     	; 0x6cd2 <_Z6perOutPih+0xe4a>
									{
										v = -v ;
    6cc6:	10 95       	com	r17
    6cc8:	01 95       	neg	r16
    6cca:	1f 4f       	sbci	r17, 0xFF	; 255
										idx = 6 - idx ;								
    6ccc:	f6 e0       	ldi	r31, 0x06	; 6
    6cce:	f6 1b       	sub	r31, r22
    6cd0:	6f 2f       	mov	r22, r31
									}
      	  	    	v = intpol(v, idx - 7);
    6cd2:	67 50       	subi	r22, 0x07	; 7
    6cd4:	c8 01       	movw	r24, r16
    6cd6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_Z6intpolih>
    6cda:	8c 01       	movw	r16, r24
    6cdc:	05 c0       	rjmp	.+10     	; 0x6ce8 <_Z6perOutPih+0xe60>
    6cde:	00 e0       	ldi	r16, 0x00	; 0
    6ce0:	10 e0       	ldi	r17, 0x00	; 0
    6ce2:	02 c0       	rjmp	.+4      	; 0x6ce8 <_Z6perOutPih+0xe60>
    6ce4:	00 e0       	ldi	r16, 0x00	; 0
    6ce6:	14 e0       	ldi	r17, 0x04	; 4
      	  	}
					}
				}
        
        //========== TRIM ===============
        if((md->carryTrim==0) && (md->srcRaw>0) && (md->srcRaw<=4)) v += trimA[md->srcRaw-1];  //  0 = Trim ON  =  Default
    6ce8:	d3 01       	movw	r26, r6
    6cea:	17 96       	adiw	r26, 0x07	; 7
    6cec:	dc 90       	ld	r13, X
    6cee:	17 97       	sbiw	r26, 0x07	; 7
    6cf0:	d0 fc       	sbrc	r13, 0
    6cf2:	14 c0       	rjmp	.+40     	; 0x6d1c <_Z6perOutPih+0xe94>
    6cf4:	11 96       	adiw	r26, 0x01	; 1
    6cf6:	ec 91       	ld	r30, X
    6cf8:	ee 23       	and	r30, r30
    6cfa:	81 f0       	breq	.+32     	; 0x6d1c <_Z6perOutPih+0xe94>
    6cfc:	e5 30       	cpi	r30, 0x05	; 5
    6cfe:	70 f4       	brcc	.+28     	; 0x6d1c <_Z6perOutPih+0xe94>
    6d00:	f0 e0       	ldi	r31, 0x00	; 0
    6d02:	31 97       	sbiw	r30, 0x01	; 1
    6d04:	ee 0f       	add	r30, r30
    6d06:	ff 1f       	adc	r31, r31
    6d08:	21 e0       	ldi	r18, 0x01	; 1
    6d0a:	30 e0       	ldi	r19, 0x00	; 0
    6d0c:	2c 0f       	add	r18, r28
    6d0e:	3d 1f       	adc	r19, r29
    6d10:	e2 0f       	add	r30, r18
    6d12:	f3 1f       	adc	r31, r19
    6d14:	80 81       	ld	r24, Z
    6d16:	91 81       	ldd	r25, Z+1	; 0x01
    6d18:	08 0f       	add	r16, r24
    6d1a:	19 1f       	adc	r17, r25

        //========== MULTIPLEX ===============
#if GVARS
        int32_t dv = (int32_t)v*mixweight ;
    6d1c:	b8 01       	movw	r22, r16
    6d1e:	88 27       	eor	r24, r24
    6d20:	77 fd       	sbrc	r23, 7
    6d22:	80 95       	com	r24
    6d24:	98 2f       	mov	r25, r24
    6d26:	22 2d       	mov	r18, r2
    6d28:	33 27       	eor	r19, r19
    6d2a:	27 fd       	sbrc	r18, 7
    6d2c:	30 95       	com	r19
    6d2e:	43 2f       	mov	r20, r19
    6d30:	53 2f       	mov	r21, r19
    6d32:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    6d36:	7b 01       	movw	r14, r22
    6d38:	8c 01       	movw	r16, r24
#endif
        //========== lateOffset ===============
#ifdef FMODE_TRIM
				if ( ( md->enableFmTrim == 0 ) && ( md->lateOffset ) )
#else
				if ( md->lateOffset )
    6d3a:	d3 fe       	sbrs	r13, 3
    6d3c:	1b c0       	rjmp	.+54     	; 0x6d74 <_Z6perOutPih+0xeec>
#endif
        {
#if GVARS
            if(md->sOffset) dv += calc100toRESX( REG( md->sOffset, -125, 125 )	) * 100L ;
    6d3e:	d3 01       	movw	r26, r6
    6d40:	18 96       	adiw	r26, 0x08	; 8
    6d42:	8c 91       	ld	r24, X
    6d44:	88 23       	and	r24, r24
    6d46:	b1 f0       	breq	.+44     	; 0x6d74 <_Z6perOutPih+0xeec>
    6d48:	63 e8       	ldi	r22, 0x83	; 131
    6d4a:	4d e7       	ldi	r20, 0x7D	; 125
    6d4c:	0e 94 a5 11 	call	0x234a	; 0x234a <_Z3REGaaa>
    6d50:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_Z13calc100toRESXa>
    6d54:	aa 27       	eor	r26, r26
    6d56:	97 fd       	sbrc	r25, 7
    6d58:	a0 95       	com	r26
    6d5a:	ba 2f       	mov	r27, r26
    6d5c:	bc 01       	movw	r22, r24
    6d5e:	cd 01       	movw	r24, r26
    6d60:	24 e6       	ldi	r18, 0x64	; 100
    6d62:	30 e0       	ldi	r19, 0x00	; 0
    6d64:	40 e0       	ldi	r20, 0x00	; 0
    6d66:	50 e0       	ldi	r21, 0x00	; 0
    6d68:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    6d6c:	e6 0e       	add	r14, r22
    6d6e:	f7 1e       	adc	r15, r23
    6d70:	08 1f       	adc	r16, r24
    6d72:	19 1f       	adc	r17, r25
            if(md->sOffset) dv += calc100toRESX(md->sOffset) * 100L ;
#endif
        }

				int32_t *ptr ;			// Save calculating address several times
				ptr = &chans[md->destCh-1] ;
    6d74:	f3 01       	movw	r30, r6
    6d76:	80 81       	ld	r24, Z
    6d78:	c8 2e       	mov	r12, r24
    6d7a:	dd 24       	eor	r13, r13
    6d7c:	08 94       	sec
    6d7e:	c1 08       	sbc	r12, r1
    6d80:	d1 08       	sbc	r13, r1
        switch((uint8_t)md->mltpx){
    6d82:	87 81       	ldd	r24, Z+7	; 0x07
    6d84:	86 95       	lsr	r24
    6d86:	83 70       	andi	r24, 0x03	; 3
    6d88:	81 30       	cpi	r24, 0x01	; 1
    6d8a:	19 f0       	breq	.+6      	; 0x6d92 <_Z6perOutPih+0xf0a>
    6d8c:	82 30       	cpi	r24, 0x02	; 2
    6d8e:	19 f5       	brne	.+70     	; 0x6dd6 <_Z6perOutPih+0xf4e>
    6d90:	31 c0       	rjmp	.+98     	; 0x6df4 <_Z6perOutPih+0xf6c>
        case MLTPX_REP:
            break;
        case MLTPX_MUL:
						dv /= 100 ;
    6d92:	c8 01       	movw	r24, r16
    6d94:	b7 01       	movw	r22, r14
    6d96:	24 e6       	ldi	r18, 0x64	; 100
    6d98:	30 e0       	ldi	r19, 0x00	; 0
    6d9a:	40 e0       	ldi	r20, 0x00	; 0
    6d9c:	50 e0       	ldi	r21, 0x00	; 0
    6d9e:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6da2:	b9 01       	movw	r22, r18
    6da4:	ca 01       	movw	r24, r20
						dv *= *ptr ;
    6da6:	f6 01       	movw	r30, r12
    6da8:	ee 0f       	add	r30, r30
    6daa:	ff 1f       	adc	r31, r31
    6dac:	ee 0f       	add	r30, r30
    6dae:	ff 1f       	adc	r31, r31
    6db0:	e6 5e       	subi	r30, 0xE6	; 230
    6db2:	f8 4f       	sbci	r31, 0xF8	; 248
    6db4:	20 81       	ld	r18, Z
    6db6:	31 81       	ldd	r19, Z+1	; 0x01
    6db8:	42 81       	ldd	r20, Z+2	; 0x02
    6dba:	53 81       	ldd	r21, Z+3	; 0x03
    6dbc:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
            dv /= RESXl;
    6dc0:	20 e0       	ldi	r18, 0x00	; 0
    6dc2:	34 e0       	ldi	r19, 0x04	; 4
    6dc4:	40 e0       	ldi	r20, 0x00	; 0
    6dc6:	50 e0       	ldi	r21, 0x00	; 0
    6dc8:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6dcc:	c9 01       	movw	r24, r18
    6dce:	da 01       	movw	r26, r20
    6dd0:	7c 01       	movw	r14, r24
    6dd2:	8d 01       	movw	r16, r26
    6dd4:	0f c0       	rjmp	.+30     	; 0x6df4 <_Z6perOutPih+0xf6c>
            break;
        default:  // MLTPX_ADD
						dv += *ptr ;
    6dd6:	f6 01       	movw	r30, r12
    6dd8:	ee 0f       	add	r30, r30
    6dda:	ff 1f       	adc	r31, r31
    6ddc:	ee 0f       	add	r30, r30
    6dde:	ff 1f       	adc	r31, r31
    6de0:	e6 5e       	subi	r30, 0xE6	; 230
    6de2:	f8 4f       	sbci	r31, 0xF8	; 248
    6de4:	80 81       	ld	r24, Z
    6de6:	91 81       	ldd	r25, Z+1	; 0x01
    6de8:	a2 81       	ldd	r26, Z+2	; 0x02
    6dea:	b3 81       	ldd	r27, Z+3	; 0x03
    6dec:	e8 0e       	add	r14, r24
    6dee:	f9 1e       	adc	r15, r25
    6df0:	0a 1f       	adc	r16, r26
    6df2:	1b 1f       	adc	r17, r27
//				test = dv >> 24 ;
//				if ( ( test != -1) && ( test != 0 ) )
//				{
//					dv >>= 8 ;					
//				}
        *ptr = dv;
    6df4:	cc 0c       	add	r12, r12
    6df6:	dd 1c       	adc	r13, r13
    6df8:	cc 0c       	add	r12, r12
    6dfa:	dd 1c       	adc	r13, r13
    6dfc:	2a e1       	ldi	r18, 0x1A	; 26
    6dfe:	37 e0       	ldi	r19, 0x07	; 7
    6e00:	c2 0e       	add	r12, r18
    6e02:	d3 1e       	adc	r13, r19
    6e04:	d6 01       	movw	r26, r12
    6e06:	ed 92       	st	X+, r14
    6e08:	fd 92       	st	X+, r15
    6e0a:	0d 93       	st	X+, r16
    6e0c:	1c 93       	st	X, r17
    6e0e:	13 97       	sbiw	r26, 0x03	; 3
    p[1] = &g_model.trim[1] ;
    p[2] = &g_model.trim[2] ;
    p[3] = &g_model.trim[3] ;
#endif

    for(uint8_t i=0;i<MAX_MIXERS;i++)
    6e10:	b8 8d       	ldd	r27, Y+24	; 0x18
    6e12:	bf 5f       	subi	r27, 0xFF	; 255
    6e14:	b8 8f       	std	Y+24, r27	; 0x18
    6e16:	e9 89       	ldd	r30, Y+17	; 0x11
    6e18:	fa 89       	ldd	r31, Y+18	; 0x12
    6e1a:	34 96       	adiw	r30, 0x04	; 4
    6e1c:	fa 8b       	std	Y+18, r31	; 0x12
    6e1e:	e9 8b       	std	Y+17, r30	; 0x11
    6e20:	2f 85       	ldd	r18, Y+15	; 0x0f
    6e22:	38 89       	ldd	r19, Y+16	; 0x10
    6e24:	2e 5f       	subi	r18, 0xFE	; 254
    6e26:	3f 4f       	sbci	r19, 0xFF	; 255
    6e28:	38 8b       	std	Y+16, r19	; 0x10
    6e2a:	2f 87       	std	Y+15, r18	; 0x0f
    6e2c:	6d 85       	ldd	r22, Y+13	; 0x0d
    6e2e:	7e 85       	ldd	r23, Y+14	; 0x0e
    6e30:	6f 5f       	subi	r22, 0xFF	; 255
    6e32:	7f 4f       	sbci	r23, 0xFF	; 255
    6e34:	7e 87       	std	Y+14, r23	; 0x0e
    6e36:	6d 87       	std	Y+13, r22	; 0x0d
    6e38:	b0 32       	cpi	r27, 0x20	; 32
    6e3a:	09 f0       	breq	.+2      	; 0x6e3e <_Z6perOutPih+0xfb6>
    6e3c:	50 cc       	rjmp	.-1888   	; 0x66de <_Z6perOutPih+0x856>
    //1= 00,08
    //2= 24,32,40
    //3= 56,64,72,80
    {
        uint8_t tmr10ms ;
        tmr10ms = g_blinkTmr10ms ;	// Only need low 8 bits
    6e3e:	10 91 79 0d 	lds	r17, 0x0D79

        if(mixWarning & 1) if(((tmr10ms)==  0)) audioDefevent(AU_MIX_WARNING_1);
    6e42:	09 8d       	ldd	r16, Y+25	; 0x19
    6e44:	00 ff       	sbrs	r16, 0
    6e46:	05 c0       	rjmp	.+10     	; 0x6e52 <_Z6perOutPih+0xfca>
    6e48:	11 23       	and	r17, r17
    6e4a:	19 f4       	brne	.+6      	; 0x6e52 <_Z6perOutPih+0xfca>
    6e4c:	8e e1       	ldi	r24, 0x1E	; 30
    6e4e:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
        if(mixWarning & 2) if(((tmr10ms)== 64) || ((tmr10ms)== 72)) audioDefevent(AU_MIX_WARNING_2);
    6e52:	01 ff       	sbrs	r16, 1
    6e54:	07 c0       	rjmp	.+14     	; 0x6e64 <_Z6perOutPih+0xfdc>
    6e56:	10 34       	cpi	r17, 0x40	; 64
    6e58:	11 f0       	breq	.+4      	; 0x6e5e <_Z6perOutPih+0xfd6>
    6e5a:	18 34       	cpi	r17, 0x48	; 72
    6e5c:	19 f4       	brne	.+6      	; 0x6e64 <_Z6perOutPih+0xfdc>
    6e5e:	8f e1       	ldi	r24, 0x1F	; 31
    6e60:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
        if(mixWarning & 4) if(((tmr10ms)==128) || ((tmr10ms)==136) || ((tmr10ms)==144)) audioDefevent(AU_MIX_WARNING_3);        
    6e64:	02 ff       	sbrs	r16, 2
    6e66:	09 c0       	rjmp	.+18     	; 0x6e7a <_Z6perOutPih+0xff2>
    6e68:	10 38       	cpi	r17, 0x80	; 128
    6e6a:	21 f0       	breq	.+8      	; 0x6e74 <_Z6perOutPih+0xfec>
    6e6c:	18 38       	cpi	r17, 0x88	; 136
    6e6e:	11 f0       	breq	.+4      	; 0x6e74 <_Z6perOutPih+0xfec>
    6e70:	10 39       	cpi	r17, 0x90	; 144
    6e72:	19 f4       	brne	.+6      	; 0x6e7a <_Z6perOutPih+0xff2>
    6e74:	80 e2       	ldi	r24, 0x20	; 32
    6e76:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>


    }

		ThrottleStickyOn = 0 ;
    6e7a:	10 92 b1 06 	sts	0x06B1, r1
    6e7e:	9a e1       	ldi	r25, 0x1A	; 26
    6e80:	49 2e       	mov	r4, r25
    6e82:	97 e0       	ldi	r25, 0x07	; 7
    6e84:	59 2e       	mov	r5, r25
    6e86:	80 e8       	ldi	r24, 0x80	; 128
    6e88:	98 e0       	ldi	r25, 0x08	; 8
    6e8a:	9c 8b       	std	Y+20, r25	; 0x14
    6e8c:	8b 8b       	std	Y+19, r24	; 0x13
    6e8e:	1e 8a       	std	Y+22, r1	; 0x16
    6e90:	1d 8a       	std	Y+21, r1	; 0x15
    6e92:	22 24       	eor	r2, r2
    6e94:	33 24       	eor	r3, r3
						l_fade = 0 ;
					}
					l_fade += ( q / 100 ) * Fade.fadeScale[CurrentPhase] ;
					Fade.fade[i] = l_fade ;
			
					if ( ( att & FADE_LAST ) == 0 )
    6e96:	ac a1       	ldd	r26, Y+36	; 0x24
    6e98:	bd a1       	ldd	r27, Y+37	; 0x25
    6e9a:	a0 74       	andi	r26, 0x40	; 64
    6e9c:	b0 70       	andi	r27, 0x00	; 0
    6e9e:	bb a3       	std	Y+35, r27	; 0x23
    6ea0:	aa a3       	std	Y+34, r26	; 0x22
        if(mixWarning & 4) if(((tmr10ms)==128) || ((tmr10ms)==136) || ((tmr10ms)==144)) audioDefevent(AU_MIX_WARNING_3);        


    }

		ThrottleStickyOn = 0 ;
    6ea2:	bd 89       	ldd	r27, Y+21	; 0x15
    6ea4:	bf 8b       	std	Y+23, r27	; 0x17
        // later we multiply by the limit (up to 100) and then we need to normalize
        // at the end chans[i] = chans[i]/100 =>  -1024..1024
        // interpolate value with min/max so we get smooth motion from center to stop
        // this limits based on v original values and min=-1024, max=1024  RESX=1024

        int32_t q = chans[i];// + (int32_t)g_model.limitData[i].offset*100; // offset before limit
    6ea6:	f2 01       	movw	r30, r4
    6ea8:	a0 80       	ld	r10, Z
    6eaa:	b1 80       	ldd	r11, Z+1	; 0x01
    6eac:	c2 80       	ldd	r12, Z+2	; 0x02
    6eae:	d3 80       	ldd	r13, Z+3	; 0x03

				if ( Fade.fadePhases )
    6eb0:	80 91 71 08 	lds	r24, 0x0871
    6eb4:	88 23       	and	r24, r24
    6eb6:	09 f4       	brne	.+2      	; 0x6eba <_Z6perOutPih+0x1032>
    6eb8:	46 c0       	rjmp	.+140    	; 0x6f46 <_Z6perOutPih+0x10be>
				{
					int32_t l_fade = Fade.fade[i] ;
    6eba:	ab 89       	ldd	r26, Y+19	; 0x13
    6ebc:	bc 89       	ldd	r27, Y+20	; 0x14
    6ebe:	6d 90       	ld	r6, X+
    6ec0:	7d 90       	ld	r7, X+
    6ec2:	8d 90       	ld	r8, X+
    6ec4:	9c 90       	ld	r9, X
					if ( att & FADE_FIRST )
    6ec6:	e9 85       	ldd	r30, Y+9	; 0x09
    6ec8:	fa 85       	ldd	r31, Y+10	; 0x0a
    6eca:	ef 2b       	or	r30, r31
    6ecc:	19 f0       	breq	.+6      	; 0x6ed4 <_Z6perOutPih+0x104c>
    6ece:	66 24       	eor	r6, r6
    6ed0:	77 24       	eor	r7, r7
    6ed2:	43 01       	movw	r8, r6
					{
						l_fade = 0 ;
					}
					l_fade += ( q / 100 ) * Fade.fadeScale[CurrentPhase] ;
    6ed4:	e0 91 70 08 	lds	r30, 0x0870
    6ed8:	f0 e0       	ldi	r31, 0x00	; 0
    6eda:	ee 0f       	add	r30, r30
    6edc:	ff 1f       	adc	r31, r31
    6ede:	ef 58       	subi	r30, 0x8F	; 143
    6ee0:	f7 4f       	sbci	r31, 0xF7	; 247
    6ee2:	e5 80       	ldd	r14, Z+5	; 0x05
    6ee4:	f6 80       	ldd	r15, Z+6	; 0x06
    6ee6:	00 e0       	ldi	r16, 0x00	; 0
    6ee8:	10 e0       	ldi	r17, 0x00	; 0
    6eea:	c6 01       	movw	r24, r12
    6eec:	b5 01       	movw	r22, r10
    6eee:	24 e6       	ldi	r18, 0x64	; 100
    6ef0:	30 e0       	ldi	r19, 0x00	; 0
    6ef2:	40 e0       	ldi	r20, 0x00	; 0
    6ef4:	50 e0       	ldi	r21, 0x00	; 0
    6ef6:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6efa:	c8 01       	movw	r24, r16
    6efc:	b7 01       	movw	r22, r14
    6efe:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    6f02:	66 0d       	add	r22, r6
    6f04:	77 1d       	adc	r23, r7
    6f06:	88 1d       	adc	r24, r8
    6f08:	99 1d       	adc	r25, r9
					Fade.fade[i] = l_fade ;
    6f0a:	ab 89       	ldd	r26, Y+19	; 0x13
    6f0c:	bc 89       	ldd	r27, Y+20	; 0x14
    6f0e:	6d 93       	st	X+, r22
    6f10:	7d 93       	st	X+, r23
    6f12:	8d 93       	st	X+, r24
    6f14:	9c 93       	st	X, r25
    6f16:	13 97       	sbiw	r26, 0x03	; 3
			
					if ( ( att & FADE_LAST ) == 0 )
    6f18:	ea a1       	ldd	r30, Y+34	; 0x22
    6f1a:	fb a1       	ldd	r31, Y+35	; 0x23
    6f1c:	ef 2b       	or	r30, r31
    6f1e:	09 f4       	brne	.+2      	; 0x6f22 <_Z6perOutPih+0x109a>
    6f20:	25 c1       	rjmp	.+586    	; 0x716c <_Z6perOutPih+0x12e4>
					{
						continue ;
					}
					l_fade /= Fade.fadeWeight ;
					q = l_fade * 100 ;
    6f22:	20 91 74 08 	lds	r18, 0x0874
    6f26:	30 91 75 08 	lds	r19, 0x0875
    6f2a:	40 e0       	ldi	r20, 0x00	; 0
    6f2c:	50 e0       	ldi	r21, 0x00	; 0
    6f2e:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6f32:	ca 01       	movw	r24, r20
    6f34:	b9 01       	movw	r22, r18
    6f36:	24 e6       	ldi	r18, 0x64	; 100
    6f38:	30 e0       	ldi	r19, 0x00	; 0
    6f3a:	40 e0       	ldi	r20, 0x00	; 0
    6f3c:	50 e0       	ldi	r21, 0x00	; 0
    6f3e:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    6f42:	5b 01       	movw	r10, r22
    6f44:	6c 01       	movw	r12, r24
				}
    	  chans[i] = q / 100 ; // chans back to -1024..1024
    6f46:	c6 01       	movw	r24, r12
    6f48:	b5 01       	movw	r22, r10
    6f4a:	24 e6       	ldi	r18, 0x64	; 100
    6f4c:	30 e0       	ldi	r19, 0x00	; 0
    6f4e:	40 e0       	ldi	r20, 0x00	; 0
    6f50:	50 e0       	ldi	r21, 0x00	; 0
    6f52:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    6f56:	d2 01       	movw	r26, r4
    6f58:	2c 93       	st	X, r18
    6f5a:	11 96       	adiw	r26, 0x01	; 1
    6f5c:	3c 93       	st	X, r19
    6f5e:	11 97       	sbiw	r26, 0x01	; 1
    6f60:	12 96       	adiw	r26, 0x02	; 2
    6f62:	4c 93       	st	X, r20
    6f64:	12 97       	sbiw	r26, 0x02	; 2
    6f66:	13 96       	adiw	r26, 0x03	; 3
    6f68:	5c 93       	st	X, r21
        
				ex_chans[i] = chans[i]; //for getswitch
    6f6a:	f1 01       	movw	r30, r2
    6f6c:	ec 53       	subi	r30, 0x3C	; 60
    6f6e:	f9 4f       	sbci	r31, 0xF9	; 249
    6f70:	c9 01       	movw	r24, r18
    6f72:	20 83       	st	Z, r18
    6f74:	91 83       	std	Z+1, r25	; 0x01
        
				LimitData *limit = limitaddress( i ) ;
    6f76:	8f 89       	ldd	r24, Y+23	; 0x17
    6f78:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_Z12limitaddressh>
    6f7c:	3c 01       	movw	r6, r24
				int16_t ofs = limit->offset;
    6f7e:	fc 01       	movw	r30, r24
    6f80:	43 81       	ldd	r20, Z+3	; 0x03
    6f82:	54 81       	ldd	r21, Z+4	; 0x04
				int16_t xofs = ofs ;
				if ( xofs > g_model.sub_trim_limit )
    6f84:	80 91 5a 04 	lds	r24, 0x045A
    6f88:	28 2f       	mov	r18, r24
    6f8a:	30 e0       	ldi	r19, 0x00	; 0
    6f8c:	24 17       	cp	r18, r20
    6f8e:	35 07       	cpc	r19, r21
    6f90:	3c f0       	brlt	.+14     	; 0x6fa0 <_Z6perOutPih+0x1118>
				{
					xofs = g_model.sub_trim_limit ;
				}
				else if ( xofs < -g_model.sub_trim_limit )
    6f92:	30 95       	com	r19
    6f94:	21 95       	neg	r18
    6f96:	3f 4f       	sbci	r19, 0xFF	; 255
    6f98:	24 17       	cp	r18, r20
    6f9a:	35 07       	cpc	r19, r21
    6f9c:	0c f4       	brge	.+2      	; 0x6fa0 <_Z6perOutPih+0x1118>
    6f9e:	9a 01       	movw	r18, r20
				{
					xofs = -g_model.sub_trim_limit ;
				}
        int16_t lim_p = 10*(limit->max+100) + xofs ;
    6fa0:	d3 01       	movw	r26, r6
    6fa2:	11 96       	adiw	r26, 0x01	; 1
    6fa4:	8c 91       	ld	r24, X
    6fa6:	ba e0       	ldi	r27, 0x0A	; 10
    6fa8:	8b 02       	muls	r24, r27
    6faa:	70 01       	movw	r14, r0
    6fac:	11 24       	eor	r1, r1
    6fae:	e8 ee       	ldi	r30, 0xE8	; 232
    6fb0:	f3 e0       	ldi	r31, 0x03	; 3
    6fb2:	ee 0e       	add	r14, r30
    6fb4:	ff 1e       	adc	r15, r31
        int16_t lim_n = 10*(limit->min-100) + xofs ; //multiply by 10 to get same range as ofs (-1000..1000)
    6fb6:	d3 01       	movw	r26, r6
    6fb8:	8c 91       	ld	r24, X
    6fba:	ba e0       	ldi	r27, 0x0A	; 10
    6fbc:	8b 02       	muls	r24, r27
    6fbe:	c0 01       	movw	r24, r0
    6fc0:	11 24       	eor	r1, r1
    6fc2:	88 5e       	subi	r24, 0xE8	; 232
    6fc4:	93 40       	sbci	r25, 0x03	; 3
    6fc6:	82 0f       	add	r24, r18
    6fc8:	93 1f       	adc	r25, r19
    6fca:	e2 0e       	add	r14, r18
    6fcc:	f3 1e       	adc	r15, r19
    6fce:	e3 ee       	ldi	r30, 0xE3	; 227
    6fd0:	ee 16       	cp	r14, r30
    6fd2:	e4 e0       	ldi	r30, 0x04	; 4
    6fd4:	fe 06       	cpc	r15, r30
    6fd6:	24 f0       	brlt	.+8      	; 0x6fe0 <_Z6perOutPih+0x1158>
    6fd8:	02 ee       	ldi	r16, 0xE2	; 226
    6fda:	e0 2e       	mov	r14, r16
    6fdc:	04 e0       	ldi	r16, 0x04	; 4
    6fde:	f0 2e       	mov	r15, r16
    6fe0:	4c 01       	movw	r8, r24
    6fe2:	fb ef       	ldi	r31, 0xFB	; 251
    6fe4:	8e 31       	cpi	r24, 0x1E	; 30
    6fe6:	9f 07       	cpc	r25, r31
    6fe8:	24 f4       	brge	.+8      	; 0x6ff2 <_Z6perOutPih+0x116a>
    6fea:	1e e1       	ldi	r17, 0x1E	; 30
    6fec:	81 2e       	mov	r8, r17
    6fee:	1b ef       	ldi	r17, 0xFB	; 251
    6ff0:	91 2e       	mov	r9, r17
    6ff2:	c7 01       	movw	r24, r14
    6ff4:	3e 2d       	mov	r19, r14
    6ff6:	29 2f       	mov	r18, r25
    6ff8:	4e 15       	cp	r20, r14
    6ffa:	5f 05       	cpc	r21, r15
    6ffc:	1c f4       	brge	.+6      	; 0x7004 <_Z6perOutPih+0x117c>
    6ffe:	ca 01       	movw	r24, r20
    7000:	34 2f       	mov	r19, r20
    7002:	29 2f       	mov	r18, r25
    7004:	83 2f       	mov	r24, r19
    7006:	92 2f       	mov	r25, r18
    7008:	8c 01       	movw	r16, r24
    700a:	08 15       	cp	r16, r8
    700c:	19 05       	cpc	r17, r9
    700e:	0c f4       	brge	.+2      	; 0x7012 <_Z6perOutPih+0x118a>
    7010:	84 01       	movw	r16, r8
					lim_n = -1250 ;
				}
				if(ofs>lim_p) ofs = lim_p;
        if(ofs<lim_n) ofs = lim_n;

        if(q)
    7012:	a1 14       	cp	r10, r1
    7014:	b1 04       	cpc	r11, r1
    7016:	c1 04       	cpc	r12, r1
    7018:	d1 04       	cpc	r13, r1
    701a:	e1 f0       	breq	.+56     	; 0x7054 <_Z6perOutPih+0x11cc>
				{
					int16_t temp = (q<0) ? ((int16_t)ofs-lim_n) : ((int16_t)lim_p-ofs) ;
    701c:	d7 fe       	sbrs	r13, 7
    701e:	04 c0       	rjmp	.+8      	; 0x7028 <_Z6perOutPih+0x11a0>
    7020:	98 01       	movw	r18, r16
    7022:	28 19       	sub	r18, r8
    7024:	39 09       	sbc	r19, r9
    7026:	03 c0       	rjmp	.+6      	; 0x702e <_Z6perOutPih+0x11a6>
    7028:	97 01       	movw	r18, r14
    702a:	20 1b       	sub	r18, r16
    702c:	31 0b       	sbc	r19, r17
          q = ( q * temp ) / 100000 ; //div by 100000 -> output = -1024..1024
    702e:	b9 01       	movw	r22, r18
    7030:	88 27       	eor	r24, r24
    7032:	77 fd       	sbrc	r23, 7
    7034:	80 95       	com	r24
    7036:	98 2f       	mov	r25, r24
    7038:	a6 01       	movw	r20, r12
    703a:	95 01       	movw	r18, r10
    703c:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    7040:	20 ea       	ldi	r18, 0xA0	; 160
    7042:	36 e8       	ldi	r19, 0x86	; 134
    7044:	41 e0       	ldi	r20, 0x01	; 1
    7046:	50 e0       	ldi	r21, 0x00	; 0
    7048:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    704c:	c9 01       	movw	r24, r18
    704e:	da 01       	movw	r26, r20
    7050:	5c 01       	movw	r10, r24
    7052:	6d 01       	movw	r12, r26
				}
        
				int16_t result ;
				result = calc1000toRESX(ofs);
    7054:	c8 01       	movw	r24, r16
    7056:	0e 94 8e 11 	call	0x231c	; 0x231c <_Z14calc1000toRESXi>
    705a:	8c 01       	movw	r16, r24
  			result += q ; // we convert value to a 16bit value
    705c:	0a 0d       	add	r16, r10
    705e:	1b 1d       	adc	r17, r11
				
        lim_p = calc1000toRESX(lim_p);
    7060:	c7 01       	movw	r24, r14
    7062:	0e 94 8e 11 	call	0x231c	; 0x231c <_Z14calc1000toRESXi>
    7066:	ac 01       	movw	r20, r24
    7068:	40 17       	cp	r20, r16
    706a:	51 07       	cpc	r21, r17
    706c:	0c f4       	brge	.+2      	; 0x7070 <_Z6perOutPih+0x11e8>
    706e:	8a 01       	movw	r16, r20
        if(result>lim_p) result = lim_p;
        lim_n = calc1000toRESX(lim_n);
    7070:	c4 01       	movw	r24, r8
    7072:	0e 94 8e 11 	call	0x231c	; 0x231c <_Z14calc1000toRESXi>
    7076:	78 01       	movw	r14, r16
    7078:	08 17       	cp	r16, r24
    707a:	19 07       	cpc	r17, r25
    707c:	0c f4       	brge	.+2      	; 0x7080 <_Z6perOutPih+0x11f8>
    707e:	7c 01       	movw	r14, r24
        if(result<lim_n) result = lim_n;

        if(limit->reverse) result = -result ;// finally do the reverse.
    7080:	d3 01       	movw	r26, r6
    7082:	12 96       	adiw	r26, 0x02	; 2
    7084:	8c 91       	ld	r24, X
    7086:	88 23       	and	r24, r24
    7088:	21 f0       	breq	.+8      	; 0x7092 <_Z6perOutPih+0x120a>
    708a:	f0 94       	com	r15
    708c:	e1 94       	neg	r14
    708e:	f1 08       	sbc	r15, r1
    7090:	f3 94       	inc	r15

				{
					uint8_t numSafety = 16 - g_model.numVoice ;
					if ( i < numSafety )
    7092:	80 91 26 04 	lds	r24, 0x0426
    7096:	8f 71       	andi	r24, 0x1F	; 31
    7098:	b0 e1       	ldi	r27, 0x10	; 16
    709a:	b8 1b       	sub	r27, r24
    709c:	ef 89       	ldd	r30, Y+23	; 0x17
    709e:	eb 17       	cp	r30, r27
    70a0:	08 f0       	brcs	.+2      	; 0x70a4 <_Z6perOutPih+0x121c>
    70a2:	5c c0       	rjmp	.+184    	; 0x715c <_Z6perOutPih+0x12d4>
					{
        		if(g_model.safetySw[i].opt.ss.swtch)  //if safety sw available for channel check and replace val if needed
    70a4:	0d 89       	ldd	r16, Y+21	; 0x15
    70a6:	1e 89       	ldd	r17, Y+22	; 0x16
    70a8:	00 0f       	add	r16, r16
    70aa:	11 1f       	adc	r17, r17
    70ac:	09 5d       	subi	r16, 0xD9	; 217
    70ae:	1b 4f       	sbci	r17, 0xFB	; 251
    70b0:	d8 01       	movw	r26, r16
    70b2:	9c 91       	ld	r25, X
    70b4:	89 2f       	mov	r24, r25
    70b6:	88 0f       	add	r24, r24
    70b8:	88 0f       	add	r24, r24
    70ba:	85 95       	asr	r24
    70bc:	85 95       	asr	r24
    70be:	09 f4       	brne	.+2      	; 0x70c2 <_Z6perOutPih+0x123a>
    70c0:	4d c0       	rjmp	.+154    	; 0x715c <_Z6perOutPih+0x12d4>
						{
							if ( ( g_model.safetySw[i].opt.ss.mode != 1 ) && ( g_model.safetySw[i].opt.ss.mode != 2 ) )	// And not used as an alarm
    70c2:	92 95       	swap	r25
    70c4:	96 95       	lsr	r25
    70c6:	96 95       	lsr	r25
    70c8:	93 70       	andi	r25, 0x03	; 3
    70ca:	9d 5f       	subi	r25, 0xFD	; 253
    70cc:	93 70       	andi	r25, 0x03	; 3
    70ce:	92 30       	cpi	r25, 0x02	; 2
    70d0:	08 f4       	brcc	.+2      	; 0x70d4 <_Z6perOutPih+0x124c>
    70d2:	44 c0       	rjmp	.+136    	; 0x715c <_Z6perOutPih+0x12d4>
							{
								static uint8_t sticky = 0 ;
								uint8_t applySafety = 0 ;
								int8_t sSwitch = g_model.safetySw[i].opt.ss.swtch ;
								
								if(getSwitch( sSwitch,0))
    70d4:	60 e0       	ldi	r22, 0x00	; 0
    70d6:	40 e0       	ldi	r20, 0x00	; 0
    70d8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    70dc:	28 2f       	mov	r18, r24
								{
									applySafety = 1 ;
								}

								if ( g_model.safetySw[i].opt.ss.mode == 3 )
    70de:	f8 01       	movw	r30, r16
    70e0:	80 81       	ld	r24, Z
    70e2:	82 95       	swap	r24
    70e4:	86 95       	lsr	r24
    70e6:	86 95       	lsr	r24
    70e8:	83 70       	andi	r24, 0x03	; 3
    70ea:	83 30       	cpi	r24, 0x03	; 3
    70ec:	71 f5       	brne	.+92     	; 0x714a <_Z6perOutPih+0x12c2>
								{
									// Special case, sticky throttle
									if( applySafety )
    70ee:	22 23       	and	r18, r18
    70f0:	19 f0       	breq	.+6      	; 0x70f8 <_Z6perOutPih+0x1270>
									{
										sticky = 0 ;
    70f2:	10 92 cc 08 	sts	0x08CC, r1
    70f6:	22 c0       	rjmp	.+68     	; 0x713c <_Z6perOutPih+0x12b4>
									}
#ifdef FIX_MODE
									else
									{
										uint8_t throttleOK = 0 ;
										if ( g_model.throttleIdle )
    70f8:	80 91 1b 05 	lds	r24, 0x051B
    70fc:	80 76       	andi	r24, 0x60	; 96
    70fe:	41 f0       	breq	.+16     	; 0x7110 <_Z6perOutPih+0x1288>
										{
											if ( abs( calibratedStick[2] ) < 20 )
    7100:	80 91 ba 06 	lds	r24, 0x06BA
    7104:	90 91 bb 06 	lds	r25, 0x06BB
    7108:	43 96       	adiw	r24, 0x13	; 19
    710a:	87 97       	sbiw	r24, 0x27	; 39
    710c:	40 f0       	brcs	.+16     	; 0x711e <_Z6perOutPih+0x1296>
    710e:	16 c0       	rjmp	.+44     	; 0x713c <_Z6perOutPih+0x12b4>
												throttleOK = 1 ;
											}
										}
										else
										{
  										if(calibratedStick[2] < -1004)
    7110:	80 91 ba 06 	lds	r24, 0x06BA
    7114:	90 91 bb 06 	lds	r25, 0x06BB
    7118:	84 51       	subi	r24, 0x14	; 20
    711a:	9c 4f       	sbci	r25, 0xFC	; 252
    711c:	7c f4       	brge	.+30     	; 0x713c <_Z6perOutPih+0x12b4>
												throttleOK = 1 ;
  										}
										}
										if ( throttleOK )
										{
											if ( trainerThrottleValid )
    711e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7120:	33 23       	and	r19, r19
    7122:	49 f0       	breq	.+18     	; 0x7136 <_Z6perOutPih+0x12ae>
											{
												if ( trainerThrottleValue < -1004 )
    7124:	6b 8d       	ldd	r22, Y+27	; 0x1b
    7126:	7c 8d       	ldd	r23, Y+28	; 0x1c
    7128:	64 51       	subi	r22, 0x14	; 20
    712a:	7c 4f       	sbci	r23, 0xFC	; 252
    712c:	3c f4       	brge	.+14     	; 0x713c <_Z6perOutPih+0x12b4>
												{
													sticky = 1 ;
    712e:	91 e0       	ldi	r25, 0x01	; 1
    7130:	90 93 cc 08 	sts	0x08CC, r25
    7134:	03 c0       	rjmp	.+6      	; 0x713c <_Z6perOutPih+0x12b4>
												}
											}	
											else
											{
												sticky = 1 ;
    7136:	a1 e0       	ldi	r26, 0x01	; 1
    7138:	a0 93 cc 08 	sts	0x08CC, r26
										{
											sticky = 1 ;
										}
									}
#endif
									if ( sticky == 0 )
    713c:	80 91 cc 08 	lds	r24, 0x08CC
    7140:	88 23       	and	r24, r24
    7142:	09 f4       	brne	.+2      	; 0x7146 <_Z6perOutPih+0x12be>
    7144:	21 e0       	ldi	r18, 0x01	; 1
									{
										applySafety = 1 ;
									}
									ThrottleStickyOn = applySafety ;
    7146:	20 93 b1 06 	sts	0x06B1, r18
								}
								if ( applySafety ) result = calc100toRESX(g_model.safetySw[i].opt.ss.val) ;
    714a:	22 23       	and	r18, r18
    714c:	39 f0       	breq	.+14     	; 0x715c <_Z6perOutPih+0x12d4>
    714e:	f1 01       	movw	r30, r2
    7150:	e8 5d       	subi	r30, 0xD8	; 216
    7152:	fb 4f       	sbci	r31, 0xFB	; 251
    7154:	80 81       	ld	r24, Z
    7156:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_Z13calc100toRESXa>
    715a:	7c 01       	movw	r14, r24
							}
						}
					}
				}
        cli();
    715c:	f8 94       	cli
        chanOut[i ] = result ; //copy consistent word to int-level
    715e:	e8 a1       	ldd	r30, Y+32	; 0x20
    7160:	f9 a1       	ldd	r31, Y+33	; 0x21
    7162:	e2 0d       	add	r30, r2
    7164:	f3 1d       	adc	r31, r3
    7166:	f1 82       	std	Z+1, r15	; 0x01
    7168:	e0 82       	st	Z, r14
        sei();
    716a:	78 94       	sei
    716c:	ed 89       	ldd	r30, Y+21	; 0x15
    716e:	fe 89       	ldd	r31, Y+22	; 0x16
    7170:	31 96       	adiw	r30, 0x01	; 1
    7172:	fe 8b       	std	Y+22, r31	; 0x16
    7174:	ed 8b       	std	Y+21, r30	; 0x15
    7176:	24 e0       	ldi	r18, 0x04	; 4
    7178:	30 e0       	ldi	r19, 0x00	; 0
    717a:	42 0e       	add	r4, r18
    717c:	53 1e       	adc	r5, r19
    717e:	6b 89       	ldd	r22, Y+19	; 0x13
    7180:	7c 89       	ldd	r23, Y+20	; 0x14
    7182:	6c 5f       	subi	r22, 0xFC	; 252
    7184:	7f 4f       	sbci	r23, 0xFF	; 255
    7186:	7c 8b       	std	Y+20, r23	; 0x14
    7188:	6b 8b       	std	Y+19, r22	; 0x13
    718a:	82 e0       	ldi	r24, 0x02	; 2
    718c:	90 e0       	ldi	r25, 0x00	; 0
    718e:	28 0e       	add	r2, r24
    7190:	39 1e       	adc	r3, r25

    }

		ThrottleStickyOn = 0 ;
    //========== LIMITS ===============
    for(uint8_t i=0;i<NUM_CHNOUT;i++)
    7192:	70 97       	sbiw	r30, 0x10	; 16
    7194:	09 f0       	breq	.+2      	; 0x7198 <_Z6perOutPih+0x1310>
    7196:	85 ce       	rjmp	.-758    	; 0x6ea2 <_Z6perOutPih+0x101a>
				}
        cli();
        chanOut[i ] = result ; //copy consistent word to int-level
        sei();
    }
}
    7198:	af 96       	adiw	r28, 0x2f	; 47
    719a:	0f b6       	in	r0, 0x3f	; 63
    719c:	f8 94       	cli
    719e:	de bf       	out	0x3e, r29	; 62
    71a0:	0f be       	out	0x3f, r0	; 63
    71a2:	cd bf       	out	0x3d, r28	; 61
    71a4:	cf 91       	pop	r28
    71a6:	df 91       	pop	r29
    71a8:	1f 91       	pop	r17
    71aa:	0f 91       	pop	r16
    71ac:	ff 90       	pop	r15
    71ae:	ef 90       	pop	r14
    71b0:	df 90       	pop	r13
    71b2:	cf 90       	pop	r12
    71b4:	bf 90       	pop	r11
    71b6:	af 90       	pop	r10
    71b8:	9f 90       	pop	r9
    71ba:	8f 90       	pop	r8
    71bc:	7f 90       	pop	r7
    71be:	6f 90       	pop	r6
    71c0:	5f 90       	pop	r5
    71c2:	4f 90       	pop	r4
    71c4:	3f 90       	pop	r3
    71c6:	2f 90       	pop	r2
    71c8:	08 95       	ret

000071ca <_Z11perOutPhasePih>:
		}
  }
}


void perOutPhase( int16_t *chanOut, uint8_t att ) 
    71ca:	af 92       	push	r10
    71cc:	bf 92       	push	r11
    71ce:	cf 92       	push	r12
    71d0:	df 92       	push	r13
    71d2:	ef 92       	push	r14
    71d4:	ff 92       	push	r15
    71d6:	0f 93       	push	r16
    71d8:	1f 93       	push	r17
    71da:	cf 93       	push	r28
    71dc:	df 93       	push	r29
    71de:	5c 01       	movw	r10, r24
    71e0:	16 2f       	mov	r17, r22
{
	static uint8_t lastPhase ;
	uint8_t thisPhase ;
	struct t_fade *pFade ;
	pFade = &Fade ;
	FORCE_INDIRECT( pFade ) ;
    71e2:	c1 e7       	ldi	r28, 0x71	; 113
    71e4:	d8 e0       	ldi	r29, 0x08	; 8
	
	thisPhase = getFlightPhase() ;
    71e6:	0e 94 30 16 	call	0x2c60	; 0x2c60 <_Z14getFlightPhasev>
    71ea:	c8 2e       	mov	r12, r24
	if ( thisPhase != lastPhase )
    71ec:	20 91 cd 08 	lds	r18, 0x08CD
    71f0:	82 17       	cp	r24, r18
    71f2:	09 f4       	brne	.+2      	; 0x71f6 <_Z11perOutPhasePih+0x2c>
    71f4:	49 c0       	rjmp	.+146    	; 0x7288 <_Z11perOutPhasePih+0xbe>
	{
		uint8_t time1 = 0 ;
		uint8_t time2 ;
		
		if ( lastPhase )
    71f6:	22 23       	and	r18, r18
    71f8:	11 f4       	brne	.+4      	; 0x71fe <_Z11perOutPhasePih+0x34>
    71fa:	60 e0       	ldi	r22, 0x00	; 0
    71fc:	12 c0       	rjmp	.+36     	; 0x7222 <_Z11perOutPhasePih+0x58>
		{
      time1 = g_model.phaseData[(uint8_t)(lastPhase-1)].fadeOut ;
    71fe:	82 2f       	mov	r24, r18
    7200:	81 50       	subi	r24, 0x01	; 1
    7202:	90 e0       	ldi	r25, 0x00	; 0
    7204:	fc 01       	movw	r30, r24
    7206:	33 e0       	ldi	r19, 0x03	; 3
    7208:	ee 0f       	add	r30, r30
    720a:	ff 1f       	adc	r31, r31
    720c:	3a 95       	dec	r19
    720e:	e1 f7       	brne	.-8      	; 0x7208 <_Z11perOutPhasePih+0x3e>
    7210:	88 0f       	add	r24, r24
    7212:	99 1f       	adc	r25, r25
    7214:	e8 0f       	add	r30, r24
    7216:	f9 1f       	adc	r31, r25
    7218:	e8 58       	subi	r30, 0x88	; 136
    721a:	fb 4f       	sbci	r31, 0xFB	; 251
    721c:	60 81       	ld	r22, Z
    721e:	62 95       	swap	r22
    7220:	6f 70       	andi	r22, 0x0F	; 15
		}
		if ( thisPhase )
    7222:	cc 20       	and	r12, r12
    7224:	a1 f0       	breq	.+40     	; 0x724e <_Z11perOutPhasePih+0x84>
    7226:	8c 2d       	mov	r24, r12
    7228:	81 50       	subi	r24, 0x01	; 1
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	fc 01       	movw	r30, r24
    722e:	b3 e0       	ldi	r27, 0x03	; 3
    7230:	ee 0f       	add	r30, r30
    7232:	ff 1f       	adc	r31, r31
    7234:	ba 95       	dec	r27
    7236:	e1 f7       	brne	.-8      	; 0x7230 <_Z11perOutPhasePih+0x66>
    7238:	88 0f       	add	r24, r24
    723a:	99 1f       	adc	r25, r25
    723c:	e8 0f       	add	r30, r24
    723e:	f9 1f       	adc	r31, r25
    7240:	e8 58       	subi	r30, 0x88	; 136
    7242:	fb 4f       	sbci	r31, 0xFB	; 251
    7244:	e0 81       	ld	r30, Z
    7246:	ef 70       	andi	r30, 0x0F	; 15
    7248:	6e 17       	cp	r22, r30
    724a:	08 f4       	brcc	.+2      	; 0x724e <_Z11perOutPhasePih+0x84>
    724c:	6e 2f       	mov	r22, r30
			if ( time2 > time1 )
			{
        time1 = time2 ;
			}
		}
		if ( time1 )
    724e:	66 23       	and	r22, r22
    7250:	c9 f0       	breq	.+50     	; 0x7284 <_Z11perOutPhasePih+0xba>
		{
			pFade->fadeRate = (25600 / 50) / time1 ;
    7252:	80 e0       	ldi	r24, 0x00	; 0
    7254:	92 e0       	ldi	r25, 0x02	; 2
    7256:	70 e0       	ldi	r23, 0x00	; 0
    7258:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    725c:	7a 83       	std	Y+2, r23	; 0x02
    725e:	69 83       	std	Y+1, r22	; 0x01
			pFade->fadePhases |= ( 1 << lastPhase ) | ( 1 << thisPhase ) ;
    7260:	81 e0       	ldi	r24, 0x01	; 1
    7262:	90 e0       	ldi	r25, 0x00	; 0
    7264:	ac 01       	movw	r20, r24
    7266:	02 c0       	rjmp	.+4      	; 0x726c <_Z11perOutPhasePih+0xa2>
    7268:	44 0f       	add	r20, r20
    726a:	55 1f       	adc	r21, r21
    726c:	2a 95       	dec	r18
    726e:	e2 f7       	brpl	.-8      	; 0x7268 <_Z11perOutPhasePih+0x9e>
    7270:	28 81       	ld	r18, Y
    7272:	24 2b       	or	r18, r20
    7274:	0c 2c       	mov	r0, r12
    7276:	02 c0       	rjmp	.+4      	; 0x727c <_Z11perOutPhasePih+0xb2>
    7278:	88 0f       	add	r24, r24
    727a:	99 1f       	adc	r25, r25
    727c:	0a 94       	dec	r0
    727e:	e2 f7       	brpl	.-8      	; 0x7278 <_Z11perOutPhasePih+0xae>
    7280:	28 2b       	or	r18, r24
    7282:	28 83       	st	Y, r18
		}
		lastPhase = thisPhase ;
    7284:	c0 92 cd 08 	sts	0x08CD, r12
	}
	att |= FADE_FIRST ;
    7288:	70 e2       	ldi	r23, 0x20	; 32
    728a:	d7 2e       	mov	r13, r23
    728c:	d1 2a       	or	r13, r17
	if ( pFade->fadePhases )
    728e:	88 81       	ld	r24, Y
    7290:	88 23       	and	r24, r24
    7292:	49 f1       	breq	.+82     	; 0x72e6 <_Z11perOutPhasePih+0x11c>
	{
		pFade->fadeWeight = 0 ;
    7294:	1c 82       	std	Y+4, r1	; 0x04
    7296:	1b 82       	std	Y+3, r1	; 0x03
    7298:	8e 01       	movw	r16, r28
    729a:	ee 24       	eor	r14, r14
    729c:	e3 94       	inc	r14
    729e:	ff 24       	eor	r15, r15
		uint8_t fadeMask = 1 ;
    for (uint8_t p=0; p<MAX_MODES+1; p++)
		{
			if ( pFade->fadePhases & fadeMask )
    72a0:	2e 2d       	mov	r18, r14
    72a2:	30 e0       	ldi	r19, 0x00	; 0
    72a4:	88 81       	ld	r24, Y
    72a6:	90 e0       	ldi	r25, 0x00	; 0
    72a8:	28 23       	and	r18, r24
    72aa:	39 23       	and	r19, r25
    72ac:	23 2b       	or	r18, r19
    72ae:	99 f0       	breq	.+38     	; 0x72d6 <_Z11perOutPhasePih+0x10c>
			{
				if ( p != thisPhase )
    72b0:	fc 14       	cp	r15, r12
    72b2:	89 f0       	breq	.+34     	; 0x72d6 <_Z11perOutPhasePih+0x10c>
				{
					CurrentPhase = p ;
    72b4:	f0 92 70 08 	sts	0x0870, r15
					pFade->fadeWeight += pFade->fadeScale[p] ;
    72b8:	8b 81       	ldd	r24, Y+3	; 0x03
    72ba:	9c 81       	ldd	r25, Y+4	; 0x04
    72bc:	f8 01       	movw	r30, r16
    72be:	25 81       	ldd	r18, Z+5	; 0x05
    72c0:	36 81       	ldd	r19, Z+6	; 0x06
    72c2:	82 0f       	add	r24, r18
    72c4:	93 1f       	adc	r25, r19
    72c6:	9c 83       	std	Y+4, r25	; 0x04
    72c8:	8b 83       	std	Y+3, r24	; 0x03
					perOut( chanOut, att ) ;
    72ca:	c5 01       	movw	r24, r10
    72cc:	6d 2d       	mov	r22, r13
    72ce:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <_Z6perOutPih>
					att &= ~FADE_FIRST ;				
    72d2:	ff ed       	ldi	r31, 0xDF	; 223
    72d4:	df 22       	and	r13, r31
	att |= FADE_FIRST ;
	if ( pFade->fadePhases )
	{
		pFade->fadeWeight = 0 ;
		uint8_t fadeMask = 1 ;
    for (uint8_t p=0; p<MAX_MODES+1; p++)
    72d6:	f3 94       	inc	r15
    72d8:	0e 5f       	subi	r16, 0xFE	; 254
    72da:	1f 4f       	sbci	r17, 0xFF	; 255
    72dc:	85 e0       	ldi	r24, 0x05	; 5
    72de:	f8 16       	cp	r15, r24
    72e0:	61 f0       	breq	.+24     	; 0x72fa <_Z11perOutPhasePih+0x130>
					pFade->fadeWeight += pFade->fadeScale[p] ;
					perOut( chanOut, att ) ;
					att &= ~FADE_FIRST ;				
				}
			}
			fadeMask <<= 1 ;
    72e2:	ee 0c       	add	r14, r14
    72e4:	dd cf       	rjmp	.-70     	; 0x72a0 <_Z11perOutPhasePih+0xd6>
		}	
	}
	else
	{
		pFade->fadeScale[thisPhase] = 25600 ;
    72e6:	ec 2d       	mov	r30, r12
    72e8:	f0 e0       	ldi	r31, 0x00	; 0
    72ea:	ee 0f       	add	r30, r30
    72ec:	ff 1f       	adc	r31, r31
    72ee:	ec 0f       	add	r30, r28
    72f0:	fd 1f       	adc	r31, r29
    72f2:	80 e0       	ldi	r24, 0x00	; 0
    72f4:	94 e6       	ldi	r25, 0x64	; 100
    72f6:	96 83       	std	Z+6, r25	; 0x06
    72f8:	85 83       	std	Z+5, r24	; 0x05
	}
	pFade->fadeWeight += pFade->fadeScale[thisPhase] ;
    72fa:	ec 2d       	mov	r30, r12
    72fc:	f0 e0       	ldi	r31, 0x00	; 0
    72fe:	ee 0f       	add	r30, r30
    7300:	ff 1f       	adc	r31, r31
    7302:	ec 0f       	add	r30, r28
    7304:	fd 1f       	adc	r31, r29
    7306:	8b 81       	ldd	r24, Y+3	; 0x03
    7308:	9c 81       	ldd	r25, Y+4	; 0x04
    730a:	25 81       	ldd	r18, Z+5	; 0x05
    730c:	36 81       	ldd	r19, Z+6	; 0x06
    730e:	82 0f       	add	r24, r18
    7310:	93 1f       	adc	r25, r19
    7312:	9c 83       	std	Y+4, r25	; 0x04
    7314:	8b 83       	std	Y+3, r24	; 0x03
	CurrentPhase = thisPhase ;
    7316:	c0 92 70 08 	sts	0x0870, r12
	perOut( chanOut, att | FADE_LAST ) ;
    731a:	e0 e4       	ldi	r30, 0x40	; 64
    731c:	de 2a       	or	r13, r30
    731e:	c5 01       	movw	r24, r10
    7320:	6d 2d       	mov	r22, r13
    7322:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <_Z6perOutPih>
	
	if ( pFade->fadePhases && tick10ms )
    7326:	88 81       	ld	r24, Y
    7328:	88 23       	and	r24, r24
    732a:	09 f4       	brne	.+2      	; 0x732e <_Z11perOutPhasePih+0x164>
    732c:	4a c0       	rjmp	.+148    	; 0x73c2 <_Z11perOutPhasePih+0x1f8>
    732e:	80 91 20 06 	lds	r24, 0x0620
    7332:	88 23       	and	r24, r24
    7334:	09 f4       	brne	.+2      	; 0x7338 <_Z11perOutPhasePih+0x16e>
    7336:	45 c0       	rjmp	.+138    	; 0x73c2 <_Z11perOutPhasePih+0x1f8>
    7338:	fe 01       	movw	r30, r28
    733a:	b1 e0       	ldi	r27, 0x01	; 1
    733c:	10 e0       	ldi	r17, 0x00	; 0
						pFade->fadePhases &= ~fadeMask ;						
					}
				}
				else
				{
          if ( 25600 - l_fadeScale > x )
    733e:	e1 2c       	mov	r14, r1
    7340:	44 e6       	ldi	r20, 0x64	; 100
    7342:	f4 2e       	mov	r15, r20
	if ( pFade->fadePhases && tick10ms )
	{
		uint8_t fadeMask = 1 ;
    for (uint8_t p=0; p<MAX_MODES+1; p+=1)
		{
			uint16_t l_fadeScale = pFade->fadeScale[p] ;
    7344:	65 81       	ldd	r22, Z+5	; 0x05
    7346:	76 81       	ldd	r23, Z+6	; 0x06
			
			if ( pFade->fadePhases & fadeMask )
    7348:	a8 81       	ld	r26, Y
    734a:	8b 2f       	mov	r24, r27
    734c:	90 e0       	ldi	r25, 0x00	; 0
    734e:	2a 2f       	mov	r18, r26
    7350:	30 e0       	ldi	r19, 0x00	; 0
    7352:	82 23       	and	r24, r18
    7354:	93 23       	and	r25, r19
    7356:	89 2b       	or	r24, r25
    7358:	c9 f0       	breq	.+50     	; 0x738c <_Z11perOutPhasePih+0x1c2>
			{
				uint16_t x = pFade->fadeRate * tick10ms ;
    735a:	80 91 20 06 	lds	r24, 0x0620
    735e:	90 e0       	ldi	r25, 0x00	; 0
    7360:	29 81       	ldd	r18, Y+1	; 0x01
    7362:	3a 81       	ldd	r19, Y+2	; 0x02
    7364:	82 9f       	mul	r24, r18
    7366:	a0 01       	movw	r20, r0
    7368:	83 9f       	mul	r24, r19
    736a:	50 0d       	add	r21, r0
    736c:	92 9f       	mul	r25, r18
    736e:	50 0d       	add	r21, r0
    7370:	11 24       	eor	r1, r1
				if ( p != thisPhase )
    7372:	1c 15       	cp	r17, r12
    7374:	71 f0       	breq	.+28     	; 0x7392 <_Z11perOutPhasePih+0x1c8>
				{
          if ( l_fadeScale > x )
    7376:	46 17       	cp	r20, r22
    7378:	57 07       	cpc	r21, r23
    737a:	20 f4       	brcc	.+8      	; 0x7384 <_Z11perOutPhasePih+0x1ba>
					{
						l_fadeScale -= x ;
    737c:	cb 01       	movw	r24, r22
    737e:	84 1b       	sub	r24, r20
    7380:	95 0b       	sbc	r25, r21
    7382:	17 c0       	rjmp	.+46     	; 0x73b2 <_Z11perOutPhasePih+0x1e8>
					}
					else
					{
						l_fadeScale = 0 ;
						pFade->fadePhases &= ~fadeMask ;						
    7384:	8b 2f       	mov	r24, r27
    7386:	80 95       	com	r24
    7388:	8a 23       	and	r24, r26
    738a:	88 83       	st	Y, r24
    738c:	80 e0       	ldi	r24, 0x00	; 0
    738e:	90 e0       	ldi	r25, 0x00	; 0
    7390:	10 c0       	rjmp	.+32     	; 0x73b2 <_Z11perOutPhasePih+0x1e8>
					}
				}
				else
				{
          if ( 25600 - l_fadeScale > x )
    7392:	c7 01       	movw	r24, r14
    7394:	86 1b       	sub	r24, r22
    7396:	97 0b       	sbc	r25, r23
    7398:	48 17       	cp	r20, r24
    739a:	59 07       	cpc	r21, r25
    739c:	20 f4       	brcc	.+8      	; 0x73a6 <_Z11perOutPhasePih+0x1dc>
					{
						l_fadeScale += x ;
    739e:	ca 01       	movw	r24, r20
    73a0:	86 0f       	add	r24, r22
    73a2:	97 1f       	adc	r25, r23
    73a4:	06 c0       	rjmp	.+12     	; 0x73b2 <_Z11perOutPhasePih+0x1e8>
					}
					else
					{
						l_fadeScale = 25600 ;
						pFade->fadePhases &= ~fadeMask ;						
    73a6:	8b 2f       	mov	r24, r27
    73a8:	80 95       	com	r24
    73aa:	8a 23       	and	r24, r26
    73ac:	88 83       	st	Y, r24
    73ae:	80 e0       	ldi	r24, 0x00	; 0
    73b0:	94 e6       	ldi	r25, 0x64	; 100
			}
			else
			{
				l_fadeScale = 0 ;
			}
			pFade->fadeScale[p] = l_fadeScale ;
    73b2:	96 83       	std	Z+6, r25	; 0x06
    73b4:	85 83       	std	Z+5, r24	; 0x05
	perOut( chanOut, att | FADE_LAST ) ;
	
	if ( pFade->fadePhases && tick10ms )
	{
		uint8_t fadeMask = 1 ;
    for (uint8_t p=0; p<MAX_MODES+1; p+=1)
    73b6:	1f 5f       	subi	r17, 0xFF	; 255
    73b8:	32 96       	adiw	r30, 0x02	; 2
    73ba:	15 30       	cpi	r17, 0x05	; 5
    73bc:	11 f0       	breq	.+4      	; 0x73c2 <_Z11perOutPhasePih+0x1f8>
			else
			{
				l_fadeScale = 0 ;
			}
			pFade->fadeScale[p] = l_fadeScale ;
			fadeMask <<= 1 ;
    73be:	bb 0f       	add	r27, r27
    73c0:	c1 cf       	rjmp	.-126    	; 0x7344 <_Z11perOutPhasePih+0x17a>
		}
	}


}
    73c2:	df 91       	pop	r29
    73c4:	cf 91       	pop	r28
    73c6:	1f 91       	pop	r17
    73c8:	0f 91       	pop	r16
    73ca:	ff 90       	pop	r15
    73cc:	ef 90       	pop	r14
    73ce:	df 90       	pop	r13
    73d0:	cf 90       	pop	r12
    73d2:	bf 90       	pop	r11
    73d4:	af 90       	pop	r10
    73d6:	08 95       	ret

000073d8 <_Z16voice_telem_itemh>:
#endif
}

extern uint8_t Unit ;

void voice_telem_item( uint8_t indexIn )
    73d8:	0f 93       	push	r16
    73da:	1f 93       	push	r17
    73dc:	df 93       	push	r29
    73de:	cf 93       	push	r28
    73e0:	00 d0       	rcall	.+0      	; 0x73e2 <_Z16voice_telem_itemh+0xa>
    73e2:	cd b7       	in	r28, 0x3d	; 61
    73e4:	de b7       	in	r29, 0x3e	; 62
    73e6:	18 2f       	mov	r17, r24
{
	int16_t value ;
	uint8_t spoken = 0 ;
	uint8_t unit = 0 ;
    73e8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t num_decimals = 0 ;
    73ea:	1a 82       	std	Y+2, r1	; 0x02
#ifdef FRSKY
//	uint8_t att = 0 ;
#endif

	value = get_telemetry_value( indexIn ) ;
    73ec:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_Z19get_telemetry_valueh>
    73f0:	9c 01       	movw	r18, r24
	if (telemItemValid( indexIn ) == 0 )
	{
		putVoiceQueue( V_NOTELEM ) ;
		spoken = 1 ;
	}
	int8_t index = pgm_read_byte( &TelemIndex[indexIn] ) ;
    73f2:	e1 2f       	mov	r30, r17
    73f4:	f0 e0       	ldi	r31, 0x00	; 0
    73f6:	e3 52       	subi	r30, 0x23	; 35
    73f8:	fc 4f       	sbci	r31, 0xFC	; 252
    73fa:	84 91       	lpm	r24, Z+

  switch (index)
    73fc:	8d 3f       	cpi	r24, 0xFD	; 253
    73fe:	3c f4       	brge	.+14     	; 0x740e <_Z16voice_telem_itemh+0x36>
    7400:	86 3f       	cpi	r24, 0xF6	; 246
    7402:	9c f5       	brge	.+102    	; 0x746a <_Z16voice_telem_itemh+0x92>
    7404:	81 5f       	subi	r24, 0xF1	; 241
    7406:	84 30       	cpi	r24, 0x04	; 4
    7408:	08 f0       	brcs	.+2      	; 0x740c <_Z16voice_telem_itemh+0x34>
    740a:	3c c0       	rjmp	.+120    	; 0x7484 <_Z16voice_telem_itemh+0xac>
    740c:	06 c0       	rjmp	.+12     	; 0x741a <_Z16voice_telem_itemh+0x42>
    740e:	8d 3f       	cpi	r24, 0xFD	; 253
    7410:	a1 f0       	breq	.+40     	; 0x743a <_Z16voice_telem_itemh+0x62>
    7412:	8f 3f       	cpi	r24, 0xFF	; 255
    7414:	09 f0       	breq	.+2      	; 0x7418 <_Z16voice_telem_itemh+0x40>
    7416:	b4 f5       	brge	.+108    	; 0x7484 <_Z16voice_telem_itemh+0xac>
    7418:	15 c0       	rjmp	.+42     	; 0x7444 <_Z16voice_telem_itemh+0x6c>
#ifdef SCALERS
		case V_SC1 :
		case V_SC2 :
		case V_SC3 :
		case V_SC4 :
			value = calc_scaler( index-V_SC1, &unit, &num_decimals ) ;
    741a:	be 01       	movw	r22, r28
    741c:	6f 5f       	subi	r22, 0xFF	; 255
    741e:	7f 4f       	sbci	r23, 0xFF	; 255
    7420:	ae 01       	movw	r20, r28
    7422:	4e 5f       	subi	r20, 0xFE	; 254
    7424:	5f 4f       	sbci	r21, 0xFF	; 255
    7426:	0e 94 82 27 	call	0x4f04	; 0x4f04 <_Z11calc_scalerhPhS_>
    742a:	9c 01       	movw	r18, r24
			unit = pgm_read_byte( &UnitsVoice[unit]) ;
    742c:	e9 81       	ldd	r30, Y+1	; 0x01
    742e:	f0 e0       	ldi	r31, 0x00	; 0
    7430:	e2 55       	subi	r30, 0x52	; 82
    7432:	ff 4e       	sbci	r31, 0xEF	; 239
    7434:	e4 91       	lpm	r30, Z+
    7436:	e9 83       	std	Y+1, r30	; 0x01
    7438:	25 c0       	rjmp	.+74     	; 0x7484 <_Z16voice_telem_itemh+0xac>
		case BATTERY:
#ifdef FRSKY
		case FR_VOLTS :
		case FR_CELLS_TOT :
#endif
			unit = V_VOLTS ;			
    743a:	84 e2       	ldi	r24, 0x24	; 36
    743c:	89 83       	std	Y+1, r24	; 0x01
			num_decimals = 1 ;
    743e:	81 e0       	ldi	r24, 0x01	; 1
    7440:	8a 83       	std	Y+2, r24	; 0x02
    7442:	20 c0       	rjmp	.+64     	; 0x7484 <_Z16voice_telem_itemh+0xac>
			
		case TIMER1 :
		case TIMER2 :
		{	
			div_t qr ;
			qr = div( value, 60 ) ;
    7444:	c9 01       	movw	r24, r18
    7446:	6c e3       	ldi	r22, 0x3C	; 60
    7448:	70 e0       	ldi	r23, 0x00	; 0
    744a:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    744e:	18 2f       	mov	r17, r24
    7450:	09 2f       	mov	r16, r25
			voice_numeric( qr.quot, 0, V_MINUTES ) ;
    7452:	cb 01       	movw	r24, r22
    7454:	60 e0       	ldi	r22, 0x00	; 0
    7456:	46 e2       	ldi	r20, 0x26	; 38
    7458:	0e 94 f1 79 	call	0xf3e2	; 0xf3e2 <_Z13voice_numericihh>
			value = qr.rem ;
			unit = V_SECONDS ;			
    745c:	85 e3       	ldi	r24, 0x35	; 53
    745e:	89 83       	std	Y+1, r24	; 0x01
    7460:	21 2f       	mov	r18, r17
    7462:	30 2f       	mov	r19, r16
    7464:	c9 01       	movw	r24, r18
    7466:	9c 01       	movw	r18, r24
    7468:	0d c0       	rjmp	.+26     	; 0x7484 <_Z16voice_telem_itemh+0xac>
		case V_GVAR3 :
		case V_GVAR4 :
		case V_GVAR5 :
		case V_GVAR6 :
		case V_GVAR7 :
			value = g_model.gvars[index-V_GVAR1].gvar ;
    746a:	e8 2f       	mov	r30, r24
    746c:	ff 27       	eor	r31, r31
    746e:	e7 fd       	sbrc	r30, 7
    7470:	f0 95       	com	r31
    7472:	ee 0f       	add	r30, r30
    7474:	ff 1f       	adc	r31, r31
    7476:	eb 58       	subi	r30, 0x8B	; 139
    7478:	fb 4f       	sbci	r31, 0xFB	; 251
    747a:	80 81       	ld	r24, Z
    747c:	28 2f       	mov	r18, r24
    747e:	33 27       	eor	r19, r19
    7480:	27 fd       	sbrc	r18, 7
    7482:	30 95       	com	r19

	}

	if ( spoken == 0 )
	{
		voice_numeric( value, num_decimals, unit ) ;
    7484:	c9 01       	movw	r24, r18
    7486:	6a 81       	ldd	r22, Y+2	; 0x02
    7488:	49 81       	ldd	r20, Y+1	; 0x01
    748a:	0e 94 f1 79 	call	0xf3e2	; 0xf3e2 <_Z13voice_numericihh>
	}
}
    748e:	0f 90       	pop	r0
    7490:	0f 90       	pop	r0
    7492:	cf 91       	pop	r28
    7494:	df 91       	pop	r29
    7496:	1f 91       	pop	r17
    7498:	0f 91       	pop	r16
    749a:	08 95       	ret

0000749c <_Z12putsTrimModehhhhh>:
//    }		
//	}
//}

#ifdef PHASES		
void putsTrimMode( uint8_t x, uint8_t y, uint8_t phase, uint8_t idx, uint8_t att )
    749c:	df 92       	push	r13
    749e:	ef 92       	push	r14
    74a0:	ff 92       	push	r15
    74a2:	0f 93       	push	r16
    74a4:	1f 93       	push	r17
    74a6:	e8 2e       	mov	r14, r24
    74a8:	d6 2e       	mov	r13, r22
    74aa:	14 2f       	mov	r17, r20
    74ac:	f2 2e       	mov	r15, r18
{
  int16_t v = getRawTrimValue(phase, idx);
    74ae:	84 2f       	mov	r24, r20
    74b0:	62 2f       	mov	r22, r18
    74b2:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_Z15getRawTrimValuehh>

  if (v > TRIM_EXTENDED_MAX)
    74b6:	21 e0       	ldi	r18, 0x01	; 1
    74b8:	85 3f       	cpi	r24, 0xF5	; 245
    74ba:	92 07       	cpc	r25, r18
    74bc:	64 f0       	brlt	.+24     	; 0x74d6 <_Z12putsTrimModehhhhh+0x3a>
	{
    uint8_t p = v - TRIM_EXTENDED_MAX - 1;
    74be:	48 2f       	mov	r20, r24
    74c0:	45 5f       	subi	r20, 0xF5	; 245
    if (p >= phase) p += 1 ;
    74c2:	41 17       	cp	r20, r17
    74c4:	08 f0       	brcs	.+2      	; 0x74c8 <_Z12putsTrimModehhhhh+0x2c>
    74c6:	4f 5f       	subi	r20, 0xFF	; 255
    lcd_putcAtt(x, y, '0'+p, att);
    74c8:	40 5d       	subi	r20, 0xD0	; 208
    74ca:	8e 2d       	mov	r24, r14
    74cc:	6d 2d       	mov	r22, r13
    74ce:	20 2f       	mov	r18, r16
    74d0:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
    74d4:	07 c0       	rjmp	.+14     	; 0x74e4 <_Z12putsTrimModehhhhh+0x48>
  }
  else
	{
#ifdef FIX_MODE
  	lcd_putsAttIdx( x, y, Str_1_RETA, idx, att ) ;
    74d6:	8e 2d       	mov	r24, r14
    74d8:	6d 2d       	mov	r22, r13
    74da:	46 eb       	ldi	r20, 0xB6	; 182
    74dc:	59 e0       	ldi	r21, 0x09	; 9
    74de:	2f 2d       	mov	r18, r15
    74e0:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
	}
	
//	lcd_outhex4( 64, 4*FH, v ) ;

	asm("") ;
}
    74e4:	1f 91       	pop	r17
    74e6:	0f 91       	pop	r16
    74e8:	ff 90       	pop	r15
    74ea:	ef 90       	pop	r14
    74ec:	df 90       	pop	r13
    74ee:	08 95       	ret

000074f0 <_Z18menuDeleteDupModelh>:
}

uint8_t DupIfNonzero = 0 ;
int8_t DupSub ;

void menuDeleteDupModel(uint8_t event)
    74f0:	0f 93       	push	r16
    74f2:	1f 93       	push	r17
    74f4:	18 2f       	mov	r17, r24
{
    eeLoadModelName( DupSub,Xmem.buf,sizeof(Xmem.buf));
    74f6:	80 91 12 07 	lds	r24, 0x0712
    74fa:	63 e5       	ldi	r22, 0x53	; 83
    74fc:	76 e0       	ldi	r23, 0x06	; 6
    74fe:	4f e0       	ldi	r20, 0x0F	; 15
    7500:	0e 94 60 63 	call	0xc6c0	; 0xc6c0 <_Z15eeLoadModelNamehPch>
    lcd_putsnAtt(1,2*FH, Xmem.buf,sizeof(g_model.name),BSS);
    7504:	81 e0       	ldi	r24, 0x01	; 1
    7506:	60 e1       	ldi	r22, 0x10	; 16
    7508:	43 e5       	ldi	r20, 0x53	; 83
    750a:	56 e0       	ldi	r21, 0x06	; 6
    750c:	2a e0       	ldi	r18, 0x0A	; 10
    750e:	00 e1       	ldi	r16, 0x10	; 16
    7510:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
    lcd_putc(sizeof(g_model.name)*FW+FW,2*FH,'?');
    7514:	82 e4       	ldi	r24, 0x42	; 66
    7516:	60 e1       	ldi	r22, 0x10	; 16
    7518:	4f e3       	ldi	r20, 0x3F	; 63
    751a:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
		yesNoMenuExit( DupIfNonzero ? PSTR(STR_DUP_MODEL) : PSTR(STR_DELETE_MODEL) ) ;
    751e:	80 91 11 07 	lds	r24, 0x0711
    7522:	88 23       	and	r24, r24
    7524:	19 f4       	brne	.+6      	; 0x752c <_Z18menuDeleteDupModelh+0x3c>
    7526:	82 ed       	ldi	r24, 0xD2	; 210
    7528:	9d e0       	ldi	r25, 0x0D	; 13
    752a:	02 c0       	rjmp	.+4      	; 0x7530 <_Z18menuDeleteDupModelh+0x40>
    752c:	8f ed       	ldi	r24, 0xDF	; 223
    752e:	9d e0       	ldi	r25, 0x0D	; 13
    7530:	0e 94 6d 22 	call	0x44da	; 0x44da <_Z13yesNoMenuExitPKc>

//    uint8_t i;
    switch(event){
    7534:	11 36       	cpi	r17, 0x61	; 97
    7536:	69 f1       	breq	.+90     	; 0x7592 <_Z18menuDeleteDupModelh+0xa2>
    7538:	12 36       	cpi	r17, 0x62	; 98
    753a:	28 f4       	brcc	.+10     	; 0x7546 <_Z18menuDeleteDupModelh+0x56>
    753c:	1e 32       	cpi	r17, 0x2E	; 46
    753e:	59 f0       	breq	.+22     	; 0x7556 <_Z18menuDeleteDupModelh+0x66>
    7540:	10 36       	cpi	r17, 0x60	; 96
    7542:	89 f5       	brne	.+98     	; 0x75a6 <_Z18menuDeleteDupModelh+0xb6>
    7544:	08 c0       	rjmp	.+16     	; 0x7556 <_Z18menuDeleteDupModelh+0x66>
    7546:	1e 38       	cpi	r17, 0x8E	; 142
    7548:	21 f1       	breq	.+72     	; 0x7592 <_Z18menuDeleteDupModelh+0xa2>
    754a:	1f 3b       	cpi	r17, 0xBF	; 191
    754c:	61 f5       	brne	.+88     	; 0x75a6 <_Z18menuDeleteDupModelh+0xb6>
    case EVT_ENTRY:
        audioDefevent(AU_WARNING1);
    754e:	80 e0       	ldi	r24, 0x00	; 0
    7550:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    7554:	28 c0       	rjmp	.+80     	; 0x75a6 <_Z18menuDeleteDupModelh+0xb6>
        break;
    case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
        if ( DupIfNonzero )
    7556:	80 91 11 07 	lds	r24, 0x0711
    755a:	88 23       	and	r24, r24
    755c:	a9 f0       	breq	.+42     	; 0x7588 <_Z18menuDeleteDupModelh+0x98>
        {
            message(PSTR(STR_DUPLICATING));
    755e:	80 ec       	ldi	r24, 0xC0	; 192
    7560:	9d e0       	ldi	r25, 0x0D	; 13
    7562:	0e 94 e6 13 	call	0x27cc	; 0x27cc <_Z7messagePKc>
            if(eeDuplicateModel(DupSub))
    7566:	80 91 12 07 	lds	r24, 0x0712
    756a:	0e 94 0e 63 	call	0xc61c	; 0xc61c <_Z16eeDuplicateModelh>
    756e:	88 23       	and	r24, r24
    7570:	39 f0       	breq	.+14     	; 0x7580 <_Z18menuDeleteDupModelh+0x90>
            {
                audioDefevent(AU_MENUS);
    7572:	87 e1       	ldi	r24, 0x17	; 23
    7574:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
                DupIfNonzero = 2 ;		// sel_editMode = false;
    7578:	82 e0       	ldi	r24, 0x02	; 2
    757a:	80 93 11 07 	sts	0x0711, r24
    757e:	09 c0       	rjmp	.+18     	; 0x7592 <_Z18menuDeleteDupModelh+0xa2>
            }
            else audioDefevent(AU_WARNING1);
    7580:	80 e0       	ldi	r24, 0x00	; 0
    7582:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    7586:	05 c0       	rjmp	.+10     	; 0x7592 <_Z18menuDeleteDupModelh+0xa2>
        }
        else
        {
            EFile::rm(FILE_MODEL( DupSub ) ) ; //delete file
    7588:	80 91 12 07 	lds	r24, 0x0712
    758c:	8f 5f       	subi	r24, 0xFF	; 255
    758e:	0e 94 93 68 	call	0xd126	; 0xd126 <_ZN5EFile2rmEh>
        popMenu(true);
        pushMenu(menuProcModelSelect);
        break;
		case EVT_KEY_LONG(BTN_RE):
    case EVT_KEY_FIRST(KEY_EXIT):
        killEvents(event);
    7592:	81 2f       	mov	r24, r17
    7594:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        popMenu(true);
    7598:	81 e0       	ldi	r24, 0x01	; 1
    759a:	0e 94 14 1a 	call	0x3428	; 0x3428 <_Z7popMenub>
        pushMenu(menuProcModelSelect);
    759e:	8e ee       	ldi	r24, 0xEE	; 238
    75a0:	97 e5       	ldi	r25, 0x57	; 87
    75a2:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
        break;
    }
}
    75a6:	1f 91       	pop	r17
    75a8:	0f 91       	pop	r16
    75aa:	08 95       	ret

000075ac <_ZL9insertMixhh>:
    memset(&g_model.mixData[MAX_MIXERS-1],0,sizeof(MixData));
    STORE_MODELVARS;
    eeWaitComplete() ;
}

static void insertMix(uint8_t idx, uint8_t copy)
    75ac:	ef 92       	push	r14
    75ae:	ff 92       	push	r15
    75b0:	0f 93       	push	r16
    75b2:	1f 93       	push	r17
    75b4:	df 93       	push	r29
    75b6:	cf 93       	push	r28
    75b8:	0f 92       	push	r0
    75ba:	cd b7       	in	r28, 0x3d	; 61
    75bc:	de b7       	in	r29, 0x3e	; 62
    75be:	08 2f       	mov	r16, r24
    75c0:	69 83       	std	Y+1, r22	; 0x01
{
    MixData *md = &g_model.mixData[0] ;
		md += idx ;
    75c2:	1a e0       	ldi	r17, 0x0A	; 10
    75c4:	81 9f       	mul	r24, r17
    75c6:	70 01       	movw	r14, r0
    75c8:	11 24       	eor	r1, r1
    75ca:	84 ec       	ldi	r24, 0xC4	; 196
    75cc:	91 e0       	ldi	r25, 0x01	; 1
    75ce:	e8 0e       	add	r14, r24
    75d0:	f9 1e       	adc	r15, r25
	
    memmove( md+1, md,(MAX_MIXERS-(idx+1))*sizeof(MixData) );
    75d2:	80 2f       	mov	r24, r16
    75d4:	90 e0       	ldi	r25, 0x00	; 0
    75d6:	80 95       	com	r24
    75d8:	90 95       	com	r25
    75da:	80 96       	adiw	r24, 0x20	; 32
    75dc:	ac 01       	movw	r20, r24
    75de:	73 e0       	ldi	r23, 0x03	; 3
    75e0:	44 0f       	add	r20, r20
    75e2:	55 1f       	adc	r21, r21
    75e4:	7a 95       	dec	r23
    75e6:	e1 f7       	brne	.-8      	; 0x75e0 <_ZL9insertMixhh+0x34>
    75e8:	88 0f       	add	r24, r24
    75ea:	99 1f       	adc	r25, r25
    75ec:	48 0f       	add	r20, r24
    75ee:	59 1f       	adc	r21, r25
    75f0:	c7 01       	movw	r24, r14
    75f2:	0a 96       	adiw	r24, 0x0a	; 10
    75f4:	b7 01       	movw	r22, r14
    75f6:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <memmove>
		if ( copy )
    75fa:	99 81       	ldd	r25, Y+1	; 0x01
    75fc:	99 23       	and	r25, r25
    75fe:	49 f0       	breq	.+18     	; 0x7612 <_ZL9insertMixhh+0x66>
		{
	    memmove( md, md-1, sizeof(MixData) ) ;
    7600:	b7 01       	movw	r22, r14
    7602:	6a 50       	subi	r22, 0x0A	; 10
    7604:	70 40       	sbci	r23, 0x00	; 0
    7606:	c7 01       	movw	r24, r14
    7608:	4a e0       	ldi	r20, 0x0A	; 10
    760a:	50 e0       	ldi	r21, 0x00	; 0
    760c:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <memmove>
    7610:	0e c0       	rjmp	.+28     	; 0x762e <_ZL9insertMixhh+0x82>
		}
		else
		{
	    memset( md,0,sizeof(MixData));
    7612:	f7 01       	movw	r30, r14
    7614:	11 92       	st	Z+, r1
    7616:	1a 95       	dec	r17
    7618:	e9 f7       	brne	.-6      	; 0x7614 <_ZL9insertMixhh+0x68>
  	  md->destCh      = s_currDestCh; //-s_mixTab[sub];
    761a:	80 91 d9 08 	lds	r24, 0x08D9
    761e:	f7 01       	movw	r30, r14
    7620:	80 83       	st	Z, r24
    	md->srcRaw      = s_currDestCh; //1;   //
    7622:	81 83       	std	Z+1, r24	; 0x01
    	md->weight      = 100;
    7624:	84 e6       	ldi	r24, 0x64	; 100
    7626:	82 83       	std	Z+2, r24	; 0x02
			md->lateOffset  = 1 ;
    7628:	87 81       	ldd	r24, Z+7	; 0x07
    762a:	88 60       	ori	r24, 0x08	; 8
    762c:	87 83       	std	Z+7, r24	; 0x07
		}
		s_currMixIdx = idx ;
    762e:	00 93 d8 08 	sts	0x08D8, r16
//    STORE_MODELVARS;
//    eeWaitComplete() ;
}
    7632:	0f 90       	pop	r0
    7634:	cf 91       	pop	r28
    7636:	df 91       	pop	r29
    7638:	1f 91       	pop	r17
    763a:	0f 91       	pop	r16
    763c:	ff 90       	pop	r15
    763e:	ef 90       	pop	r14
    7640:	08 95       	ret

00007642 <_Z9deleteMixh>:
static uint8_t s_moveMixIdx;
static int8_t s_currDestCh;
//static bool   s_currMixInsMode;


void deleteMix(uint8_t idx)
    7642:	1f 93       	push	r17
{
    MixData *md = &g_model.mixData[0] ;
		md += idx ;
    7644:	1a e0       	ldi	r17, 0x0A	; 10
    7646:	81 9f       	mul	r24, r17
    7648:	b0 01       	movw	r22, r0
    764a:	11 24       	eor	r1, r1
    764c:	6c 53       	subi	r22, 0x3C	; 60
    764e:	7e 4f       	sbci	r23, 0xFE	; 254
	  
		memmove( md, md+1,(MAX_MIXERS-(idx+1))*sizeof(MixData));
    7650:	90 e0       	ldi	r25, 0x00	; 0
    7652:	80 95       	com	r24
    7654:	90 95       	com	r25
    7656:	80 96       	adiw	r24, 0x20	; 32
    7658:	ac 01       	movw	r20, r24
    765a:	f3 e0       	ldi	r31, 0x03	; 3
    765c:	44 0f       	add	r20, r20
    765e:	55 1f       	adc	r21, r21
    7660:	fa 95       	dec	r31
    7662:	e1 f7       	brne	.-8      	; 0x765c <_Z9deleteMixh+0x1a>
    7664:	88 0f       	add	r24, r24
    7666:	99 1f       	adc	r25, r25
    7668:	48 0f       	add	r20, r24
    766a:	59 1f       	adc	r21, r25
    766c:	cb 01       	movw	r24, r22
    766e:	66 5f       	subi	r22, 0xF6	; 246
    7670:	7f 4f       	sbci	r23, 0xFF	; 255
    7672:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <memmove>
    memset(&g_model.mixData[MAX_MIXERS-1],0,sizeof(MixData));
    7676:	ea ef       	ldi	r30, 0xFA	; 250
    7678:	f2 e0       	ldi	r31, 0x02	; 2
    767a:	df 01       	movw	r26, r30
    767c:	1d 92       	st	X+, r1
    767e:	1a 95       	dec	r17
    7680:	e9 f7       	brne	.-6      	; 0x767c <_Z9deleteMixh+0x3a>
    STORE_MODELVARS;
    7682:	82 e0       	ldi	r24, 0x02	; 2
    7684:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
    eeWaitComplete() ;
    7688:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>
}
    768c:	1f 91       	pop	r17
    768e:	08 95       	ret

00007690 <_Z13menuDeleteMixh>:
  lcd_puts_Pleft( 5*FH,PSTR(STR_YES_NO_MENU_EXIT));
//  lcd_puts_Pleft( 6*FH,PSTR(STR_MENU_EXIT));
}


void menuDeleteMix(uint8_t event)
    7690:	1f 93       	push	r17
    7692:	18 2f       	mov	r17, r24
{
    switch(event){
    7694:	81 36       	cpi	r24, 0x61	; 97
    7696:	99 f0       	breq	.+38     	; 0x76be <_Z13menuDeleteMixh+0x2e>
    7698:	82 36       	cpi	r24, 0x62	; 98
    769a:	28 f4       	brcc	.+10     	; 0x76a6 <_Z13menuDeleteMixh+0x16>
    769c:	8e 32       	cpi	r24, 0x2E	; 46
    769e:	59 f0       	breq	.+22     	; 0x76b6 <_Z13menuDeleteMixh+0x26>
    76a0:	80 36       	cpi	r24, 0x60	; 96
    76a2:	b9 f4       	brne	.+46     	; 0x76d2 <_Z13menuDeleteMixh+0x42>
    76a4:	08 c0       	rjmp	.+16     	; 0x76b6 <_Z13menuDeleteMixh+0x26>
    76a6:	8e 38       	cpi	r24, 0x8E	; 142
    76a8:	51 f0       	breq	.+20     	; 0x76be <_Z13menuDeleteMixh+0x2e>
    76aa:	8f 3b       	cpi	r24, 0xBF	; 191
    76ac:	91 f4       	brne	.+36     	; 0x76d2 <_Z13menuDeleteMixh+0x42>
    case EVT_ENTRY:
        audioDefevent(AU_WARNING1);
    76ae:	80 e0       	ldi	r24, 0x00	; 0
    76b0:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    76b4:	0e c0       	rjmp	.+28     	; 0x76d2 <_Z13menuDeleteMixh+0x42>
        break;
    case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
        deleteMix(mixToDelete);
    76b6:	80 91 0f 07 	lds	r24, 0x070F
    76ba:	0e 94 21 3b 	call	0x7642	; 0x7642 <_Z9deleteMixh>
        //fallthrough
		case EVT_KEY_LONG(BTN_RE):
    case EVT_KEY_FIRST(KEY_EXIT):
        killEvents(event);
    76be:	81 2f       	mov	r24, r17
    76c0:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        popMenu(true);
    76c4:	81 e0       	ldi	r24, 0x01	; 1
    76c6:	0e 94 14 1a 	call	0x3428	; 0x3428 <_Z7popMenub>
        pushMenu(menuProcMix);
    76ca:	8a ed       	ldi	r24, 0xDA	; 218
    76cc:	99 e5       	ldi	r25, 0x59	; 89
    76ce:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
        break;
    }
//    lcd_puts_Pleft(1*FH, PSTR("DELETE MIX?"));
		yesNoMenuExit( PSTR(STR_DELETE_MIX) ) ;
    76d2:	89 e6       	ldi	r24, 0x69	; 105
    76d4:	9e e0       	ldi	r25, 0x0E	; 14
    76d6:	0e 94 6d 22 	call	0x44da	; 0x44da <_Z13yesNoMenuExitPKc>

}
    76da:	1f 91       	pop	r17
    76dc:	08 95       	ret

000076de <_ZL12popupDisplayPKchh>:
	return POPUP_NONE ;
}

const prog_char APM MixPopList[] = STR_MIX_POPUP ;

static uint8_t popupDisplay( const prog_char *list, uint8_t mask, uint8_t width )
    76de:	df 92       	push	r13
    76e0:	ef 92       	push	r14
    76e2:	ff 92       	push	r15
    76e4:	0f 93       	push	r16
    76e6:	1f 93       	push	r17
    76e8:	cf 93       	push	r28
    76ea:	df 93       	push	r29
    76ec:	ec 01       	movw	r28, r24
    76ee:	d4 2e       	mov	r13, r20
    76f0:	ee 24       	eor	r14, r14
    76f2:	18 e0       	ldi	r17, 0x08	; 8
    76f4:	f1 2e       	mov	r15, r17
    76f6:	1e c0       	rjmp	.+60     	; 0x7734 <_ZL12popupDisplayPKchh+0x56>
	uint8_t entries = 0 ;
	uint8_t y = FH ;

	while ( mask )
	{
		if ( mask & 1 )
    76f8:	06 2f       	mov	r16, r22
    76fa:	10 e0       	ldi	r17, 0x00	; 0
    76fc:	60 ff       	sbrs	r22, 0
    76fe:	11 c0       	rjmp	.+34     	; 0x7722 <_ZL12popupDisplayPKchh+0x44>
		{
			lcd_putsn_P( 3*FW, y, PSTR("              "), width ) ;
    7700:	82 e1       	ldi	r24, 0x12	; 18
    7702:	6f 2d       	mov	r22, r15
    7704:	4a e5       	ldi	r20, 0x5A	; 90
    7706:	5e e0       	ldi	r21, 0x0E	; 14
    7708:	2d 2d       	mov	r18, r13
    770a:	0e 94 63 6a 	call	0xd4c6	; 0xd4c6 <_Z11lcd_putsn_PhhPKch>
			lcd_puts_P( 4*FW, y, (const char *)(list) ) ;
    770e:	88 e1       	ldi	r24, 0x18	; 24
    7710:	6f 2d       	mov	r22, r15
    7712:	ae 01       	movw	r20, r28
    7714:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
			entries += 1 ;
    7718:	e3 94       	inc	r14
			y += FH ;
    771a:	88 e0       	ldi	r24, 0x08	; 8
    771c:	f8 0e       	add	r15, r24
    771e:	01 c0       	rjmp	.+2      	; 0x7722 <_ZL12popupDisplayPKchh+0x44>
		}
		mask >>= 1 ;
		while ( pgm_read_byte(list) )
		{
			list += 1 ;			
    7720:	ef 01       	movw	r28, r30
			lcd_puts_P( 4*FW, y, (const char *)(list) ) ;
			entries += 1 ;
			y += FH ;
		}
		mask >>= 1 ;
		while ( pgm_read_byte(list) )
    7722:	fe 01       	movw	r30, r28
    7724:	84 91       	lpm	r24, Z+
    7726:	31 96       	adiw	r30, 0x01	; 1
    7728:	88 23       	and	r24, r24
    772a:	d1 f7       	brne	.-12     	; 0x7720 <_ZL12popupDisplayPKchh+0x42>
			lcd_putsn_P( 3*FW, y, PSTR("              "), width ) ;
			lcd_puts_P( 4*FW, y, (const char *)(list) ) ;
			entries += 1 ;
			y += FH ;
		}
		mask >>= 1 ;
    772c:	15 95       	asr	r17
    772e:	07 95       	ror	r16
    7730:	60 2f       	mov	r22, r16
		while ( pgm_read_byte(list) )
		{
			list += 1 ;			
		}		
		list += 1 ;			
    7732:	ef 01       	movw	r28, r30
static uint8_t popupDisplay( const prog_char *list, uint8_t mask, uint8_t width )
{
	uint8_t entries = 0 ;
	uint8_t y = FH ;

	while ( mask )
    7734:	66 23       	and	r22, r22
    7736:	01 f7       	brne	.-64     	; 0x76f8 <_ZL12popupDisplayPKchh+0x1a>
		{
			list += 1 ;			
		}		
		list += 1 ;			
	}
	lcd_rect( 3*FW, 1*FH-1, width*FW, y+2-FH ) ;
    7738:	46 e0       	ldi	r20, 0x06	; 6
    773a:	d4 9e       	mul	r13, r20
    773c:	a0 01       	movw	r20, r0
    773e:	11 24       	eor	r1, r1
    7740:	14 2f       	mov	r17, r20
    7742:	fa ef       	ldi	r31, 0xFA	; 250
    7744:	ff 0e       	add	r15, r31
    7746:	82 e1       	ldi	r24, 0x12	; 18
    7748:	67 e0       	ldi	r22, 0x07	; 7
    774a:	2f 2d       	mov	r18, r15
    774c:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
	lcd_char_inverse( 4*FW, (PopupData.PopupIdx+1)*FH, (width-2)*FW, 0 ) ;
    7750:	60 91 8c 06 	lds	r22, 0x068C
    7754:	70 e0       	ldi	r23, 0x00	; 0
    7756:	6f 5f       	subi	r22, 0xFF	; 255
    7758:	7f 4f       	sbci	r23, 0xFF	; 255
    775a:	a3 e0       	ldi	r26, 0x03	; 3
    775c:	66 0f       	add	r22, r22
    775e:	77 1f       	adc	r23, r23
    7760:	aa 95       	dec	r26
    7762:	e1 f7       	brne	.-8      	; 0x775c <_ZL12popupDisplayPKchh+0x7e>
    7764:	1c 50       	subi	r17, 0x0C	; 12
    7766:	88 e1       	ldi	r24, 0x18	; 24
    7768:	41 2f       	mov	r20, r17
    776a:	20 e0       	ldi	r18, 0x00	; 0
    776c:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
	return entries ;
}
    7770:	8e 2d       	mov	r24, r14
    7772:	df 91       	pop	r29
    7774:	cf 91       	pop	r28
    7776:	1f 91       	pop	r17
    7778:	0f 91       	pop	r16
    777a:	ff 90       	pop	r15
    777c:	ef 90       	pop	r14
    777e:	df 90       	pop	r13
    7780:	08 95       	ret

00007782 <_Z7doPopupPKchh>:
	return position ;
}



uint8_t doPopup( const prog_char *list, uint8_t mask, uint8_t width )
    7782:	1f 93       	push	r17
    7784:	16 2f       	mov	r17, r22
{
	uint8_t count = popupDisplay( list, mask, width ) ;
    7786:	0e 94 6f 3b 	call	0x76de	; 0x76de <_ZL12popupDisplayPKchh>
    778a:	48 2f       	mov	r20, r24

int8_t qRotary()
{
	int8_t diff = 0 ;

	if ( Rotary.Rotary_diff > 0)
    778c:	80 91 a9 05 	lds	r24, 0x05A9
    7790:	18 16       	cp	r1, r24
    7792:	14 f4       	brge	.+4      	; 0x7798 <_Z7doPopupPKchh+0x16>
    7794:	31 e0       	ldi	r19, 0x01	; 1
    7796:	05 c0       	rjmp	.+10     	; 0x77a2 <_Z7doPopupPKchh+0x20>
	{
		diff = 1 ;
	}
	else if ( Rotary.Rotary_diff < 0)
    7798:	88 23       	and	r24, r24
    779a:	11 f0       	breq	.+4      	; 0x77a0 <_Z7doPopupPKchh+0x1e>
    779c:	3f ef       	ldi	r19, 0xFF	; 255
    779e:	01 c0       	rjmp	.+2      	; 0x77a2 <_Z7doPopupPKchh+0x20>
    77a0:	30 e0       	ldi	r19, 0x00	; 0
	{
		diff = -1 ;
	}
	Rotary.Rotary_diff = 0 ;
    77a2:	10 92 a9 05 	sts	0x05A9, r1


static uint8_t popupProcess( uint8_t max )
{
	int8_t popidxud = qRotary() ;
	uint8_t popidx = PopupData.PopupIdx ;
    77a6:	20 91 8c 06 	lds	r18, 0x068C
  
	if ( PopupData.PopupTimer )
    77aa:	90 91 8e 06 	lds	r25, 0x068E
    77ae:	99 23       	and	r25, r25
    77b0:	69 f0       	breq	.+26     	; 0x77cc <_Z7doPopupPKchh+0x4a>
	{
		if ( BLINK_ON_PHASE )
    77b2:	80 91 79 0d 	lds	r24, 0x0D79
    77b6:	86 ff       	sbrs	r24, 6
    77b8:	0c c0       	rjmp	.+24     	; 0x77d2 <_Z7doPopupPKchh+0x50>
		{
			if ( --PopupData.PopupTimer == 0 )
    77ba:	89 2f       	mov	r24, r25
    77bc:	81 50       	subi	r24, 0x01	; 1
    77be:	80 93 8e 06 	sts	0x068E, r24
    77c2:	88 23       	and	r24, r24
    77c4:	31 f4       	brne	.+12     	; 0x77d2 <_Z7doPopupPKchh+0x50>
			{
				// Timeout popup
				PopupData.PopupActive = 0 ;
    77c6:	10 92 8b 06 	sts	0x068B, r1
    77ca:	25 c0       	rjmp	.+74     	; 0x7816 <_Z7doPopupPKchh+0x94>
			}
		}
	}
	else
	{
		PopupData.PopupTimer = 255 ;
    77cc:	8f ef       	ldi	r24, 0xFF	; 255
    77ce:	80 93 8e 06 	sts	0x068E, r24
  }
	
	switch(Tevent)
    77d2:	80 91 aa 05 	lds	r24, 0x05AA
    77d6:	81 36       	cpi	r24, 0x61	; 97
    77d8:	b1 f0       	breq	.+44     	; 0x7806 <_Z7doPopupPKchh+0x84>
    77da:	82 36       	cpi	r24, 0x62	; 98
    77dc:	28 f4       	brcc	.+10     	; 0x77e8 <_Z7doPopupPKchh+0x66>
    77de:	80 32       	cpi	r24, 0x20	; 32
    77e0:	61 f0       	breq	.+24     	; 0x77fa <_Z7doPopupPKchh+0x78>
    77e2:	8e 32       	cpi	r24, 0x2E	; 46
    77e4:	d1 f4       	brne	.+52     	; 0x781a <_Z7doPopupPKchh+0x98>
    77e6:	09 c0       	rjmp	.+18     	; 0x77fa <_Z7doPopupPKchh+0x78>
    77e8:	83 36       	cpi	r24, 0x63	; 99
    77ea:	29 f0       	breq	.+10     	; 0x77f6 <_Z7doPopupPKchh+0x74>
    77ec:	83 36       	cpi	r24, 0x63	; 99
    77ee:	b8 f0       	brcs	.+46     	; 0x781e <_Z7doPopupPKchh+0x9c>
    77f0:	8e 38       	cpi	r24, 0x8E	; 142
    77f2:	99 f4       	brne	.+38     	; 0x781a <_Z7doPopupPKchh+0x98>
    77f4:	08 c0       	rjmp	.+16     	; 0x7806 <_Z7doPopupPKchh+0x84>
    77f6:	3f ef       	ldi	r19, 0xFF	; 255
    77f8:	19 c0       	rjmp	.+50     	; 0x782c <_Z7doPopupPKchh+0xaa>
	{
    case EVT_KEY_BREAK(KEY_MENU) :
    case EVT_KEY_BREAK(BTN_RE):
			PopupData.PopupActive = 0 ;
    77fa:	10 92 8b 06 	sts	0x068B, r1
			PopupData.PopupTimer = 0 ;
    77fe:	10 92 8e 06 	sts	0x068E, r1
    7802:	81 e0       	ldi	r24, 0x01	; 1
    7804:	23 c0       	rjmp	.+70     	; 0x784c <_Z7doPopupPKchh+0xca>
			popidxud = 1 ;
		break ;
    
		case EVT_KEY_FIRST(KEY_EXIT) :
		case EVT_KEY_LONG(BTN_RE) :
			killEvents( Tevent ) ;
    7806:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
			Tevent = 0 ;
    780a:	10 92 aa 05 	sts	0x05AA, r1
			PopupData.PopupActive = 0 ;
    780e:	10 92 8b 06 	sts	0x068B, r1
			PopupData.PopupTimer = 0 ;
    7812:	10 92 8e 06 	sts	0x068E, r1
    7816:	82 e0       	ldi	r24, 0x02	; 2
    7818:	19 c0       	rjmp	.+50     	; 0x784c <_Z7doPopupPKchh+0xca>
		return POPUP_EXIT ;
	}

	if (popidxud > 0)
    781a:	31 30       	cpi	r19, 0x01	; 1
    781c:	29 f4       	brne	.+10     	; 0x7828 <_Z7doPopupPKchh+0xa6>
	{
		if ( popidx < max )
    781e:	41 50       	subi	r20, 0x01	; 1
    7820:	24 17       	cp	r18, r20
    7822:	50 f4       	brcc	.+20     	; 0x7838 <_Z7doPopupPKchh+0xb6>
		{
			popidx += 1 ;
    7824:	2f 5f       	subi	r18, 0xFF	; 255
    7826:	08 c0       	rjmp	.+16     	; 0x7838 <_Z7doPopupPKchh+0xb6>
		}
	}
	else if (popidxud < 0)
    7828:	3f 3f       	cpi	r19, 0xFF	; 255
    782a:	21 f4       	brne	.+8      	; 0x7834 <_Z7doPopupPKchh+0xb2>
	{		
		if ( popidx )
    782c:	22 23       	and	r18, r18
    782e:	11 f0       	breq	.+4      	; 0x7834 <_Z7doPopupPKchh+0xb2>
		{
			popidx -= 1 ;
    7830:	21 50       	subi	r18, 0x01	; 1
    7832:	02 c0       	rjmp	.+4      	; 0x7838 <_Z7doPopupPKchh+0xb6>
		}
	}
	
	if (popidxud )
    7834:	33 23       	and	r19, r19
    7836:	39 f0       	breq	.+14     	; 0x7846 <_Z7doPopupPKchh+0xc4>
	{
		if ( PopupData.PopupTimer )
    7838:	80 91 8e 06 	lds	r24, 0x068E
    783c:	88 23       	and	r24, r24
    783e:	19 f0       	breq	.+6      	; 0x7846 <_Z7doPopupPKchh+0xc4>
		{
			PopupData.PopupTimer = 255 ;
    7840:	8f ef       	ldi	r24, 0xFF	; 255
    7842:	80 93 8e 06 	sts	0x068E, r24
		}
	}	

	PopupData.PopupIdx = popidx ;
    7846:	20 93 8c 06 	sts	0x068C, r18
    784a:	80 e0       	ldi	r24, 0x00	; 0
}

static uint8_t popTranslate( uint8_t popidx, uint8_t mask )
{
	uint8_t position ;
	popidx += 1 ;
    784c:	90 91 8c 06 	lds	r25, 0x068C
    7850:	9f 5f       	subi	r25, 0xFF	; 255
    7852:	20 e0       	ldi	r18, 0x00	; 0
	for ( position = 0 ; position < 8 ; position += 1 )
	{
		if ( mask & 1 )
    7854:	61 2f       	mov	r22, r17
    7856:	70 e0       	ldi	r23, 0x00	; 0
    7858:	10 ff       	sbrs	r17, 0
    785a:	02 c0       	rjmp	.+4      	; 0x7860 <_Z7doPopupPKchh+0xde>
		{
			if ( --popidx == 0)
    785c:	91 50       	subi	r25, 0x01	; 1
    785e:	39 f0       	breq	.+14     	; 0x786e <_Z7doPopupPKchh+0xec>

static uint8_t popTranslate( uint8_t popidx, uint8_t mask )
{
	uint8_t position ;
	popidx += 1 ;
	for ( position = 0 ; position < 8 ; position += 1 )
    7860:	2f 5f       	subi	r18, 0xFF	; 255
    7862:	28 30       	cpi	r18, 0x08	; 8
    7864:	21 f0       	breq	.+8      	; 0x786e <_Z7doPopupPKchh+0xec>
			if ( --popidx == 0)
			{
				break ;
			}
		}
		mask >>= 1 ;
    7866:	75 95       	asr	r23
    7868:	67 95       	ror	r22
    786a:	16 2f       	mov	r17, r22
    786c:	f3 cf       	rjmp	.-26     	; 0x7854 <_Z7doPopupPKchh+0xd2>
uint8_t doPopup( const prog_char *list, uint8_t mask, uint8_t width )
{
	uint8_t count = popupDisplay( list, mask, width ) ;
	uint8_t popaction = popupProcess( count - 1 ) ;
	uint8_t popidx = PopupData.PopupIdx ;
	PopupData.PopupSel = popTranslate( popidx, mask ) ;
    786e:	20 93 8d 06 	sts	0x068D, r18
	return popaction ;
}
    7872:	1f 91       	pop	r17
    7874:	08 95       	ret

00007876 <_Z14edit_dr_switchhhahh>:
//  lcd_putsAttIdx(  x, y, s, value, attr ) ;
//  if(edit) CHECK_INCDEC_H_MODELVAR_0( value, max ) ;
//	return value ;
//}

int8_t edit_dr_switch( uint8_t x, uint8_t y, int8_t drswitch, uint8_t attr, uint8_t flags )
    7876:	0f 93       	push	r16
    7878:	1f 93       	push	r17
    787a:	14 2f       	mov	r17, r20
{
	int8_t min = -MAX_DRSWITCH ;
	int8_t max = MAX_DRSWITCH ;
	if ( flags & EDIT_DR_SWITCH_MOMENT )
    787c:	01 ff       	sbrs	r16, 1
    787e:	05 c0       	rjmp	.+10     	; 0x788a <_Z14edit_dr_switchhhahh+0x14>
	{
		putsMomentDrSwitches( x, y, drswitch, attr ) ;
    7880:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_Z20putsMomentDrSwitcheshhah>
    7884:	6b ee       	ldi	r22, 0xEB	; 235
    7886:	4a e2       	ldi	r20, 0x2A	; 42
    7888:	04 c0       	rjmp	.+8      	; 0x7892 <_Z14edit_dr_switchhhahh+0x1c>
		max = 2*MAX_DRSWITCH-2 ;
		min = 1-MAX_DRSWITCH ;
	}
	else
	{
		putsDrSwitches( x,  y, drswitch, attr ) ;
    788a:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
    788e:	6a ee       	ldi	r22, 0xEA	; 234
    7890:	46 e1       	ldi	r20, 0x16	; 22
	}
	if(flags & EDIT_DR_SWITCH_EDIT) CHECK_INCDEC_MODELSWITCH( drswitch, min, max) ;
    7892:	00 ff       	sbrs	r16, 0
    7894:	04 c0       	rjmp	.+8      	; 0x789e <_Z14edit_dr_switchhhahh+0x28>
    7896:	81 2f       	mov	r24, r17
    7898:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    789c:	18 2f       	mov	r17, r24
	asm("") ;
	return drswitch ;
}
    789e:	81 2f       	mov	r24, r17
    78a0:	1f 91       	pop	r17
    78a2:	0f 91       	pop	r16
    78a4:	08 95       	ret

000078a6 <_ZL9editTimerh>:
    putsChn( 0, y, k+1, 0 ) ; // show CHx
	}
}
#endif

static void editTimer( uint8_t sub )
    78a6:	df 92       	push	r13
    78a8:	ef 92       	push	r14
    78aa:	ff 92       	push	r15
    78ac:	0f 93       	push	r16
    78ae:	1f 93       	push	r17
    78b0:	cf 93       	push	r28
    78b2:	df 93       	push	r29
    78b4:	f8 2e       	mov	r15, r24
{
	uint8_t subN ;
	uint8_t timer ;
	if ( sub < 5 )
    78b6:	84 e0       	ldi	r24, 0x04	; 4
    78b8:	8f 15       	cp	r24, r15
    78ba:	20 f4       	brcc	.+8      	; 0x78c4 <_ZL9editTimerh+0x1e>
    78bc:	15 e0       	ldi	r17, 0x05	; 5
    78be:	dd 24       	eor	r13, r13
    78c0:	d3 94       	inc	r13
    78c2:	04 c0       	rjmp	.+8      	; 0x78cc <_ZL9editTimerh+0x26>
	{
		displayNext() ;
    78c4:	0e 94 cb 24 	call	0x4996	; 0x4996 <_Z11displayNextv>
    78c8:	10 e0       	ldi	r17, 0x00	; 0
    78ca:	dd 24       	eor	r13, r13
	else
	{
		subN = 5 ;
		timer = 1 ;
	}
	TimerMode *ptConfig = &TimerConfig[timer] ;
    78cc:	85 e0       	ldi	r24, 0x05	; 5
    78ce:	d8 9e       	mul	r13, r24
    78d0:	e0 01       	movw	r28, r0
    78d2:	11 24       	eor	r1, r1
    78d4:	c5 55       	subi	r28, 0x55	; 85
    78d6:	da 4f       	sbci	r29, 0xFA	; 250
	FORCE_INDIRECT(ptConfig) ;
	uint8_t y = FH ;
	uint8_t blink = InverseBlink ;
    78d8:	e0 90 eb 06 	lds	r14, 0x06EB
//  uint8_t t_pgOfs = s_pgOfs ;

//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, Str_Timer) ;
    	lcd_puts_Pleft( y, PSTR(STR_TIMER_TEXT));
    78dc:	88 e0       	ldi	r24, 0x08	; 8
    78de:	63 e0       	ldi	r22, 0x03	; 3
    78e0:	77 e0       	ldi	r23, 0x07	; 7
    78e2:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
	    lcd_putc( 5*FW, y, '1'+ timer ) ;
    78e6:	4d 2d       	mov	r20, r13
    78e8:	4f 5c       	subi	r20, 0xCF	; 207
    78ea:	8e e1       	ldi	r24, 0x1E	; 30
    78ec:	68 e0       	ldi	r22, 0x08	; 8
    78ee:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
    	putsTime(12*FW-1, y, ptConfig->tmrVal,(sub==subN ? blink:0),(sub==subN ? blink:0) ) ;
    78f2:	48 81       	ld	r20, Y
    78f4:	59 81       	ldd	r21, Y+1	; 0x01
    78f6:	f1 16       	cp	r15, r17
    78f8:	19 f0       	breq	.+6      	; 0x7900 <_ZL9editTimerh+0x5a>
    78fa:	00 e0       	ldi	r16, 0x00	; 0
    78fc:	20 e0       	ldi	r18, 0x00	; 0
    78fe:	02 c0       	rjmp	.+4      	; 0x7904 <_ZL9editTimerh+0x5e>
    7900:	0e 2d       	mov	r16, r14
    7902:	2e 2d       	mov	r18, r14
    7904:	87 e4       	ldi	r24, 0x47	; 71
    7906:	68 e0       	ldi	r22, 0x08	; 8
    7908:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <_Z8putsTimehhihh>
//    	putsTime(12*FW-1, y, ptConfig->tmrVal,(sub==subN && subSub==0 ? InverseBlink:0),(sub==subN && subSub==1 ? InverseBlink:0) );

#ifndef NOPOTSCROLL
//	    if(sub==subN && (s_editing	) )	// Use s_editing???
	    if(sub==subN)	// Use s_editing???
    790c:	f1 16       	cp	r15, r17
    790e:	a9 f4       	brne	.+42     	; 0x793a <_ZL9editTimerh+0x94>
//	    if(sub==subN && s_editMode )
	    if(sub==subN)
#endif
			{
				int16_t temp = 0 ;
				StepSize = 60 ;
    7910:	8c e3       	ldi	r24, 0x3C	; 60
    7912:	80 93 1e 06 	sts	0x061E, r24
				CHECK_INCDEC_H_MODELVAR( temp, -60 ,60 ) ;
    7916:	80 e0       	ldi	r24, 0x00	; 0
    7918:	64 ec       	ldi	r22, 0xC4	; 196
    791a:	4c e3       	ldi	r20, 0x3C	; 60
    791c:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
				ptConfig->tmrVal += temp ;
    7920:	99 27       	eor	r25, r25
    7922:	87 fd       	sbrc	r24, 7
    7924:	90 95       	com	r25
    7926:	28 81       	ld	r18, Y
    7928:	39 81       	ldd	r19, Y+1	; 0x01
    792a:	82 0f       	add	r24, r18
    792c:	93 1f       	adc	r25, r19
    792e:	99 83       	std	Y+1, r25	; 0x01
    7930:	88 83       	st	Y, r24
        if((int16_t)ptConfig->tmrVal < 0) ptConfig->tmrVal=0;
    7932:	97 ff       	sbrs	r25, 7
    7934:	02 c0       	rjmp	.+4      	; 0x793a <_ZL9editTimerh+0x94>
    7936:	19 82       	std	Y+1, r1	; 0x01
    7938:	18 82       	st	Y, r1
//    		}
			}
			y += FH ;
//   		if((y+=FH)>7*FH) return y ;
//		}
		subN++ ;
    793a:	1f 5f       	subi	r17, 0xFF	; 255

//		if(t_pgOfs<subN) { //timer trigger source -> off, abs, stk, stk%, sw/!sw, !m_sw/!m_sw, chx(value > or < than tmrChVal), ch%
			uint8_t attr = 0 ;
    	if(sub==subN)
    793c:	f1 16       	cp	r15, r17
    793e:	11 f0       	breq	.+4      	; 0x7944 <_ZL9editTimerh+0x9e>
    7940:	40 e0       	ldi	r20, 0x00	; 0
    7942:	07 c0       	rjmp	.+14     	; 0x7952 <_ZL9editTimerh+0xac>
			{
   			attr = INVERS ;
    	  CHECK_INCDEC_MODELSWITCH( ptConfig->tmrModeA, 0, 1+2+16);
    7944:	8a 81       	ldd	r24, Y+2	; 0x02
    7946:	60 e0       	ldi	r22, 0x00	; 0
    7948:	43 e1       	ldi	r20, 0x13	; 19
    794a:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    794e:	8a 83       	std	Y+2, r24	; 0x02
    7950:	41 e0       	ldi	r20, 0x01	; 1
			}
    	putsTmrMode(10*FW,y,attr, (timer == 0 ) ? 1 : 0x81 ) ;
    7952:	dd 20       	and	r13, r13
    7954:	11 f0       	breq	.+4      	; 0x795a <_ZL9editTimerh+0xb4>
    7956:	21 e8       	ldi	r18, 0x81	; 129
    7958:	01 c0       	rjmp	.+2      	; 0x795c <_ZL9editTimerh+0xb6>
    795a:	21 e0       	ldi	r18, 0x01	; 1
    795c:	8c e3       	ldi	r24, 0x3C	; 60
    795e:	60 e1       	ldi	r22, 0x10	; 16
    7960:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <_Z11putsTmrModehhhh>
			y += FH ;
//   		if((y+=FH)>7*FH) return y ;
//		}
		subN++ ;
    7964:	1f 5f       	subi	r17, 0xFF	; 255
  	
//		if(t_pgOfs<subN) { //timer trigger source -> none, sw/!sw
//  	  lcd_puts_Pleft(    y, PSTR(STR_TRIGGERB));
  	  attr = 0 ;
  	  if(sub==subN)
    7966:	f1 16       	cp	r15, r17
    7968:	19 f0       	breq	.+6      	; 0x7970 <_ZL9editTimerh+0xca>
    796a:	02 e0       	ldi	r16, 0x02	; 2
    796c:	20 e0       	ldi	r18, 0x00	; 0
    796e:	07 c0       	rjmp	.+14     	; 0x797e <_ZL9editTimerh+0xd8>
			{
	   		attr = blink ;
			}
			uint8_t doedit = attr ? EDIT_DR_SWITCH_MOMENT | EDIT_DR_SWITCH_EDIT : EDIT_DR_SWITCH_MOMENT ;
    7970:	ee 20       	and	r14, r14
    7972:	19 f4       	brne	.+6      	; 0x797a <_ZL9editTimerh+0xd4>
    7974:	20 e0       	ldi	r18, 0x00	; 0
    7976:	02 e0       	ldi	r16, 0x02	; 2
    7978:	02 c0       	rjmp	.+4      	; 0x797e <_ZL9editTimerh+0xd8>
    797a:	2e 2d       	mov	r18, r14
    797c:	03 e0       	ldi	r16, 0x03	; 3
			ptConfig->tmrModeB = edit_dr_switch( 15*FW, y, ptConfig->tmrModeB, attr, doedit ) ;
    797e:	8a e5       	ldi	r24, 0x5A	; 90
    7980:	68 e1       	ldi	r22, 0x18	; 24
    7982:	4b 81       	ldd	r20, Y+3	; 0x03
    7984:	0e 94 3b 3c 	call	0x7876	; 0x7876 <_Z14edit_dr_switchhhahh>
    7988:	8b 83       	std	Y+3, r24	; 0x03
			y += FH ;
//   		if((y+=FH)>7*FH) return y ;
//  	}
		subN++ ;
    798a:	1f 5f       	subi	r17, 0xFF	; 255
	 
//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, Str_Timer);
  	  attr = 0 ;
  	  if(sub==subN)
    798c:	f1 16       	cp	r15, r17
    798e:	11 f0       	breq	.+4      	; 0x7994 <_ZL9editTimerh+0xee>
    7990:	00 e0       	ldi	r16, 0x00	; 0
    7992:	06 c0       	rjmp	.+12     	; 0x79a0 <_ZL9editTimerh+0xfa>
			{
				attr = INVERS ; CHECK_INCDEC_H_MODELVAR_0(ptConfig->tmrDir,1) ;
    7994:	8c 81       	ldd	r24, Y+4	; 0x04
    7996:	61 e0       	ldi	r22, 0x01	; 1
    7998:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    799c:	8c 83       	std	Y+4, r24	; 0x04
    799e:	01 e0       	ldi	r16, 0x01	; 1
			}
  	  lcd_putsAttIdx(  10*FW, y, PSTR(STR_COUNT_DOWN_UP), ptConfig->tmrDir, attr ) ;
    79a0:	8c e3       	ldi	r24, 0x3C	; 60
    79a2:	60 e2       	ldi	r22, 0x20	; 32
    79a4:	4d ee       	ldi	r20, 0xED	; 237
    79a6:	56 e0       	ldi	r21, 0x06	; 6
    79a8:	2c 81       	ldd	r18, Y+4	; 0x04
    79aa:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>

//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, PSTR("Reset Switch"));
  	  attr = 0 ;
			if(sub==subN)
    79ae:	1f 5f       	subi	r17, 0xFF	; 255
    79b0:	f1 16       	cp	r15, r17
    79b2:	11 f4       	brne	.+4      	; 0x79b8 <_ZL9editTimerh+0x112>
    79b4:	2e 2d       	mov	r18, r14
    79b6:	01 c0       	rjmp	.+2      	; 0x79ba <_ZL9editTimerh+0x114>
    79b8:	20 e0       	ldi	r18, 0x00	; 0
			{
				attr = blink ;
			}

			int16_t sw = (timer==0) ? g_model.timer1RstSw : g_model.timer2RstSw ;
    79ba:	dd 20       	and	r13, r13
    79bc:	19 f4       	brne	.+6      	; 0x79c4 <_ZL9editTimerh+0x11e>
    79be:	40 91 19 05 	lds	r20, 0x0519
    79c2:	02 c0       	rjmp	.+4      	; 0x79c8 <_ZL9editTimerh+0x122>
    79c4:	40 91 1a 05 	lds	r20, 0x051A
			doedit = attr ? EDIT_DR_SWITCH_MOMENT | EDIT_DR_SWITCH_EDIT : EDIT_DR_SWITCH_MOMENT ;
    79c8:	22 23       	and	r18, r18
    79ca:	11 f4       	brne	.+4      	; 0x79d0 <_ZL9editTimerh+0x12a>
    79cc:	02 e0       	ldi	r16, 0x02	; 2
    79ce:	01 c0       	rjmp	.+2      	; 0x79d2 <_ZL9editTimerh+0x12c>
    79d0:	03 e0       	ldi	r16, 0x03	; 3
			sw = edit_dr_switch( 15*FW, y, sw, attr, doedit ) ;
    79d2:	8a e5       	ldi	r24, 0x5A	; 90
    79d4:	68 e2       	ldi	r22, 0x28	; 40
    79d6:	0e 94 3b 3c 	call	0x7876	; 0x7876 <_Z14edit_dr_switchhhahh>
			if ( timer == 0 )
    79da:	dd 20       	and	r13, r13
    79dc:	19 f4       	brne	.+6      	; 0x79e4 <_ZL9editTimerh+0x13e>
			{
				g_model.timer1RstSw = sw ;
    79de:	80 93 19 05 	sts	0x0519, r24
    79e2:	02 c0       	rjmp	.+4      	; 0x79e8 <_ZL9editTimerh+0x142>
			}
			else
			{
				g_model.timer2RstSw = sw ;
    79e4:	80 93 1a 05 	sts	0x051A, r24
//   		if((y+=FH)>7*FH) return y ;
//		}
//		subN++ ;

//	return y ;
}
    79e8:	df 91       	pop	r29
    79ea:	cf 91       	pop	r28
    79ec:	1f 91       	pop	r17
    79ee:	0f 91       	pop	r16
    79f0:	ff 90       	pop	r15
    79f2:	ef 90       	pop	r14
    79f4:	df 90       	pop	r13
    79f6:	08 95       	ret

000079f8 <_Z12editExpoValshhhhhh>:
    if(x>=0) return expou(x,c,d) + drx;
    return -expou(-x,c,-d) + drx;
}
#endif

void editExpoVals( uint8_t edit,uint8_t x, uint8_t y, uint8_t which, uint8_t exWt, uint8_t stkRL)
    79f8:	ef 92       	push	r14
    79fa:	ff 92       	push	r15
    79fc:	0f 93       	push	r16
    79fe:	cf 93       	push	r28
    7a00:	df 93       	push	r29
    7a02:	58 2f       	mov	r21, r24
    7a04:	74 2f       	mov	r23, r20
{
    uint8_t  invBlk = ( edit ) ? InverseBlink : 0 ;
    7a06:	88 23       	and	r24, r24
    7a08:	11 f4       	brne	.+4      	; 0x7a0e <_Z12editExpoValshhhhhh+0x16>
    7a0a:	30 e0       	ldi	r19, 0x00	; 0
    7a0c:	02 c0       	rjmp	.+4      	; 0x7a12 <_Z12editExpoValshhhhhh+0x1a>
    7a0e:	30 91 eb 06 	lds	r19, 0x06EB
//		doedit = (edit || (P1values.p1valdiff )) ;
//#else
		doedit = (edit ) ;
//#endif											

		eptr = &g_model.expoData[s_expoChan] ;
    7a12:	80 91 c4 08 	lds	r24, 0x08C4
    7a16:	e8 2f       	mov	r30, r24
    7a18:	f0 e0       	ldi	r31, 0x00	; 0
    if(which==DR_DRSW1) {
    7a1a:	23 36       	cpi	r18, 0x63	; 99
    7a1c:	71 f4       	brne	.+28     	; 0x7a3a <_Z12editExpoValshhhhhh+0x42>

				eptr->drSw1 = edit_dr_switch( x, y, eptr->drSw1, invBlk, doedit ) ;
    7a1e:	cf 01       	movw	r24, r30
    7a20:	88 0f       	add	r24, r24
    7a22:	99 1f       	adc	r25, r25
    7a24:	7c 01       	movw	r14, r24
    7a26:	23 e0       	ldi	r18, 0x03	; 3
    7a28:	ee 0c       	add	r14, r14
    7a2a:	ff 1c       	adc	r15, r15
    7a2c:	2a 95       	dec	r18
    7a2e:	e1 f7       	brne	.-8      	; 0x7a28 <_Z12editExpoValshhhhhh+0x30>
    7a30:	e8 1a       	sub	r14, r24
    7a32:	f9 0a       	sbc	r15, r25
    7a34:	80 e6       	ldi	r24, 0x60	; 96
    7a36:	93 e0       	ldi	r25, 0x03	; 3
    7a38:	0f c0       	rjmp	.+30     	; 0x7a58 <_Z12editExpoValshhhhhh+0x60>
    }
    else if(which==DR_DRSW2) {
    7a3a:	22 36       	cpi	r18, 0x62	; 98
    7a3c:	d1 f4       	brne	.+52     	; 0x7a72 <_Z12editExpoValshhhhhh+0x7a>
				eptr->drSw2 = edit_dr_switch( x, y, eptr->drSw2, invBlk, doedit ) ;
    7a3e:	cf 01       	movw	r24, r30
    7a40:	88 0f       	add	r24, r24
    7a42:	99 1f       	adc	r25, r25
    7a44:	7c 01       	movw	r14, r24
    7a46:	b3 e0       	ldi	r27, 0x03	; 3
    7a48:	ee 0c       	add	r14, r14
    7a4a:	ff 1c       	adc	r15, r15
    7a4c:	ba 95       	dec	r27
    7a4e:	e1 f7       	brne	.-8      	; 0x7a48 <_Z12editExpoValshhhhhh+0x50>
    7a50:	e8 1a       	sub	r14, r24
    7a52:	f9 0a       	sbc	r15, r25
    7a54:	81 e6       	ldi	r24, 0x61	; 97
    7a56:	93 e0       	ldi	r25, 0x03	; 3
    7a58:	e8 0e       	add	r14, r24
    7a5a:	f9 1e       	adc	r15, r25
    7a5c:	86 2f       	mov	r24, r22
    7a5e:	67 2f       	mov	r22, r23
    7a60:	f7 01       	movw	r30, r14
    7a62:	40 81       	ld	r20, Z
    7a64:	23 2f       	mov	r18, r19
    7a66:	05 2f       	mov	r16, r21
    7a68:	0e 94 3b 3c 	call	0x7876	; 0x7876 <_Z14edit_dr_switchhhahh>
    7a6c:	f7 01       	movw	r30, r14
    7a6e:	80 83       	st	Z, r24
    7a70:	2c c0       	rjmp	.+88     	; 0x7aca <_Z12editExpoValshhhhhh+0xd2>
    }
    else
		{
				ptr = &eptr->expo[which][exWt][stkRL] ;
    7a72:	c2 2f       	mov	r28, r18
    7a74:	d0 e0       	ldi	r29, 0x00	; 0
    7a76:	cc 0f       	add	r28, r28
    7a78:	dd 1f       	adc	r29, r29
    7a7a:	cf 01       	movw	r24, r30
    7a7c:	53 e0       	ldi	r21, 0x03	; 3
    7a7e:	88 0f       	add	r24, r24
    7a80:	99 1f       	adc	r25, r25
    7a82:	5a 95       	dec	r21
    7a84:	e1 f7       	brne	.-8      	; 0x7a7e <_Z12editExpoValshhhhhh+0x86>
    7a86:	8e 1b       	sub	r24, r30
    7a88:	9f 0b       	sbc	r25, r31
    7a8a:	c8 0f       	add	r28, r24
    7a8c:	d9 1f       	adc	r29, r25
    7a8e:	c0 0f       	add	r28, r16
    7a90:	d1 1d       	adc	r29, r1
    7a92:	cc 0f       	add	r28, r28
    7a94:	dd 1f       	adc	r29, r29
    7a96:	ce 0d       	add	r28, r14
    7a98:	d1 1d       	adc	r29, r1
    7a9a:	cc 5a       	subi	r28, 0xAC	; 172
    7a9c:	dc 4f       	sbci	r29, 0xFC	; 252
				FORCE_INDIRECT(ptr) ;
        
#if GVARS
				if(exWt==DR_EXPO)
    7a9e:	00 23       	and	r16, r16
    7aa0:	49 f4       	brne	.+18     	; 0x7ab4 <_Z12editExpoValshhhhhh+0xbc>
				{
					*ptr = gvarMenuItem( x, y, *ptr, -100, 100, invBlk ) ;
    7aa2:	86 2f       	mov	r24, r22
    7aa4:	67 2f       	mov	r22, r23
    7aa6:	48 81       	ld	r20, Y
    7aa8:	2c e9       	ldi	r18, 0x9C	; 156
    7aaa:	04 e6       	ldi	r16, 0x64	; 100
    7aac:	e3 2e       	mov	r14, r19
    7aae:	0e 94 67 25 	call	0x4ace	; 0x4ace <_Z12gvarMenuItemhhaaah>
    7ab2:	0a c0       	rjmp	.+20     	; 0x7ac8 <_Z12editExpoValshhhhhh+0xd0>
        }
        else
				{
					*ptr = gvarMenuItem( x, y, *ptr+100, 0, 100, invBlk ) - 100 ;
    7ab4:	48 81       	ld	r20, Y
    7ab6:	4c 59       	subi	r20, 0x9C	; 156
    7ab8:	86 2f       	mov	r24, r22
    7aba:	67 2f       	mov	r22, r23
    7abc:	20 e0       	ldi	r18, 0x00	; 0
    7abe:	04 e6       	ldi	r16, 0x64	; 100
    7ac0:	e3 2e       	mov	r14, r19
    7ac2:	0e 94 67 25 	call	0x4ace	; 0x4ace <_Z12gvarMenuItemhhaaah>
    7ac6:	84 56       	subi	r24, 0x64	; 100
    7ac8:	88 83       	st	Y, r24
            lcd_outdezAtt(x, y, *ptr+100, invBlk);
            if(doedit) CHECK_INCDEC_H_MODELVAR(*ptr,-100, 0);
        }
#endif
		}
}
    7aca:	df 91       	pop	r29
    7acc:	cf 91       	pop	r28
    7ace:	0f 91       	pop	r16
    7ad0:	ff 90       	pop	r15
    7ad2:	ef 90       	pop	r14
    7ad4:	08 95       	ret

00007ad6 <_Z14setStickCenterv>:
			drawCurve( 100 ) ;
		}
	asm("") ;
}

void setStickCenter() // copy state of 3 primary to subtrim
    7ad6:	df 92       	push	r13
    7ad8:	ef 92       	push	r14
    7ada:	ff 92       	push	r15
    7adc:	0f 93       	push	r16
    7ade:	1f 93       	push	r17
    7ae0:	df 93       	push	r29
    7ae2:	cf 93       	push	r28
    7ae4:	cd b7       	in	r28, 0x3d	; 61
    7ae6:	de b7       	in	r29, 0x3e	; 62
    7ae8:	c0 54       	subi	r28, 0x40	; 64
    7aea:	d0 40       	sbci	r29, 0x00	; 0
    7aec:	0f b6       	in	r0, 0x3f	; 63
    7aee:	f8 94       	cli
    7af0:	de bf       	out	0x3e, r29	; 62
    7af2:	0f be       	out	0x3f, r0	; 63
    7af4:	cd bf       	out	0x3d, r28	; 61
{
	uint8_t thisPhase ;
  int16_t zero_chans512_before[NUM_CHNOUT];
  int16_t zero_chans512_after[NUM_CHNOUT];

	thisPhase = getFlightPhase() ;
    7af6:	0e 94 30 16 	call	0x2c60	; 0x2c60 <_Z14getFlightPhasev>
    7afa:	d8 2e       	mov	r13, r24
	CurrentPhase = thisPhase ;
    7afc:	80 93 70 08 	sts	0x0870, r24

    perOut(zero_chans512_before,NO_TRAINER | NO_INPUT | FADE_FIRST | FADE_LAST); // do output loop - zero input channels
    7b00:	7e 01       	movw	r14, r28
    7b02:	08 94       	sec
    7b04:	e1 1c       	adc	r14, r1
    7b06:	f1 1c       	adc	r15, r1
    7b08:	c7 01       	movw	r24, r14
    7b0a:	63 e6       	ldi	r22, 0x63	; 99
    7b0c:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <_Z6perOutPih>
    perOut(zero_chans512_after,NO_TRAINER | FADE_FIRST | FADE_LAST); // do output loop - zero input channels
    7b10:	8e 01       	movw	r16, r28
    7b12:	0f 5d       	subi	r16, 0xDF	; 223
    7b14:	1f 4f       	sbci	r17, 0xFF	; 255
    7b16:	c8 01       	movw	r24, r16
    7b18:	61 e6       	ldi	r22, 0x61	; 97
    7b1a:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <_Z6perOutPih>
    7b1e:	e6 e0       	ldi	r30, 0x06	; 6
    7b20:	f3 e0       	ldi	r31, 0x03	; 3
    7b22:	b7 01       	movw	r22, r14
    7b24:	78 01       	movw	r14, r16

    for(uint8_t i=0; i<NUM_CHNOUT; i++)
    {
        int16_t v = g_model.limitData[i].offset;
    7b26:	01 81       	ldd	r16, Z+1	; 0x01
    7b28:	12 81       	ldd	r17, Z+2	; 0x02
        v += g_model.limitData[i].reverse ?
                    (zero_chans512_before[i] - zero_chans512_after[i]) :
                    (zero_chans512_after[i] - zero_chans512_before[i]);
    7b2a:	80 81       	ld	r24, Z
    7b2c:	db 01       	movw	r26, r22
    7b2e:	4d 91       	ld	r20, X+
    7b30:	5c 91       	ld	r21, X
    7b32:	d7 01       	movw	r26, r14
    7b34:	2d 91       	ld	r18, X+
    7b36:	3c 91       	ld	r19, X
    7b38:	88 23       	and	r24, r24
    7b3a:	21 f0       	breq	.+8      	; 0x7b44 <_Z14setStickCenterv+0x6e>
    7b3c:	ca 01       	movw	r24, r20
    7b3e:	82 1b       	sub	r24, r18
    7b40:	93 0b       	sbc	r25, r19
    7b42:	03 c0       	rjmp	.+6      	; 0x7b4a <_Z14setStickCenterv+0x74>
    7b44:	c9 01       	movw	r24, r18
    7b46:	84 1b       	sub	r24, r20
    7b48:	95 0b       	sbc	r25, r21
    7b4a:	80 0f       	add	r24, r16
    7b4c:	91 1f       	adc	r25, r17
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    7b4e:	b3 e0       	ldi	r27, 0x03	; 3
    7b50:	88 3e       	cpi	r24, 0xE8	; 232
    7b52:	9b 07       	cpc	r25, r27
    7b54:	1c f0       	brlt	.+6      	; 0x7b5c <_Z14setStickCenterv+0x86>
    7b56:	88 ee       	ldi	r24, 0xE8	; 232
    7b58:	93 e0       	ldi	r25, 0x03	; 3
    7b5a:	06 c0       	rjmp	.+12     	; 0x7b68 <_Z14setStickCenterv+0x92>
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    7b5c:	2c ef       	ldi	r18, 0xFC	; 252
    7b5e:	89 31       	cpi	r24, 0x19	; 25
    7b60:	92 07       	cpc	r25, r18
    7b62:	14 f4       	brge	.+4      	; 0x7b68 <_Z14setStickCenterv+0x92>
    7b64:	88 e1       	ldi	r24, 0x18	; 24
    7b66:	9c ef       	ldi	r25, 0xFC	; 252
        g_model.limitData[i].offset = max(min(v,(int16_t)1000),(int16_t)-1000); // make sure the offset doesn't go haywire
    7b68:	92 83       	std	Z+2, r25	; 0x02
    7b6a:	81 83       	std	Z+1, r24	; 0x01
    7b6c:	35 96       	adiw	r30, 0x05	; 5
    7b6e:	6e 5f       	subi	r22, 0xFE	; 254
    7b70:	7f 4f       	sbci	r23, 0xFF	; 255
    7b72:	82 e0       	ldi	r24, 0x02	; 2
    7b74:	90 e0       	ldi	r25, 0x00	; 0
    7b76:	e8 0e       	add	r14, r24
    7b78:	f9 1e       	adc	r15, r25
	CurrentPhase = thisPhase ;

    perOut(zero_chans512_before,NO_TRAINER | NO_INPUT | FADE_FIRST | FADE_LAST); // do output loop - zero input channels
    perOut(zero_chans512_after,NO_TRAINER | FADE_FIRST | FADE_LAST); // do output loop - zero input channels

    for(uint8_t i=0; i<NUM_CHNOUT; i++)
    7b7a:	93 e0       	ldi	r25, 0x03	; 3
    7b7c:	e6 35       	cpi	r30, 0x56	; 86
    7b7e:	f9 07       	cpc	r31, r25
    7b80:	91 f6       	brne	.-92     	; 0x7b26 <_Z14setStickCenterv+0x50>
    7b82:	00 e0       	ldi	r16, 0x00	; 0
        g_model.limitData[i].offset = max(min(v,(int16_t)1000),(int16_t)-1000); // make sure the offset doesn't go haywire
    }

  for(uint8_t i=0; i<4; i++)
	{
		if(!IS_THROTTLE(i))
    7b84:	02 30       	cpi	r16, 0x02	; 2
    7b86:	c1 f0       	breq	.+48     	; 0x7bb8 <_Z14setStickCenterv+0xe2>
		{
			int16_t original_trim = getTrimValue(thisPhase, i);
    7b88:	8d 2d       	mov	r24, r13
    7b8a:	60 2f       	mov	r22, r16
    7b8c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    7b90:	7c 01       	movw	r14, r24
    7b92:	10 e0       	ldi	r17, 0x00	; 0
      for (uint8_t phase=0; phase<MAX_MODES; phase +=  1)
			{
        int16_t trim = getRawTrimValue(phase, i);
    7b94:	81 2f       	mov	r24, r17
    7b96:	60 2f       	mov	r22, r16
    7b98:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_Z15getRawTrimValuehh>
    7b9c:	ac 01       	movw	r20, r24
        if (trim <= TRIM_EXTENDED_MAX)
    7b9e:	a1 e0       	ldi	r26, 0x01	; 1
    7ba0:	85 3f       	cpi	r24, 0xF5	; 245
    7ba2:	9a 07       	cpc	r25, r26
    7ba4:	34 f4       	brge	.+12     	; 0x7bb2 <_Z14setStickCenterv+0xdc>
				{
          setTrimValue(phase, i, trim - original_trim);
    7ba6:	4e 19       	sub	r20, r14
    7ba8:	5f 09       	sbc	r21, r15
    7baa:	81 2f       	mov	r24, r17
    7bac:	60 2f       	mov	r22, r16
    7bae:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <_Z12setTrimValuehhi>
  for(uint8_t i=0; i<4; i++)
	{
		if(!IS_THROTTLE(i))
		{
			int16_t original_trim = getTrimValue(thisPhase, i);
      for (uint8_t phase=0; phase<MAX_MODES; phase +=  1)
    7bb2:	1f 5f       	subi	r17, 0xFF	; 255
    7bb4:	14 30       	cpi	r17, 0x04	; 4
    7bb6:	71 f7       	brne	.-36     	; 0x7b94 <_Z14setStickCenterv+0xbe>
                    (zero_chans512_before[i] - zero_chans512_after[i]) :
                    (zero_chans512_after[i] - zero_chans512_before[i]);
        g_model.limitData[i].offset = max(min(v,(int16_t)1000),(int16_t)-1000); // make sure the offset doesn't go haywire
    }

  for(uint8_t i=0; i<4; i++)
    7bb8:	0f 5f       	subi	r16, 0xFF	; 255
    7bba:	04 30       	cpi	r16, 0x04	; 4
    7bbc:	19 f7       	brne	.-58     	; 0x7b84 <_Z14setStickCenterv+0xae>
          setTrimValue(phase, i, trim - original_trim);
				}
			}
		}
	}
  STORE_MODELVARS_TRIM;
    7bbe:	86 e0       	ldi	r24, 0x06	; 6
    7bc0:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
  audioDefevent(AU_WARNING2);
    7bc4:	81 e0       	ldi	r24, 0x01	; 1
    7bc6:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
}
    7bca:	c0 5c       	subi	r28, 0xC0	; 192
    7bcc:	df 4f       	sbci	r29, 0xFF	; 255
    7bce:	0f b6       	in	r0, 0x3f	; 63
    7bd0:	f8 94       	cli
    7bd2:	de bf       	out	0x3e, r29	; 62
    7bd4:	0f be       	out	0x3f, r0	; 63
    7bd6:	cd bf       	out	0x3d, r28	; 61
    7bd8:	cf 91       	pop	r28
    7bda:	df 91       	pop	r29
    7bdc:	1f 91       	pop	r17
    7bde:	0f 91       	pop	r16
    7be0:	ff 90       	pop	r15
    7be2:	ef 90       	pop	r14
    7be4:	df 90       	pop	r13
    7be6:	08 95       	ret

00007be8 <_ZL14menuProcLimitsh>:


static void menuProcLimits(uint8_t sub)
    7be8:	4f 92       	push	r4
    7bea:	5f 92       	push	r5
    7bec:	6f 92       	push	r6
    7bee:	7f 92       	push	r7
    7bf0:	8f 92       	push	r8
    7bf2:	9f 92       	push	r9
    7bf4:	af 92       	push	r10
    7bf6:	bf 92       	push	r11
    7bf8:	cf 92       	push	r12
    7bfa:	df 92       	push	r13
    7bfc:	ef 92       	push	r14
    7bfe:	ff 92       	push	r15
    7c00:	0f 93       	push	r16
    7c02:	1f 93       	push	r17
    7c04:	df 93       	push	r29
    7c06:	cf 93       	push	r28
    7c08:	0f 92       	push	r0
    7c0a:	cd b7       	in	r28, 0x3d	; 61
    7c0c:	de b7       	in	r29, 0x3e	; 62
    7c0e:	c8 2e       	mov	r12, r24
{
//#ifdef MODEL_INDEX
	TITLEP(Str_limits);
    7c10:	8e ec       	ldi	r24, 0xCE	; 206
    7c12:	96 e0       	ldi	r25, 0x06	; 6
    7c14:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
//#else	
//    MENU(STR_LIMITS, menuTabModel, e_Limits, NUM_CHNOUT+2, {0, 3});
//#endif
//static bool swVal[NUM_CHNOUT];

	IlinesCount = NUM_CHNOUT+2-1 ;
    7c18:	81 e1       	ldi	r24, 0x11	; 17
    7c1a:	80 93 c2 08 	sts	0x08C2, r24
	Columns = &ProgColumns[COLUMNS_3] ;
    7c1e:	8b e2       	ldi	r24, 0x2B	; 43
    7c20:	94 e0       	ldi	r25, 0x04	; 4
    7c22:	90 93 c1 08 	sts	0x08C1, r25
    7c26:	80 93 c0 08 	sts	0x08C0, r24
uint8_t y = 0;
uint8_t k = 0;
//uint8_t  sub    = mstate2.m_posVert ;
//uint8_t  sub    = mstate2.m_posVert - 1;
uint8_t subSub = g_posHorz;
    7c2a:	60 90 0c 07 	lds	r6, 0x070C
    uint8_t t_pgOfs ;

t_pgOfs = evalOffset(sub, 6);
    7c2e:	8c 2d       	mov	r24, r12
    7c30:	66 e0       	ldi	r22, 0x06	; 6
    7c32:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    7c36:	b8 2e       	mov	r11, r24

	if ( sub < NUM_CHNOUT )
    7c38:	8f e0       	ldi	r24, 0x0F	; 15
    7c3a:	8c 15       	cp	r24, r12
    7c3c:	98 f0       	brcs	.+38     	; 0x7c64 <_ZL14menuProcLimitsh+0x7c>
	{
    lcd_outdez( 13*FW, 0, g_chans512[sub]/2 + 1500 ) ;
    7c3e:	ec 2d       	mov	r30, r12
    7c40:	f0 e0       	ldi	r31, 0x00	; 0
    7c42:	ee 0f       	add	r30, r30
    7c44:	ff 1f       	adc	r31, r31
    7c46:	e4 51       	subi	r30, 0x14	; 20
    7c48:	f9 4f       	sbci	r31, 0xF9	; 249
    7c4a:	80 81       	ld	r24, Z
    7c4c:	91 81       	ldd	r25, Z+1	; 0x01
    7c4e:	62 e0       	ldi	r22, 0x02	; 2
    7c50:	70 e0       	ldi	r23, 0x00	; 0
    7c52:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    7c56:	ab 01       	movw	r20, r22
    7c58:	44 52       	subi	r20, 0x24	; 36
    7c5a:	5a 4f       	sbci	r21, 0xFA	; 250
    7c5c:	8e e4       	ldi	r24, 0x4E	; 78
    7c5e:	60 e0       	ldi	r22, 0x00	; 0
    7c60:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
	}
	
	switch(Tevent)
    7c64:	80 91 aa 05 	lds	r24, 0x05AA
    7c68:	80 38       	cpi	r24, 0x80	; 128
    7c6a:	d9 f5       	brne	.+118    	; 0x7ce2 <_ZL14menuProcLimitsh+0xfa>
	{
    case EVT_KEY_LONG(KEY_MENU):
        if(sub>=0 && sub<NUM_CHNOUT)
    7c6c:	9f e0       	ldi	r25, 0x0F	; 15
    7c6e:	9c 15       	cp	r25, r12
    7c70:	68 f1       	brcs	.+90     	; 0x7ccc <_ZL14menuProcLimitsh+0xe4>
				{
            int16_t v = g_chans512[sub - t_pgOfs];
    7c72:	2c 2d       	mov	r18, r12
    7c74:	30 e0       	ldi	r19, 0x00	; 0
    7c76:	f9 01       	movw	r30, r18
    7c78:	eb 19       	sub	r30, r11
    7c7a:	f1 09       	sbc	r31, r1
    7c7c:	ee 0f       	add	r30, r30
    7c7e:	ff 1f       	adc	r31, r31
    7c80:	e4 51       	subi	r30, 0x14	; 20
    7c82:	f9 4f       	sbci	r31, 0xF9	; 249
    7c84:	40 81       	ld	r20, Z
    7c86:	51 81       	ldd	r21, Z+1	; 0x01
            LimitData *ld = &g_model.limitData[sub] ;
            if ( subSub == 0 )
    7c88:	66 20       	and	r6, r6
    7c8a:	59 f5       	brne	.+86     	; 0x7ce2 <_ZL14menuProcLimitsh+0xfa>
						{
                ld->offset = (ld->reverse) ? -v : v;
    7c8c:	f9 01       	movw	r30, r18
    7c8e:	ee 0f       	add	r30, r30
    7c90:	ff 1f       	adc	r31, r31
    7c92:	ee 0f       	add	r30, r30
    7c94:	ff 1f       	adc	r31, r31
    7c96:	e2 0f       	add	r30, r18
    7c98:	f3 1f       	adc	r31, r19
    7c9a:	ea 5f       	subi	r30, 0xFA	; 250
    7c9c:	fc 4f       	sbci	r31, 0xFC	; 252
    7c9e:	80 81       	ld	r24, Z
    7ca0:	88 23       	and	r24, r24
    7ca2:	19 f0       	breq	.+6      	; 0x7caa <_ZL14menuProcLimitsh+0xc2>
    7ca4:	50 95       	com	r21
    7ca6:	41 95       	neg	r20
    7ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    7caa:	f9 01       	movw	r30, r18
    7cac:	ee 0f       	add	r30, r30
    7cae:	ff 1f       	adc	r31, r31
    7cb0:	ee 0f       	add	r30, r30
    7cb2:	ff 1f       	adc	r31, r31
    7cb4:	e2 0f       	add	r30, r18
    7cb6:	f3 1f       	adc	r31, r19
    7cb8:	e9 5f       	subi	r30, 0xF9	; 249
    7cba:	fc 4f       	sbci	r31, 0xFC	; 252
    7cbc:	51 83       	std	Z+1, r21	; 0x01
    7cbe:	40 83       	st	Z, r20
                STORE_MODELVARS;
    7cc0:	82 e0       	ldi	r24, 0x02	; 2
    7cc2:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
                eeWaitComplete() ;
    7cc6:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>
    7cca:	0b c0       	rjmp	.+22     	; 0x7ce2 <_ZL14menuProcLimitsh+0xfa>
            }
        }
				else if(sub==NUM_CHNOUT)
    7ccc:	a0 e1       	ldi	r26, 0x10	; 16
    7cce:	ca 16       	cp	r12, r26
    7cd0:	41 f4       	brne	.+16     	; 0x7ce2 <_ZL14menuProcLimitsh+0xfa>
				{
	        s_noHi = NO_HI_LEN;
    7cd2:	89 e1       	ldi	r24, 0x19	; 25
    7cd4:	80 93 e7 06 	sts	0x06E7, r24
  	      killEvents(Tevent);
    7cd8:	80 e8       	ldi	r24, 0x80	; 128
    7cda:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
    	    setStickCenter(); //if highlighted and menu pressed - copy trims
    7cde:	0e 94 6b 3d 	call	0x7ad6	; 0x7ad6 <_Z14setStickCenterv>
    7ce2:	e8 e0       	ldi	r30, 0x08	; 8
    7ce4:	ee 2e       	mov	r14, r30
//  lcd_puts_P( 4*FW, 1*FH,PSTR("subT min  max inv"));
	for(uint8_t i=0; i<7; i++)
	{
    y=(i+1)*FH;
    k=i+t_pgOfs;
    if(k==NUM_CHNOUT) break;
    7ce6:	b0 e1       	ldi	r27, 0x10	; 16
    7ce8:	bb 16       	cp	r11, r27
    7cea:	09 f4       	brne	.+2      	; 0x7cee <_ZL14menuProcLimitsh+0x106>
    7cec:	13 c1       	rjmp	.+550    	; 0x7f14 <_ZL14menuProcLimitsh+0x32c>
    LimitData *ld = limitaddress( k ) ;
    7cee:	8b 2d       	mov	r24, r11
    7cf0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_Z12limitaddressh>
    7cf4:	8c 01       	movw	r16, r24
    int16_t v = g_chans512[k] - ( (ld->reverse) ? -ld->offset : ld->offset) ;
    7cf6:	eb 2d       	mov	r30, r11
    7cf8:	f0 e0       	ldi	r31, 0x00	; 0
    7cfa:	ee 0f       	add	r30, r30
    7cfc:	ff 1f       	adc	r31, r31
    7cfe:	e4 51       	subi	r30, 0x14	; 20
    7d00:	f9 4f       	sbci	r31, 0xF9	; 249
    7d02:	40 81       	ld	r20, Z
    7d04:	51 81       	ldd	r21, Z+1	; 0x01
    7d06:	fc 01       	movw	r30, r24
    7d08:	22 81       	ldd	r18, Z+2	; 0x02
    7d0a:	83 81       	ldd	r24, Z+3	; 0x03
    7d0c:	94 81       	ldd	r25, Z+4	; 0x04
    7d0e:	22 23       	and	r18, r18
    7d10:	29 f0       	breq	.+10     	; 0x7d1c <_ZL14menuProcLimitsh+0x134>
    7d12:	ee 27       	eor	r30, r30
    7d14:	ff 27       	eor	r31, r31
    7d16:	e8 1b       	sub	r30, r24
    7d18:	f9 0b       	sbc	r31, r25
    7d1a:	01 c0       	rjmp	.+2      	; 0x7d1e <_ZL14menuProcLimitsh+0x136>
    7d1c:	fc 01       	movw	r30, r24
    7d1e:	ca 01       	movw	r24, r20
    7d20:	8e 1b       	sub	r24, r30
    7d22:	9f 0b       	sbc	r25, r31
    7d24:	fc 01       	movw	r30, r24

    char swVal = '-';  // '-', '<', '>'
    if(v >  50) swVal = (ld->reverse ? 127 : 126);	// Switch to raw inputs?  - remove trim!
    7d26:	83 33       	cpi	r24, 0x33	; 51
    7d28:	91 05       	cpc	r25, r1
    7d2a:	1c f0       	brlt	.+6      	; 0x7d32 <_ZL14menuProcLimitsh+0x14a>
    7d2c:	22 23       	and	r18, r18
    7d2e:	51 f0       	breq	.+20     	; 0x7d44 <_ZL14menuProcLimitsh+0x15c>
    7d30:	07 c0       	rjmp	.+14     	; 0x7d40 <_ZL14menuProcLimitsh+0x158>
    if(v < -50) swVal = (ld->reverse ? 126 : 127);
    7d32:	ee 5c       	subi	r30, 0xCE	; 206
    7d34:	ff 4f       	sbci	r31, 0xFF	; 255
    7d36:	14 f0       	brlt	.+4      	; 0x7d3c <_ZL14menuProcLimitsh+0x154>
    7d38:	9d e2       	ldi	r25, 0x2D	; 45
    7d3a:	05 c0       	rjmp	.+10     	; 0x7d46 <_ZL14menuProcLimitsh+0x15e>
    7d3c:	22 23       	and	r18, r18
    7d3e:	11 f4       	brne	.+4      	; 0x7d44 <_ZL14menuProcLimitsh+0x15c>
    7d40:	9f e7       	ldi	r25, 0x7F	; 127
    7d42:	01 c0       	rjmp	.+2      	; 0x7d46 <_ZL14menuProcLimitsh+0x15e>
    7d44:	9e e7       	ldi	r25, 0x7E	; 126
    7d46:	9b 2c       	mov	r9, r11
    7d48:	93 94       	inc	r9
    putsChn(0,y,k+1,0);
    7d4a:	80 e0       	ldi	r24, 0x00	; 0
    7d4c:	6e 2d       	mov	r22, r14
    7d4e:	49 2d       	mov	r20, r9
    7d50:	20 e0       	ldi	r18, 0x00	; 0
    7d52:	99 83       	std	Y+1, r25	; 0x01
    7d54:	0e 94 22 20 	call	0x4044	; 0x4044 <_Z7putsChnhhhh>
    lcd_putc(12*FW+FW/2, y, swVal ); //'<' : '>'
    7d58:	8b e4       	ldi	r24, 0x4B	; 75
    7d5a:	6e 2d       	mov	r22, r14
    7d5c:	99 81       	ldd	r25, Y+1	; 0x01
    7d5e:	49 2f       	mov	r20, r25
    7d60:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
    
    int8_t limit = (g_model.extendedLimits ? 125 : 100);
    7d64:	80 91 c0 01 	lds	r24, 0x01C0
    7d68:	81 fd       	sbrc	r24, 1
    7d6a:	03 c0       	rjmp	.+6      	; 0x7d72 <_ZL14menuProcLimitsh+0x18a>
    7d6c:	64 e6       	ldi	r22, 0x64	; 100
    7d6e:	a6 2e       	mov	r10, r22
    7d70:	02 c0       	rjmp	.+4      	; 0x7d76 <_ZL14menuProcLimitsh+0x18e>
    7d72:	5d e7       	ldi	r21, 0x7D	; 125
    7d74:	a5 2e       	mov	r10, r21
    7d76:	ff 24       	eor	r15, r15
						value = -125 ;						
					}
          lcd_outdezAtt(  12*FW, y, value,   attr);
            if(active)
						{
              CHECK_INCDEC_H_MODELVAR( temp, -limit,25);
    7d78:	7a 2c       	mov	r7, r10
    7d7a:	71 94       	neg	r7
					}
          lcd_outdezAtt( 17*FW, y, value,    attr);
					if ( t )
					{
//						plotType = PLOT_BLACK ;
						lcd_rect( 9*FW-4, y-1, 56, 9 ) ;
    7d7c:	8e 2c       	mov	r8, r14
    7d7e:	8a 94       	dec	r8
    lcd_putc(12*FW+FW/2, y, swVal ); //'<' : '>'
    
    int8_t limit = (g_model.extendedLimits ? 125 : 100);
		for(uint8_t j=0; j<4;j++)
		{
        uint8_t attr = ((sub==k && subSub==j) ? InverseBlink : 0);
    7d80:	cb 14       	cp	r12, r11
    7d82:	29 f4       	brne	.+10     	; 0x7d8e <_ZL14menuProcLimitsh+0x1a6>
    7d84:	6f 14       	cp	r6, r15
    7d86:	19 f4       	brne	.+6      	; 0x7d8e <_ZL14menuProcLimitsh+0x1a6>
    7d88:	20 91 eb 06 	lds	r18, 0x06EB
    7d8c:	01 c0       	rjmp	.+2      	; 0x7d90 <_ZL14menuProcLimitsh+0x1a8>
    7d8e:	20 e0       	ldi	r18, 0x00	; 0
#ifndef NOPOTSCROLL
			uint8_t active = attr ;	// (attr && s_editing) ;
			if ( s_editing == 0 )
    7d90:	80 91 e6 06 	lds	r24, 0x06E6
    7d94:	88 23       	and	r24, r24
    7d96:	11 f0       	breq	.+4      	; 0x7d9c <_ZL14menuProcLimitsh+0x1b4>
			}
//				uint8_t active = (attr && s_editing) ;
#else
				uint8_t active = (attr && s_editMode) ;
#endif
				if ( active )
    7d98:	22 23       	and	r18, r18
    7d9a:	11 f4       	brne	.+4      	; 0x7da0 <_ZL14menuProcLimitsh+0x1b8>
    7d9c:	dd 24       	eor	r13, r13
    7d9e:	03 c0       	rjmp	.+6      	; 0x7da6 <_ZL14menuProcLimitsh+0x1be>
				{
					StickScrollAllowed = 0 ;		// Block while editing
    7da0:	10 92 06 06 	sts	0x0606, r1
    7da4:	d2 2e       	mov	r13, r18
				}
				int16_t value ;
				int16_t t = 0 ;
				if ( g_model.sub_trim_limit )
    7da6:	80 91 5a 04 	lds	r24, 0x045A
    7daa:	88 23       	and	r24, r24
    7dac:	19 f4       	brne	.+6      	; 0x7db4 <_ZL14menuProcLimitsh+0x1cc>
    7dae:	44 24       	eor	r4, r4
    7db0:	55 24       	eor	r5, r5
    7db2:	16 c0       	rjmp	.+44     	; 0x7de0 <_ZL14menuProcLimitsh+0x1f8>
				{
					if ( ( t = ld->offset ) )
    7db4:	d8 01       	movw	r26, r16
    7db6:	13 96       	adiw	r26, 0x03	; 3
    7db8:	4d 90       	ld	r4, X+
    7dba:	5c 90       	ld	r5, X
    7dbc:	14 97       	sbiw	r26, 0x04	; 4
    7dbe:	41 14       	cp	r4, r1
    7dc0:	51 04       	cpc	r5, r1
    7dc2:	71 f0       	breq	.+28     	; 0x7de0 <_ZL14menuProcLimitsh+0x1f8>
					{
						if ( t > g_model.sub_trim_limit )
    7dc4:	90 e0       	ldi	r25, 0x00	; 0
    7dc6:	84 15       	cp	r24, r4
    7dc8:	95 05       	cpc	r25, r5
    7dca:	14 f4       	brge	.+4      	; 0x7dd0 <_ZL14menuProcLimitsh+0x1e8>
    7dcc:	2c 01       	movw	r4, r24
    7dce:	08 c0       	rjmp	.+16     	; 0x7de0 <_ZL14menuProcLimitsh+0x1f8>
						{
							t = g_model.sub_trim_limit ;
						}
						else if ( t < -g_model.sub_trim_limit )
    7dd0:	44 27       	eor	r20, r20
    7dd2:	55 27       	eor	r21, r21
    7dd4:	48 1b       	sub	r20, r24
    7dd6:	59 0b       	sbc	r21, r25
    7dd8:	44 16       	cp	r4, r20
    7dda:	55 06       	cpc	r5, r21
    7ddc:	0c f4       	brge	.+2      	; 0x7de0 <_ZL14menuProcLimitsh+0x1f8>
    7dde:	2a 01       	movw	r4, r20
						{
							t = -g_model.sub_trim_limit ;
						}
					}
				}
				value = t / 10 ;
    7de0:	c2 01       	movw	r24, r4
    7de2:	6a e0       	ldi	r22, 0x0A	; 10
    7de4:	70 e0       	ldi	r23, 0x00	; 0
    7de6:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
        switch(j)
    7dea:	b1 e0       	ldi	r27, 0x01	; 1
    7dec:	fb 16       	cp	r15, r27
    7dee:	41 f1       	breq	.+80     	; 0x7e40 <_ZL14menuProcLimitsh+0x258>
    7df0:	fb 16       	cp	r15, r27
    7df2:	48 f0       	brcs	.+18     	; 0x7e06 <_ZL14menuProcLimitsh+0x21e>
    7df4:	82 e0       	ldi	r24, 0x02	; 2
    7df6:	f8 16       	cp	r15, r24
    7df8:	09 f4       	brne	.+2      	; 0x7dfc <_ZL14menuProcLimitsh+0x214>
    7dfa:	43 c0       	rjmp	.+134    	; 0x7e82 <_ZL14menuProcLimitsh+0x29a>
    7dfc:	93 e0       	ldi	r25, 0x03	; 3
    7dfe:	f9 16       	cp	r15, r25
    7e00:	09 f0       	breq	.+2      	; 0x7e04 <_ZL14menuProcLimitsh+0x21c>
    7e02:	7c c0       	rjmp	.+248    	; 0x7efc <_ZL14menuProcLimitsh+0x314>
    7e04:	67 c0       	rjmp	.+206    	; 0x7ed4 <_ZL14menuProcLimitsh+0x2ec>
        {
        case 0:
            lcd_outdezAtt(  7*FW+3, y,  ld->offset, attr|PREC1);
    7e06:	d8 01       	movw	r26, r16
    7e08:	13 96       	adiw	r26, 0x03	; 3
    7e0a:	4d 91       	ld	r20, X+
    7e0c:	5c 91       	ld	r21, X
    7e0e:	14 97       	sbiw	r26, 0x04	; 4
    7e10:	20 62       	ori	r18, 0x20	; 32
    7e12:	8d e2       	ldi	r24, 0x2D	; 45
    7e14:	6e 2d       	mov	r22, r14
    7e16:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
            if(active) {
    7e1a:	dd 20       	and	r13, r13
    7e1c:	09 f4       	brne	.+2      	; 0x7e20 <_ZL14menuProcLimitsh+0x238>
    7e1e:	6e c0       	rjmp	.+220    	; 0x7efc <_ZL14menuProcLimitsh+0x314>
                ld->offset = checkIncDec16(ld->offset, -1000, 1000, EE_MODEL);
    7e20:	f8 01       	movw	r30, r16
    7e22:	83 81       	ldd	r24, Z+3	; 0x03
    7e24:	94 81       	ldd	r25, Z+4	; 0x04
    7e26:	68 e1       	ldi	r22, 0x18	; 24
    7e28:	7c ef       	ldi	r23, 0xFC	; 252
    7e2a:	48 ee       	ldi	r20, 0xE8	; 232
    7e2c:	53 e0       	ldi	r21, 0x03	; 3
    7e2e:	22 e0       	ldi	r18, 0x02	; 2
    7e30:	0e 94 b2 12 	call	0x2564	; 0x2564 <_Z13checkIncDec16iiih>
    7e34:	d8 01       	movw	r26, r16
    7e36:	14 96       	adiw	r26, 0x04	; 4
    7e38:	9c 93       	st	X, r25
    7e3a:	8e 93       	st	-X, r24
    7e3c:	13 97       	sbiw	r26, 0x03	; 3
    7e3e:	5e c0       	rjmp	.+188    	; 0x7efc <_ZL14menuProcLimitsh+0x314>
            }
            break;
        case 1:
				{	
					int8_t temp = ld->min - 100 ;
    7e40:	d8 01       	movw	r26, r16
    7e42:	9c 91       	ld	r25, X
    7e44:	94 56       	subi	r25, 0x64	; 100
					
					value += temp ;
    7e46:	49 2f       	mov	r20, r25
    7e48:	55 27       	eor	r21, r21
    7e4a:	47 fd       	sbrc	r20, 7
    7e4c:	50 95       	com	r21
    7e4e:	46 0f       	add	r20, r22
    7e50:	57 1f       	adc	r21, r23
					if ( value < -125 )
					{
						value = -125 ;						
					}
          lcd_outdezAtt(  12*FW, y, value,   attr);
    7e52:	bf ef       	ldi	r27, 0xFF	; 255
    7e54:	43 38       	cpi	r20, 0x83	; 131
    7e56:	5b 07       	cpc	r21, r27
    7e58:	14 f4       	brge	.+4      	; 0x7e5e <_ZL14menuProcLimitsh+0x276>
    7e5a:	43 e8       	ldi	r20, 0x83	; 131
    7e5c:	5f ef       	ldi	r21, 0xFF	; 255
    7e5e:	88 e4       	ldi	r24, 0x48	; 72
    7e60:	6e 2d       	mov	r22, r14
    7e62:	99 83       	std	Y+1, r25	; 0x01
    7e64:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
            if(active)
    7e68:	99 81       	ldd	r25, Y+1	; 0x01
    7e6a:	dd 20       	and	r13, r13
    7e6c:	09 f4       	brne	.+2      	; 0x7e70 <_ZL14menuProcLimitsh+0x288>
    7e6e:	46 c0       	rjmp	.+140    	; 0x7efc <_ZL14menuProcLimitsh+0x314>
						{
              CHECK_INCDEC_H_MODELVAR( temp, -limit,25);
    7e70:	89 2f       	mov	r24, r25
    7e72:	67 2d       	mov	r22, r7
    7e74:	49 e1       	ldi	r20, 0x19	; 25
    7e76:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
              ld->min = temp + 100;
    7e7a:	8c 59       	subi	r24, 0x9C	; 156
    7e7c:	f8 01       	movw	r30, r16
    7e7e:	80 83       	st	Z, r24
    7e80:	3d c0       	rjmp	.+122    	; 0x7efc <_ZL14menuProcLimitsh+0x314>
            }
				}
        break;
        case 2:
				{	
					value += (int8_t)(ld->max+100) ;
    7e82:	d8 01       	movw	r26, r16
    7e84:	11 96       	adiw	r26, 0x01	; 1
    7e86:	8c 91       	ld	r24, X
    7e88:	8c 59       	subi	r24, 0x9C	; 156
    7e8a:	48 2f       	mov	r20, r24
    7e8c:	55 27       	eor	r21, r21
    7e8e:	47 fd       	sbrc	r20, 7
    7e90:	50 95       	com	r21
    7e92:	46 0f       	add	r20, r22
    7e94:	57 1f       	adc	r21, r23
					if ( value > 125 )
					{
						value = 125 ;						
					}
          lcd_outdezAtt( 17*FW, y, value,    attr);
    7e96:	4e 37       	cpi	r20, 0x7E	; 126
    7e98:	51 05       	cpc	r21, r1
    7e9a:	14 f0       	brlt	.+4      	; 0x7ea0 <_ZL14menuProcLimitsh+0x2b8>
    7e9c:	4d e7       	ldi	r20, 0x7D	; 125
    7e9e:	50 e0       	ldi	r21, 0x00	; 0
    7ea0:	86 e6       	ldi	r24, 0x66	; 102
    7ea2:	6e 2d       	mov	r22, r14
    7ea4:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
					if ( t )
    7ea8:	45 28       	or	r4, r5
    7eaa:	31 f0       	breq	.+12     	; 0x7eb8 <_ZL14menuProcLimitsh+0x2d0>
					{
//						plotType = PLOT_BLACK ;
						lcd_rect( 9*FW-4, y-1, 56, 9 ) ;
    7eac:	82 e3       	ldi	r24, 0x32	; 50
    7eae:	68 2d       	mov	r22, r8
    7eb0:	48 e3       	ldi	r20, 0x38	; 56
    7eb2:	29 e0       	ldi	r18, 0x09	; 9
    7eb4:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
//						plotType = PLOT_XOR ;
					}
            if(active)
    7eb8:	dd 20       	and	r13, r13
    7eba:	01 f1       	breq	.+64     	; 0x7efc <_ZL14menuProcLimitsh+0x314>
						{
							int8_t temp = ld->max + 100 ;
    7ebc:	f8 01       	movw	r30, r16
    7ebe:	81 81       	ldd	r24, Z+1	; 0x01
                CHECK_INCDEC_H_MODELVAR( temp, -25,limit);
    7ec0:	8c 59       	subi	r24, 0x9C	; 156
    7ec2:	67 ee       	ldi	r22, 0xE7	; 231
    7ec4:	4a 2d       	mov	r20, r10
    7ec6:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
                ld->max = temp - 100 ;
    7eca:	84 56       	subi	r24, 0x64	; 100
    7ecc:	d8 01       	movw	r26, r16
    7ece:	11 96       	adiw	r26, 0x01	; 1
    7ed0:	8c 93       	st	X, r24
    7ed2:	14 c0       	rjmp	.+40     	; 0x7efc <_ZL14menuProcLimitsh+0x314>
            }
				}
        break;
        case 3:
						menu_lcd_HYPHINV( 18*FW, y, ld->reverse, attr ) ;
    7ed4:	8c e6       	ldi	r24, 0x6C	; 108
    7ed6:	6e 2d       	mov	r22, r14
    7ed8:	f8 01       	movw	r30, r16
    7eda:	42 81       	ldd	r20, Z+2	; 0x02
    7edc:	0e 94 ab 22 	call	0x4556	; 0x4556 <_Z16menu_lcd_HYPHINVhhhh>
//            lcd_putsnAtt(   18*FW, y, PSTR("---INV")+ld->reverse*3,3,attr);
            if(active) {
    7ee0:	dd 20       	and	r13, r13
    7ee2:	61 f0       	breq	.+24     	; 0x7efc <_ZL14menuProcLimitsh+0x314>
                CHECK_INCDEC_H_MODELVAR_0(ld->reverse, 1);
    7ee4:	d8 01       	movw	r26, r16
    7ee6:	12 96       	adiw	r26, 0x02	; 2
    7ee8:	8c 91       	ld	r24, X
    7eea:	61 e0       	ldi	r22, 0x01	; 1
    7eec:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    7ef0:	f8 01       	movw	r30, r16
    7ef2:	12 82       	std	Z+2, r1	; 0x02
    7ef4:	88 23       	and	r24, r24
    7ef6:	11 f0       	breq	.+4      	; 0x7efc <_ZL14menuProcLimitsh+0x314>
    7ef8:	81 e0       	ldi	r24, 0x01	; 1
    7efa:	82 83       	std	Z+2, r24	; 0x02
    if(v < -50) swVal = (ld->reverse ? 126 : 127);
    putsChn(0,y,k+1,0);
    lcd_putc(12*FW+FW/2, y, swVal ); //'<' : '>'
    
    int8_t limit = (g_model.extendedLimits ? 125 : 100);
		for(uint8_t j=0; j<4;j++)
    7efc:	f3 94       	inc	r15
    7efe:	f4 e0       	ldi	r31, 0x04	; 4
    7f00:	ff 16       	cp	r15, r31
    7f02:	09 f0       	breq	.+2      	; 0x7f06 <_ZL14menuProcLimitsh+0x31e>
    7f04:	3d cf       	rjmp	.-390    	; 0x7d80 <_ZL14menuProcLimitsh+0x198>
    7f06:	88 e0       	ldi	r24, 0x08	; 8
    7f08:	e8 0e       	add	r14, r24
    	    setStickCenter(); //if highlighted and menu pressed - copy trims
				}
    break;
	}
//  lcd_puts_P( 4*FW, 1*FH,PSTR("subT min  max inv"));
	for(uint8_t i=0; i<7; i++)
    7f0a:	90 e4       	ldi	r25, 0x40	; 64
    7f0c:	e9 16       	cp	r14, r25
    7f0e:	99 f0       	breq	.+38     	; 0x7f36 <_ZL14menuProcLimitsh+0x34e>
    7f10:	b9 2c       	mov	r11, r9
    7f12:	e9 ce       	rjmp	.-558    	; 0x7ce6 <_ZL14menuProcLimitsh+0xfe>
	if(k==NUM_CHNOUT)
	{
    //last line available - add the "copy trim menu" line
    uint8_t attr = (sub==NUM_CHNOUT) ? INVERS : 0;
//		mstate2.m_posHorz = 0 ;
    lcd_putsAtt(  3*FW,y,PSTR(STR_COPY_TRIM),s_noHi ? 0 : attr);
    7f14:	80 91 e7 06 	lds	r24, 0x06E7
    7f18:	88 23       	and	r24, r24
    7f1a:	11 f0       	breq	.+4      	; 0x7f20 <_ZL14menuProcLimitsh+0x338>
    7f1c:	20 e0       	ldi	r18, 0x00	; 0
    7f1e:	05 c0       	rjmp	.+10     	; 0x7f2a <_ZL14menuProcLimitsh+0x342>
    7f20:	20 e0       	ldi	r18, 0x00	; 0
    7f22:	a0 e1       	ldi	r26, 0x10	; 16
    7f24:	ca 16       	cp	r12, r26
    7f26:	09 f4       	brne	.+2      	; 0x7f2a <_ZL14menuProcLimitsh+0x342>
    7f28:	21 e0       	ldi	r18, 0x01	; 1
    7f2a:	82 e1       	ldi	r24, 0x12	; 18
    7f2c:	6e 2d       	mov	r22, r14
    7f2e:	45 eb       	ldi	r20, 0xB5	; 181
    7f30:	57 e0       	ldi	r21, 0x07	; 7
    7f32:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
//        killEvents(event);
//        setStickCenter(); //if highlighted and menu pressed - copy trims
//    }
	}
	asm("") ;
}
    7f36:	0f 90       	pop	r0
    7f38:	cf 91       	pop	r28
    7f3a:	df 91       	pop	r29
    7f3c:	1f 91       	pop	r17
    7f3e:	0f 91       	pop	r16
    7f40:	ff 90       	pop	r15
    7f42:	ef 90       	pop	r14
    7f44:	df 90       	pop	r13
    7f46:	cf 90       	pop	r12
    7f48:	bf 90       	pop	r11
    7f4a:	af 90       	pop	r10
    7f4c:	9f 90       	pop	r9
    7f4e:	8f 90       	pop	r8
    7f50:	7f 90       	pop	r7
    7f52:	6f 90       	pop	r6
    7f54:	5f 90       	pop	r5
    7f56:	4f 90       	pop	r4
    7f58:	08 95       	ret

00007f5a <_Z9menuProc0h>:
  }
}
#endif


void menuProc0(uint8_t event)
    7f5a:	6f 92       	push	r6
    7f5c:	7f 92       	push	r7
    7f5e:	8f 92       	push	r8
    7f60:	9f 92       	push	r9
    7f62:	af 92       	push	r10
    7f64:	bf 92       	push	r11
    7f66:	cf 92       	push	r12
    7f68:	df 92       	push	r13
    7f6a:	ef 92       	push	r14
    7f6c:	ff 92       	push	r15
    7f6e:	0f 93       	push	r16
    7f70:	1f 93       	push	r17
    7f72:	cf 93       	push	r28
    7f74:	df 93       	push	r29
    7f76:	98 2f       	mov	r25, r24
{
    static uint8_t trimSwLock;
    uint8_t view = g_eeGeneral.view & 0x0f ;
    7f78:	20 91 7a 01 	lds	r18, 0x017A
    7f7c:	1f e0       	ldi	r17, 0x0F	; 15
    7f7e:	c1 2e       	mov	r12, r17
    7f80:	c2 22       	and	r12, r18
    uint8_t tview = g_eeGeneral.view & 0x30 ;
//    static uint8_t displayCount = 0;

		StickScrollAllowed = 0 ;
    7f82:	10 92 06 06 	sts	0x0606, r1

//#if defined(CPUM128) || defined(CPUM2561)
 if ( ! PopupData.PopupActive )
    7f86:	80 91 8b 06 	lds	r24, 0x068B
    7f8a:	88 23       	and	r24, r24
    7f8c:	09 f0       	breq	.+2      	; 0x7f90 <_Z9menuProc0h+0x36>
    7f8e:	ac c0       	rjmp	.+344    	; 0x80e8 <_Z9menuProc0h+0x18e>

void menuProc0(uint8_t event)
{
    static uint8_t trimSwLock;
    uint8_t view = g_eeGeneral.view & 0x0f ;
    uint8_t tview = g_eeGeneral.view & 0x30 ;
    7f90:	82 2f       	mov	r24, r18
    7f92:	80 73       	andi	r24, 0x30	; 48

//#if defined(CPUM128) || defined(CPUM2561)
 if ( ! PopupData.PopupActive )
 {
//#endif
    switch(event)
    7f94:	91 38       	cpi	r25, 0x81	; 129
    7f96:	09 f4       	brne	.+2      	; 0x7f9a <_Z9menuProc0h+0x40>
    7f98:	91 c0       	rjmp	.+290    	; 0x80bc <_Z9menuProc0h+0x162>
    7f9a:	92 38       	cpi	r25, 0x82	; 130
    7f9c:	a0 f4       	brcc	.+40     	; 0x7fc6 <_Z9menuProc0h+0x6c>
    7f9e:	94 32       	cpi	r25, 0x24	; 36
    7fa0:	d1 f1       	breq	.+116    	; 0x8016 <_Z9menuProc0h+0xbc>
    7fa2:	95 32       	cpi	r25, 0x25	; 37
    7fa4:	38 f4       	brcc	.+14     	; 0x7fb4 <_Z9menuProc0h+0x5a>
    7fa6:	92 32       	cpi	r25, 0x22	; 34
    7fa8:	09 f4       	brne	.+2      	; 0x7fac <_Z9menuProc0h+0x52>
    7faa:	64 c0       	rjmp	.+200    	; 0x8074 <_Z9menuProc0h+0x11a>
    7fac:	93 32       	cpi	r25, 0x23	; 35
    7fae:	09 f0       	breq	.+2      	; 0x7fb2 <_Z9menuProc0h+0x58>
    7fb0:	9b c0       	rjmp	.+310    	; 0x80e8 <_Z9menuProc0h+0x18e>
    7fb2:	53 c0       	rjmp	.+166    	; 0x805a <_Z9menuProc0h+0x100>
    7fb4:	91 36       	cpi	r25, 0x61	; 97
    7fb6:	09 f4       	brne	.+2      	; 0x7fba <_Z9menuProc0h+0x60>
    7fb8:	79 c0       	rjmp	.+242    	; 0x80ac <_Z9menuProc0h+0x152>
    7fba:	90 38       	cpi	r25, 0x80	; 128
    7fbc:	c1 f0       	breq	.+48     	; 0x7fee <_Z9menuProc0h+0x94>
    7fbe:	95 32       	cpi	r25, 0x25	; 37
    7fc0:	09 f0       	breq	.+2      	; 0x7fc4 <_Z9menuProc0h+0x6a>
    7fc2:	92 c0       	rjmp	.+292    	; 0x80e8 <_Z9menuProc0h+0x18e>
    7fc4:	33 c0       	rjmp	.+102    	; 0x802c <_Z9menuProc0h+0xd2>
    7fc6:	94 38       	cpi	r25, 0x84	; 132
    7fc8:	e9 f0       	breq	.+58     	; 0x8004 <_Z9menuProc0h+0xaa>
    7fca:	95 38       	cpi	r25, 0x85	; 133
    7fcc:	38 f4       	brcc	.+14     	; 0x7fdc <_Z9menuProc0h+0x82>
    7fce:	92 38       	cpi	r25, 0x82	; 130
    7fd0:	09 f4       	brne	.+2      	; 0x7fd4 <_Z9menuProc0h+0x7a>
    7fd2:	64 c0       	rjmp	.+200    	; 0x809c <_Z9menuProc0h+0x142>
    7fd4:	93 38       	cpi	r25, 0x83	; 131
    7fd6:	09 f0       	breq	.+2      	; 0x7fda <_Z9menuProc0h+0x80>
    7fd8:	87 c0       	rjmp	.+270    	; 0x80e8 <_Z9menuProc0h+0x18e>
    7fda:	5a c0       	rjmp	.+180    	; 0x8090 <_Z9menuProc0h+0x136>
    7fdc:	9e 38       	cpi	r25, 0x8E	; 142
    7fde:	39 f0       	breq	.+14     	; 0x7fee <_Z9menuProc0h+0x94>
    7fe0:	9f 3b       	cpi	r25, 0xBF	; 191
    7fe2:	09 f4       	brne	.+2      	; 0x7fe6 <_Z9menuProc0h+0x8c>
    7fe4:	73 c0       	rjmp	.+230    	; 0x80cc <_Z9menuProc0h+0x172>
    7fe6:	95 38       	cpi	r25, 0x85	; 133
    7fe8:	09 f0       	breq	.+2      	; 0x7fec <_Z9menuProc0h+0x92>
    7fea:	7e c0       	rjmp	.+252    	; 0x80e8 <_Z9menuProc0h+0x18e>
    7fec:	2b c0       	rjmp	.+86     	; 0x8044 <_Z9menuProc0h+0xea>
        {
#endif
#endif
//#if defined(CPUM128) || defined(CPUM2561)
#if 1
					PopupData.PopupActive = 2 ;
    7fee:	82 e0       	ldi	r24, 0x02	; 2
    7ff0:	80 93 8b 06 	sts	0x068B, r24
					PopupData.PopupIdx = 0 ;
    7ff4:	10 92 8c 06 	sts	0x068C, r1
      		killEvents(event) ;
    7ff8:	89 2f       	mov	r24, r25
    7ffa:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
					event = 0 ;
					Tevent = 0 ;
    7ffe:	10 92 aa 05 	sts	0x05AA, r1
    8002:	72 c0       	rjmp	.+228    	; 0x80e8 <_Z9menuProc0h+0x18e>
#endif
#endif
        break;
    case EVT_KEY_LONG(KEY_RIGHT):
#ifndef NOPOTSCROLL
        scroll_disabled = 1;
    8004:	81 e0       	ldi	r24, 0x01	; 1
    8006:	80 93 e9 06 	sts	0x06E9, r24
#endif
        pushMenu(menuProcModelSelect);
    800a:	8e ee       	ldi	r24, 0xEE	; 238
    800c:	97 e5       	ldi	r25, 0x57	; 87
    800e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
        killEvents(event);
    8012:	84 e8       	ldi	r24, 0x84	; 132
    8014:	1f c0       	rjmp	.+62     	; 0x8054 <_Z9menuProc0h+0xfa>
        break;
    case EVT_KEY_BREAK(KEY_RIGHT):
#if defined(CPUM128) || defined(CPUM2561)
        if(view <= e_inputs1)
#else
        if(view == e_inputs1)
    8016:	82 e0       	ldi	r24, 0x02	; 2
    8018:	c8 16       	cp	r12, r24
    801a:	09 f0       	breq	.+2      	; 0x801e <_Z9menuProc0h+0xc4>
    801c:	65 c0       	rjmp	.+202    	; 0x80e8 <_Z9menuProc0h+0x18e>
#endif
				{
					int8_t x ;
					x = inputs_subview ;
    801e:	80 91 ce 08 	lds	r24, 0x08CE
#if defined(CPUM128) || defined(CPUM2561)
					if ( ++x > ((view == e_inputs1) ? 3 : 1) ) x = 0 ;
#else
					if ( ++x > 2 ) x = 0 ;
    8022:	8f 5f       	subi	r24, 0xFF	; 255
    8024:	83 30       	cpi	r24, 0x03	; 3
    8026:	5c f0       	brlt	.+22     	; 0x803e <_Z9menuProc0h+0xe4>
    8028:	80 e0       	ldi	r24, 0x00	; 0
    802a:	09 c0       	rjmp	.+18     	; 0x803e <_Z9menuProc0h+0xe4>
        break;
    case EVT_KEY_BREAK(KEY_LEFT):
#if defined(CPUM128) || defined(CPUM2561)
        if(view <= e_inputs1)
#else
        if(view == e_inputs1)
    802c:	92 e0       	ldi	r25, 0x02	; 2
    802e:	c9 16       	cp	r12, r25
    8030:	09 f0       	breq	.+2      	; 0x8034 <_Z9menuProc0h+0xda>
    8032:	5a c0       	rjmp	.+180    	; 0x80e8 <_Z9menuProc0h+0x18e>
#endif
				{
					int8_t x ;
					x = inputs_subview ;
    8034:	80 91 ce 08 	lds	r24, 0x08CE
#if defined(CPUM128) || defined(CPUM2561)
					if ( --x < 0 ) x = (view == e_inputs1) ? 3 : 1 ;
#else
					if ( --x < 0 ) x = 2 ;
    8038:	81 50       	subi	r24, 0x01	; 1
    803a:	87 fd       	sbrc	r24, 7
    803c:	82 e0       	ldi	r24, 0x02	; 2
#endif
					inputs_subview = x ;
    803e:	80 93 ce 08 	sts	0x08CE, r24
    8042:	52 c0       	rjmp	.+164    	; 0x80e8 <_Z9menuProc0h+0x18e>
        }
#endif
        break;
    case EVT_KEY_LONG(KEY_LEFT):
#ifndef NOPOTSCROLL
        scroll_disabled = 1;
    8044:	81 e0       	ldi	r24, 0x01	; 1
    8046:	80 93 e9 06 	sts	0x06E9, r24
#endif        
#ifdef INDEX_MENU
				pushMenu(menuProcIndex);
    804a:	85 ee       	ldi	r24, 0xE5	; 229
    804c:	9d e4       	ldi	r25, 0x4D	; 77
    804e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
#else
				pushMenu(menuProcSetup);
#endif
        killEvents(event);
    8052:	85 e8       	ldi	r24, 0x85	; 133
    8054:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
    8058:	47 c0       	rjmp	.+142    	; 0x80e8 <_Z9menuProc0h+0x18e>
        break;
    case EVT_KEY_BREAK(KEY_UP):
				view += 1 ;
    805a:	c3 94       	inc	r12
        if( view>=MAX_VIEWS) view = 0 ;
    805c:	e3 e0       	ldi	r30, 0x03	; 3
    805e:	ec 15       	cp	r30, r12
    8060:	08 f4       	brcc	.+2      	; 0x8064 <_Z9menuProc0h+0x10a>
    8062:	cc 24       	eor	r12, r12
        g_eeGeneral.view = view | tview ;
    8064:	8c 29       	or	r24, r12
    8066:	80 93 7a 01 	sts	0x017A, r24
//        STORE_GENERALVARS;     //eeWriteGeneral();
        eeDirty(EE_GENERAL | 0xA0 ) ;
    806a:	81 ea       	ldi	r24, 0xA1	; 161
    806c:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
        audioDefevent(AU_KEYPAD_UP);
    8070:	83 e1       	ldi	r24, 0x13	; 19
    8072:	29 c0       	rjmp	.+82     	; 0x80c6 <_Z9menuProc0h+0x16c>
        break;
    case EVT_KEY_BREAK(KEY_DOWN):
        if(view>0)
    8074:	cc 20       	and	r12, r12
    8076:	19 f4       	brne	.+6      	; 0x807e <_Z9menuProc0h+0x124>
    8078:	b3 e0       	ldi	r27, 0x03	; 3
    807a:	cb 2e       	mov	r12, r27
    807c:	01 c0       	rjmp	.+2      	; 0x8080 <_Z9menuProc0h+0x126>
            view = view - 1;
    807e:	ca 94       	dec	r12
        else
            view = MAX_VIEWS-1;
        g_eeGeneral.view = view | tview ;
    8080:	8c 29       	or	r24, r12
    8082:	80 93 7a 01 	sts	0x017A, r24
//        STORE_GENERALVARS;     //eeWriteGeneral();
        eeDirty(EE_GENERAL | 0xA0 ) ;
    8086:	81 ea       	ldi	r24, 0xA1	; 161
    8088:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
        audioDefevent(AU_KEYPAD_DOWN);
    808c:	84 e1       	ldi	r24, 0x14	; 20
    808e:	1b c0       	rjmp	.+54     	; 0x80c6 <_Z9menuProc0h+0x16c>
        break;
    case EVT_KEY_LONG(KEY_UP):
        pushMenu(menuProcStatistic);
    8090:	8d e4       	ldi	r24, 0x4D	; 77
    8092:	9c e2       	ldi	r25, 0x2C	; 44
    8094:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
        killEvents(event);
    8098:	83 e8       	ldi	r24, 0x83	; 131
    809a:	05 c0       	rjmp	.+10     	; 0x80a6 <_Z9menuProc0h+0x14c>
#elif defined(FRSKY)
				view = e_telemetry ;
				g_eeGeneral.view = view | tview ;
        audioDefevent(AU_MENUS);
#else
        pushMenu(menuProcStatistic);
    809c:	8d e4       	ldi	r24, 0x4D	; 77
    809e:	9c e2       	ldi	r25, 0x2C	; 44
    80a0:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
#endif
        killEvents(event);
    80a4:	82 e8       	ldi	r24, 0x82	; 130
    80a6:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
    80aa:	d2 c1       	rjmp	.+932    	; 0x8450 <_Z9menuProc0h+0x4f6>
				return ;
    case EVT_KEY_FIRST(KEY_EXIT):
        if(s_timer[0].s_timerState==TMR_BEEPING) {
    80ac:	80 91 95 06 	lds	r24, 0x0695
    80b0:	82 30       	cpi	r24, 0x02	; 2
    80b2:	d1 f4       	brne	.+52     	; 0x80e8 <_Z9menuProc0h+0x18e>
            s_timer[0].s_timerState = TMR_STOPPED;
    80b4:	83 e0       	ldi	r24, 0x03	; 3
    80b6:	80 93 95 06 	sts	0x0695, r24
    80ba:	04 c0       	rjmp	.+8      	; 0x80c4 <_Z9menuProc0h+0x16a>
            audioDefevent(AU_MENUS);
        }
#endif
        break;
    case EVT_KEY_LONG(KEY_EXIT):
        resetTimer1();
    80bc:	0e 94 9c 21 	call	0x4338	; 0x4338 <_Z11resetTimer1v>
        resetTimer2();
    80c0:	0e 94 a4 21 	call	0x4348	; 0x4348 <_Z11resetTimer2v>
#if (defined(FRSKY) | defined(HUB))							//!!!!!!!!!!!!!!!!
  	  AltOffset = AltMax = HomeSave = 0 ;					//!!!!!!!!!!!!!!!!
#endif
#endif
#endif
        audioDefevent(AU_MENUS);
    80c4:	87 e1       	ldi	r24, 0x17	; 23
    80c6:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    80ca:	0e c0       	rjmp	.+28     	; 0x80e8 <_Z9menuProc0h+0x18e>
        break;
    case EVT_ENTRY:
        killEvents(KEY_EXIT);
    80cc:	81 e0       	ldi	r24, 0x01	; 1
    80ce:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        killEvents(KEY_UP);
    80d2:	83 e0       	ldi	r24, 0x03	; 3
    80d4:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        killEvents(KEY_DOWN);
    80d8:	82 e0       	ldi	r24, 0x02	; 2
    80da:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        trimSwLock = true;
    80de:	81 e0       	ldi	r24, 0x01	; 1
    80e0:	80 93 cf 08 	sts	0x08CF, r24
				inputs_subview = 0 ;
    80e4:	10 92 ce 08 	sts	0x08CE, r1
//#if defined(CPUM128) || defined(CPUM2561)
 } // !PopupActive
//#endif
		{
			uint8_t tsw ;
			tsw = getSwitch(g_model.trimSw,0) ;
    80e8:	80 91 be 01 	lds	r24, 0x01BE
    80ec:	60 e0       	ldi	r22, 0x00	; 0
    80ee:	40 e0       	ldi	r20, 0x00	; 0
    80f0:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    80f4:	18 2f       	mov	r17, r24
	    if( tsw && !trimSwLock) setStickCenter();
    80f6:	88 23       	and	r24, r24
    80f8:	31 f0       	breq	.+12     	; 0x8106 <_Z9menuProc0h+0x1ac>
    80fa:	80 91 cf 08 	lds	r24, 0x08CF
    80fe:	88 23       	and	r24, r24
    8100:	11 f4       	brne	.+4      	; 0x8106 <_Z9menuProc0h+0x1ac>
    8102:	0e 94 6b 3d 	call	0x7ad6	; 0x7ad6 <_Z14setStickCenterv>
  	  trimSwLock = tsw ;
    8106:	10 93 cf 08 	sts	0x08CF, r17
    if (view != e_telemetry) {
//#else
//		if ( tview == 0 ) {
#endif
        uint8_t x=FW*2;
        uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0) | DBLSIZE;
    810a:	90 91 1f 06 	lds	r25, 0x061F
    810e:	80 91 67 01 	lds	r24, 0x0167
    8112:	98 17       	cp	r25, r24
    8114:	10 f0       	brcs	.+4      	; 0x811a <_Z9menuProc0h+0x1c0>
    8116:	14 e0       	ldi	r17, 0x04	; 4
    8118:	01 c0       	rjmp	.+2      	; 0x811c <_Z9menuProc0h+0x1c2>
    811a:	16 e0       	ldi	r17, 0x06	; 6
				uint8_t i ;

				putsDblSizeName( 0 ) ;
    811c:	80 e0       	ldi	r24, 0x00	; 0
    811e:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <_Z15putsDblSizeNameh>

        putsVBat( 6*FW+1, 2*FH, att|NO_UNIT);
    8122:	10 68       	ori	r17, 0x80	; 128
    8124:	85 e2       	ldi	r24, 0x25	; 37
    8126:	60 e1       	ldi	r22, 0x10	; 16
    8128:	41 2f       	mov	r20, r17
    812a:	0e 94 f2 6d 	call	0xdbe4	; 0xdbe4 <_Z8putsVBathhh>
        lcd_putc( 6*FW+2, 3*FH, 'V');
    812e:	86 e2       	ldi	r24, 0x26	; 38
    8130:	68 e1       	ldi	r22, 0x18	; 24
    8132:	46 e5       	ldi	r20, 0x56	; 86
    8134:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>

//        if ( TimerConfig[0].tmrModeA != TMRMODE_NONE )
//				{
					displayTimer( x+14*FW-3, FH*2, 0, DBLSIZE ) ;
    8138:	8d e5       	ldi	r24, 0x5D	; 93
    813a:	60 e1       	ldi	r22, 0x10	; 16
    813c:	40 e0       	ldi	r20, 0x00	; 0
    813e:	24 e0       	ldi	r18, 0x04	; 4
    8140:	0e 94 e7 24 	call	0x49ce	; 0x49ce <_Z12displayTimerhhhh>
          putsTmrMode(x+7*FW-FW/2,FH*3,0,0);
    8144:	83 e3       	ldi	r24, 0x33	; 51
    8146:	68 e1       	ldi	r22, 0x18	; 24
    8148:	40 e0       	ldi	r20, 0x00	; 0
    814a:	20 e0       	ldi	r18, 0x00	; 0
    814c:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <_Z11putsTmrModehhhh>
//        }

				i = getFlightPhase() ;
    8150:	0e 94 30 16 	call	0x2c60	; 0x2c60 <_Z14getFlightPhasev>
    8154:	48 2f       	mov	r20, r24
				if ( i )
    8156:	88 23       	and	r24, r24
    8158:	71 f0       	breq	.+28     	; 0x8176 <_Z9menuProc0h+0x21c>
				{
					dispFlightModename( 6*FW+2, 2*FH, i ) ;
    815a:	86 e2       	ldi	r24, 0x26	; 38
    815c:	60 e1       	ldi	r22, 0x10	; 16
    815e:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18dispFlightModenamehhh>
					lcd_rect( 6*FW+1, 2*FH-1, 6*FW+2, 9 ) ;
    8162:	85 e2       	ldi	r24, 0x25	; 37
    8164:	6f e0       	ldi	r22, 0x0F	; 15
    8166:	46 e2       	ldi	r20, 0x26	; 38
    8168:	29 e0       	ldi	r18, 0x09	; 9
    816a:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
    816e:	ee 24       	eor	r14, r14
#endif
							{
                lcd_vline(xm-1, ym-1,  3);
                lcd_vline(xm+1, ym-1,  3);
              }
              ym -= val;
    8170:	af e1       	ldi	r26, 0x1F	; 31
    8172:	da 2e       	mov	r13, r26
    8174:	14 c0       	rjmp	.+40     	; 0x819e <_Z9menuProc0h+0x244>
					dispFlightModename( 6*FW+2, 2*FH, i ) ;
					lcd_rect( 6*FW+1, 2*FH-1, 6*FW+2, 9 ) ;
				}
				else
				{
        	lcd_putsAttIdx( 6*FW+2,     2*FH,PSTR(STR_TRIM_OPTS),g_model.trimInc, 0);
    8176:	86 e2       	ldi	r24, 0x26	; 38
    8178:	60 e1       	ldi	r22, 0x10	; 16
    817a:	43 ec       	ldi	r20, 0xC3	; 195
    817c:	5c e0       	ldi	r21, 0x0C	; 12
    817e:	20 91 bc 01 	lds	r18, 0x01BC
    8182:	00 e0       	ldi	r16, 0x00	; 0
    8184:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
					if ( g_model.thrTrim )
    8188:	80 91 bb 01 	lds	r24, 0x01BB
    818c:	80 ff       	sbrs	r24, 0
    818e:	ef cf       	rjmp	.-34     	; 0x816e <_Z9menuProc0h+0x214>
					{
						lcd_puts_P(x+8*FW-FW/2-1,2*FH,PSTR(STR_TTM));
    8190:	88 e3       	ldi	r24, 0x38	; 56
    8192:	60 e1       	ldi	r22, 0x10	; 16
    8194:	4f eb       	ldi	r20, 0xBF	; 191
    8196:	5c e0       	ldi	r21, 0x0C	; 12
    8198:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
    819c:	e8 cf       	rjmp	.-48     	; 0x816e <_Z9menuProc0h+0x214>
            //                        LH LV RV RH
const static prog_uint8_t APM xt[4] = {128*1/4+2, 4, 128-4, 128*3/4-2};
//            static uint8_t vert[4] = {0,1,1,0};
            uint8_t xm,ym;
#ifdef FIX_MODE
						xm = modeFixValue( i ) ;
    819e:	8e 2d       	mov	r24, r14
    81a0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_Z12modeFixValueh>
            xm = pgm_read_byte(xt+xm-1) ;
    81a4:	e8 2f       	mov	r30, r24
    81a6:	f0 e0       	ldi	r31, 0x00	; 0
    81a8:	e6 54       	subi	r30, 0x46	; 70
    81aa:	f3 4f       	sbci	r31, 0xF3	; 243
    81ac:	f4 90       	lpm	r15, Z+
#else
            xm = pgm_read_byte(xt+i) ;
#endif
#ifdef PHASES		
			  	  int16_t valt = getTrimValue( CurrentPhase, i ) ;
    81ae:	80 91 70 08 	lds	r24, 0x0870
    81b2:	6e 2d       	mov	r22, r14
    81b4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    81b8:	ec 01       	movw	r28, r24

#endif

#endif
						uint8_t centre = (valt == 0) ;
            int8_t val = max((int8_t)-(TL+1),min((int8_t)(TL+1),(int8_t)(valt/4)));
    81ba:	64 e0       	ldi	r22, 0x04	; 4
    81bc:	70 e0       	ldi	r23, 0x00	; 0
    81be:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    81c2:	64 3e       	cpi	r22, 0xE4	; 228
    81c4:	0c f4       	brge	.+2      	; 0x81c8 <_Z9menuProc0h+0x26e>
    81c6:	64 ee       	ldi	r22, 0xE4	; 228
    81c8:	06 2f       	mov	r16, r22
    81ca:	6d 31       	cpi	r22, 0x1D	; 29
    81cc:	0c f0       	brlt	.+2      	; 0x81d0 <_Z9menuProc0h+0x276>
    81ce:	0c e1       	ldi	r16, 0x1C	; 28
//            if(vert[i]){
            if( (i == 1) || ( i == 2 ))
    81d0:	8e 2d       	mov	r24, r14
    81d2:	81 50       	subi	r24, 0x01	; 1
    81d4:	82 30       	cpi	r24, 0x02	; 2
    81d6:	e8 f4       	brcc	.+58     	; 0x8212 <_Z9menuProc0h+0x2b8>
						{
              ym=31;
              lcd_vline(xm,   ym-TL, TL*2);
    81d8:	8f 2d       	mov	r24, r15
    81da:	64 e0       	ldi	r22, 0x04	; 4
    81dc:	46 e3       	ldi	r20, 0x36	; 54
    81de:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>

#ifdef FIX_MODE
              if((i == 1) || !(g_model.thrTrim))
    81e2:	f1 e0       	ldi	r31, 0x01	; 1
    81e4:	ef 16       	cp	r14, r31
    81e6:	21 f0       	breq	.+8      	; 0x81f0 <_Z9menuProc0h+0x296>
    81e8:	80 91 bb 01 	lds	r24, 0x01BB
    81ec:	80 fd       	sbrc	r24, 0
    81ee:	0c c0       	rjmp	.+24     	; 0x8208 <_Z9menuProc0h+0x2ae>
#else
              if(((g_eeGeneral.stickMode&1) != (i&1)) || !(g_model.thrTrim))
#endif
							{
                lcd_vline(xm-1, ym-1,  3);
    81f0:	8f 2d       	mov	r24, r15
    81f2:	81 50       	subi	r24, 0x01	; 1
    81f4:	6e e1       	ldi	r22, 0x1E	; 30
    81f6:	43 e0       	ldi	r20, 0x03	; 3
    81f8:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
                lcd_vline(xm+1, ym-1,  3);
    81fc:	8f 2d       	mov	r24, r15
    81fe:	8f 5f       	subi	r24, 0xFF	; 255
    8200:	6e e1       	ldi	r22, 0x1E	; 30
    8202:	43 e0       	ldi	r20, 0x03	; 3
    8204:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
              }
              ym -= val;
    8208:	8d 2d       	mov	r24, r13
    820a:	80 1b       	sub	r24, r16
    820c:	08 2f       	mov	r16, r24
    820e:	1f 2d       	mov	r17, r15
    8210:	15 c0       	rjmp	.+42     	; 0x823c <_Z9menuProc0h+0x2e2>
            }
						else
						{
              ym=59;
              lcd_hline(xm-TL,ym,    TL*2);
    8212:	8f 2d       	mov	r24, r15
    8214:	8b 51       	subi	r24, 0x1B	; 27
    8216:	6b e3       	ldi	r22, 0x3B	; 59
    8218:	46 e3       	ldi	r20, 0x36	; 54
    821a:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
              lcd_hline(xm-1, ym-1,  3);
    821e:	1f 2d       	mov	r17, r15
    8220:	11 50       	subi	r17, 0x01	; 1
    8222:	81 2f       	mov	r24, r17
    8224:	6a e3       	ldi	r22, 0x3A	; 58
    8226:	43 e0       	ldi	r20, 0x03	; 3
    8228:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
              lcd_hline(xm-1, ym+1,  3);
    822c:	81 2f       	mov	r24, r17
    822e:	6c e3       	ldi	r22, 0x3C	; 60
    8230:	43 e0       	ldi	r20, 0x03	; 3
    8232:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
              xm += val;
    8236:	10 2f       	mov	r17, r16
    8238:	1f 0d       	add	r17, r15
    823a:	0b e3       	ldi	r16, 0x3B	; 59
            }
            DO_SQUARE(xm,ym,7) ;
    823c:	81 2f       	mov	r24, r17
    823e:	60 2f       	mov	r22, r16
    8240:	47 e0       	ldi	r20, 0x07	; 7
    8242:	0e 94 f7 22 	call	0x45ee	; 0x45ee <_Z9DO_SQUAREhhh>
						if ( centre )
    8246:	cd 2b       	or	r28, r29
    8248:	29 f4       	brne	.+10     	; 0x8254 <_Z9menuProc0h+0x2fa>
						{
            	DO_SQUARE(xm,ym,5) ;
    824a:	81 2f       	mov	r24, r17
    824c:	60 2f       	mov	r22, r16
    824e:	45 e0       	ldi	r20, 0x05	; 5
    8250:	0e 94 f7 22 	call	0x45ee	; 0x45ee <_Z9DO_SQUAREhhh>
					{
						lcd_puts_P(x+8*FW-FW/2-1,2*FH,PSTR(STR_TTM));
					}
				}
        //trim sliders
        for(uint8_t i=0; i<4; i++)
    8254:	e3 94       	inc	r14
    8256:	94 e0       	ldi	r25, 0x04	; 4
    8258:	e9 16       	cp	r14, r25
    825a:	09 f0       	breq	.+2      	; 0x825e <_Z9menuProc0h+0x304>
    825c:	a0 cf       	rjmp	.-192    	; 0x819e <_Z9menuProc0h+0x244>
					displayTimer( 18*FW+3, 0, 0, 0 ) ;
//        }
    }
#endif

    if(view<e_inputs1)
    825e:	e1 e0       	ldi	r30, 0x01	; 1
    8260:	ec 15       	cp	r30, r12
    8262:	08 f4       	brcc	.+2      	; 0x8266 <_Z9menuProc0h+0x30c>
    8264:	9d c0       	rjmp	.+314    	; 0x83a0 <_Z9menuProc0h+0x446>
    8266:	fc ee       	ldi	r31, 0xEC	; 236
    8268:	af 2e       	mov	r10, r31
    826a:	f6 e0       	ldi	r31, 0x06	; 6
    826c:	bf 2e       	mov	r11, r31
    826e:	c0 e0       	ldi	r28, 0x00	; 0
    8270:	d0 e0       	ldi	r29, 0x00	; 0
                x0 = (i%4*9+3)*FW/2;
                y0 = i/4*FH+40;
                y0 = i<4 ? 40 : 48 ; // /4*FH+40;
                // *1000/1024 = x - x/8 + x/32
#define GPERC(x)  (x - x/32 + x/128)
                lcd_outdezAtt( x0+4*FW , y0, GPERC(val),PREC1 );
    8272:	eb e1       	ldi	r30, 0x1B	; 27
    8274:	6e 2e       	mov	r6, r30
    8276:	71 2c       	mov	r7, r1
            case e_outputBars:
#define WBAR2 (50/2)
                x0       = i<4 ? 128/4+2 : 128*3/4-2;
                y0       = 38+(i%4)*5;
    						int16_t limit = (g_model.extendedLimits ? 1280 : 1024);
                int8_t l = (abs(val) * WBAR2 + 512) / limit ;
    8278:	79 e1       	ldi	r23, 0x19	; 25
    827a:	87 2e       	mov	r8, r23
    827c:	91 2c       	mov	r9, r1
            uint8_t x0,y0;
#if defined(CPUM128) || defined(CPUM2561)
						uint8_t chan = 8 * inputs_subview + i ;
			      int16_t val = g_chans512[chan];
#else
            int16_t val = g_chans512[i];
    827e:	f5 01       	movw	r30, r10
    8280:	00 81       	ld	r16, Z
    8282:	11 81       	ldd	r17, Z+1	; 0x01
#endif
            //val += g_model.limitData[i].reverse ? g_model.limitData[i].offset : -g_model.limitData[i].offset;
            switch(view)
    8284:	cc 20       	and	r12, r12
    8286:	29 f0       	breq	.+10     	; 0x8292 <_Z9menuProc0h+0x338>
    8288:	f1 e0       	ldi	r31, 0x01	; 1
    828a:	cf 16       	cp	r12, r31
    828c:	09 f0       	breq	.+2      	; 0x8290 <_Z9menuProc0h+0x336>
    828e:	7e c0       	rjmp	.+252    	; 0x838c <_Z9menuProc0h+0x432>
    8290:	26 c0       	rjmp	.+76     	; 0x82de <_Z9menuProc0h+0x384>
            {
            case e_outputValues:
                x0 = (i%4*9+3)*FW/2;
                y0 = i/4*FH+40;
                y0 = i<4 ? 40 : 48 ; // /4*FH+40;
    8292:	c4 30       	cpi	r28, 0x04	; 4
    8294:	10 f0       	brcs	.+4      	; 0x829a <_Z9menuProc0h+0x340>
    8296:	40 e3       	ldi	r20, 0x30	; 48
    8298:	01 c0       	rjmp	.+2      	; 0x829c <_Z9menuProc0h+0x342>
    829a:	48 e2       	ldi	r20, 0x28	; 40
                // *1000/1024 = x - x/8 + x/32
#define GPERC(x)  (x - x/32 + x/128)
                lcd_outdezAtt( x0+4*FW , y0, GPERC(val),PREC1 );
    829c:	ce 01       	movw	r24, r28
    829e:	83 70       	andi	r24, 0x03	; 3
    82a0:	90 70       	andi	r25, 0x00	; 0
    82a2:	86 9d       	mul	r24, r6
    82a4:	f0 01       	movw	r30, r0
    82a6:	87 9d       	mul	r24, r7
    82a8:	f0 0d       	add	r31, r0
    82aa:	96 9d       	mul	r25, r6
    82ac:	f0 0d       	add	r31, r0
    82ae:	11 24       	eor	r1, r1
    82b0:	c8 01       	movw	r24, r16
    82b2:	60 e2       	ldi	r22, 0x20	; 32
    82b4:	70 e0       	ldi	r23, 0x00	; 0
    82b6:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    82ba:	9b 01       	movw	r18, r22
    82bc:	c8 01       	movw	r24, r16
    82be:	60 e8       	ldi	r22, 0x80	; 128
    82c0:	70 e0       	ldi	r23, 0x00	; 0
    82c2:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    82c6:	62 1b       	sub	r22, r18
    82c8:	73 0b       	sbc	r23, r19
    82ca:	06 0f       	add	r16, r22
    82cc:	17 1f       	adc	r17, r23
    82ce:	8e 2f       	mov	r24, r30
    82d0:	8f 5d       	subi	r24, 0xDF	; 223
    82d2:	64 2f       	mov	r22, r20
    82d4:	a8 01       	movw	r20, r16
    82d6:	20 e2       	ldi	r18, 0x20	; 32
    82d8:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    82dc:	57 c0       	rjmp	.+174    	; 0x838c <_Z9menuProc0h+0x432>
                break;
            case e_outputBars:
#define WBAR2 (50/2)
                x0       = i<4 ? 128/4+2 : 128*3/4-2;
    82de:	c4 30       	cpi	r28, 0x04	; 4
    82e0:	18 f0       	brcs	.+6      	; 0x82e8 <_Z9menuProc0h+0x38e>
    82e2:	6e e5       	ldi	r22, 0x5E	; 94
    82e4:	d6 2e       	mov	r13, r22
    82e6:	02 c0       	rjmp	.+4      	; 0x82ec <_Z9menuProc0h+0x392>
    82e8:	52 e2       	ldi	r21, 0x22	; 34
    82ea:	d5 2e       	mov	r13, r21
                y0       = 38+(i%4)*5;
    82ec:	ce 01       	movw	r24, r28
    82ee:	83 70       	andi	r24, 0x03	; 3
    82f0:	90 70       	andi	r25, 0x00	; 0
    82f2:	9c 01       	movw	r18, r24
    82f4:	22 0f       	add	r18, r18
    82f6:	33 1f       	adc	r19, r19
    82f8:	22 0f       	add	r18, r18
    82fa:	33 1f       	adc	r19, r19
    82fc:	28 0f       	add	r18, r24
    82fe:	39 1f       	adc	r19, r25
    8300:	96 e2       	ldi	r25, 0x26	; 38
    8302:	f9 2e       	mov	r15, r25
    8304:	f2 0e       	add	r15, r18
    						int16_t limit = (g_model.extendedLimits ? 1280 : 1024);
    8306:	80 91 c0 01 	lds	r24, 0x01C0
    830a:	81 fd       	sbrc	r24, 1
    830c:	03 c0       	rjmp	.+6      	; 0x8314 <_Z9menuProc0h+0x3ba>
    830e:	60 e0       	ldi	r22, 0x00	; 0
    8310:	74 e0       	ldi	r23, 0x04	; 4
    8312:	02 c0       	rjmp	.+4      	; 0x8318 <_Z9menuProc0h+0x3be>
    8314:	60 e0       	ldi	r22, 0x00	; 0
    8316:	75 e0       	ldi	r23, 0x05	; 5
                int8_t l = (abs(val) * WBAR2 + 512) / limit ;
    8318:	98 01       	movw	r18, r16
    831a:	17 ff       	sbrs	r17, 7
    831c:	04 c0       	rjmp	.+8      	; 0x8326 <_Z9menuProc0h+0x3cc>
    831e:	22 27       	eor	r18, r18
    8320:	33 27       	eor	r19, r19
    8322:	20 1b       	sub	r18, r16
    8324:	31 0b       	sbc	r19, r17
    8326:	28 9d       	mul	r18, r8
    8328:	c0 01       	movw	r24, r0
    832a:	29 9d       	mul	r18, r9
    832c:	90 0d       	add	r25, r0
    832e:	38 9d       	mul	r19, r8
    8330:	90 0d       	add	r25, r0
    8332:	11 24       	eor	r1, r1
    8334:	80 50       	subi	r24, 0x00	; 0
    8336:	9e 4f       	sbci	r25, 0xFE	; 254
    8338:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    833c:	e6 2e       	mov	r14, r22
    833e:	89 e1       	ldi	r24, 0x19	; 25
    8340:	86 17       	cp	r24, r22
    8342:	14 f4       	brge	.+4      	; 0x8348 <_Z9menuProc0h+0x3ee>
    8344:	89 e1       	ldi	r24, 0x19	; 25
    8346:	e8 2e       	mov	r14, r24
                if(l>WBAR2)  l =  WBAR2;  // prevent bars from going over the end - comment for debugging

                lcd_hlineStip(x0-WBAR2,y0,WBAR2*2+1,0x55);
    8348:	8d 2d       	mov	r24, r13
    834a:	89 51       	subi	r24, 0x19	; 25
    834c:	6f 2d       	mov	r22, r15
    834e:	43 e3       	ldi	r20, 0x33	; 51
    8350:	25 e5       	ldi	r18, 0x55	; 85
    8352:	0e 94 1f 6b 	call	0xd63e	; 0xd63e <_Z13lcd_hlineStiphhah>
                lcd_vline(x0,y0-2,5);
    8356:	6f 2d       	mov	r22, r15
    8358:	62 50       	subi	r22, 0x02	; 2
    835a:	8d 2d       	mov	r24, r13
    835c:	45 e0       	ldi	r20, 0x05	; 5
    835e:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
                if(val>0){
    8362:	10 16       	cp	r1, r16
    8364:	11 06       	cpc	r1, r17
    8366:	1c f4       	brge	.+6      	; 0x836e <_Z9menuProc0h+0x414>
                    x0+=1;
    8368:	1d 2d       	mov	r17, r13
    836a:	1f 5f       	subi	r17, 0xFF	; 255
    836c:	02 c0       	rjmp	.+4      	; 0x8372 <_Z9menuProc0h+0x418>
                }else{
                    x0-=l;
    836e:	1d 2d       	mov	r17, r13
    8370:	1e 19       	sub	r17, r14
                }
                lcd_hline(x0,y0+1,l);
    8372:	f3 94       	inc	r15
    8374:	81 2f       	mov	r24, r17
    8376:	6f 2d       	mov	r22, r15
    8378:	4e 2d       	mov	r20, r14
    837a:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
                lcd_hline(x0,y0-1,l);
    837e:	9e ef       	ldi	r25, 0xFE	; 254
    8380:	f9 0e       	add	r15, r25
    8382:	81 2f       	mov	r24, r17
    8384:	6f 2d       	mov	r22, r15
    8386:	4e 2d       	mov	r20, r14
    8388:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
    838c:	21 96       	adiw	r28, 0x01	; 1
    838e:	e2 e0       	ldi	r30, 0x02	; 2
    8390:	f0 e0       	ldi	r31, 0x00	; 0
    8392:	ae 0e       	add	r10, r30
    8394:	bf 1e       	adc	r11, r31
	    lcd_hlineStip(46, 33, 36, 0x55 ) ;
  	  lcd_hlineStip(46, 34, 36, 0x55 ) ;
    	lcd_hlineStip(46 + inputs_subview * 18, 33, 18, 0xAA ) ;
	    lcd_hlineStip(46 + inputs_subview * 18, 34, 18, 0xAA ) ;
#endif			
        for(uint8_t i=0; i<8; i++)
    8396:	c8 30       	cpi	r28, 0x08	; 8
    8398:	d1 05       	cpc	r29, r1
    839a:	09 f0       	breq	.+2      	; 0x839e <_Z9menuProc0h+0x444>
    839c:	70 cf       	rjmp	.-288    	; 0x827e <_Z9menuProc0h+0x324>
    839e:	28 c0       	rjmp	.+80     	; 0x83f0 <_Z9menuProc0h+0x496>
//		lcd_outhex4( 0, 1*FH, SportId ) ;
//		lcd_outhex4( 0, 2*FH, SportValue ) ;
        
    }
#endif
    else if(view<e_timer2){
    83a0:	f2 e0       	ldi	r31, 0x02	; 2
    83a2:	cf 16       	cp	r12, r31
    83a4:	c9 f4       	brne	.+50     	; 0x83d8 <_Z9menuProc0h+0x47e>

        doMainScreenGrphics();
    83a6:	0e 94 4a 23 	call	0x4694	; 0x4694 <_Z19doMainScreenGrphicsv>

        uint8_t a = inputs_subview ;
    83aa:	60 91 ce 08 	lds	r22, 0x08CE
				if ( a != 0 ) a = a * 6 + 3 ;		// 0, 9, 15
    83ae:	66 23       	and	r22, r22
    83b0:	29 f0       	breq	.+10     	; 0x83bc <_Z9menuProc0h+0x462>
    83b2:	86 e0       	ldi	r24, 0x06	; 6
    83b4:	68 9f       	mul	r22, r24
    83b6:	60 2d       	mov	r22, r0
    83b8:	11 24       	eor	r1, r1
    83ba:	6d 5f       	subi	r22, 0xFD	; 253
					{
						a = inputs_subview ;
						a += 1 ;
						a *= 6 ;		// 6, 12, 18
					}
					switchDisplay( j, a ) ;
    83bc:	80 e0       	ldi	r24, 0x00	; 0
    83be:	0e 94 07 2b 	call	0x560e	; 0x560e <_Z13switchDisplayhh>
        uint8_t j ;
				for ( j = 0 ; j < 2 ; j += 1 )
				{
					if ( j == 1 )
					{
						a = inputs_subview ;
    83c2:	60 91 ce 08 	lds	r22, 0x08CE
						a += 1 ;
						a *= 6 ;		// 6, 12, 18
    83c6:	6f 5f       	subi	r22, 0xFF	; 255
    83c8:	86 e0       	ldi	r24, 0x06	; 6
    83ca:	68 9f       	mul	r22, r24
    83cc:	b0 01       	movw	r22, r0
    83ce:	11 24       	eor	r1, r1
					}
					switchDisplay( j, a ) ;
    83d0:	81 e0       	ldi	r24, 0x01	; 1
    83d2:	0e 94 07 2b 	call	0x560e	; 0x560e <_Z13switchDisplayhh>
    83d6:	0c c0       	rjmp	.+24     	; 0x83f0 <_Z9menuProc0h+0x496>
//					for(uint8_t i=a; i<(a+3); i++) lcd_putsnAtt((2+j*15)*FW-2 ,(i-a+4)*FH,Str_Switches+3*i,3,getSwitch(i+1, 0) ? INVERS : 0);
			}
    }
    else  // New Timer2 display
    {
			displayTimer( 30+5*FW, FH*5, 1, DBLSIZE ) ;
    83d8:	8c e3       	ldi	r24, 0x3C	; 60
    83da:	68 e2       	ldi	r22, 0x28	; 40
    83dc:	41 e0       	ldi	r20, 0x01	; 1
    83de:	24 e0       	ldi	r18, 0x04	; 4
    83e0:	0e 94 e7 24 	call	0x49ce	; 0x49ce <_Z12displayTimerhhhh>
      putsTmrMode( 30-2*FW-FW/2,FH*6, 0, 0x80 ) ;
    83e4:	8f e0       	ldi	r24, 0x0F	; 15
    83e6:	60 e3       	ldi	r22, 0x30	; 48
    83e8:	40 e0       	ldi	r20, 0x00	; 0
    83ea:	20 e8       	ldi	r18, 0x80	; 128
    83ec:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <_Z11putsTmrModehhhh>
//extern uint8_t TezDebug1 ;
//	lcd_outhex4( 0, 0, (TezDebug1 << 8) | TezDebug0 ) ;

//#if defined(CPUM128) || defined(CPUM2561)
#if 1
	if ( PopupData.PopupActive )
    83f0:	80 91 8b 06 	lds	r24, 0x068B
    83f4:	88 23       	and	r24, r24
    83f6:	61 f1       	breq	.+88     	; 0x8450 <_Z9menuProc0h+0x4f6>
			popaction = doPopup( PSTR("Zero Alt.\0Zero A1 Offs\0Zero A2 Offs\0Reset GPS"), 0x0F, 14 ) ;
		}
		else
		{
#endif
			popaction = doPopup( Str_Main_Popup, 0x1F, 14 ) ;
    83f8:	87 ee       	ldi	r24, 0xE7	; 231
    83fa:	93 e0       	ldi	r25, 0x03	; 3
    83fc:	6f e1       	ldi	r22, 0x1F	; 31
    83fe:	4e e0       	ldi	r20, 0x0E	; 14
    8400:	0e 94 c1 3b 	call	0x7782	; 0x7782 <_Z7doPopupPKchh>
#endif
//		uint8_t popaction = popupProcess( 4 ) ;
//		lcd_char_inverse( 4*FW, (popidx+1)*FH, 12*FW, 0 ) ;
//		popidx = popTranslate( popidx, mask ) ;

		UseLastSubmenuIndex = 0 ;
    8404:	10 92 c6 08 	sts	0x08C6, r1
  	if ( popaction == POPUP_SELECT )
    8408:	81 30       	cpi	r24, 0x01	; 1
    840a:	11 f5       	brne	.+68     	; 0x8450 <_Z9menuProc0h+0x4f6>
		{
			popidx += PopupData.PopupSel ;
    840c:	90 91 8d 06 	lds	r25, 0x068D
//    	if( poptype == 1 )
//			{
//				popidx += 5 ;
//			}
//#endif
			if ( popidx == 0 )	// Model Select
    8410:	99 23       	and	r25, r25
    8412:	19 f4       	brne	.+6      	; 0x841a <_Z9menuProc0h+0x4c0>
			{
        pushMenu(menuProcModelSelect) ;
    8414:	8e ee       	ldi	r24, 0xEE	; 238
    8416:	97 e5       	ldi	r25, 0x57	; 87
    8418:	19 c0       	rjmp	.+50     	; 0x844c <_Z9menuProc0h+0x4f2>
			}
			else if( popidx == 1 )	// Edit Model
    841a:	91 30       	cpi	r25, 0x01	; 1
    841c:	39 f4       	brne	.+14     	; 0x842c <_Z9menuProc0h+0x4d2>
			{
#ifdef MODEL_INDEX
#ifndef NOPOTSCROLL
        scroll_disabled = 1;
    841e:	90 93 e9 06 	sts	0x06E9, r25
#endif        
				RotaryState = ROTARY_MENU_UD ;
    8422:	10 92 af 06 	sts	0x06AF, r1
	  	  pushMenu(menuProcModelIndex) ;
    8426:	80 e0       	ldi	r24, 0x00	; 0
    8428:	95 e4       	ldi	r25, 0x45	; 69
    842a:	10 c0       	rjmp	.+32     	; 0x844c <_Z9menuProc0h+0x4f2>
#else
	  	  pushMenu(menuProcModel) ;
#endif // MODEL_INDEX
			}
			else if( popidx == 2 )	// Last Menu
    842c:	92 30       	cpi	r25, 0x02	; 2
    842e:	29 f4       	brne	.+10     	; 0x843a <_Z9menuProc0h+0x4e0>
			{
				UseLastSubmenuIndex = 1 ;
    8430:	80 93 c6 08 	sts	0x08C6, r24
        pushMenu(lastPopMenu());
    8434:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_Z11lastPopMenuv>
    8438:	09 c0       	rjmp	.+18     	; 0x844c <_Z9menuProc0h+0x4f2>
			}
			else if ( popidx == 3 )	// Radio Setup
    843a:	93 30       	cpi	r25, 0x03	; 3
    843c:	19 f4       	brne	.+6      	; 0x8444 <_Z9menuProc0h+0x4ea>
			{
        pushMenu(menuProcIndex) ;
    843e:	85 ee       	ldi	r24, 0xE5	; 229
    8440:	9d e4       	ldi	r25, 0x4D	; 77
    8442:	04 c0       	rjmp	.+8      	; 0x844c <_Z9menuProc0h+0x4f2>
			}
			else if( popidx == 4 )	// Statistics
    8444:	94 30       	cpi	r25, 0x04	; 4
    8446:	21 f4       	brne	.+8      	; 0x8450 <_Z9menuProc0h+0x4f6>
			{
	  	  pushMenu(menuProcStatistic) ;
    8448:	8d e4       	ldi	r24, 0x4D	; 77
    844a:	9c e2       	ldi	r25, 0x2C	; 44
    844c:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
		}
	}
#endif	

	asm("") ;
}
    8450:	df 91       	pop	r29
    8452:	cf 91       	pop	r28
    8454:	1f 91       	pop	r17
    8456:	0f 91       	pop	r16
    8458:	ff 90       	pop	r15
    845a:	ef 90       	pop	r14
    845c:	df 90       	pop	r13
    845e:	cf 90       	pop	r12
    8460:	bf 90       	pop	r11
    8462:	af 90       	pop	r10
    8464:	9f 90       	pop	r9
    8466:	8f 90       	pop	r8
    8468:	7f 90       	pop	r7
    846a:	6f 90       	pop	r6
    846c:	08 95       	ret

0000846e <_Z12drawFunctionhh>:
#define XD (X0-2)

#define GRAPH_FUNCTION_CURVE		0
#define GRAPH_FUNCTION_EXPO			1

void drawFunction( uint8_t xpos, uint8_t function )
    846e:	df 92       	push	r13
    8470:	ef 92       	push	r14
    8472:	ff 92       	push	r15
    8474:	0f 93       	push	r16
    8476:	1f 93       	push	r17
    8478:	cf 93       	push	r28
    847a:	df 93       	push	r29
    847c:	e6 2e       	mov	r14, r22
    847e:	90 ee       	ldi	r25, 0xE0	; 224
    8480:	f9 2e       	mov	r15, r25
    8482:	f8 0e       	add	r15, r24
    8484:	0f e7       	ldi	r16, 0x7F	; 127
    8486:	c0 e0       	ldi	r28, 0x00	; 0
    8488:	dc ef       	ldi	r29, 0xFC	; 252
			prev_yv = yv ;
		}
		uint8_t len = abs(yv-prev_yv) ;
    if (len <= 1)
		{
    	lcd_plot(xpos + xv, Y0 - yv) ;
    848a:	80 e2       	ldi	r24, 0x20	; 32
    848c:	d8 2e       	mov	r13, r24
{
  int8_t yv ;
	int8_t prev_yv = 127 ;
	for ( int8_t xv = -WCHART ; xv <= WCHART ; xv++ )
	{
		if ( function == GRAPH_FUNCTION_CURVE )
    848e:	ee 20       	and	r14, r14
    8490:	31 f4       	brne	.+12     	; 0x849e <_Z12drawFunctionhh+0x30>
		{
    	yv = intpol(xv * RESX / WCHART, s_curveChan) * WCHART / RESX ;
    8492:	ce 01       	movw	r24, r28
    8494:	60 91 dc 08 	lds	r22, 0x08DC
    8498:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_Z6intpolih>
    849c:	05 c0       	rjmp	.+10     	; 0x84a8 <_Z12drawFunctionhh+0x3a>
		}
		else
		{
    	yv = calcExpo( s_expoChan, xv * RESX / WCHART) * WCHART / RESX ;
    849e:	80 91 c4 08 	lds	r24, 0x08C4
    84a2:	be 01       	movw	r22, r28
    84a4:	0e 94 af 2b 	call	0x575e	; 0x575e <_Z8calcExpohi>
    84a8:	60 e2       	ldi	r22, 0x20	; 32
    84aa:	70 e0       	ldi	r23, 0x00	; 0
    84ac:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    84b0:	16 2f       	mov	r17, r22
		}
    if (prev_yv == 127)
    84b2:	0f 37       	cpi	r16, 0x7F	; 127
    84b4:	09 f4       	brne	.+2      	; 0x84b8 <_Z12drawFunctionhh+0x4a>
    84b6:	06 2f       	mov	r16, r22
		{
			prev_yv = yv ;
		}
		uint8_t len = abs(yv-prev_yv) ;
    84b8:	41 2f       	mov	r20, r17
    84ba:	55 27       	eor	r21, r21
    84bc:	47 fd       	sbrc	r20, 7
    84be:	50 95       	com	r21
    84c0:	80 2f       	mov	r24, r16
    84c2:	99 27       	eor	r25, r25
    84c4:	87 fd       	sbrc	r24, 7
    84c6:	90 95       	com	r25
    84c8:	48 1b       	sub	r20, r24
    84ca:	59 0b       	sbc	r21, r25
    84cc:	57 ff       	sbrs	r21, 7
    84ce:	03 c0       	rjmp	.+6      	; 0x84d6 <_Z12drawFunctionhh+0x68>
    84d0:	50 95       	com	r21
    84d2:	41 95       	neg	r20
    84d4:	5f 4f       	sbci	r21, 0xFF	; 255
    if (len <= 1)
    84d6:	42 30       	cpi	r20, 0x02	; 2
    84d8:	30 f4       	brcc	.+12     	; 0x84e6 <_Z12drawFunctionhh+0x78>
		{
    	lcd_plot(xpos + xv, Y0 - yv) ;
    84da:	6d 2d       	mov	r22, r13
    84dc:	61 1b       	sub	r22, r17
    84de:	8f 2d       	mov	r24, r15
    84e0:	0e 94 08 6b 	call	0xd610	; 0xd610 <_Z8lcd_plothh>
    84e4:	0d c0       	rjmp	.+26     	; 0x8500 <_Z12drawFunctionhh+0x92>
		}
		else
		{
      uint8_t tmp = (prev_yv < yv ? 0 : len-1 ) ;
    84e6:	01 17       	cp	r16, r17
    84e8:	14 f4       	brge	.+4      	; 0x84ee <_Z12drawFunctionhh+0x80>
    84ea:	80 e0       	ldi	r24, 0x00	; 0
    84ec:	02 c0       	rjmp	.+4      	; 0x84f2 <_Z12drawFunctionhh+0x84>
    84ee:	84 2f       	mov	r24, r20
    84f0:	81 50       	subi	r24, 0x01	; 1
      lcd_vline(xpos+xv, Y0 - yv - tmp, len ) ;
    84f2:	61 2f       	mov	r22, r17
    84f4:	61 95       	neg	r22
    84f6:	60 5e       	subi	r22, 0xE0	; 224
    84f8:	68 1b       	sub	r22, r24
    84fa:	8f 2d       	mov	r24, r15
    84fc:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
		}	
		if ( yv )
    8500:	11 23       	and	r17, r17
    8502:	21 f0       	breq	.+8      	; 0x850c <_Z12drawFunctionhh+0x9e>
		{
     	lcd_plot(xpos + xv, Y0 ) ;
    8504:	8f 2d       	mov	r24, r15
    8506:	60 e2       	ldi	r22, 0x20	; 32
    8508:	0e 94 08 6b 	call	0xd610	; 0xd610 <_Z8lcd_plothh>
    850c:	f3 94       	inc	r15
    850e:	a0 96       	adiw	r28, 0x20	; 32
    8510:	01 2f       	mov	r16, r17

void drawFunction( uint8_t xpos, uint8_t function )
{
  int8_t yv ;
	int8_t prev_yv = 127 ;
	for ( int8_t xv = -WCHART ; xv <= WCHART ; xv++ )
    8512:	84 e0       	ldi	r24, 0x04	; 4
    8514:	c0 32       	cpi	r28, 0x20	; 32
    8516:	d8 07       	cpc	r29, r24
    8518:	09 f0       	breq	.+2      	; 0x851c <_Z12drawFunctionhh+0xae>
    851a:	b9 cf       	rjmp	.-142    	; 0x848e <_Z12drawFunctionhh+0x20>
     	lcd_plot(xpos + xv, Y0 ) ;
		}
		prev_yv = yv ;
	}
	
}
    851c:	df 91       	pop	r29
    851e:	cf 91       	pop	r28
    8520:	1f 91       	pop	r17
    8522:	0f 91       	pop	r16
    8524:	ff 90       	pop	r15
    8526:	ef 90       	pop	r14
    8528:	df 90       	pop	r13
    852a:	08 95       	ret

0000852c <_Z9drawCurveh>:
{
  uint8_t cv9 = idx >= MAX_CURVE5 ;
	return cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx] ;
}

void drawCurve( uint8_t offset )
    852c:	ff 92       	push	r15
    852e:	0f 93       	push	r16
    8530:	1f 93       	push	r17
    8532:	cf 93       	push	r28
    8534:	df 93       	push	r29
    8536:	f8 2e       	mov	r15, r24
{
  uint8_t cv9 = s_curveChan >= MAX_CURVE5 ;
    8538:	80 91 dc 08 	lds	r24, 0x08DC
    853c:	00 e0       	ldi	r16, 0x00	; 0
    853e:	88 30       	cpi	r24, 0x08	; 8
    8540:	08 f0       	brcs	.+2      	; 0x8544 <_Z9drawCurveh+0x18>
    8542:	01 e0       	ldi	r16, 0x01	; 1
	int8_t *crv = curveAddress( s_curveChan ) ;
    8544:	0e 94 b8 20 	call	0x4170	; 0x4170 <_ZL12curveAddressh>
    8548:	ec 01       	movw	r28, r24

	lcd_vline(XD, Y0 - WCHART, WCHART * 2);
    854a:	8c e5       	ldi	r24, 0x5C	; 92
    854c:	60 e0       	ldi	r22, 0x00	; 0
    854e:	40 e4       	ldi	r20, 0x40	; 64
    8550:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
    8554:	10 e0       	ldi	r17, 0x00	; 0
    8556:	30 c0       	rjmp	.+96     	; 0x85b8 <_Z9drawCurveh+0x8c>
  
//	plotType = PLOT_BLACK ;
	for(uint8_t i=0; i<(cv9 ? 9 : 5); i++)
  {
    uint8_t xx = XD-1-WCHART+i*WCHART/(cv9 ? 4 : 2);
    8558:	00 23       	and	r16, r16
    855a:	19 f4       	brne	.+6      	; 0x8562 <_Z9drawCurveh+0x36>
    855c:	62 e0       	ldi	r22, 0x02	; 2
    855e:	70 e0       	ldi	r23, 0x00	; 0
    8560:	02 c0       	rjmp	.+4      	; 0x8566 <_Z9drawCurveh+0x3a>
    8562:	64 e0       	ldi	r22, 0x04	; 4
    8564:	70 e0       	ldi	r23, 0x00	; 0
    8566:	55 e0       	ldi	r21, 0x05	; 5
    8568:	88 0f       	add	r24, r24
    856a:	99 1f       	adc	r25, r25
    856c:	5a 95       	dec	r21
    856e:	e1 f7       	brne	.-8      	; 0x8568 <_Z9drawCurveh+0x3c>
    8570:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    8574:	26 2f       	mov	r18, r22
    8576:	36 2f       	mov	r19, r22
    8578:	35 5c       	subi	r19, 0xC5	; 197
    uint8_t yy = Y0-crv[i]*WCHART/100;
    857a:	fe 01       	movw	r30, r28
    857c:	e1 0f       	add	r30, r17
    857e:	f1 1d       	adc	r31, r1
    8580:	80 81       	ld	r24, Z
    8582:	99 27       	eor	r25, r25
    8584:	87 fd       	sbrc	r24, 7
    8586:	90 95       	com	r25
    8588:	45 e0       	ldi	r20, 0x05	; 5
    858a:	88 0f       	add	r24, r24
    858c:	99 1f       	adc	r25, r25
    858e:	4a 95       	dec	r20
    8590:	e1 f7       	brne	.-8      	; 0x858a <_Z9drawCurveh+0x5e>
    8592:	6c e9       	ldi	r22, 0x9C	; 156
    8594:	7f ef       	ldi	r23, 0xFF	; 255
    8596:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>

    if(offset==i)
    859a:	f1 16       	cp	r15, r17
    859c:	31 f4       	brne	.+12     	; 0x85aa <_Z9drawCurveh+0x7e>
    {
			lcd_rect( xx-1, yy-2, 5, 5 ) ;
    859e:	62 5e       	subi	r22, 0xE2	; 226
    85a0:	82 2f       	mov	r24, r18
    85a2:	86 5c       	subi	r24, 0xC6	; 198
    85a4:	45 e0       	ldi	r20, 0x05	; 5
    85a6:	25 e0       	ldi	r18, 0x05	; 5
    85a8:	04 c0       	rjmp	.+8      	; 0x85b2 <_Z9drawCurveh+0x86>
    }
    else
    {
			lcd_rect( xx, yy-1, 3, 3 ) ;
    85aa:	61 5e       	subi	r22, 0xE1	; 225
    85ac:	83 2f       	mov	r24, r19
    85ae:	43 e0       	ldi	r20, 0x03	; 3
    85b0:	23 e0       	ldi	r18, 0x03	; 3
    85b2:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
	int8_t *crv = curveAddress( s_curveChan ) ;

	lcd_vline(XD, Y0 - WCHART, WCHART * 2);
  
//	plotType = PLOT_BLACK ;
	for(uint8_t i=0; i<(cv9 ? 9 : 5); i++)
    85b6:	1f 5f       	subi	r17, 0xFF	; 255
    85b8:	81 2f       	mov	r24, r17
    85ba:	90 e0       	ldi	r25, 0x00	; 0
    85bc:	00 23       	and	r16, r16
    85be:	19 f4       	brne	.+6      	; 0x85c6 <_Z9drawCurveh+0x9a>
    85c0:	25 e0       	ldi	r18, 0x05	; 5
    85c2:	30 e0       	ldi	r19, 0x00	; 0
    85c4:	02 c0       	rjmp	.+4      	; 0x85ca <_Z9drawCurveh+0x9e>
    85c6:	29 e0       	ldi	r18, 0x09	; 9
    85c8:	30 e0       	ldi	r19, 0x00	; 0
    85ca:	82 17       	cp	r24, r18
    85cc:	93 07       	cpc	r25, r19
    85ce:	24 f2       	brlt	.-120    	; 0x8558 <_Z9drawCurveh+0x2c>
    {
			lcd_rect( xx, yy-1, 3, 3 ) ;
    }
  }

	drawFunction( XD, GRAPH_FUNCTION_CURVE ) ;
    85d0:	8c e5       	ldi	r24, 0x5C	; 92
    85d2:	60 e0       	ldi	r22, 0x00	; 0
    85d4:	0e 94 37 42 	call	0x846e	; 0x846e <_Z12drawFunctionhh>
	
//	plotType = PLOT_XOR ;
}
    85d8:	df 91       	pop	r29
    85da:	cf 91       	pop	r28
    85dc:	1f 91       	pop	r17
    85de:	0f 91       	pop	r16
    85e0:	ff 90       	pop	r15
    85e2:	08 95       	ret

000085e4 <_ZN7MState25checkEhPKhhh>:
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
}

#define INC(val,max) if(val<max) {val++;} else {val=0;}
#define DEC(val,max) if(val>0  ) {val--;} else {val=max;}
void MState2::check(uint8_t event, const prog_uint8_t *horTab, uint8_t horTabMax, uint8_t maxrow)
    85e4:	8f 92       	push	r8
    85e6:	9f 92       	push	r9
    85e8:	af 92       	push	r10
    85ea:	bf 92       	push	r11
    85ec:	cf 92       	push	r12
    85ee:	df 92       	push	r13
    85f0:	ef 92       	push	r14
    85f2:	ff 92       	push	r15
    85f4:	0f 93       	push	r16
    85f6:	1f 93       	push	r17
    85f8:	cf 93       	push	r28
    85fa:	df 93       	push	r29
    85fc:	ec 01       	movw	r28, r24
    85fe:	d6 2e       	mov	r13, r22
    8600:	7a 01       	movw	r14, r20
    8602:	c2 2e       	mov	r12, r18
{
	uint8_t l_posHorz ;
	l_posHorz = g_posHorz ;
    8604:	10 91 0c 07 	lds	r17, 0x070C
    //    scrollUD = 0;

    //check pot 2 - if changed -> scroll menu
    //check pot 3 if changed -> cursor down/up
    //we do this in these brackets to prevent it from happening in the main screen
		c4 = calibratedStick[4] ;		// Read only once
    8608:	a0 90 be 06 	lds	r10, 0x06BE
    860c:	b0 90 bf 06 	lds	r11, 0x06BF
		c5 = calibratedStick[5] ;		// Read only once
    8610:	80 90 c0 06 	lds	r8, 0x06C0
    8614:	90 90 c1 06 	lds	r9, 0x06C1
		
		ptrp1 = &P1values ;
		FORCE_INDIRECT(ptrp1) ;
    8618:	e4 e1       	ldi	r30, 0x14	; 20
    861a:	f6 e0       	ldi	r31, 0x06	; 6
    scrollLR = ( ptrp1->p2valprev-c4)/SCROLL_TH;
    861c:	86 81       	ldd	r24, Z+6	; 0x06
    861e:	97 81       	ldd	r25, Z+7	; 0x07
    8620:	8a 19       	sub	r24, r10
    8622:	9b 09       	sbc	r25, r11
    8624:	60 e4       	ldi	r22, 0x40	; 64
    8626:	70 e0       	ldi	r23, 0x00	; 0
    8628:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    862c:	26 2f       	mov	r18, r22
    862e:	60 93 e8 06 	sts	0x06E8, r22
    scrollUD = ( ptrp1->p3valprev-c5)/SCROLL_TH;
    8632:	80 85       	ldd	r24, Z+8	; 0x08
    8634:	91 85       	ldd	r25, Z+9	; 0x09
    8636:	88 19       	sub	r24, r8
    8638:	99 09       	sbc	r25, r9
    863a:	60 e4       	ldi	r22, 0x40	; 64
    863c:	70 e0       	ldi	r23, 0x00	; 0
    863e:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    8642:	60 93 ea 06 	sts	0x06EA, r22

    if(scrollLR) ptrp1->p2valprev = c4;
    8646:	22 23       	and	r18, r18
    8648:	11 f0       	breq	.+4      	; 0x864e <_ZN7MState25checkEhPKhhh+0x6a>
    864a:	b7 82       	std	Z+7, r11	; 0x07
    864c:	a6 82       	std	Z+6, r10	; 0x06
    if(scrollUD) ptrp1->p3valprev = c5;
    864e:	66 23       	and	r22, r22
    8650:	11 f0       	breq	.+4      	; 0x8656 <_ZN7MState25checkEhPKhhh+0x72>
    8652:	91 86       	std	Z+9, r9	; 0x09
    8654:	80 86       	std	Z+8, r8	; 0x08

    if(scroll_disabled || g_eeGeneral.disablePotScroll)
    8656:	80 91 e9 06 	lds	r24, 0x06E9
    865a:	88 23       	and	r24, r24
    865c:	21 f4       	brne	.+8      	; 0x8666 <_ZN7MState25checkEhPKhhh+0x82>
    865e:	80 91 7e 01 	lds	r24, 0x017E
    8662:	85 ff       	sbrs	r24, 5
    8664:	06 c0       	rjmp	.+12     	; 0x8672 <_ZN7MState25checkEhPKhhh+0x8e>
    {
        scrollLR = 0;
    8666:	10 92 e8 06 	sts	0x06E8, r1
        scrollUD = 0;
    866a:	10 92 ea 06 	sts	0x06EA, r1
        scroll_disabled = 0;
    866e:	10 92 e9 06 	sts	0x06E9, r1
    }

    if(scrollLR || scrollUD || ptrp1->p1valdiff) backlightKey() ; // on keypress turn the light on
    8672:	80 91 e8 06 	lds	r24, 0x06E8
    8676:	88 23       	and	r24, r24
    8678:	41 f4       	brne	.+16     	; 0x868a <_ZN7MState25checkEhPKhhh+0xa6>
    867a:	80 91 ea 06 	lds	r24, 0x06EA
    867e:	88 23       	and	r24, r24
    8680:	21 f4       	brne	.+8      	; 0x868a <_ZN7MState25checkEhPKhhh+0xa6>
    8682:	82 81       	ldd	r24, Z+2	; 0x02
    8684:	93 81       	ldd	r25, Z+3	; 0x03
    8686:	89 2b       	or	r24, r25
    8688:	11 f0       	breq	.+4      	; 0x868e <_ZN7MState25checkEhPKhhh+0xaa>
    868a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_Z12backlightKeyv>
//		if ( RotaryState == ROTARY_MENU_LR )
//		{
//			RotaryState = ROTARY_MENU_UD ;
//		}

    uint8_t maxcol = MAXCOL(m_posVert, horTab, horTabMax);
    868e:	98 81       	ld	r25, Y

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL( uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax)
{
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
    8690:	e1 14       	cp	r14, r1
    8692:	f1 04       	cpc	r15, r1
    8694:	11 f4       	brne	.+4      	; 0x869a <_ZN7MState25checkEhPKhhh+0xb6>
    8696:	20 e0       	ldi	r18, 0x00	; 0
    8698:	08 c0       	rjmp	.+16     	; 0x86aa <_ZN7MState25checkEhPKhhh+0xc6>
    869a:	8c 2d       	mov	r24, r12
    869c:	9c 15       	cp	r25, r12
    869e:	08 f4       	brcc	.+2      	; 0x86a2 <_ZN7MState25checkEhPKhhh+0xbe>
    86a0:	89 2f       	mov	r24, r25
    86a2:	f7 01       	movw	r30, r14
    86a4:	e8 0f       	add	r30, r24
    86a6:	f1 1d       	adc	r31, r1
    86a8:	24 91       	lpm	r18, Z+
//			RotaryState = ROTARY_MENU_UD ;
//		}

    uint8_t maxcol = MAXCOL(m_posVert, horTab, horTabMax);

	 if ( maxrow != 0xFF )
    86aa:	0f 3f       	cpi	r16, 0xFF	; 255
    86ac:	09 f4       	brne	.+2      	; 0x86b0 <_ZN7MState25checkEhPKhhh+0xcc>
    86ae:	69 c0       	rjmp	.+210    	; 0x8782 <_ZN7MState25checkEhPKhhh+0x19e>
	 {
		if ( RotaryState == ROTARY_MENU_UD )
    86b0:	80 91 af 06 	lds	r24, 0x06AF
    86b4:	88 23       	and	r24, r24
    86b6:	09 f0       	breq	.+2      	; 0x86ba <_ZN7MState25checkEhPKhhh+0xd6>
    86b8:	47 c0       	rjmp	.+142    	; 0x8748 <_ZN7MState25checkEhPKhhh+0x164>
		{
			static uint8_t lateUp = 0 ;
			if ( lateUp )
    86ba:	80 91 e4 08 	lds	r24, 0x08E4
    86be:	88 23       	and	r24, r24
    86c0:	81 f0       	breq	.+32     	; 0x86e2 <_ZN7MState25checkEhPKhhh+0xfe>
			{
				lateUp = 0 ;
    86c2:	10 92 e4 08 	sts	0x08E4, r1
				l_posHorz = MAXCOL(m_posVert, horTab, horTabMax) ;
    86c6:	98 81       	ld	r25, Y

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL( uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax)
{
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
    86c8:	e1 14       	cp	r14, r1
    86ca:	f1 04       	cpc	r15, r1
    86cc:	11 f4       	brne	.+4      	; 0x86d2 <_ZN7MState25checkEhPKhhh+0xee>
    86ce:	10 e0       	ldi	r17, 0x00	; 0
    86d0:	08 c0       	rjmp	.+16     	; 0x86e2 <_ZN7MState25checkEhPKhhh+0xfe>
    86d2:	8c 2d       	mov	r24, r12
    86d4:	9c 15       	cp	r25, r12
    86d6:	08 f4       	brcc	.+2      	; 0x86da <_ZN7MState25checkEhPKhhh+0xf6>
    86d8:	89 2f       	mov	r24, r25
    86da:	f7 01       	movw	r30, r14
    86dc:	e8 0f       	add	r30, r24
    86de:	f1 1d       	adc	r31, r1
    86e0:	14 91       	lpm	r17, Z+

int8_t qRotary()
{
	int8_t diff = 0 ;

	if ( Rotary.Rotary_diff > 0)
    86e2:	80 91 a9 05 	lds	r24, 0x05A9
    86e6:	18 16       	cp	r1, r24
    86e8:	14 f4       	brge	.+4      	; 0x86ee <_ZN7MState25checkEhPKhhh+0x10a>
    86ea:	81 e0       	ldi	r24, 0x01	; 1
    86ec:	05 c0       	rjmp	.+10     	; 0x86f8 <_ZN7MState25checkEhPKhhh+0x114>
	{
		diff = 1 ;
	}
	else if ( Rotary.Rotary_diff < 0)
    86ee:	88 23       	and	r24, r24
    86f0:	11 f0       	breq	.+4      	; 0x86f6 <_ZN7MState25checkEhPKhhh+0x112>
    86f2:	8f ef       	ldi	r24, 0xFF	; 255
    86f4:	01 c0       	rjmp	.+2      	; 0x86f8 <_ZN7MState25checkEhPKhhh+0x114>
    86f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		diff = -1 ;
	}
	Rotary.Rotary_diff = 0 ;
    86f8:	10 92 a9 05 	sts	0x05A9, r1
			{
				lateUp = 0 ;
				l_posHorz = MAXCOL(m_posVert, horTab, horTabMax) ;
			}
		 	int8_t diff = qRotary() ;
			if ( diff > 0 )
    86fc:	81 30       	cpi	r24, 0x01	; 1
    86fe:	69 f4       	brne	.+26     	; 0x871a <_ZN7MState25checkEhPKhhh+0x136>
			{
        INC(l_posHorz,maxcol) ;
    8700:	12 17       	cp	r17, r18
    8702:	10 f4       	brcc	.+4      	; 0x8708 <_ZN7MState25checkEhPKhhh+0x124>
    8704:	1f 5f       	subi	r17, 0xFF	; 255
				if ( l_posHorz == 0 )
    8706:	c9 f4       	brne	.+50     	; 0x873a <_ZN7MState25checkEhPKhhh+0x156>
				{
	        INC(m_posVert,maxrow);
    8708:	88 81       	ld	r24, Y
    870a:	80 17       	cp	r24, r16
    870c:	18 f4       	brcc	.+6      	; 0x8714 <_ZN7MState25checkEhPKhhh+0x130>
    870e:	8f 5f       	subi	r24, 0xFF	; 255
    8710:	88 83       	st	Y, r24
    8712:	01 c0       	rjmp	.+2      	; 0x8716 <_ZN7MState25checkEhPKhhh+0x132>
    8714:	18 82       	st	Y, r1
    8716:	10 e0       	ldi	r17, 0x00	; 0
    8718:	10 c0       	rjmp	.+32     	; 0x873a <_ZN7MState25checkEhPKhhh+0x156>
				}
			}
			else if ( diff < 0 )
    871a:	8f 3f       	cpi	r24, 0xFF	; 255
    871c:	71 f4       	brne	.+28     	; 0x873a <_ZN7MState25checkEhPKhhh+0x156>
			{
				if ( l_posHorz == 0 )
    871e:	11 23       	and	r17, r17
    8720:	59 f4       	brne	.+22     	; 0x8738 <_ZN7MState25checkEhPKhhh+0x154>
				{
      	  DEC(m_posVert,maxrow);
    8722:	88 81       	ld	r24, Y
    8724:	88 23       	and	r24, r24
    8726:	19 f0       	breq	.+6      	; 0x872e <_ZN7MState25checkEhPKhhh+0x14a>
    8728:	81 50       	subi	r24, 0x01	; 1
    872a:	88 83       	st	Y, r24
    872c:	01 c0       	rjmp	.+2      	; 0x8730 <_ZN7MState25checkEhPKhhh+0x14c>
    872e:	08 83       	st	Y, r16
					lateUp = 1 ;
    8730:	81 e0       	ldi	r24, 0x01	; 1
    8732:	80 93 e4 08 	sts	0x08E4, r24
    8736:	01 c0       	rjmp	.+2      	; 0x873a <_ZN7MState25checkEhPKhhh+0x156>
					l_posHorz = 0 ;
//					l_posHorz = MAXCOL(m_posVert) ;
				}
				else
				{
      	  DEC(l_posHorz,maxcol) ;
    8738:	11 50       	subi	r17, 0x01	; 1
				}
			}
      if(event==EVT_KEY_BREAK(BTN_RE))
    873a:	8e e2       	ldi	r24, 0x2E	; 46
    873c:	d8 16       	cp	r13, r24
    873e:	79 f4       	brne	.+30     	; 0x875e <_ZN7MState25checkEhPKhhh+0x17a>
			{
				RotaryState = ROTARY_VALUE ;
    8740:	81 e0       	ldi	r24, 0x01	; 1
    8742:	80 93 af 06 	sts	0x06AF, r24
    8746:	0b c0       	rjmp	.+22     	; 0x875e <_ZN7MState25checkEhPKhhh+0x17a>
			}
		}
		else if ( RotaryState == ROTARY_VALUE )
    8748:	81 30       	cpi	r24, 0x01	; 1
    874a:	49 f4       	brne	.+18     	; 0x875e <_ZN7MState25checkEhPKhhh+0x17a>
		{
      if ( (event==EVT_KEY_BREAK(BTN_RE)) || ( s_editMode == 0 ) )
    874c:	8e e2       	ldi	r24, 0x2E	; 46
    874e:	d8 16       	cp	r13, r24
    8750:	21 f0       	breq	.+8      	; 0x875a <_ZN7MState25checkEhPKhhh+0x176>
    8752:	80 91 e5 06 	lds	r24, 0x06E5
    8756:	88 23       	and	r24, r24
    8758:	11 f4       	brne	.+4      	; 0x875e <_ZN7MState25checkEhPKhhh+0x17a>
			{
				RotaryState = ROTARY_MENU_UD ;
    875a:	10 92 af 06 	sts	0x06AF, r1
			}
		}
	 
		{
			uint8_t timer = M_longMenuTimer ;
    875e:	90 91 0d 07 	lds	r25, 0x070D
			if ( menuPressed() )
    8762:	b1 9b       	sbis	0x16, 1	; 22
    8764:	02 c0       	rjmp	.+4      	; 0x876a <_ZN7MState25checkEhPKhhh+0x186>
    8766:	90 e0       	ldi	r25, 0x00	; 0
    8768:	0a c0       	rjmp	.+20     	; 0x877e <_ZN7MState25checkEhPKhhh+0x19a>
			{
				if ( timer < 255 )
    876a:	9f 3f       	cpi	r25, 0xFF	; 255
    876c:	19 f0       	breq	.+6      	; 0x8774 <_ZN7MState25checkEhPKhhh+0x190>
				{
					timer += 1 ;
    876e:	9f 5f       	subi	r25, 0xFF	; 255
			}
			else
			{
				timer = 0 ;
			}
			if ( timer > 60 )
    8770:	9d 33       	cpi	r25, 0x3D	; 61
    8772:	28 f0       	brcs	.+10     	; 0x877e <_ZN7MState25checkEhPKhhh+0x19a>
			{
				s_editMode = 1 ;
    8774:	81 e0       	ldi	r24, 0x01	; 1
    8776:	80 93 e5 06 	sts	0x06E5, r24
				RotaryState = ROTARY_VALUE ;
    877a:	80 93 af 06 	sts	0x06AF, r24
			}
			M_longMenuTimer = timer ;
    877e:	90 93 0d 07 	sts	0x070D, r25



    //        scrollLR = 0;

    maxcol = MAXCOL(m_posVert, horTab, horTabMax);
    8782:	98 81       	ld	r25, Y

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL( uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax)
{
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
    8784:	e1 14       	cp	r14, r1
    8786:	f1 04       	cpc	r15, r1
    8788:	11 f4       	brne	.+4      	; 0x878e <_ZN7MState25checkEhPKhhh+0x1aa>
    878a:	60 e0       	ldi	r22, 0x00	; 0
    878c:	08 c0       	rjmp	.+16     	; 0x879e <_ZN7MState25checkEhPKhhh+0x1ba>
    878e:	8c 2d       	mov	r24, r12
    8790:	9c 15       	cp	r25, r12
    8792:	08 f4       	brcc	.+2      	; 0x8796 <_ZN7MState25checkEhPKhhh+0x1b2>
    8794:	89 2f       	mov	r24, r25
    8796:	f7 01       	movw	r30, r14
    8798:	e8 0f       	add	r30, r24
    879a:	f1 1d       	adc	r31, r1
    879c:	64 91       	lpm	r22, Z+
    //        scrollLR = 0;

    maxcol = MAXCOL(m_posVert, horTab, horTabMax);

#ifndef NOPOTSCROLL
    if(!s_editMode)
    879e:	70 91 e5 06 	lds	r23, 0x06E5
    87a2:	77 23       	and	r23, r23
    87a4:	09 f0       	breq	.+2      	; 0x87a8 <_ZN7MState25checkEhPKhhh+0x1c4>
    87a6:	54 c0       	rjmp	.+168    	; 0x8850 <_ZN7MState25checkEhPKhhh+0x26c>
    {
        if(scrollUD)
    87a8:	20 91 ea 06 	lds	r18, 0x06EA
    87ac:	22 23       	and	r18, r18
    87ae:	09 f1       	breq	.+66     	; 0x87f2 <_ZN7MState25checkEhPKhhh+0x20e>
        {
            int8_t cc = m_posVert - scrollUD;
    87b0:	49 2f       	mov	r20, r25
    87b2:	42 1b       	sub	r20, r18
    87b4:	47 fd       	sbrc	r20, 7
    87b6:	40 e0       	ldi	r20, 0x00	; 0
            if(cc<1) cc = 0;
            if(cc>=maxrow) cc = maxrow;
    87b8:	24 2f       	mov	r18, r20
    87ba:	33 27       	eor	r19, r19
    87bc:	27 fd       	sbrc	r18, 7
    87be:	30 95       	com	r19
    87c0:	80 2f       	mov	r24, r16
    87c2:	90 e0       	ldi	r25, 0x00	; 0
    87c4:	28 17       	cp	r18, r24
    87c6:	39 07       	cpc	r19, r25
    87c8:	0c f0       	brlt	.+2      	; 0x87cc <_ZN7MState25checkEhPKhhh+0x1e8>
    87ca:	40 2f       	mov	r20, r16
            m_posVert = cc;
    87cc:	48 83       	st	Y, r20

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL( uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax)
{
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
    87ce:	e1 14       	cp	r14, r1
    87d0:	f1 04       	cpc	r15, r1
    87d2:	11 f4       	brne	.+4      	; 0x87d8 <_ZN7MState25checkEhPKhhh+0x1f4>
    87d4:	10 e0       	ldi	r17, 0x00	; 0
    87d6:	0b c0       	rjmp	.+22     	; 0x87ee <_ZN7MState25checkEhPKhhh+0x20a>
    87d8:	24 2f       	mov	r18, r20
    87da:	c4 16       	cp	r12, r20
    87dc:	08 f4       	brcc	.+2      	; 0x87e0 <_ZN7MState25checkEhPKhhh+0x1fc>
    87de:	2c 2d       	mov	r18, r12
    87e0:	f7 01       	movw	r30, r14
    87e2:	e2 0f       	add	r30, r18
    87e4:	f1 1d       	adc	r31, r1
    87e6:	24 91       	lpm	r18, Z+
    87e8:	21 17       	cp	r18, r17
    87ea:	08 f4       	brcc	.+2      	; 0x87ee <_ZN7MState25checkEhPKhhh+0x20a>
    87ec:	12 2f       	mov	r17, r18

            l_posHorz = min(l_posHorz, MAXCOL(m_posVert, horTab, horTabMax));
//            m_posHorz = min(m_posHorz, MAXCOL(m_posVert)); // Why was this in twice?
            BLINK_SYNC;

            scrollUD = 0;
    87ee:	10 92 ea 06 	sts	0x06EA, r1
        }

        if(m_posVert>0 && scrollLR)
    87f2:	58 81       	ld	r21, Y
    87f4:	55 23       	and	r21, r21
    87f6:	61 f1       	breq	.+88     	; 0x8850 <_ZN7MState25checkEhPKhhh+0x26c>
    87f8:	20 91 e8 06 	lds	r18, 0x06E8
    87fc:	22 23       	and	r18, r18
    87fe:	41 f1       	breq	.+80     	; 0x8850 <_ZN7MState25checkEhPKhhh+0x26c>
        {
            int8_t cc = l_posHorz - scrollLR;
    8800:	41 2f       	mov	r20, r17
    8802:	42 1b       	sub	r20, r18
    8804:	47 fd       	sbrc	r20, 7
    8806:	40 e0       	ldi	r20, 0x00	; 0

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL( uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax)
{
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
    8808:	e1 14       	cp	r14, r1
    880a:	f1 04       	cpc	r15, r1
    880c:	11 f4       	brne	.+4      	; 0x8812 <_ZN7MState25checkEhPKhhh+0x22e>
    880e:	80 e0       	ldi	r24, 0x00	; 0
    8810:	08 c0       	rjmp	.+16     	; 0x8822 <_ZN7MState25checkEhPKhhh+0x23e>
    8812:	8c 2d       	mov	r24, r12
    8814:	5c 15       	cp	r21, r12
    8816:	08 f4       	brcc	.+2      	; 0x881a <_ZN7MState25checkEhPKhhh+0x236>
    8818:	85 2f       	mov	r24, r21
    881a:	f7 01       	movw	r30, r14
    881c:	e8 0f       	add	r30, r24
    881e:	f1 1d       	adc	r31, r1
    8820:	84 91       	lpm	r24, Z+

        if(m_posVert>0 && scrollLR)
        {
            int8_t cc = l_posHorz - scrollLR;
            if(cc<1) cc = 0;
            if(cc>=MAXCOL(m_posVert, horTab, horTabMax)) cc = MAXCOL(m_posVert, horTab, horTabMax);
    8822:	24 2f       	mov	r18, r20
    8824:	33 27       	eor	r19, r19
    8826:	27 fd       	sbrc	r18, 7
    8828:	30 95       	com	r19
    882a:	90 e0       	ldi	r25, 0x00	; 0
    882c:	28 17       	cp	r18, r24
    882e:	39 07       	cpc	r19, r25
    8830:	74 f0       	brlt	.+28     	; 0x884e <_ZN7MState25checkEhPKhhh+0x26a>

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL( uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax)
{
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
    8832:	e1 14       	cp	r14, r1
    8834:	f1 04       	cpc	r15, r1
    8836:	11 f4       	brne	.+4      	; 0x883c <_ZN7MState25checkEhPKhhh+0x258>
    8838:	20 e0       	ldi	r18, 0x00	; 0
    883a:	08 c0       	rjmp	.+16     	; 0x884c <_ZN7MState25checkEhPKhhh+0x268>
    883c:	8c 2d       	mov	r24, r12
    883e:	5c 15       	cp	r21, r12
    8840:	08 f4       	brcc	.+2      	; 0x8844 <_ZN7MState25checkEhPKhhh+0x260>
    8842:	85 2f       	mov	r24, r21
    8844:	f7 01       	movw	r30, r14
    8846:	e8 0f       	add	r30, r24
    8848:	f1 1d       	adc	r31, r1
    884a:	24 91       	lpm	r18, Z+

        if(m_posVert>0 && scrollLR)
        {
            int8_t cc = l_posHorz - scrollLR;
            if(cc<1) cc = 0;
            if(cc>=MAXCOL(m_posVert, horTab, horTabMax)) cc = MAXCOL(m_posVert, horTab, horTabMax);
    884c:	42 2f       	mov	r20, r18
            l_posHorz = cc;
    884e:	14 2f       	mov	r17, r20
            BLINK_SYNC;
            //            scrollLR = 0;
        }
    }
#endif		
		switch(event)
    8850:	80 e6       	ldi	r24, 0x60	; 96
    8852:	d8 16       	cp	r13, r24
    8854:	f1 f1       	breq	.+124    	; 0x88d2 <_ZN7MState25checkEhPKhhh+0x2ee>
    8856:	8d 15       	cp	r24, r13
    8858:	d8 f0       	brcs	.+54     	; 0x8890 <_ZN7MState25checkEhPKhhh+0x2ac>
    885a:	82 e4       	ldi	r24, 0x42	; 66
    885c:	d8 16       	cp	r13, r24
    885e:	09 f4       	brne	.+2      	; 0x8862 <_ZN7MState25checkEhPKhhh+0x27e>
    8860:	7a c0       	rjmp	.+244    	; 0x8956 <_ZN7MState25checkEhPKhhh+0x372>
    8862:	8d 15       	cp	r24, r13
    8864:	48 f0       	brcs	.+18     	; 0x8878 <_ZN7MState25checkEhPKhhh+0x294>
    8866:	81 e2       	ldi	r24, 0x21	; 33
    8868:	d8 16       	cp	r13, r24
    886a:	09 f4       	brne	.+2      	; 0x886e <_ZN7MState25checkEhPKhhh+0x28a>
    886c:	48 c0       	rjmp	.+144    	; 0x88fe <_ZN7MState25checkEhPKhhh+0x31a>
    886e:	8e e2       	ldi	r24, 0x2E	; 46
    8870:	d8 16       	cp	r13, r24
    8872:	09 f0       	breq	.+2      	; 0x8876 <_ZN7MState25checkEhPKhhh+0x292>
    8874:	99 c0       	rjmp	.+306    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    8876:	2d c0       	rjmp	.+90     	; 0x88d2 <_ZN7MState25checkEhPKhhh+0x2ee>
    8878:	84 e4       	ldi	r24, 0x44	; 68
    887a:	d8 16       	cp	r13, r24
    887c:	09 f4       	brne	.+2      	; 0x8880 <_ZN7MState25checkEhPKhhh+0x29c>
    887e:	4a c0       	rjmp	.+148    	; 0x8914 <_ZN7MState25checkEhPKhhh+0x330>
    8880:	d8 16       	cp	r13, r24
    8882:	08 f4       	brcc	.+2      	; 0x8886 <_ZN7MState25checkEhPKhhh+0x2a2>
    8884:	74 c0       	rjmp	.+232    	; 0x896e <_ZN7MState25checkEhPKhhh+0x38a>
    8886:	85 e4       	ldi	r24, 0x45	; 69
    8888:	d8 16       	cp	r13, r24
    888a:	09 f0       	breq	.+2      	; 0x888e <_ZN7MState25checkEhPKhhh+0x2aa>
    888c:	8d c0       	rjmp	.+282    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    888e:	52 c0       	rjmp	.+164    	; 0x8934 <_ZN7MState25checkEhPKhhh+0x350>
    8890:	85 e6       	ldi	r24, 0x65	; 101
    8892:	d8 16       	cp	r13, r24
    8894:	09 f4       	brne	.+2      	; 0x8898 <_ZN7MState25checkEhPKhhh+0x2b4>
    8896:	50 c0       	rjmp	.+160    	; 0x8938 <_ZN7MState25checkEhPKhhh+0x354>
    8898:	8d 15       	cp	r24, r13
    889a:	58 f0       	brcs	.+22     	; 0x88b2 <_ZN7MState25checkEhPKhhh+0x2ce>
    889c:	83 e6       	ldi	r24, 0x63	; 99
    889e:	d8 16       	cp	r13, r24
    88a0:	09 f4       	brne	.+2      	; 0x88a4 <_ZN7MState25checkEhPKhhh+0x2c0>
    88a2:	68 c0       	rjmp	.+208    	; 0x8974 <_ZN7MState25checkEhPKhhh+0x390>
    88a4:	8d 15       	cp	r24, r13
    88a6:	c8 f1       	brcs	.+114    	; 0x891a <_ZN7MState25checkEhPKhhh+0x336>
    88a8:	82 e6       	ldi	r24, 0x62	; 98
    88aa:	d8 16       	cp	r13, r24
    88ac:	09 f0       	breq	.+2      	; 0x88b0 <_ZN7MState25checkEhPKhhh+0x2cc>
    88ae:	7c c0       	rjmp	.+248    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    88b0:	55 c0       	rjmp	.+170    	; 0x895c <_ZN7MState25checkEhPKhhh+0x378>
    88b2:	8e e8       	ldi	r24, 0x8E	; 142
    88b4:	d8 16       	cp	r13, r24
    88b6:	01 f1       	breq	.+64     	; 0x88f8 <_ZN7MState25checkEhPKhhh+0x314>
    88b8:	8f eb       	ldi	r24, 0xBF	; 191
    88ba:	d8 16       	cp	r13, r24
    88bc:	29 f0       	breq	.+10     	; 0x88c8 <_ZN7MState25checkEhPKhhh+0x2e4>
    88be:	81 e8       	ldi	r24, 0x81	; 129
    88c0:	d8 16       	cp	r13, r24
    88c2:	09 f0       	breq	.+2      	; 0x88c6 <_ZN7MState25checkEhPKhhh+0x2e2>
    88c4:	71 c0       	rjmp	.+226    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    88c6:	15 c0       	rjmp	.+42     	; 0x88f2 <_ZN7MState25checkEhPKhhh+0x30e>
// Menus related stuff ...
struct MState2
{
  uint8_t m_posVert;
//  uint8_t m_posHorz;
  void init(){m_posVert=0;};
    88c8:	18 82       	st	Y, r1
    {
    case EVT_ENTRY:
        //if(m_posVert>maxrow)
        init();
        l_posHorz = 0 ;
        s_editMode = false;
    88ca:	10 92 e5 06 	sts	0x06E5, r1
    88ce:	10 e0       	ldi	r17, 0x00	; 0
    88d0:	6b c0       	rjmp	.+214    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
        break;
    case EVT_KEY_BREAK(BTN_RE):
    case EVT_KEY_FIRST(KEY_MENU):
//        if ( (m_posVert > 0) || (!menuTab) )
				{
	 				if ( maxrow != 0xFF )
    88d2:	0f 3f       	cpi	r16, 0xFF	; 255
    88d4:	09 f4       	brne	.+2      	; 0x88d8 <_ZN7MState25checkEhPKhhh+0x2f4>
    88d6:	68 c0       	rjmp	.+208    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
					{
						s_editMode = !s_editMode;
    88d8:	80 e0       	ldi	r24, 0x00	; 0
    88da:	77 23       	and	r23, r23
    88dc:	09 f4       	brne	.+2      	; 0x88e0 <_ZN7MState25checkEhPKhhh+0x2fc>
    88de:	81 e0       	ldi	r24, 0x01	; 1
    88e0:	80 93 e5 06 	sts	0x06E5, r24
						if ( s_editMode )
    88e4:	88 23       	and	r24, r24
    88e6:	09 f4       	brne	.+2      	; 0x88ea <_ZN7MState25checkEhPKhhh+0x306>
    88e8:	5f c0       	rjmp	.+190    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
						{
							RotaryState = ROTARY_VALUE ;
    88ea:	81 e0       	ldi	r24, 0x01	; 1
    88ec:	80 93 af 06 	sts	0x06AF, r24
    88f0:	5b c0       	rjmp	.+182    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
						}
					}
				}	
        break;
    case EVT_KEY_LONG(KEY_EXIT):
        s_editMode = false;
    88f2:	10 92 e5 06 	sts	0x06E5, r1
    88f6:	0a c0       	rjmp	.+20     	; 0x890c <_ZN7MState25checkEhPKhhh+0x328>
        //popMenu(true); //return to uppermost, beeps itself
        popMenu(false);
        break;
        //fallthrough
    case EVT_KEY_LONG(BTN_RE):
        killEvents(event);
    88f8:	8e e8       	ldi	r24, 0x8E	; 142
    88fa:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
    case EVT_KEY_BREAK(KEY_EXIT):
        if(s_editMode) {
    88fe:	80 91 e5 06 	lds	r24, 0x06E5
    8902:	88 23       	and	r24, r24
    8904:	19 f0       	breq	.+6      	; 0x890c <_ZN7MState25checkEhPKhhh+0x328>
            s_editMode = false;
    8906:	10 92 e5 06 	sts	0x06E5, r1
    890a:	4e c0       	rjmp	.+156    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
            break;
        }
//        if(m_posVert==0 || !menuTab) {
//						RotaryState = ROTARY_MENU_LR ;
            popMenu();  //beeps itself
    890c:	80 e0       	ldi	r24, 0x00	; 0
    890e:	0e 94 14 1a 	call	0x3428	; 0x3428 <_Z7popMenub>
    8912:	4a c0       	rjmp	.+148    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
//            init();BLINK_SYNC;
//        }
        break;

    case EVT_KEY_REPT(KEY_RIGHT):  //inc
        if(l_posHorz==maxcol) break;
    8914:	16 17       	cp	r17, r22
    8916:	09 f4       	brne	.+2      	; 0x891a <_ZN7MState25checkEhPKhhh+0x336>
    8918:	47 c0       	rjmp	.+142    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    case EVT_KEY_FIRST(KEY_RIGHT)://inc
        if(!horTab || s_editMode)break;
    891a:	e1 14       	cp	r14, r1
    891c:	f1 04       	cpc	r15, r1
    891e:	09 f4       	brne	.+2      	; 0x8922 <_ZN7MState25checkEhPKhhh+0x33e>
    8920:	43 c0       	rjmp	.+134    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    8922:	77 23       	and	r23, r23
    8924:	09 f0       	breq	.+2      	; 0x8928 <_ZN7MState25checkEhPKhhh+0x344>
    8926:	40 c0       	rjmp	.+128    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
        INC(l_posHorz,maxcol);
    8928:	16 17       	cp	r17, r22
    892a:	10 f0       	brcs	.+4      	; 0x8930 <_ZN7MState25checkEhPKhhh+0x34c>
    892c:	10 e0       	ldi	r17, 0x00	; 0
    892e:	0e c0       	rjmp	.+28     	; 0x894c <_ZN7MState25checkEhPKhhh+0x368>
    8930:	1f 5f       	subi	r17, 0xFF	; 255
    8932:	0c c0       	rjmp	.+24     	; 0x894c <_ZN7MState25checkEhPKhhh+0x368>
					Tevent = 0 ;
				}
        break;

    case EVT_KEY_REPT(KEY_LEFT):  //dec
        if(l_posHorz==0) break;
    8934:	11 23       	and	r17, r17
    8936:	c1 f1       	breq	.+112    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    case EVT_KEY_FIRST(KEY_LEFT)://dec
        if(!horTab || s_editMode)break;
    8938:	e1 14       	cp	r14, r1
    893a:	f1 04       	cpc	r15, r1
    893c:	a9 f1       	breq	.+106    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    893e:	77 23       	and	r23, r23
    8940:	99 f5       	brne	.+102    	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
        DEC(l_posHorz,maxcol);
    8942:	11 23       	and	r17, r17
    8944:	11 f4       	brne	.+4      	; 0x894a <_ZN7MState25checkEhPKhhh+0x366>
    8946:	16 2f       	mov	r17, r22
    8948:	01 c0       	rjmp	.+2      	; 0x894c <_ZN7MState25checkEhPKhhh+0x368>
    894a:	11 50       	subi	r17, 0x01	; 1
        BLINK_SYNC;
				if ( maxcol )
    894c:	66 23       	and	r22, r22
    894e:	61 f1       	breq	.+88     	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
				{
					Tevent = 0 ;
    8950:	10 92 aa 05 	sts	0x05AA, r1
    8954:	29 c0       	rjmp	.+82     	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
				}
        break;

    case EVT_KEY_REPT(KEY_DOWN):  //inc
        if(m_posVert==maxrow) break;
    8956:	88 81       	ld	r24, Y
    8958:	80 17       	cp	r24, r16
    895a:	31 f1       	breq	.+76     	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    case EVT_KEY_FIRST(KEY_DOWN): //inc
        if(s_editMode)break;
    895c:	77 23       	and	r23, r23
    895e:	21 f5       	brne	.+72     	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
        INC(m_posVert,maxrow);
    8960:	88 81       	ld	r24, Y
    8962:	80 17       	cp	r24, r16
    8964:	10 f4       	brcc	.+4      	; 0x896a <_ZN7MState25checkEhPKhhh+0x386>
    8966:	8f 5f       	subi	r24, 0xFF	; 255
    8968:	0b c0       	rjmp	.+22     	; 0x8980 <_ZN7MState25checkEhPKhhh+0x39c>
    896a:	18 82       	st	Y, r1
    896c:	0c c0       	rjmp	.+24     	; 0x8986 <_ZN7MState25checkEhPKhhh+0x3a2>
        l_posHorz = min(l_posHorz, MAXCOL(m_posVert, horTab, horTabMax));
        BLINK_SYNC;
        break;

    case EVT_KEY_REPT(KEY_UP):  //dec
        if(m_posVert==0) break;
    896e:	88 81       	ld	r24, Y
    8970:	88 23       	and	r24, r24
    8972:	d1 f0       	breq	.+52     	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    case EVT_KEY_FIRST(KEY_UP): //dec
        if(s_editMode)break;
    8974:	77 23       	and	r23, r23
    8976:	c1 f4       	brne	.+48     	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
        DEC(m_posVert,maxrow);
    8978:	88 81       	ld	r24, Y
    897a:	88 23       	and	r24, r24
    897c:	19 f0       	breq	.+6      	; 0x8984 <_ZN7MState25checkEhPKhhh+0x3a0>
    897e:	81 50       	subi	r24, 0x01	; 1
    8980:	88 83       	st	Y, r24
    8982:	01 c0       	rjmp	.+2      	; 0x8986 <_ZN7MState25checkEhPKhhh+0x3a2>
    8984:	08 83       	st	Y, r16
        l_posHorz = min(l_posHorz, MAXCOL(m_posVert, horTab, horTabMax));
    8986:	88 81       	ld	r24, Y

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL( uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax)
{
	return (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0) ;
    8988:	e1 14       	cp	r14, r1
    898a:	f1 04       	cpc	r15, r1
    898c:	11 f4       	brne	.+4      	; 0x8992 <_ZN7MState25checkEhPKhhh+0x3ae>
    898e:	20 e0       	ldi	r18, 0x00	; 0
    8990:	0a c0       	rjmp	.+20     	; 0x89a6 <_ZN7MState25checkEhPKhhh+0x3c2>
    8992:	2c 2d       	mov	r18, r12
    8994:	8c 15       	cp	r24, r12
    8996:	08 f4       	brcc	.+2      	; 0x899a <_ZN7MState25checkEhPKhhh+0x3b6>
    8998:	28 2f       	mov	r18, r24
    899a:	f7 01       	movw	r30, r14
    899c:	e2 0f       	add	r30, r18
    899e:	f1 1d       	adc	r31, r1
    89a0:	24 91       	lpm	r18, Z+
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    89a2:	12 17       	cp	r17, r18
    89a4:	08 f0       	brcs	.+2      	; 0x89a8 <_ZN7MState25checkEhPKhhh+0x3c4>
    89a6:	12 2f       	mov	r17, r18
        l_posHorz = min(l_posHorz, MAXCOL(m_posVert, horTab, horTabMax));
        BLINK_SYNC;
        break;
    }
#ifndef NOPOTSCROLL
		s_editing = s_editMode || P1values.p1valdiff ;
    89a8:	30 91 e5 06 	lds	r19, 0x06E5
    89ac:	33 23       	and	r19, r19
    89ae:	39 f4       	brne	.+14     	; 0x89be <_ZN7MState25checkEhPKhhh+0x3da>
    89b0:	20 e0       	ldi	r18, 0x00	; 0
    89b2:	80 91 16 06 	lds	r24, 0x0616
    89b6:	90 91 17 06 	lds	r25, 0x0617
    89ba:	89 2b       	or	r24, r25
    89bc:	09 f0       	breq	.+2      	; 0x89c0 <_ZN7MState25checkEhPKhhh+0x3dc>
    89be:	21 e0       	ldi	r18, 0x01	; 1
    89c0:	20 93 e6 06 	sts	0x06E6, r18
#else
		s_editing = s_editMode ;
#endif	
	g_posHorz = l_posHorz ;
    89c4:	10 93 0c 07 	sts	0x070C, r17
	InverseBlink = (!horTab || s_editMode) ? BLINK : INVERS ;
    89c8:	ef 28       	or	r14, r15
    89ca:	21 f0       	breq	.+8      	; 0x89d4 <_ZN7MState25checkEhPKhhh+0x3f0>
    89cc:	33 23       	and	r19, r19
    89ce:	11 f4       	brne	.+4      	; 0x89d4 <_ZN7MState25checkEhPKhhh+0x3f0>
    89d0:	81 e0       	ldi	r24, 0x01	; 1
    89d2:	01 c0       	rjmp	.+2      	; 0x89d6 <_ZN7MState25checkEhPKhhh+0x3f2>
    89d4:	82 e0       	ldi	r24, 0x02	; 2
    89d6:	80 93 eb 06 	sts	0x06EB, r24
	Columns = &ProgColumns[COLUMNS_0] ;
    89da:	89 e2       	ldi	r24, 0x29	; 41
    89dc:	94 e0       	ldi	r25, 0x04	; 4
    89de:	90 93 c1 08 	sts	0x08C1, r25
    89e2:	80 93 c0 08 	sts	0x08C0, r24

}
    89e6:	df 91       	pop	r29
    89e8:	cf 91       	pop	r28
    89ea:	1f 91       	pop	r17
    89ec:	0f 91       	pop	r16
    89ee:	ff 90       	pop	r15
    89f0:	ef 90       	pop	r14
    89f2:	df 90       	pop	r13
    89f4:	cf 90       	pop	r12
    89f6:	bf 90       	pop	r11
    89f8:	af 90       	pop	r10
    89fa:	9f 90       	pop	r9
    89fc:	8f 90       	pop	r8
    89fe:	08 95       	ret

00008a00 <_Z18menuProcModelIndexh>:
#ifdef VOICE_ALARMS
const prog_char APM Str_Voice[] = "Voice" ;
#endif // 128/2561


void menuProcModelIndex(uint8_t event)
    8a00:	bf 92       	push	r11
    8a02:	cf 92       	push	r12
    8a04:	df 92       	push	r13
    8a06:	ef 92       	push	r14
    8a08:	ff 92       	push	r15
    8a0a:	0f 93       	push	r16
    8a0c:	1f 93       	push	r17
    8a0e:	cf 93       	push	r28
    8a10:	df 93       	push	r29
{
	static MState2 mstate;

	event = indexProcess( event, &mstate, MODEL_EXTRA ) ;
    8a12:	65 ec       	ldi	r22, 0xC5	; 197
    8a14:	78 e0       	ldi	r23, 0x08	; 8
    8a16:	46 e0       	ldi	r20, 0x06	; 6
    8a18:	0e 94 ee 23 	call	0x47dc	; 0x47dc <_ZL12indexProcesshP7MState2h>
    8a1c:	b8 2e       	mov	r11, r24
	mstate.check( event, Columns, 0, IlinesCount-1 ) ;
    8a1e:	40 91 c0 08 	lds	r20, 0x08C0
    8a22:	50 91 c1 08 	lds	r21, 0x08C1
    8a26:	00 91 c2 08 	lds	r16, 0x08C2
    8a2a:	01 50       	subi	r16, 0x01	; 1
    8a2c:	85 ec       	ldi	r24, 0xC5	; 197
    8a2e:	98 e0       	ldi	r25, 0x08	; 8
    8a30:	6b 2d       	mov	r22, r11
    8a32:	20 e0       	ldi	r18, 0x00	; 0
    8a34:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <_ZN7MState25checkEhPKhhh>
	
	switch ( SubmenuIndex )
    8a38:	80 91 c3 08 	lds	r24, 0x08C3
    8a3c:	86 30       	cpi	r24, 0x06	; 6
    8a3e:	91 f0       	breq	.+36     	; 0x8a64 <_Z18menuProcModelIndexh+0x64>
    8a40:	87 30       	cpi	r24, 0x07	; 7
    8a42:	28 f4       	brcc	.+10     	; 0x8a4e <_Z18menuProcModelIndexh+0x4e>
    8a44:	81 30       	cpi	r24, 0x01	; 1
    8a46:	41 f0       	breq	.+16     	; 0x8a58 <_Z18menuProcModelIndexh+0x58>
    8a48:	85 30       	cpi	r24, 0x05	; 5
    8a4a:	b1 f4       	brne	.+44     	; 0x8a78 <_Z18menuProcModelIndexh+0x78>
    8a4c:	08 c0       	rjmp	.+16     	; 0x8a5e <_Z18menuProcModelIndexh+0x5e>
    8a4e:	89 30       	cpi	r24, 0x09	; 9
    8a50:	61 f0       	breq	.+24     	; 0x8a6a <_Z18menuProcModelIndexh+0x6a>
    8a52:	8a 30       	cpi	r24, 0x0A	; 10
    8a54:	89 f4       	brne	.+34     	; 0x8a78 <_Z18menuProcModelIndexh+0x78>
    8a56:	0c c0       	rjmp	.+24     	; 0x8a70 <_Z18menuProcModelIndexh+0x70>
	{
		case M_MIXER :
      pushMenu(menuProcMix) ;
    8a58:	8a ed       	ldi	r24, 0xDA	; 218
    8a5a:	99 e5       	ldi	r25, 0x59	; 89
    8a5c:	0b c0       	rjmp	.+22     	; 0x8a74 <_Z18menuProcModelIndexh+0x74>
		break ;
//		case M_SWITCHES :
//      pushMenu(menuProcSwitches) ;
//		break ;
		case M_MODES :
      pushMenu(menuModelPhases) ;
    8a5e:	8e e4       	ldi	r24, 0x4E	; 78
    8a60:	99 e5       	ldi	r25, 0x59	; 89
    8a62:	08 c0       	rjmp	.+16     	; 0x8a74 <_Z18menuProcModelIndexh+0x74>
		break ;
		case M_CURVES :
      pushMenu(menuProcCurve) ;
    8a64:	87 e1       	ldi	r24, 0x17	; 23
    8a66:	90 e6       	ldi	r25, 0x60	; 96
    8a68:	05 c0       	rjmp	.+10     	; 0x8a74 <_Z18menuProcModelIndexh+0x74>
//		break ;
//		case M_LIMITS :
//      pushMenu(menuProcLimits) ;
//		break ;
		case M_GLOBALS :
      pushMenu(menuProcGlobals) ;
    8a6a:	8a e4       	ldi	r24, 0x4A	; 74
    8a6c:	96 e5       	ldi	r25, 0x56	; 86
    8a6e:	02 c0       	rjmp	.+4      	; 0x8a74 <_Z18menuProcModelIndexh+0x74>
		break ;
#ifdef VOICE_ALARMS
		case M_VOICE :
      pushMenu(menuProcVoiceAlarm) ;
    8a70:	8f e3       	ldi	r24, 0x3F	; 63
    8a72:	97 e5       	ldi	r25, 0x57	; 87
    8a74:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
//			SubMenuFromIndex = 0 ;
//		break ;
	}
	
//	Columns = &ProgColumns[COLUMNS_0] ;
	uint8_t sub = mstate.m_posVert ;
    8a78:	f0 90 c5 08 	lds	r15, 0x08C5
	uint8_t y = FH ;
	uint8_t subN = 0 ;
	uint8_t blink = InverseBlink ;
    8a7c:	d0 90 eb 06 	lds	r13, 0x06EB

	switch ( SubmenuIndex )
    8a80:	80 91 c3 08 	lds	r24, 0x08C3
    8a84:	87 30       	cpi	r24, 0x07	; 7
    8a86:	09 f4       	brne	.+2      	; 0x8a8a <_Z18menuProcModelIndexh+0x8a>
    8a88:	c5 c5       	rjmp	.+2954   	; 0x9614 <_Z18menuProcModelIndexh+0xc14>
    8a8a:	88 30       	cpi	r24, 0x08	; 8
    8a8c:	78 f4       	brcc	.+30     	; 0x8aac <_Z18menuProcModelIndexh+0xac>
    8a8e:	82 30       	cpi	r24, 0x02	; 2
    8a90:	09 f4       	brne	.+2      	; 0x8a94 <_Z18menuProcModelIndexh+0x94>
    8a92:	3c c2       	rjmp	.+1144   	; 0x8f0c <_Z18menuProcModelIndexh+0x50c>
    8a94:	83 30       	cpi	r24, 0x03	; 3
    8a96:	18 f4       	brcc	.+6      	; 0x8a9e <_Z18menuProcModelIndexh+0x9e>
    8a98:	88 23       	and	r24, r24
    8a9a:	b9 f0       	breq	.+46     	; 0x8aca <_Z18menuProcModelIndexh+0xca>
    8a9c:	c6 c5       	rjmp	.+2956   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
    8a9e:	83 30       	cpi	r24, 0x03	; 3
    8aa0:	09 f4       	brne	.+2      	; 0x8aa4 <_Z18menuProcModelIndexh+0xa4>
    8aa2:	bc c5       	rjmp	.+2936   	; 0x961c <_Z18menuProcModelIndexh+0xc1c>
    8aa4:	84 30       	cpi	r24, 0x04	; 4
    8aa6:	09 f0       	breq	.+2      	; 0x8aaa <_Z18menuProcModelIndexh+0xaa>
    8aa8:	c0 c5       	rjmp	.+2944   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
    8aaa:	c7 c2       	rjmp	.+1422   	; 0x903a <_Z18menuProcModelIndexh+0x63a>
    8aac:	8b 30       	cpi	r24, 0x0B	; 11
    8aae:	09 f4       	brne	.+2      	; 0x8ab2 <_Z18menuProcModelIndexh+0xb2>
    8ab0:	ef c1       	rjmp	.+990    	; 0x8e90 <_Z18menuProcModelIndexh+0x490>
    8ab2:	8c 30       	cpi	r24, 0x0C	; 12
    8ab4:	20 f4       	brcc	.+8      	; 0x8abe <_Z18menuProcModelIndexh+0xbe>
    8ab6:	88 30       	cpi	r24, 0x08	; 8
    8ab8:	09 f0       	breq	.+2      	; 0x8abc <_Z18menuProcModelIndexh+0xbc>
    8aba:	b7 c5       	rjmp	.+2926   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
    8abc:	b3 c5       	rjmp	.+2918   	; 0x9624 <_Z18menuProcModelIndexh+0xc24>
    8abe:	8c 30       	cpi	r24, 0x0C	; 12
    8ac0:	a1 f0       	breq	.+40     	; 0x8aea <_Z18menuProcModelIndexh+0xea>
    8ac2:	8d 30       	cpi	r24, 0x0D	; 13
    8ac4:	09 f0       	breq	.+2      	; 0x8ac8 <_Z18menuProcModelIndexh+0xc8>
    8ac6:	b1 c5       	rjmp	.+2914   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
    8ac8:	c4 c3       	rjmp	.+1928   	; 0x9252 <_Z18menuProcModelIndexh+0x852>
	{
		case M_MINDEX :
  		TITLEP(Str_Model_Setup);
    8aca:	84 ef       	ldi	r24, 0xF4	; 244
    8acc:	93 e0       	ldi	r25, 0x03	; 3
    8ace:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = MODEL_ITEMS ;
    8ad2:	8d e0       	ldi	r24, 0x0D	; 13
    8ad4:	80 93 c2 08 	sts	0x08C2, r24
Str_Timer,
Str_General,
Str_Protocol
};
	
			displayIndex( n_Strings, MODEL_EXTRA, 7, sub ) ;
    8ad8:	f3 94       	inc	r15
    8ada:	84 eb       	ldi	r24, 0xB4	; 180
    8adc:	96 e0       	ldi	r25, 0x06	; 6
    8ade:	66 e0       	ldi	r22, 0x06	; 6
    8ae0:	47 e0       	ldi	r20, 0x07	; 7
    8ae2:	2f 2d       	mov	r18, r15
    8ae4:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZL12displayIndexPKPKchhh>
    8ae8:	a0 c5       	rjmp	.+2880   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
		break ;
		
		case M_MGENERAL :
		{	
			TITLEP(Str_General);
    8aea:	81 e2       	ldi	r24, 0x21	; 33
    8aec:	94 e0       	ldi	r25, 0x04	; 4
    8aee:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			if ( sub < 12 )
    8af2:	8b e0       	ldi	r24, 0x0B	; 11
    8af4:	8f 15       	cp	r24, r15
    8af6:	10 f0       	brcs	.+4      	; 0x8afc <_Z18menuProcModelIndexh+0xfc>
			{
				displayNext() ;
    8af8:	0e 94 cb 24 	call	0x4996	; 0x4996 <_Z11displayNextv>
			}
			IlinesCount = 15 ;
    8afc:	8f e0       	ldi	r24, 0x0F	; 15
    8afe:	80 93 c2 08 	sts	0x08C2, r24
		  
			if ( sub < 6 )
    8b02:	95 e0       	ldi	r25, 0x05	; 5
    8b04:	9f 15       	cp	r25, r15
    8b06:	08 f4       	brcc	.+2      	; 0x8b0a <_Z18menuProcModelIndexh+0x10a>
    8b08:	bb c0       	rjmp	.+374    	; 0x8c80 <_Z18menuProcModelIndexh+0x280>
			{
				if ( sub==0 )
    8b0a:	ff 20       	and	r15, r15
    8b0c:	31 f4       	brne	.+12     	; 0x8b1a <_Z18menuProcModelIndexh+0x11a>
				{
					Columns = &ProgColumns[COLUMNS_9] ;
    8b0e:	8e e2       	ldi	r24, 0x2E	; 46
    8b10:	94 e0       	ldi	r25, 0x04	; 4
    8b12:	90 93 c1 08 	sts	0x08C1, r25
    8b16:	80 93 c0 08 	sts	0x08C0, r24
				}
				editName( g_posHorz, y, (uint8_t *)g_model.name, sizeof(g_model.name), sub==subN ? EE_MODEL : 0 ) ;
    8b1a:	80 91 0c 07 	lds	r24, 0x070C
    8b1e:	ff 20       	and	r15, r15
    8b20:	11 f0       	breq	.+4      	; 0x8b26 <_Z18menuProcModelIndexh+0x126>
    8b22:	00 e0       	ldi	r16, 0x00	; 0
    8b24:	01 c0       	rjmp	.+2      	; 0x8b28 <_Z18menuProcModelIndexh+0x128>
    8b26:	02 e0       	ldi	r16, 0x02	; 2
    8b28:	68 e0       	ldi	r22, 0x08	; 8
    8b2a:	4a ea       	ldi	r20, 0xAA	; 170
    8b2c:	51 e0       	ldi	r21, 0x01	; 1
    8b2e:	2a e0       	ldi	r18, 0x0A	; 10
    8b30:	0e 94 8f 23 	call	0x471e	; 0x471e <_Z8editNamehhPhhh>
  			y += FH ;
				subN += 1 ;

				uint8_t attr = 0 ;
  		  if(sub==subN)
    8b34:	81 e0       	ldi	r24, 0x01	; 1
    8b36:	f8 16       	cp	r15, r24
    8b38:	11 f0       	breq	.+4      	; 0x8b3e <_Z18menuProcModelIndexh+0x13e>
    8b3a:	20 e0       	ldi	r18, 0x00	; 0
    8b3c:	0f c0       	rjmp	.+30     	; 0x8b5c <_Z18menuProcModelIndexh+0x15c>
				{
					if (event == EVT_KEY_FIRST(KEY_MENU) )
    8b3e:	90 e6       	ldi	r25, 0x60	; 96
    8b40:	b9 16       	cp	r11, r25
    8b42:	21 f4       	brne	.+8      	; 0x8b4c <_Z18menuProcModelIndexh+0x14c>
					{
						putVoiceQueueUpper( g_model.modelVoice ) ;
    8b44:	80 91 b4 01 	lds	r24, 0x01B4
    8b48:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_Z18putVoiceQueueUpperh>
					}
					attr = blink ;
  		    CHECK_INCDEC_H_MODELVAR_0( g_model.modelVoice, 49 ) ;
    8b4c:	80 91 b4 01 	lds	r24, 0x01B4
    8b50:	61 e3       	ldi	r22, 0x31	; 49
    8b52:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    8b56:	80 93 b4 01 	sts	0x01B4, r24
    8b5a:	2d 2d       	mov	r18, r13
				}
				lcd_xlabel_decimal( y, PSTR(STR_VOICE_INDEX), (int16_t)g_model.modelVoice+260, attr, 15*FW-2 ) ;
    8b5c:	40 91 b4 01 	lds	r20, 0x01B4
    8b60:	50 e0       	ldi	r21, 0x00	; 0
    8b62:	4c 5f       	subi	r20, 0xFC	; 252
    8b64:	5e 4f       	sbci	r21, 0xFE	; 254
    8b66:	80 e1       	ldi	r24, 0x10	; 16
    8b68:	63 ea       	ldi	r22, 0xA3	; 163
    8b6a:	76 e0       	ldi	r23, 0x06	; 6
    8b6c:	08 e5       	ldi	r16, 0x58	; 88
    8b6e:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
  			y += FH ;
				subN += 1 ;
				
				
      	lcd_puts_Pleft(    y, PSTR(STR_DEAFULT_SW_PAGE));
    8b72:	88 e1       	ldi	r24, 0x18	; 24
    8b74:	6c e6       	ldi	r22, 0x6C	; 108
    8b76:	76 e0       	ldi	r23, 0x06	; 6
    8b78:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    8b7c:	cf e2       	ldi	r28, 0x2F	; 47
    8b7e:	d4 e0       	ldi	r29, 0x04	; 4
    8b80:	ee 24       	eor	r14, r14
    8b82:	e3 94       	inc	r14
    8b84:	12 e4       	ldi	r17, 0x42	; 66
//      	lcd_puts_Pleft(    y, PSTR(STR_DEAFULT_SW));
      	for(uint8_t i=0, q=1;i<8;q<<=1,i++)
				{
					lcd_putsnAtt((11+i)*FW, y, Str_TRE012AG+i,1,  (((uint8_t)g_model.switchWarningStates & q) ? INVERS : 0 ) );
    8b86:	00 e0       	ldi	r16, 0x00	; 0
    8b88:	2e 2d       	mov	r18, r14
    8b8a:	30 e0       	ldi	r19, 0x00	; 0
    8b8c:	80 91 59 04 	lds	r24, 0x0459
    8b90:	90 e0       	ldi	r25, 0x00	; 0
    8b92:	28 23       	and	r18, r24
    8b94:	39 23       	and	r19, r25
    8b96:	23 2b       	or	r18, r19
    8b98:	09 f0       	breq	.+2      	; 0x8b9c <_Z18menuProcModelIndexh+0x19c>
    8b9a:	01 e0       	ldi	r16, 0x01	; 1
    8b9c:	81 2f       	mov	r24, r17
    8b9e:	68 e1       	ldi	r22, 0x18	; 24
    8ba0:	ae 01       	movw	r20, r28
    8ba2:	21 e0       	ldi	r18, 0x01	; 1
    8ba4:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
				subN += 1 ;
				
				
      	lcd_puts_Pleft(    y, PSTR(STR_DEAFULT_SW_PAGE));
//      	lcd_puts_Pleft(    y, PSTR(STR_DEAFULT_SW));
      	for(uint8_t i=0, q=1;i<8;q<<=1,i++)
    8ba8:	ee 0c       	add	r14, r14
    8baa:	1a 5f       	subi	r17, 0xFA	; 250
    8bac:	21 96       	adiw	r28, 0x01	; 1
    8bae:	12 37       	cpi	r17, 0x72	; 114
    8bb0:	51 f7       	brne	.-44     	; 0x8b86 <_Z18menuProcModelIndexh+0x186>
				{
					lcd_putsnAtt((11+i)*FW, y, Str_TRE012AG+i,1,  (((uint8_t)g_model.switchWarningStates & q) ? INVERS : 0 ) );
				}
      	if(sub==subN)
    8bb2:	82 e0       	ldi	r24, 0x02	; 2
    8bb4:	f8 16       	cp	r15, r24
    8bb6:	c1 f4       	brne	.+48     	; 0x8be8 <_Z18menuProcModelIndexh+0x1e8>
				{
					lcd_rect( 11*FW-1, y-1, 8*FW+2, 9 ) ;
    8bb8:	81 e4       	ldi	r24, 0x41	; 65
    8bba:	67 e1       	ldi	r22, 0x17	; 23
    8bbc:	42 e3       	ldi	r20, 0x32	; 50
    8bbe:	29 e0       	ldi	r18, 0x09	; 9
    8bc0:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
      	  if (event==EVT_KEY_FIRST(KEY_MENU) || event==EVT_KEY_BREAK(BTN_RE))
    8bc4:	90 e6       	ldi	r25, 0x60	; 96
    8bc6:	b9 16       	cp	r11, r25
    8bc8:	19 f0       	breq	.+6      	; 0x8bd0 <_Z18menuProcModelIndexh+0x1d0>
    8bca:	8e e2       	ldi	r24, 0x2E	; 46
    8bcc:	b8 16       	cp	r11, r24
    8bce:	61 f4       	brne	.+24     	; 0x8be8 <_Z18menuProcModelIndexh+0x1e8>
					{
      	    killEvents(event);
    8bd0:	8b 2d       	mov	r24, r11
    8bd2:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
	    	    g_model.switchWarningStates = getCurrentSwitchStates() ;
    8bd6:	0e 94 9e 12 	call	0x253c	; 0x253c <_Z22getCurrentSwitchStatesv>
    8bda:	80 93 59 04 	sts	0x0459, r24
      	  	s_editMode = false ;
    8bde:	10 92 e5 06 	sts	0x06E5, r1
      	    STORE_MODELVARS ;
    8be2:	82 e0       	ldi	r24, 0x02	; 2
    8be4:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    8be8:	80 91 1b 05 	lds	r24, 0x051B
    8bec:	82 95       	swap	r24
    8bee:	81 70       	andi	r24, 0x01	; 1
    8bf0:	40 e0       	ldi	r20, 0x00	; 0
    8bf2:	93 e0       	ldi	r25, 0x03	; 3
    8bf4:	f9 16       	cp	r15, r25
    8bf6:	09 f4       	brne	.+2      	; 0x8bfa <_Z18menuProcModelIndexh+0x1fa>
    8bf8:	41 e0       	ldi	r20, 0x01	; 1
    8bfa:	60 e2       	ldi	r22, 0x20	; 32
    8bfc:	22 e0       	ldi	r18, 0x02	; 2
    8bfe:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
					}
				}
  			y += FH ;
				subN += 1 ;
		
				g_model.useCustomStickNames = onoffItem_m( g_model.useCustomStickNames, y, sub==subN) ;
    8c02:	81 70       	andi	r24, 0x01	; 1
    8c04:	82 95       	swap	r24
    8c06:	80 7f       	andi	r24, 0xF0	; 240
    8c08:	90 91 1b 05 	lds	r25, 0x051B
    8c0c:	9f 7e       	andi	r25, 0xEF	; 239
    8c0e:	98 2b       	or	r25, r24
    8c10:	90 93 1b 05 	sts	0x051B, r25
  			y += FH ;
				subN += 1 ;

  			attr = PREC1 ;
  	  	if(sub==subN) { attr |= blink ; CHECK_INCDEC_H_MODELVAR_0( g_model.sub_trim_limit, 100 ) ; }
    8c14:	84 e0       	ldi	r24, 0x04	; 4
    8c16:	f8 16       	cp	r15, r24
    8c18:	11 f0       	breq	.+4      	; 0x8c1e <_Z18menuProcModelIndexh+0x21e>
    8c1a:	10 e2       	ldi	r17, 0x20	; 32
    8c1c:	09 c0       	rjmp	.+18     	; 0x8c30 <_Z18menuProcModelIndexh+0x230>
    8c1e:	1d 2d       	mov	r17, r13
    8c20:	10 62       	ori	r17, 0x20	; 32
    8c22:	80 91 5a 04 	lds	r24, 0x045A
    8c26:	64 e6       	ldi	r22, 0x64	; 100
    8c28:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    8c2c:	80 93 5a 04 	sts	0x045A, r24
			  lcd_outdezAtt( 20*FW, y, g_model.sub_trim_limit, attr ) ;
    8c30:	40 91 5a 04 	lds	r20, 0x045A
    8c34:	88 e7       	ldi	r24, 0x78	; 120
    8c36:	68 e2       	ldi	r22, 0x28	; 40
    8c38:	50 e0       	ldi	r21, 0x00	; 0
    8c3a:	21 2f       	mov	r18, r17
    8c3c:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
  			y += FH ;
				subN += 1 ;

  			attr = 0 ;
//  	  	lcd_puts_Pleft( y, PSTR("Throttle Default") ) ;
				uint8_t tidle = g_model.throttleIdle ;
    8c40:	20 91 1b 05 	lds	r18, 0x051B
    8c44:	22 95       	swap	r18
    8c46:	26 95       	lsr	r18
    8c48:	23 70       	andi	r18, 0x03	; 3
  	  	if(sub==subN) { attr = blink ; CHECK_INCDEC_H_MODELVAR_0( tidle, 1 ) ; g_model.throttleIdle = tidle ; }
    8c4a:	95 e0       	ldi	r25, 0x05	; 5
    8c4c:	f9 16       	cp	r15, r25
    8c4e:	11 f0       	breq	.+4      	; 0x8c54 <_Z18menuProcModelIndexh+0x254>
    8c50:	00 e0       	ldi	r16, 0x00	; 0
    8c52:	11 c0       	rjmp	.+34     	; 0x8c76 <_Z18menuProcModelIndexh+0x276>
    8c54:	82 2f       	mov	r24, r18
    8c56:	61 e0       	ldi	r22, 0x01	; 1
    8c58:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    8c5c:	28 2f       	mov	r18, r24
    8c5e:	98 2f       	mov	r25, r24
    8c60:	93 70       	andi	r25, 0x03	; 3
    8c62:	92 95       	swap	r25
    8c64:	99 0f       	add	r25, r25
    8c66:	90 7e       	andi	r25, 0xE0	; 224
    8c68:	80 91 1b 05 	lds	r24, 0x051B
    8c6c:	8f 79       	andi	r24, 0x9F	; 159
    8c6e:	89 2b       	or	r24, r25
    8c70:	80 93 1b 05 	sts	0x051B, r24
    8c74:	0d 2d       	mov	r16, r13
  	  	lcd_putsAttIdx( 16*FW, y, PSTR("\005-100%   0%"), tidle, attr ) ;
    8c76:	80 e6       	ldi	r24, 0x60	; 96
    8c78:	60 e3       	ldi	r22, 0x30	; 48
    8c7a:	40 e6       	ldi	r20, 0x60	; 96
    8c7c:	56 e0       	ldi	r21, 0x06	; 6
    8c7e:	8e c0       	rjmp	.+284    	; 0x8d9c <_Z18menuProcModelIndexh+0x39c>
		
			}
			else if ( sub < 12 )
    8c80:	8b e0       	ldi	r24, 0x0B	; 11
    8c82:	8f 15       	cp	r24, r15
    8c84:	08 f4       	brcc	.+2      	; 0x8c88 <_Z18menuProcModelIndexh+0x288>
    8c86:	8d c0       	rjmp	.+282    	; 0x8da2 <_Z18menuProcModelIndexh+0x3a2>
			{
				subN = 6 ;
  	  	lcd_puts_Pleft(    y, PSTR(STR_VOL_PAGE));
    8c88:	88 e0       	ldi	r24, 0x08	; 8
    8c8a:	68 e2       	ldi	r22, 0x28	; 40
    8c8c:	76 e0       	ldi	r23, 0x06	; 6
    8c8e:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
  			uint8_t attr = 0 ;
				uint8_t tvol = g_model.anaVolume ;
    8c92:	20 91 26 04 	lds	r18, 0x0426
    8c96:	22 95       	swap	r18
    8c98:	26 95       	lsr	r18
    8c9a:	27 70       	andi	r18, 0x07	; 7
  	  	if(sub==subN) { attr = blink ; CHECK_INCDEC_H_MODELVAR_0( tvol, 7 ) ; g_model.anaVolume = tvol ; }
    8c9c:	96 e0       	ldi	r25, 0x06	; 6
    8c9e:	f9 16       	cp	r15, r25
    8ca0:	11 f0       	breq	.+4      	; 0x8ca6 <_Z18menuProcModelIndexh+0x2a6>
    8ca2:	00 e0       	ldi	r16, 0x00	; 0
    8ca4:	10 c0       	rjmp	.+32     	; 0x8cc6 <_Z18menuProcModelIndexh+0x2c6>
    8ca6:	82 2f       	mov	r24, r18
    8ca8:	67 e0       	ldi	r22, 0x07	; 7
    8caa:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    8cae:	28 2f       	mov	r18, r24
    8cb0:	98 2f       	mov	r25, r24
    8cb2:	92 95       	swap	r25
    8cb4:	99 0f       	add	r25, r25
    8cb6:	90 7e       	andi	r25, 0xE0	; 224
    8cb8:	80 91 26 04 	lds	r24, 0x0426
    8cbc:	8f 71       	andi	r24, 0x1F	; 31
    8cbe:	89 2b       	or	r24, r25
    8cc0:	80 93 26 04 	sts	0x0426, r24
    8cc4:	0d 2d       	mov	r16, r13
  	  	lcd_putsAttIdx( 17*FW, y, PSTR("\003---P1 P2 P3 GV4GV5GV6GV7"), tvol, attr ) ;
    8cc6:	86 e6       	ldi	r24, 0x66	; 102
    8cc8:	68 e0       	ldi	r22, 0x08	; 8
    8cca:	4e e0       	ldi	r20, 0x0E	; 14
    8ccc:	56 e0       	ldi	r21, 0x06	; 6
    8cce:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    8cd2:	80 91 c0 01 	lds	r24, 0x01C0
    8cd6:	86 95       	lsr	r24
    8cd8:	81 70       	andi	r24, 0x01	; 1
    8cda:	40 e0       	ldi	r20, 0x00	; 0
    8cdc:	97 e0       	ldi	r25, 0x07	; 7
    8cde:	f9 16       	cp	r15, r25
    8ce0:	09 f4       	brne	.+2      	; 0x8ce4 <_Z18menuProcModelIndexh+0x2e4>
    8ce2:	41 e0       	ldi	r20, 0x01	; 1
    8ce4:	60 e1       	ldi	r22, 0x10	; 16
    8ce6:	22 e0       	ldi	r18, 0x02	; 2
    8ce8:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
  	  	if(sub==subN) { attr = blink ; CHECK_INCDEC_H_MODELVAR_0( tvol, 7 ) ; g_model.anaVolume = tvol ; }
  	  	lcd_putsAttIdx( 17*FW, y, PSTR("\003---P1 P2 P3 GV4GV5GV6GV7"), tvol, attr ) ;
  			y += FH ;
				subN += 1 ;

				g_model.extendedLimits = onoffItem_m( g_model.extendedLimits, y, sub==subN) ;
    8cec:	81 70       	andi	r24, 0x01	; 1
    8cee:	88 0f       	add	r24, r24
    8cf0:	90 91 c0 01 	lds	r25, 0x01C0
    8cf4:	9d 7f       	andi	r25, 0xFD	; 253
    8cf6:	98 2b       	or	r25, r24
    8cf8:	90 93 c0 01 	sts	0x01C0, r25
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    8cfc:	80 91 b6 01 	lds	r24, 0x01B6
    8d00:	86 95       	lsr	r24
    8d02:	81 70       	andi	r24, 0x01	; 1
    8d04:	40 e0       	ldi	r20, 0x00	; 0
    8d06:	98 e0       	ldi	r25, 0x08	; 8
    8d08:	f9 16       	cp	r15, r25
    8d0a:	09 f4       	brne	.+2      	; 0x8d0e <_Z18menuProcModelIndexh+0x30e>
    8d0c:	41 e0       	ldi	r20, 0x01	; 1
    8d0e:	68 e1       	ldi	r22, 0x18	; 24
    8d10:	22 e0       	ldi	r18, 0x02	; 2
    8d12:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>

				g_model.extendedLimits = onoffItem_m( g_model.extendedLimits, y, sub==subN) ;
  			y += FH ;
				subN += 1 ;

				g_model.traineron = onoffItem_m( g_model.traineron, y, sub==subN) ;
    8d16:	81 70       	andi	r24, 0x01	; 1
    8d18:	88 0f       	add	r24, r24
    8d1a:	90 91 b6 01 	lds	r25, 0x01B6
    8d1e:	9d 7f       	andi	r25, 0xFD	; 253
    8d20:	98 2b       	or	r25, r24
    8d22:	90 93 b6 01 	sts	0x01B6, r25
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    8d26:	80 91 bb 01 	lds	r24, 0x01BB
    8d2a:	81 70       	andi	r24, 0x01	; 1
    8d2c:	40 e0       	ldi	r20, 0x00	; 0
    8d2e:	99 e0       	ldi	r25, 0x09	; 9
    8d30:	f9 16       	cp	r15, r25
    8d32:	09 f4       	brne	.+2      	; 0x8d36 <_Z18menuProcModelIndexh+0x336>
    8d34:	41 e0       	ldi	r20, 0x01	; 1
    8d36:	60 e2       	ldi	r22, 0x20	; 32
    8d38:	22 e0       	ldi	r18, 0x02	; 2
    8d3a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>

				g_model.traineron = onoffItem_m( g_model.traineron, y, sub==subN) ;
  			y += FH ;
				subN += 1 ;
			
				g_model.thrTrim = onoffItem_m( g_model.thrTrim, y, sub==subN) ;
    8d3e:	81 70       	andi	r24, 0x01	; 1
    8d40:	90 91 bb 01 	lds	r25, 0x01BB
    8d44:	9e 7f       	andi	r25, 0xFE	; 254
    8d46:	98 2b       	or	r25, r24
    8d48:	90 93 bb 01 	sts	0x01BB, r25
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    8d4c:	89 2f       	mov	r24, r25
    8d4e:	82 95       	swap	r24
    8d50:	81 70       	andi	r24, 0x01	; 1
    8d52:	40 e0       	ldi	r20, 0x00	; 0
    8d54:	9a e0       	ldi	r25, 0x0A	; 10
    8d56:	f9 16       	cp	r15, r25
    8d58:	09 f4       	brne	.+2      	; 0x8d5c <_Z18menuProcModelIndexh+0x35c>
    8d5a:	41 e0       	ldi	r20, 0x01	; 1
    8d5c:	68 e2       	ldi	r22, 0x28	; 40
    8d5e:	22 e0       	ldi	r18, 0x02	; 2
    8d60:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
			
				g_model.thrTrim = onoffItem_m( g_model.thrTrim, y, sub==subN) ;
  			y += FH ;
				subN += 1 ;

				g_model.thrExpo = onoffItem_m( g_model.thrExpo, y, sub==subN) ;
    8d64:	81 70       	andi	r24, 0x01	; 1
    8d66:	82 95       	swap	r24
    8d68:	80 7f       	andi	r24, 0xF0	; 240
    8d6a:	90 91 bb 01 	lds	r25, 0x01BB
    8d6e:	9f 7e       	andi	r25, 0xEF	; 239
    8d70:	98 2b       	or	r25, r24
    8d72:	90 93 bb 01 	sts	0x01BB, r25
  			y += FH ;
				subN += 1 ;

//	  	  lcd_puts_Pleft(    y, PSTR(STR_TRIM_INC));
  		  attr = 0 ;
				uint8_t tinc = g_model.trimInc ;
    8d76:	20 91 bc 01 	lds	r18, 0x01BC
  		  if(sub==subN) { attr = blink ; CHECK_INCDEC_H_MODELVAR_0(tinc,4); g_model.trimInc = tinc ;}
    8d7a:	8b e0       	ldi	r24, 0x0B	; 11
    8d7c:	f8 16       	cp	r15, r24
    8d7e:	11 f0       	breq	.+4      	; 0x8d84 <_Z18menuProcModelIndexh+0x384>
  			y += FH ;
				subN += 1 ;

//	  	  lcd_puts_Pleft(    y, PSTR(STR_TRIM_INC));
  		  attr = 0 ;
				uint8_t tinc = g_model.trimInc ;
    8d80:	00 e0       	ldi	r16, 0x00	; 0
    8d82:	08 c0       	rjmp	.+16     	; 0x8d94 <_Z18menuProcModelIndexh+0x394>
  		  if(sub==subN) { attr = blink ; CHECK_INCDEC_H_MODELVAR_0(tinc,4); g_model.trimInc = tinc ;}
    8d84:	82 2f       	mov	r24, r18
    8d86:	64 e0       	ldi	r22, 0x04	; 4
    8d88:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    8d8c:	28 2f       	mov	r18, r24
    8d8e:	80 93 bc 01 	sts	0x01BC, r24
    8d92:	0d 2d       	mov	r16, r13
  	  	lcd_putsAttIdx(  14*FW, y, PSTR(STR_TRIM_OPTIONS), tinc,attr);
    8d94:	84 e5       	ldi	r24, 0x54	; 84
    8d96:	60 e3       	ldi	r22, 0x30	; 48
    8d98:	4e ee       	ldi	r20, 0xEE	; 238
    8d9a:	55 e0       	ldi	r21, 0x05	; 5
    8d9c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    8da0:	44 c4       	rjmp	.+2184   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>

			}
			else
			{
				subN = 12 ;
	  	  lcd_puts_Pleft(    y, PSTR(STR_TRIM_PAGE));
    8da2:	88 e0       	ldi	r24, 0x08	; 8
    8da4:	6b ec       	ldi	r22, 0xCB	; 203
    8da6:	75 e0       	ldi	r23, 0x05	; 5
    8da8:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
  		  uint8_t attr = 0 ;
  		  if(sub==subN) { attr = blink ; }
    8dac:	9c e0       	ldi	r25, 0x0C	; 12
    8dae:	f9 16       	cp	r15, r25
    8db0:	11 f4       	brne	.+4      	; 0x8db6 <_Z18menuProcModelIndexh+0x3b6>
    8db2:	0d 2d       	mov	r16, r13
    8db4:	01 c0       	rjmp	.+2      	; 0x8db8 <_Z18menuProcModelIndexh+0x3b8>
    8db6:	00 e0       	ldi	r16, 0x00	; 0
				g_model.trimSw = edit_dr_switch( 17*FW, y, g_model.trimSw, attr, attr ? EDIT_DR_SWITCH_EDIT : 0 ) ;
    8db8:	90 e0       	ldi	r25, 0x00	; 0
    8dba:	01 11       	cpse	r16, r1
    8dbc:	91 e0       	ldi	r25, 0x01	; 1
    8dbe:	86 e6       	ldi	r24, 0x66	; 102
    8dc0:	68 e0       	ldi	r22, 0x08	; 8
    8dc2:	40 91 be 01 	lds	r20, 0x01BE
    8dc6:	20 2f       	mov	r18, r16
    8dc8:	09 2f       	mov	r16, r25
    8dca:	0e 94 3b 3c 	call	0x7876	; 0x7876 <_Z14edit_dr_switchhhahh>
    8dce:	80 93 be 01 	sts	0x01BE, r24
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    8dd2:	80 91 bb 01 	lds	r24, 0x01BB
    8dd6:	86 95       	lsr	r24
    8dd8:	86 95       	lsr	r24
    8dda:	86 95       	lsr	r24
    8ddc:	81 70       	andi	r24, 0x01	; 1
    8dde:	40 e0       	ldi	r20, 0x00	; 0
    8de0:	9d e0       	ldi	r25, 0x0D	; 13
    8de2:	f9 16       	cp	r15, r25
    8de4:	09 f4       	brne	.+2      	; 0x8de8 <_Z18menuProcModelIndexh+0x3e8>
    8de6:	41 e0       	ldi	r20, 0x01	; 1
    8de8:	60 e1       	ldi	r22, 0x10	; 16
    8dea:	22 e0       	ldi	r18, 0x02	; 2
    8dec:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
  		  if(sub==subN) { attr = blink ; }
				g_model.trimSw = edit_dr_switch( 17*FW, y, g_model.trimSw, attr, attr ? EDIT_DR_SWITCH_EDIT : 0 ) ;
  			y += FH ;
				subN += 1 ;

				g_model.mixTime = onoffItem_m( g_model.mixTime, y, sub==subN) ;
    8df0:	81 70       	andi	r24, 0x01	; 1
    8df2:	88 0f       	add	r24, r24
    8df4:	88 0f       	add	r24, r24
    8df6:	88 0f       	add	r24, r24
    8df8:	90 91 bb 01 	lds	r25, 0x01BB
    8dfc:	97 7f       	andi	r25, 0xF7	; 247
    8dfe:	98 2b       	or	r25, r24
    8e00:	90 93 bb 01 	sts	0x01BB, r25
    8e04:	01 e0       	ldi	r16, 0x01	; 1
    8e06:	c0 e0       	ldi	r28, 0x00	; 0
    8e08:	d0 e0       	ldi	r29, 0x00	; 0
    8e0a:	1f e3       	ldi	r17, 0x3F	; 63
				{
					uint8_t z = g_model.beepANACenter ;
    			lcd_putcAtt( (9+i)*(FW+1), y, pgm_read_byte( &PSTR(STR_RETA123)[i]), ( z & b ) ? INVERS : 0 ) ;
					if ( sub==subN )
				  {
						Columns = &ProgColumns[COLUMNS_6] ;
    8e0c:	9d e2       	ldi	r25, 0x2D	; 45
    8e0e:	c9 2e       	mov	r12, r25
    8e10:	94 e0       	ldi	r25, 0x04	; 4
    8e12:	d9 2e       	mov	r13, r25
  		  if(sub==subN) { attr = blink ; }
				g_model.trimSw = edit_dr_switch( 17*FW, y, g_model.trimSw, attr, attr ? EDIT_DR_SWITCH_EDIT : 0 ) ;
  			y += FH ;
				subN += 1 ;

				g_model.mixTime = onoffItem_m( g_model.mixTime, y, sub==subN) ;
    8e14:	ec 2e       	mov	r14, r28
//	  	  lcd_puts_Pleft(    y, PSTR(STR_BEEP_CENTRE));
				uint8_t b = 1 ;
				for(uint8_t i=0;i<7;i++)
				{
					uint8_t z = g_model.beepANACenter ;
    			lcd_putcAtt( (9+i)*(FW+1), y, pgm_read_byte( &PSTR(STR_RETA123)[i]), ( z & b ) ? INVERS : 0 ) ;
    8e16:	fe 01       	movw	r30, r28
    8e18:	ed 53       	subi	r30, 0x3D	; 61
    8e1a:	fa 4f       	sbci	r31, 0xFA	; 250
    8e1c:	44 91       	lpm	r20, Z+
    8e1e:	50 e0       	ldi	r21, 0x00	; 0
    8e20:	20 2f       	mov	r18, r16
    8e22:	30 e0       	ldi	r19, 0x00	; 0
    8e24:	80 91 bf 01 	lds	r24, 0x01BF
    8e28:	90 e0       	ldi	r25, 0x00	; 0
    8e2a:	28 23       	and	r18, r24
    8e2c:	39 23       	and	r19, r25
    8e2e:	23 2b       	or	r18, r19
    8e30:	09 f0       	breq	.+2      	; 0x8e34 <_Z18menuProcModelIndexh+0x434>
    8e32:	51 e0       	ldi	r21, 0x01	; 1
    8e34:	81 2f       	mov	r24, r17
    8e36:	68 e1       	ldi	r22, 0x18	; 24
    8e38:	25 2f       	mov	r18, r21
    8e3a:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
					if ( sub==subN )
    8e3e:	8e e0       	ldi	r24, 0x0E	; 14
    8e40:	f8 16       	cp	r15, r24
    8e42:	f9 f4       	brne	.+62     	; 0x8e82 <_Z18menuProcModelIndexh+0x482>
				  {
						Columns = &ProgColumns[COLUMNS_6] ;
    8e44:	d0 92 c1 08 	sts	0x08C1, r13
    8e48:	c0 92 c0 08 	sts	0x08C0, r12
						if ( g_posHorz == i )
    8e4c:	80 91 0c 07 	lds	r24, 0x070C
    8e50:	8e 15       	cp	r24, r14
    8e52:	b9 f4       	brne	.+46     	; 0x8e82 <_Z18menuProcModelIndexh+0x482>
						{
							lcd_rect( (9+i)*(FW+1)-1, y-1, FW+2, 9 ) ;
    8e54:	81 2f       	mov	r24, r17
    8e56:	81 50       	subi	r24, 0x01	; 1
    8e58:	67 e1       	ldi	r22, 0x17	; 23
    8e5a:	48 e0       	ldi	r20, 0x08	; 8
    8e5c:	29 e0       	ldi	r18, 0x09	; 9
    8e5e:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
							if ( event==EVT_KEY_BREAK(KEY_MENU) || event==EVT_KEY_BREAK(BTN_RE) ) 
    8e62:	90 e2       	ldi	r25, 0x20	; 32
    8e64:	b9 16       	cp	r11, r25
    8e66:	19 f0       	breq	.+6      	; 0x8e6e <_Z18menuProcModelIndexh+0x46e>
    8e68:	8e e2       	ldi	r24, 0x2E	; 46
    8e6a:	b8 16       	cp	r11, r24
    8e6c:	51 f4       	brne	.+20     	; 0x8e82 <_Z18menuProcModelIndexh+0x482>
							{
								g_model.beepANACenter ^= b ;
    8e6e:	80 91 bf 01 	lds	r24, 0x01BF
    8e72:	80 27       	eor	r24, r16
    8e74:	80 93 bf 01 	sts	0x01BF, r24
      					eeDirty(EE_MODEL) ;
    8e78:	82 e0       	ldi	r24, 0x02	; 2
    8e7a:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
    						s_editMode = false ;
    8e7e:	10 92 e5 06 	sts	0x06E5, r1
    8e82:	21 96       	adiw	r28, 0x01	; 1
    8e84:	19 5f       	subi	r17, 0xF9	; 249
				y += FH ;
				subN += 1 ;

//	  	  lcd_puts_Pleft(    y, PSTR(STR_BEEP_CENTRE));
				uint8_t b = 1 ;
				for(uint8_t i=0;i<7;i++)
    8e86:	10 37       	cpi	r17, 0x70	; 112
    8e88:	09 f4       	brne	.+2      	; 0x8e8c <_Z18menuProcModelIndexh+0x48c>
    8e8a:	cf c3       	rjmp	.+1950   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
      					eeDirty(EE_MODEL) ;
    						s_editMode = false ;
							}
						}
					}
					b <<= 1 ;
    8e8c:	00 0f       	add	r16, r16
    8e8e:	c2 cf       	rjmp	.-124    	; 0x8e14 <_Z18menuProcModelIndexh+0x414>
		}
		break ;
		
		case M_TIMERS :
		{
			TITLEP(Str_Timer) ;
    8e90:	88 e3       	ldi	r24, 0x38	; 56
    8e92:	94 e0       	ldi	r25, 0x04	; 4
    8e94:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 10 ;
    8e98:	8a e0       	ldi	r24, 0x0A	; 10
    8e9a:	80 93 c2 08 	sts	0x08C2, r24
			
			editTimer( sub ) ;
    8e9e:	8f 2d       	mov	r24, r15
    8ea0:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <_ZL9editTimerh>
			TimerMode *ptConfig = &TimerConfig[0] ;
			FORCE_INDIRECT(ptConfig) ;
    8ea4:	eb ea       	ldi	r30, 0xAB	; 171
    8ea6:	f5 e0       	ldi	r31, 0x05	; 5
			g_model.tmrVal = ptConfig->tmrVal ;
    8ea8:	80 81       	ld	r24, Z
    8eaa:	91 81       	ldd	r25, Z+1	; 0x01
    8eac:	90 93 b8 01 	sts	0x01B8, r25
    8eb0:	80 93 b7 01 	sts	0x01B7, r24
			g_model.tmrMode = ptConfig->tmrModeA ;
    8eb4:	82 81       	ldd	r24, Z+2	; 0x02
    8eb6:	80 93 b5 01 	sts	0x01B5, r24
			g_model.tmrModeB = ptConfig->tmrModeB ;
    8eba:	83 81       	ldd	r24, Z+3	; 0x03
    8ebc:	80 93 25 04 	sts	0x0425, r24
			g_model.tmrDir = ptConfig->tmrDir ;
    8ec0:	94 81       	ldd	r25, Z+4	; 0x04
    8ec2:	91 70       	andi	r25, 0x01	; 1
    8ec4:	80 91 b6 01 	lds	r24, 0x01B6
    8ec8:	8e 7f       	andi	r24, 0xFE	; 254
    8eca:	89 2b       	or	r24, r25
    8ecc:	80 93 b6 01 	sts	0x01B6, r24
			ptConfig += 1 ;
    8ed0:	df 01       	movw	r26, r30
    8ed2:	15 96       	adiw	r26, 0x05	; 5
			g_model.tmr2Val = ptConfig->tmrVal ;
    8ed4:	85 81       	ldd	r24, Z+5	; 0x05
    8ed6:	96 81       	ldd	r25, Z+6	; 0x06
    8ed8:	90 93 56 04 	sts	0x0456, r25
    8edc:	80 93 55 04 	sts	0x0455, r24
			g_model.tmr2Mode = ptConfig->tmrModeA ;
    8ee0:	12 96       	adiw	r26, 0x02	; 2
    8ee2:	8c 91       	ld	r24, X
    8ee4:	12 97       	sbiw	r26, 0x02	; 2
    8ee6:	80 93 57 04 	sts	0x0457, r24
			g_model.tmr2ModeB = ptConfig->tmrModeB ;
    8eea:	13 96       	adiw	r26, 0x03	; 3
    8eec:	8c 91       	ld	r24, X
    8eee:	13 97       	sbiw	r26, 0x03	; 3
    8ef0:	80 93 58 04 	sts	0x0458, r24
			g_model.tmr2Dir = ptConfig->tmrDir ;
    8ef4:	14 96       	adiw	r26, 0x04	; 4
    8ef6:	9c 91       	ld	r25, X
    8ef8:	97 95       	ror	r25
    8efa:	99 27       	eor	r25, r25
    8efc:	97 95       	ror	r25
    8efe:	80 91 1b 05 	lds	r24, 0x051B
    8f02:	8f 77       	andi	r24, 0x7F	; 127
    8f04:	89 2b       	or	r24, r25
    8f06:	80 93 1b 05 	sts	0x051B, r24
    8f0a:	8f c3       	rjmp	.+1822   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
		}	
		break ;

		case M_HELI :
		{
			TITLEP(Str_heli_setup) ;
    8f0c:	8e e3       	ldi	r24, 0x3E	; 62
    8f0e:	94 e0       	ldi	r25, 0x04	; 4
    8f10:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 6 ;
    8f14:	86 e0       	ldi	r24, 0x06	; 6
    8f16:	80 93 c2 08 	sts	0x08C2, r24

		  uint8_t b ;
		  uint8_t attr ;
			uint8_t blink = InverseBlink ;
    8f1a:	e0 90 eb 06 	lds	r14, 0x06EB

			uint8_t subN = 0 ;
		  b = g_model.swashType ;
    8f1e:	10 91 c0 01 	lds	r17, 0x01C0
    8f22:	12 95       	swap	r17
    8f24:	16 95       	lsr	r17
    8f26:	17 70       	andi	r17, 0x07	; 7
		  lcd_puts_Pleft(    y, PSTR(STR_HELI_TEXT));
    8f28:	88 e0       	ldi	r24, 0x08	; 8
    8f2a:	68 e7       	ldi	r22, 0x78	; 120
    8f2c:	75 e0       	ldi	r23, 0x05	; 5
    8f2e:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
			attr = 0 ;
		  if(sub==subN) {attr = blink ; CHECK_INCDEC_H_MODELVAR_0(b,SWASH_TYPE_NUM); g_model.swashType = b ; }
    8f32:	ff 20       	and	r15, r15
    8f34:	11 f0       	breq	.+4      	; 0x8f3a <_Z18menuProcModelIndexh+0x53a>
    8f36:	00 e0       	ldi	r16, 0x00	; 0
    8f38:	10 c0       	rjmp	.+32     	; 0x8f5a <_Z18menuProcModelIndexh+0x55a>
    8f3a:	81 2f       	mov	r24, r17
    8f3c:	64 e0       	ldi	r22, 0x04	; 4
    8f3e:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    8f42:	18 2f       	mov	r17, r24
    8f44:	98 2f       	mov	r25, r24
    8f46:	92 95       	swap	r25
    8f48:	99 0f       	add	r25, r25
    8f4a:	90 7e       	andi	r25, 0xE0	; 224
    8f4c:	80 91 c0 01 	lds	r24, 0x01C0
    8f50:	8f 71       	andi	r24, 0x1F	; 31
    8f52:	89 2b       	or	r24, r25
    8f54:	80 93 c0 01 	sts	0x01C0, r24
    8f58:	0e 2d       	mov	r16, r14
		  lcd_putsAttIdx( 17*FW, y, PSTR(SWASH_TYPE_STR),b,attr );
    8f5a:	86 e6       	ldi	r24, 0x66	; 102
    8f5c:	68 e0       	ldi	r22, 0x08	; 8
    8f5e:	42 e6       	ldi	r20, 0x62	; 98
    8f60:	55 e0       	ldi	r21, 0x05	; 5
    8f62:	21 2f       	mov	r18, r17
    8f64:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
			y += FH ;
			subN++;

			attr = 0 ;
		  if(sub==subN) {attr = blink ; CHECK_INCDEC_H_MODELVAR_0( g_model.swashCollectiveSource, NUM_XCHNRAW);}
    8f68:	91 e0       	ldi	r25, 0x01	; 1
    8f6a:	f9 16       	cp	r15, r25
    8f6c:	11 f0       	breq	.+4      	; 0x8f72 <_Z18menuProcModelIndexh+0x572>
    8f6e:	20 e0       	ldi	r18, 0x00	; 0
    8f70:	08 c0       	rjmp	.+16     	; 0x8f82 <_Z18menuProcModelIndexh+0x582>
    8f72:	80 91 c1 01 	lds	r24, 0x01C1
    8f76:	64 e2       	ldi	r22, 0x24	; 36
    8f78:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    8f7c:	80 93 c1 01 	sts	0x01C1, r24
    8f80:	2e 2d       	mov	r18, r14
		  putsChnRaw(17*FW, y, g_model.swashCollectiveSource, attr);
    8f82:	86 e6       	ldi	r24, 0x66	; 102
    8f84:	60 e1       	ldi	r22, 0x10	; 16
    8f86:	40 91 c1 01 	lds	r20, 0x01C1
    8f8a:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
			y += FH ;
			subN++;

			attr = 0 ;
		  if(sub==subN) {attr = blink ; CHECK_INCDEC_H_MODELVAR_0( g_model.swashRingValue, 100);}
    8f8e:	82 e0       	ldi	r24, 0x02	; 2
    8f90:	f8 16       	cp	r15, r24
    8f92:	11 f0       	breq	.+4      	; 0x8f98 <_Z18menuProcModelIndexh+0x598>
    8f94:	20 e0       	ldi	r18, 0x00	; 0
    8f96:	08 c0       	rjmp	.+16     	; 0x8fa8 <_Z18menuProcModelIndexh+0x5a8>
    8f98:	80 91 c2 01 	lds	r24, 0x01C2
    8f9c:	64 e6       	ldi	r22, 0x64	; 100
    8f9e:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    8fa2:	80 93 c2 01 	sts	0x01C2, r24
    8fa6:	2e 2d       	mov	r18, r14
		  lcd_outdezAtt( 17*FW, y, g_model.swashRingValue, attr ) ;
    8fa8:	40 91 c2 01 	lds	r20, 0x01C2
    8fac:	86 e6       	ldi	r24, 0x66	; 102
    8fae:	68 e1       	ldi	r22, 0x18	; 24
    8fb0:	50 e0       	ldi	r21, 0x00	; 0
    8fb2:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
			y += FH ;
			subN++;

			g_model.swashInvertELE = hyphinvMenuItem_m( g_model.swashInvertELE, y, sub==subN ) ;
    8fb6:	80 91 c0 01 	lds	r24, 0x01C0
    8fba:	86 95       	lsr	r24
    8fbc:	86 95       	lsr	r24
    8fbe:	81 70       	andi	r24, 0x01	; 1
    8fc0:	40 e0       	ldi	r20, 0x00	; 0
    8fc2:	93 e0       	ldi	r25, 0x03	; 3
    8fc4:	f9 16       	cp	r15, r25
    8fc6:	09 f4       	brne	.+2      	; 0x8fca <_Z18menuProcModelIndexh+0x5ca>
    8fc8:	41 e0       	ldi	r20, 0x01	; 1
    8fca:	60 e2       	ldi	r22, 0x20	; 32
    8fcc:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z17hyphinvMenuItem_mhhh>
    8fd0:	81 70       	andi	r24, 0x01	; 1
    8fd2:	88 0f       	add	r24, r24
    8fd4:	88 0f       	add	r24, r24
    8fd6:	90 91 c0 01 	lds	r25, 0x01C0
    8fda:	9b 7f       	andi	r25, 0xFB	; 251
    8fdc:	98 2b       	or	r25, r24
    8fde:	90 93 c0 01 	sts	0x01C0, r25
			y += FH ;
			subN++;

			g_model.swashInvertAIL = hyphinvMenuItem_m( g_model.swashInvertAIL, y, sub==subN ) ;
    8fe2:	89 2f       	mov	r24, r25
    8fe4:	86 95       	lsr	r24
    8fe6:	86 95       	lsr	r24
    8fe8:	86 95       	lsr	r24
    8fea:	81 70       	andi	r24, 0x01	; 1
    8fec:	40 e0       	ldi	r20, 0x00	; 0
    8fee:	94 e0       	ldi	r25, 0x04	; 4
    8ff0:	f9 16       	cp	r15, r25
    8ff2:	09 f4       	brne	.+2      	; 0x8ff6 <_Z18menuProcModelIndexh+0x5f6>
    8ff4:	41 e0       	ldi	r20, 0x01	; 1
    8ff6:	68 e2       	ldi	r22, 0x28	; 40
    8ff8:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z17hyphinvMenuItem_mhhh>
    8ffc:	81 70       	andi	r24, 0x01	; 1
    8ffe:	88 0f       	add	r24, r24
    9000:	88 0f       	add	r24, r24
    9002:	88 0f       	add	r24, r24
    9004:	90 91 c0 01 	lds	r25, 0x01C0
    9008:	97 7f       	andi	r25, 0xF7	; 247
    900a:	98 2b       	or	r25, r24
    900c:	90 93 c0 01 	sts	0x01C0, r25
			y += FH ;
			subN++;

			g_model.swashInvertCOL = hyphinvMenuItem_m( g_model.swashInvertCOL, y, sub==subN ) ;
    9010:	89 2f       	mov	r24, r25
    9012:	82 95       	swap	r24
    9014:	81 70       	andi	r24, 0x01	; 1
    9016:	40 e0       	ldi	r20, 0x00	; 0
    9018:	95 e0       	ldi	r25, 0x05	; 5
    901a:	f9 16       	cp	r15, r25
    901c:	09 f4       	brne	.+2      	; 0x9020 <_Z18menuProcModelIndexh+0x620>
    901e:	41 e0       	ldi	r20, 0x01	; 1
    9020:	60 e3       	ldi	r22, 0x30	; 48
    9022:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z17hyphinvMenuItem_mhhh>
    9026:	81 70       	andi	r24, 0x01	; 1
    9028:	82 95       	swap	r24
    902a:	80 7f       	andi	r24, 0xF0	; 240
    902c:	90 91 c0 01 	lds	r25, 0x01C0
    9030:	9f 7e       	andi	r25, 0xEF	; 239
    9032:	98 2b       	or	r25, r24
    9034:	90 93 c0 01 	sts	0x01C0, r25
    9038:	f8 c2       	rjmp	.+1520   	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
		}	
		break ;

		case M_EXPO :
		{
			TITLEP(Str_Expo) ;
    903a:	89 e4       	ldi	r24, 0x49	; 73
    903c:	94 e0       	ldi	r25, 0x04	; 4
    903e:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 5 ;
    9042:	85 e0       	ldi	r24, 0x05	; 5
    9044:	80 93 c2 08 	sts	0x08C2, r24
	
			uint8_t stkVal ;
			StickScrollAllowed = 0 ;
    9048:	10 92 06 06 	sts	0x0606, r1
	
			uint8_t l_expoChan = s_expoChan ;
    904c:	10 91 c4 08 	lds	r17, 0x08C4
			{
  		  uint8_t attr = 0 ;
				if ( sub == 0 )
    9050:	ff 20       	and	r15, r15
    9052:	11 f0       	breq	.+4      	; 0x9058 <_Z18menuProcModelIndexh+0x658>
    9054:	20 e0       	ldi	r18, 0x00	; 0
    9056:	0a c0       	rjmp	.+20     	; 0x906c <_Z18menuProcModelIndexh+0x66c>
				{
					s_expoChan = l_expoChan = checkIncDec( l_expoChan, 0, 3, 0 ) ;
    9058:	81 2f       	mov	r24, r17
    905a:	60 e0       	ldi	r22, 0x00	; 0
    905c:	43 e0       	ldi	r20, 0x03	; 3
    905e:	20 e0       	ldi	r18, 0x00	; 0
    9060:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
    9064:	18 2f       	mov	r17, r24
    9066:	80 93 c4 08 	sts	0x08C4, r24
    906a:	21 e0       	ldi	r18, 0x01	; 1
					attr = INVERS ;
				}		 
				putsChnRaw(0,FH,l_expoChan+1,attr) ;
    906c:	41 2f       	mov	r20, r17
    906e:	4f 5f       	subi	r20, 0xFF	; 255
    9070:	80 e0       	ldi	r24, 0x00	; 0
    9072:	68 e0       	ldi	r22, 0x08	; 8
    9074:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
			}
	
			uint8_t expoDrOn = get_dr_state(l_expoChan);
    9078:	81 2f       	mov	r24, r17
    907a:	0e 94 34 2b 	call	0x5668	; 0x5668 <_Z12get_dr_stateh>
    907e:	d8 2e       	mov	r13, r24
	
  		lcd_putsAttIdx(  0, FH, PSTR(STR_4DR_HIMIDLO), expoDrOn, 0 ) ;
    9080:	80 e0       	ldi	r24, 0x00	; 0
    9082:	68 e0       	ldi	r22, 0x08	; 8
    9084:	4b e4       	ldi	r20, 0x4B	; 75
    9086:	55 e0       	ldi	r21, 0x05	; 5
    9088:	2d 2d       	mov	r18, r13
    908a:	00 e0       	ldi	r16, 0x00	; 0
    908c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
	
			lcd_puts_Pleft(2*FH,PSTR(STR_EXPO_TEXT));
    9090:	80 e1       	ldi	r24, 0x10	; 16
    9092:	6f e2       	ldi	r22, 0x2F	; 47
    9094:	75 e0       	ldi	r23, 0x05	; 5
    9096:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>

			stkVal = DR_BOTH ;
			if(calibratedStick[l_expoChan]> 100) stkVal = DR_RIGHT ;
    909a:	e1 2f       	mov	r30, r17
    909c:	f0 e0       	ldi	r31, 0x00	; 0
    909e:	ee 0f       	add	r30, r30
    90a0:	ff 1f       	adc	r31, r31
    90a2:	ea 54       	subi	r30, 0x4A	; 74
    90a4:	f9 4f       	sbci	r31, 0xF9	; 249
    90a6:	01 90       	ld	r0, Z+
    90a8:	f0 81       	ld	r31, Z
    90aa:	e0 2d       	mov	r30, r0
    90ac:	e5 36       	cpi	r30, 0x65	; 101
    90ae:	f1 05       	cpc	r31, r1
    90b0:	14 f0       	brlt	.+4      	; 0x90b6 <_Z18menuProcModelIndexh+0x6b6>
    90b2:	cc 24       	eor	r12, r12
    90b4:	02 c0       	rjmp	.+4      	; 0x90ba <_Z18menuProcModelIndexh+0x6ba>
    90b6:	02 e0       	ldi	r16, 0x02	; 2
    90b8:	c0 2e       	mov	r12, r16
			if(calibratedStick[l_expoChan]<-100) stkVal = DR_LEFT ;
    90ba:	ec 59       	subi	r30, 0x9C	; 156
    90bc:	ff 4f       	sbci	r31, 0xFF	; 255
    90be:	14 f4       	brge	.+4      	; 0x90c4 <_Z18menuProcModelIndexh+0x6c4>
    90c0:	cc 24       	eor	r12, r12
    90c2:	c3 94       	inc	r12
			if(IS_EXPO_THROTTLE(l_expoChan)) stkVal = DR_RIGHT;
    90c4:	81 2f       	mov	r24, r17
    90c6:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z16IS_EXPO_THROTTLEh>
    90ca:	88 23       	and	r24, r24
    90cc:	19 f0       	breq	.+6      	; 0x90d4 <_Z18menuProcModelIndexh+0x6d4>
    90ce:	80 e0       	ldi	r24, 0x00	; 0
    90d0:	cc 24       	eor	r12, r12
    90d2:	08 c0       	rjmp	.+16     	; 0x90e4 <_Z18menuProcModelIndexh+0x6e4>

			editExpoVals( (stkVal != DR_RIGHT) && (sub==1), 4*FW, 3*FH, expoDrOn ,DR_EXPO, DR_LEFT ) ;
    90d4:	cc 20       	and	r12, r12
    90d6:	29 f0       	breq	.+10     	; 0x90e2 <_Z18menuProcModelIndexh+0x6e2>
    90d8:	91 e0       	ldi	r25, 0x01	; 1
    90da:	f9 16       	cp	r15, r25
    90dc:	11 f4       	brne	.+4      	; 0x90e2 <_Z18menuProcModelIndexh+0x6e2>
    90de:	81 e0       	ldi	r24, 0x01	; 1
    90e0:	01 c0       	rjmp	.+2      	; 0x90e4 <_Z18menuProcModelIndexh+0x6e4>
    90e2:	80 e0       	ldi	r24, 0x00	; 0
    90e4:	68 e1       	ldi	r22, 0x18	; 24
    90e6:	48 e1       	ldi	r20, 0x18	; 24
    90e8:	2d 2d       	mov	r18, r13
    90ea:	00 e0       	ldi	r16, 0x00	; 0
    90ec:	ee 24       	eor	r14, r14
    90ee:	e3 94       	inc	r14
    90f0:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_Z12editExpoValshhhhhh>
			editExpoVals( (stkVal != DR_LEFT) && (sub==1), 8*FW, 3*FH, expoDrOn ,DR_EXPO, DR_RIGHT ) ;
    90f4:	ce 14       	cp	r12, r14
    90f6:	11 f4       	brne	.+4      	; 0x90fc <_Z18menuProcModelIndexh+0x6fc>
    90f8:	80 e0       	ldi	r24, 0x00	; 0
    90fa:	05 c0       	rjmp	.+10     	; 0x9106 <_Z18menuProcModelIndexh+0x706>
    90fc:	80 e0       	ldi	r24, 0x00	; 0
    90fe:	91 e0       	ldi	r25, 0x01	; 1
    9100:	f9 16       	cp	r15, r25
    9102:	09 f4       	brne	.+2      	; 0x9106 <_Z18menuProcModelIndexh+0x706>
    9104:	81 e0       	ldi	r24, 0x01	; 1
    9106:	60 e3       	ldi	r22, 0x30	; 48
    9108:	48 e1       	ldi	r20, 0x18	; 24
    910a:	2d 2d       	mov	r18, r13
    910c:	00 e0       	ldi	r16, 0x00	; 0
    910e:	ee 24       	eor	r14, r14
    9110:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_Z12editExpoValshhhhhh>

			editExpoVals( (stkVal != DR_RIGHT) && (sub==2), 4*FW, 5*FH, expoDrOn ,DR_WEIGHT, DR_LEFT ) ;
    9114:	cc 20       	and	r12, r12
    9116:	11 f4       	brne	.+4      	; 0x911c <_Z18menuProcModelIndexh+0x71c>
    9118:	80 e0       	ldi	r24, 0x00	; 0
    911a:	05 c0       	rjmp	.+10     	; 0x9126 <_Z18menuProcModelIndexh+0x726>
    911c:	80 e0       	ldi	r24, 0x00	; 0
    911e:	92 e0       	ldi	r25, 0x02	; 2
    9120:	f9 16       	cp	r15, r25
    9122:	09 f4       	brne	.+2      	; 0x9126 <_Z18menuProcModelIndexh+0x726>
    9124:	81 e0       	ldi	r24, 0x01	; 1
    9126:	68 e1       	ldi	r22, 0x18	; 24
    9128:	48 e2       	ldi	r20, 0x28	; 40
    912a:	2d 2d       	mov	r18, r13
    912c:	01 e0       	ldi	r16, 0x01	; 1
    912e:	ee 24       	eor	r14, r14
    9130:	e3 94       	inc	r14
    9132:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_Z12editExpoValshhhhhh>
			editExpoVals( (stkVal != DR_LEFT) && (sub==2), 8*FW, 5*FH, expoDrOn ,DR_WEIGHT, DR_RIGHT ) ;
    9136:	ce 14       	cp	r12, r14
    9138:	11 f4       	brne	.+4      	; 0x913e <_Z18menuProcModelIndexh+0x73e>
    913a:	80 e0       	ldi	r24, 0x00	; 0
    913c:	05 c0       	rjmp	.+10     	; 0x9148 <_Z18menuProcModelIndexh+0x748>
    913e:	80 e0       	ldi	r24, 0x00	; 0
    9140:	92 e0       	ldi	r25, 0x02	; 2
    9142:	f9 16       	cp	r15, r25
    9144:	09 f4       	brne	.+2      	; 0x9148 <_Z18menuProcModelIndexh+0x748>
    9146:	81 e0       	ldi	r24, 0x01	; 1
    9148:	60 e3       	ldi	r22, 0x30	; 48
    914a:	48 e2       	ldi	r20, 0x28	; 40
    914c:	2d 2d       	mov	r18, r13
    914e:	01 e0       	ldi	r16, 0x01	; 1
    9150:	ee 24       	eor	r14, r14
    9152:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_Z12editExpoValshhhhhh>

			editExpoVals( sub==3,5*FW, 6*FH, DR_DRSW1 , 0,0);
    9156:	80 e0       	ldi	r24, 0x00	; 0
    9158:	93 e0       	ldi	r25, 0x03	; 3
    915a:	f9 16       	cp	r15, r25
    915c:	09 f4       	brne	.+2      	; 0x9160 <_Z18menuProcModelIndexh+0x760>
    915e:	81 e0       	ldi	r24, 0x01	; 1
    9160:	6e e1       	ldi	r22, 0x1E	; 30
    9162:	40 e3       	ldi	r20, 0x30	; 48
    9164:	23 e6       	ldi	r18, 0x63	; 99
    9166:	00 e0       	ldi	r16, 0x00	; 0
    9168:	ee 24       	eor	r14, r14
    916a:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_Z12editExpoValshhhhhh>
			editExpoVals( sub==4,5*FW, 7*FH, DR_DRSW2 , 0,0);
    916e:	80 e0       	ldi	r24, 0x00	; 0
    9170:	94 e0       	ldi	r25, 0x04	; 4
    9172:	f9 16       	cp	r15, r25
    9174:	09 f4       	brne	.+2      	; 0x9178 <_Z18menuProcModelIndexh+0x778>
    9176:	81 e0       	ldi	r24, 0x01	; 1
    9178:	6e e1       	ldi	r22, 0x1E	; 30
    917a:	48 e3       	ldi	r20, 0x38	; 56
    917c:	22 e6       	ldi	r18, 0x62	; 98
    917e:	00 e0       	ldi	r16, 0x00	; 0
    9180:	ee 24       	eor	r14, r14
    9182:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_Z12editExpoValshhhhhh>

			lcd_vline(XD - (IS_EXPO_THROTTLE(s_expoChan) ? WCHART : 0), Y0 - WCHART, WCHART * 2);
    9186:	80 91 c4 08 	lds	r24, 0x08C4
    918a:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z16IS_EXPO_THROTTLEh>
    918e:	88 23       	and	r24, r24
    9190:	11 f4       	brne	.+4      	; 0x9196 <_Z18menuProcModelIndexh+0x796>
    9192:	8c e5       	ldi	r24, 0x5C	; 92
    9194:	01 c0       	rjmp	.+2      	; 0x9198 <_Z18menuProcModelIndexh+0x798>
    9196:	8c e3       	ldi	r24, 0x3C	; 60
    9198:	60 e0       	ldi	r22, 0x00	; 0
    919a:	40 e4       	ldi	r20, 0x40	; 64
    919c:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>

			plotType = PLOT_BLACK ;
    91a0:	81 e0       	ldi	r24, 0x01	; 1
    91a2:	80 93 46 0d 	sts	0x0D46, r24

			drawFunction( XD, GRAPH_FUNCTION_EXPO ) ;
    91a6:	8c e5       	ldi	r24, 0x5C	; 92
    91a8:	61 e0       	ldi	r22, 0x01	; 1
    91aa:	0e 94 37 42 	call	0x846e	; 0x846e <_Z12drawFunctionhh>
	
			int16_t x512  = calibratedStick[s_expoChan];
    91ae:	80 91 c4 08 	lds	r24, 0x08C4
    91b2:	e8 2f       	mov	r30, r24
    91b4:	f0 e0       	ldi	r31, 0x00	; 0
    91b6:	ee 0f       	add	r30, r30
    91b8:	ff 1f       	adc	r31, r31
    91ba:	ea 54       	subi	r30, 0x4A	; 74
    91bc:	f9 4f       	sbci	r31, 0xF9	; 249
    91be:	00 81       	ld	r16, Z
    91c0:	11 81       	ldd	r17, Z+1	; 0x01
			int16_t y512 = calcExpo( s_expoChan, x512 ) ;
    91c2:	b8 01       	movw	r22, r16
    91c4:	0e 94 af 2b 	call	0x575e	; 0x575e <_Z8calcExpohi>
    91c8:	6c 01       	movw	r12, r24
	
			lcd_outdez( 19*FW, 6*FH,x512*25/((signed) RESXu/4) );
    91ca:	b9 e1       	ldi	r27, 0x19	; 25
    91cc:	eb 2e       	mov	r14, r27
    91ce:	f1 2c       	mov	r15, r1
    91d0:	0e 9d       	mul	r16, r14
    91d2:	c0 01       	movw	r24, r0
    91d4:	0f 9d       	mul	r16, r15
    91d6:	90 0d       	add	r25, r0
    91d8:	1e 9d       	mul	r17, r14
    91da:	90 0d       	add	r25, r0
    91dc:	11 24       	eor	r1, r1
    91de:	60 e0       	ldi	r22, 0x00	; 0
    91e0:	71 e0       	ldi	r23, 0x01	; 1
    91e2:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    91e6:	ab 01       	movw	r20, r22
    91e8:	82 e7       	ldi	r24, 0x72	; 114
    91ea:	60 e3       	ldi	r22, 0x30	; 48
    91ec:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
			lcd_outdez( 14*FW, 1*FH,y512*25/((signed) RESXu/4) );
    91f0:	ce 9c       	mul	r12, r14
    91f2:	c0 01       	movw	r24, r0
    91f4:	cf 9c       	mul	r12, r15
    91f6:	90 0d       	add	r25, r0
    91f8:	de 9c       	mul	r13, r14
    91fa:	90 0d       	add	r25, r0
    91fc:	11 24       	eor	r1, r1
    91fe:	60 e0       	ldi	r22, 0x00	; 0
    9200:	71 e0       	ldi	r23, 0x01	; 1
    9202:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    9206:	ab 01       	movw	r20, r22
    9208:	84 e5       	ldi	r24, 0x54	; 84
    920a:	68 e0       	ldi	r22, 0x08	; 8
    920c:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
	
			int8_t xv = (x512 * WCHART + RESX/2) / RESX + XD ;
    9210:	c8 01       	movw	r24, r16
    9212:	40 96       	adiw	r24, 0x10	; 16
    9214:	60 e2       	ldi	r22, 0x20	; 32
    9216:	70 e0       	ldi	r23, 0x00	; 0
    9218:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    921c:	06 2f       	mov	r16, r22
  		int8_t yv = Y0 - (y512 * WCHART + RESX/2) / RESX ;
    921e:	c6 01       	movw	r24, r12
    9220:	40 96       	adiw	r24, 0x10	; 16
    9222:	60 e2       	ldi	r22, 0x20	; 32
    9224:	70 e0       	ldi	r23, 0x00	; 0
    9226:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    922a:	70 95       	com	r23
    922c:	61 95       	neg	r22
    922e:	7f 4f       	sbci	r23, 0xFF	; 255
    9230:	16 2f       	mov	r17, r22
    9232:	10 5e       	subi	r17, 0xE0	; 224

			lcd_vline( xv, yv-3, 7 ) ;
    9234:	63 5e       	subi	r22, 0xE3	; 227
    9236:	80 2f       	mov	r24, r16
    9238:	84 5a       	subi	r24, 0xA4	; 164
    923a:	47 e0       	ldi	r20, 0x07	; 7
    923c:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
			lcd_hline( xv-3, yv, 7 ) ;
    9240:	80 2f       	mov	r24, r16
    9242:	87 5a       	subi	r24, 0xA7	; 167
    9244:	61 2f       	mov	r22, r17
    9246:	47 e0       	ldi	r20, 0x07	; 7
    9248:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
	
			plotType = PLOT_XOR ;
    924c:	10 92 46 0d 	sts	0x0D46, r1
    9250:	ec c1       	rjmp	.+984    	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
		break ;

		case M_PROTOCOL :
		{
			uint8_t dataItems = 4 ;
			if (g_model.protocol == PROTO_PXX)
    9252:	80 91 b9 01 	lds	r24, 0x01B9
    9256:	8f 70       	andi	r24, 0x0F	; 15
    9258:	81 30       	cpi	r24, 0x01	; 1
    925a:	11 f4       	brne	.+4      	; 0x9260 <_Z18menuProcModelIndexh+0x860>
    925c:	16 e0       	ldi	r17, 0x06	; 6
    925e:	05 c0       	rjmp	.+10     	; 0x926a <_Z18menuProcModelIndexh+0x86a>
			{
				dataItems = 6 ;
			}
			if (g_model.protocol == PROTO_DSM2)
    9260:	82 30       	cpi	r24, 0x02	; 2
    9262:	11 f4       	brne	.+4      	; 0x9268 <_Z18menuProcModelIndexh+0x868>
    9264:	13 e0       	ldi	r17, 0x03	; 3
    9266:	01 c0       	rjmp	.+2      	; 0x926a <_Z18menuProcModelIndexh+0x86a>
    9268:	14 e0       	ldi	r17, 0x04	; 4
			{
				dataItems = 3 ;
			}

			TITLEP(Str_Protocol) ;
    926a:	81 e5       	ldi	r24, 0x51	; 81
    926c:	94 e0       	ldi	r25, 0x04	; 4
    926e:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = dataItems ;
    9272:	10 93 c2 08 	sts	0x08C2, r17
			
			uint8_t blink = InverseBlink ;
    9276:	c0 90 eb 06 	lds	r12, 0x06EB
			uint8_t subSub = g_posHorz ;
    927a:	e0 90 0c 07 	lds	r14, 0x070C
			uint8_t subN = 0 ;

  		uint8_t attr = 0 ;
  		lcd_puts_Pleft(    y, PSTR(STR_1ST_CHAN_PROTO));
    927e:	88 e0       	ldi	r24, 0x08	; 8
    9280:	60 e2       	ldi	r22, 0x20	; 32
    9282:	75 e0       	ldi	r23, 0x05	; 5
    9284:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
  		if(sub==subN) { attr = INVERS ; CHECK_INCDEC_H_MODELVAR_0(g_model.ppmStart,7) ; }
    9288:	ff 20       	and	r15, r15
    928a:	11 f0       	breq	.+4      	; 0x9290 <_Z18menuProcModelIndexh+0x890>
    928c:	20 e0       	ldi	r18, 0x00	; 0
    928e:	12 c0       	rjmp	.+36     	; 0x92b4 <_Z18menuProcModelIndexh+0x8b4>
    9290:	80 91 bb 01 	lds	r24, 0x01BB
    9294:	82 95       	swap	r24
    9296:	86 95       	lsr	r24
    9298:	87 70       	andi	r24, 0x07	; 7
    929a:	67 e0       	ldi	r22, 0x07	; 7
    929c:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    92a0:	82 95       	swap	r24
    92a2:	88 0f       	add	r24, r24
    92a4:	80 7e       	andi	r24, 0xE0	; 224
    92a6:	90 91 bb 01 	lds	r25, 0x01BB
    92aa:	9f 71       	andi	r25, 0x1F	; 31
    92ac:	98 2b       	or	r25, r24
    92ae:	90 93 bb 01 	sts	0x01BB, r25
    92b2:	21 e0       	ldi	r18, 0x01	; 1
  		lcd_putcAtt( 19*FW, y, '1'+g_model.ppmStart, attr);
    92b4:	40 91 bb 01 	lds	r20, 0x01BB
    92b8:	42 95       	swap	r20
    92ba:	46 95       	lsr	r20
    92bc:	47 70       	andi	r20, 0x07	; 7
    92be:	4f 5c       	subi	r20, 0xCF	; 207
    92c0:	82 e7       	ldi	r24, 0x72	; 114
    92c2:	68 e0       	ldi	r22, 0x08	; 8
    92c4:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
			y += FH ;
			subN++;

			uint8_t protocol = g_model.protocol ;
    92c8:	10 91 b9 01 	lds	r17, 0x01B9
    92cc:	1f 70       	andi	r17, 0x0F	; 15
			uint8_t cols = 0 ;
			lcd_putsAttIdx(  6*FW, y, PSTR(PROT_STR), protocol, (sub==subN && subSub==0 ? blink:0) );
    92ce:	81 e0       	ldi	r24, 0x01	; 1
    92d0:	f8 16       	cp	r15, r24
    92d2:	21 f4       	brne	.+8      	; 0x92dc <_Z18menuProcModelIndexh+0x8dc>
    92d4:	ee 20       	and	r14, r14
    92d6:	11 f4       	brne	.+4      	; 0x92dc <_Z18menuProcModelIndexh+0x8dc>
    92d8:	0c 2d       	mov	r16, r12
    92da:	01 c0       	rjmp	.+2      	; 0x92de <_Z18menuProcModelIndexh+0x8de>
    92dc:	00 e0       	ldi	r16, 0x00	; 0
    92de:	84 e2       	ldi	r24, 0x24	; 36
    92e0:	60 e1       	ldi	r22, 0x10	; 16
    92e2:	4a ef       	ldi	r20, 0xFA	; 250
    92e4:	54 e0       	ldi	r21, 0x04	; 4
    92e6:	21 2f       	mov	r18, r17
    92e8:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
  		if( ( protocol == PROTO_PPM ) || (protocol == PROTO_PPM16) || (protocol == PROTO_PPMSIM) )
    92ec:	11 23       	and	r17, r17
    92ee:	21 f0       	breq	.+8      	; 0x92f8 <_Z18menuProcModelIndexh+0x8f8>
    92f0:	13 30       	cpi	r17, 0x03	; 3
    92f2:	11 f0       	breq	.+4      	; 0x92f8 <_Z18menuProcModelIndexh+0x8f8>
    92f4:	15 30       	cpi	r17, 0x05	; 5
    92f6:	59 f5       	brne	.+86     	; 0x934e <_Z18menuProcModelIndexh+0x94e>
			{
				uint8_t x ;
				cols = 2 ;
			  lcd_puts_Pleft( y, PSTR(STR_23_US) );
    92f8:	80 e1       	ldi	r24, 0x10	; 16
    92fa:	66 ef       	ldi	r22, 0xF6	; 246
    92fc:	74 e0       	ldi	r23, 0x04	; 4
    92fe:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
				x = 12*FW ;
 			  lcd_putsAttIdx(  x, y, PSTR(STR_PPMCHANNELS),(g_model.ppmNCH+2),(sub==subN && subSub==1  ? blink:0));
    9302:	20 91 ba 01 	lds	r18, 0x01BA
    9306:	91 e0       	ldi	r25, 0x01	; 1
    9308:	f9 16       	cp	r15, r25
    930a:	21 f4       	brne	.+8      	; 0x9314 <_Z18menuProcModelIndexh+0x914>
    930c:	e9 16       	cp	r14, r25
    930e:	11 f4       	brne	.+4      	; 0x9314 <_Z18menuProcModelIndexh+0x914>
    9310:	0c 2d       	mov	r16, r12
    9312:	01 c0       	rjmp	.+2      	; 0x9316 <_Z18menuProcModelIndexh+0x916>
    9314:	00 e0       	ldi	r16, 0x00	; 0
    9316:	2e 5f       	subi	r18, 0xFE	; 254
    9318:	88 e4       	ldi	r24, 0x48	; 72
    931a:	60 e1       	ldi	r22, 0x10	; 16
    931c:	48 ed       	ldi	r20, 0xD8	; 216
    931e:	54 e0       	ldi	r21, 0x04	; 4
    9320:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
 			  lcd_outdezAtt(  x+7*FW-2, y,  (g_model.ppmDelay*50)+300, (sub==subN && subSub==2 ? blink:0));
    9324:	80 91 bd 01 	lds	r24, 0x01BD
    9328:	91 e0       	ldi	r25, 0x01	; 1
    932a:	f9 16       	cp	r15, r25
    932c:	11 f4       	brne	.+4      	; 0x9332 <_Z18menuProcModelIndexh+0x932>
    932e:	92 e0       	ldi	r25, 0x02	; 2
    9330:	e9 12       	cpse	r14, r25
    9332:	cc 24       	eor	r12, r12
    9334:	42 e3       	ldi	r20, 0x32	; 50
    9336:	84 02       	muls	r24, r20
    9338:	a0 01       	movw	r20, r0
    933a:	11 24       	eor	r1, r1
    933c:	44 5d       	subi	r20, 0xD4	; 212
    933e:	5e 4f       	sbci	r21, 0xFE	; 254
    9340:	80 e7       	ldi	r24, 0x70	; 112
    9342:	60 e1       	ldi	r22, 0x10	; 16
    9344:	2c 2d       	mov	r18, r12
    9346:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    934a:	82 e0       	ldi	r24, 0x02	; 2
    934c:	18 c0       	rjmp	.+48     	; 0x937e <_Z18menuProcModelIndexh+0x97e>
  		}
  		else if (protocol == PROTO_PXX || protocol == PROTO_DSM2)
    934e:	81 2f       	mov	r24, r17
    9350:	81 50       	subi	r24, 0x01	; 1
    9352:	82 30       	cpi	r24, 0x02	; 2
    9354:	10 f0       	brcs	.+4      	; 0x935a <_Z18menuProcModelIndexh+0x95a>
    9356:	80 e0       	ldi	r24, 0x00	; 0
    9358:	12 c0       	rjmp	.+36     	; 0x937e <_Z18menuProcModelIndexh+0x97e>
  		{
				cols = 1 ;
				lcd_xlabel_decimal( y, PSTR(STR_13_RXNUM), g_model.ppmNCH, (sub==subN && subSub==1 ? blink:0), 21*FW ) ;
    935a:	40 91 ba 01 	lds	r20, 0x01BA
    935e:	81 e0       	ldi	r24, 0x01	; 1
    9360:	f8 16       	cp	r15, r24
    9362:	09 f4       	brne	.+2      	; 0x9366 <_Z18menuProcModelIndexh+0x966>
    9364:	e8 12       	cpse	r14, r24
    9366:	cc 24       	eor	r12, r12
    9368:	55 27       	eor	r21, r21
    936a:	47 fd       	sbrc	r20, 7
    936c:	50 95       	com	r21
    936e:	80 e1       	ldi	r24, 0x10	; 16
    9370:	61 ed       	ldi	r22, 0xD1	; 209
    9372:	74 e0       	ldi	r23, 0x04	; 4
    9374:	2c 2d       	mov	r18, r12
    9376:	0e e7       	ldi	r16, 0x7E	; 126
    9378:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
    937c:	81 e0       	ldi	r24, 0x01	; 1
		}

			if(sub==subN )
    937e:	91 e0       	ldi	r25, 0x01	; 1
    9380:	f9 16       	cp	r15, r25
    9382:	09 f0       	breq	.+2      	; 0x9386 <_Z18menuProcModelIndexh+0x986>
    9384:	5a c0       	rjmp	.+180    	; 0x943a <_Z18menuProcModelIndexh+0xa3a>
			{
				Columns = &ProgColumns[cols] ;
    9386:	90 e0       	ldi	r25, 0x00	; 0
    9388:	87 5d       	subi	r24, 0xD7	; 215
    938a:	9b 4f       	sbci	r25, 0xFB	; 251
    938c:	90 93 c1 08 	sts	0x08C1, r25
    9390:	80 93 c0 08 	sts	0x08C0, r24
			 	if (s_editing )
    9394:	80 91 e6 06 	lds	r24, 0x06E6
    9398:	88 23       	and	r24, r24
    939a:	09 f4       	brne	.+2      	; 0x939e <_Z18menuProcModelIndexh+0x99e>
    939c:	4e c0       	rjmp	.+156    	; 0x943a <_Z18menuProcModelIndexh+0xa3a>
				{
					uint8_t prot_max = PROT_MAX ;

					if ( g_eeGeneral.enablePpmsim == 0 )
    939e:	80 91 84 01 	lds	r24, 0x0184
    93a2:	85 fd       	sbrc	r24, 5
    93a4:	02 c0       	rjmp	.+4      	; 0x93aa <_Z18menuProcModelIndexh+0x9aa>
    93a6:	64 e0       	ldi	r22, 0x04	; 4
    93a8:	01 c0       	rjmp	.+2      	; 0x93ac <_Z18menuProcModelIndexh+0x9ac>
    93aa:	65 e0       	ldi	r22, 0x05	; 5
					{
						prot_max -= 1 ;
					}
  		  	switch (subSub){
    93ac:	81 e0       	ldi	r24, 0x01	; 1
    93ae:	e8 16       	cp	r14, r24
    93b0:	99 f0       	breq	.+38     	; 0x93d8 <_Z18menuProcModelIndexh+0x9d8>
    93b2:	e8 16       	cp	r14, r24
    93b4:	20 f0       	brcs	.+8      	; 0x93be <_Z18menuProcModelIndexh+0x9be>
    93b6:	92 e0       	ldi	r25, 0x02	; 2
    93b8:	e9 16       	cp	r14, r25
    93ba:	89 f5       	brne	.+98     	; 0x941e <_Z18menuProcModelIndexh+0xa1e>
    93bc:	22 c0       	rjmp	.+68     	; 0x9402 <_Z18menuProcModelIndexh+0xa02>
  		  	case 0:
  		  	    CHECK_INCDEC_H_MODELVAR_0(g_model.protocol, prot_max ) ;
    93be:	80 91 b9 01 	lds	r24, 0x01B9
    93c2:	8f 70       	andi	r24, 0x0F	; 15
    93c4:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    93c8:	8f 70       	andi	r24, 0x0F	; 15
    93ca:	90 91 b9 01 	lds	r25, 0x01B9
    93ce:	90 7f       	andi	r25, 0xF0	; 240
    93d0:	98 2b       	or	r25, r24
    93d2:	90 93 b9 01 	sts	0x01B9, r25
    93d6:	23 c0       	rjmp	.+70     	; 0x941e <_Z18menuProcModelIndexh+0xa1e>
  		  	    break;
  		  	case 1:
  		  	    if ((protocol == PROTO_PPM) || (protocol == PROTO_PPM16)|| (protocol == PROTO_PPMSIM) )
    93d8:	11 23       	and	r17, r17
    93da:	21 f0       	breq	.+8      	; 0x93e4 <_Z18menuProcModelIndexh+0x9e4>
    93dc:	13 30       	cpi	r17, 0x03	; 3
    93de:	11 f0       	breq	.+4      	; 0x93e4 <_Z18menuProcModelIndexh+0x9e4>
    93e0:	15 30       	cpi	r17, 0x05	; 5
    93e2:	39 f4       	brne	.+14     	; 0x93f2 <_Z18menuProcModelIndexh+0x9f2>
  		  	        CHECK_INCDEC_H_MODELVAR(g_model.ppmNCH,-2,4);
    93e4:	80 91 ba 01 	lds	r24, 0x01BA
    93e8:	6e ef       	ldi	r22, 0xFE	; 254
    93ea:	44 e0       	ldi	r20, 0x04	; 4
    93ec:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    93f0:	05 c0       	rjmp	.+10     	; 0x93fc <_Z18menuProcModelIndexh+0x9fc>
  		  	    else // if (protocol == PROTO_PXX) || DSM2
  		  	        CHECK_INCDEC_H_MODELVAR_0(g_model.ppmNCH,124);
    93f2:	80 91 ba 01 	lds	r24, 0x01BA
    93f6:	6c e7       	ldi	r22, 0x7C	; 124
    93f8:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    93fc:	80 93 ba 01 	sts	0x01BA, r24
    9400:	0e c0       	rjmp	.+28     	; 0x941e <_Z18menuProcModelIndexh+0xa1e>
  		  	    break;
  		  	case 2:
  		  	    if ((protocol == PROTO_PPM) || (protocol == PROTO_PPM16) || (protocol == PROTO_PPMSIM) )
    9402:	11 23       	and	r17, r17
    9404:	21 f0       	breq	.+8      	; 0x940e <_Z18menuProcModelIndexh+0xa0e>
    9406:	13 30       	cpi	r17, 0x03	; 3
    9408:	11 f0       	breq	.+4      	; 0x940e <_Z18menuProcModelIndexh+0xa0e>
    940a:	15 30       	cpi	r17, 0x05	; 5
    940c:	41 f4       	brne	.+16     	; 0x941e <_Z18menuProcModelIndexh+0xa1e>
  		  	        CHECK_INCDEC_H_MODELVAR(g_model.ppmDelay,-4,10);
    940e:	80 91 bd 01 	lds	r24, 0x01BD
    9412:	6c ef       	ldi	r22, 0xFC	; 252
    9414:	4a e0       	ldi	r20, 0x0A	; 10
    9416:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    941a:	80 93 bd 01 	sts	0x01BD, r24
  		  	    break;
  		  	}
  		  	if(g_model.protocol != protocol) // if change - reset ppmNCH
    941e:	80 91 b9 01 	lds	r24, 0x01B9
    9422:	8f 70       	andi	r24, 0x0F	; 15
    9424:	90 e0       	ldi	r25, 0x00	; 0
    9426:	21 2f       	mov	r18, r17
    9428:	30 e0       	ldi	r19, 0x00	; 0
    942a:	82 17       	cp	r24, r18
    942c:	93 07       	cpc	r25, r19
    942e:	29 f0       	breq	.+10     	; 0x943a <_Z18menuProcModelIndexh+0xa3a>
  		  	{
  		  	    g_model.ppmNCH = 0;
    9430:	10 92 ba 01 	sts	0x01BA, r1

				kn_initAll(protocol);
    9434:	81 2f       	mov	r24, r17
    9436:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <_Z10kn_initAllh>
				}
			}
			y += FH ;
			subN++;

  		if( (protocol == PROTO_PPM) || (protocol == PROTO_PPM16) || (protocol == PROTO_PPMSIM) )
    943a:	11 23       	and	r17, r17
    943c:	49 f0       	breq	.+18     	; 0x9450 <_Z18menuProcModelIndexh+0xa50>
    943e:	13 30       	cpi	r17, 0x03	; 3
    9440:	39 f0       	breq	.+14     	; 0x9450 <_Z18menuProcModelIndexh+0xa50>
    9442:	15 30       	cpi	r17, 0x05	; 5
    9444:	29 f0       	breq	.+10     	; 0x9450 <_Z18menuProcModelIndexh+0xa50>
    9446:	a8 e1       	ldi	r26, 0x18	; 24
    9448:	ca 2e       	mov	r12, r26
    944a:	f2 e0       	ldi	r31, 0x02	; 2
    944c:	ef 2e       	mov	r14, r31
    944e:	41 c0       	rjmp	.+130    	; 0x94d2 <_Z18menuProcModelIndexh+0xad2>
			{
				uint8_t attr = PREC1 ;
  		  if(sub==subN) { attr = INVERS | PREC1 ; CHECK_INCDEC_H_MODELVAR(g_model.ppmFrameLength,-20,20) ; }
    9450:	82 e0       	ldi	r24, 0x02	; 2
    9452:	f8 16       	cp	r15, r24
    9454:	11 f0       	breq	.+4      	; 0x945a <_Z18menuProcModelIndexh+0xa5a>
    9456:	20 e2       	ldi	r18, 0x20	; 32
    9458:	09 c0       	rjmp	.+18     	; 0x946c <_Z18menuProcModelIndexh+0xa6c>
    945a:	80 91 c3 01 	lds	r24, 0x01C3
    945e:	6c ee       	ldi	r22, 0xEC	; 236
    9460:	44 e1       	ldi	r20, 0x14	; 20
    9462:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    9466:	80 93 c3 01 	sts	0x01C3, r24
    946a:	21 e2       	ldi	r18, 0x21	; 33
				lcd_xlabel_decimal( y, PSTR(STR_PPMFRAME_MSEC), (int16_t)g_model.ppmFrameLength*5 + 225, attr, 13*FW-2 ) ;
    946c:	40 91 c3 01 	lds	r20, 0x01C3
    9470:	85 e0       	ldi	r24, 0x05	; 5
    9472:	48 02       	muls	r20, r24
    9474:	a0 01       	movw	r20, r0
    9476:	11 24       	eor	r1, r1
    9478:	4f 51       	subi	r20, 0x1F	; 31
    947a:	5f 4f       	sbci	r21, 0xFF	; 255
    947c:	88 e1       	ldi	r24, 0x18	; 24
    947e:	62 ec       	ldi	r22, 0xC2	; 194
    9480:	74 e0       	ldi	r23, 0x04	; 4
    9482:	0c e4       	ldi	r16, 0x4C	; 76
    9484:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
				y += FH ;
				subN++;
			
 				attr = 0 ;
  		 	lcd_puts_Pleft(    y, PSTR(STR_SHIFT_SEL));
    9488:	80 e2       	ldi	r24, 0x20	; 32
    948a:	68 eb       	ldi	r22, 0xB8	; 184
    948c:	74 e0       	ldi	r23, 0x04	; 4
    948e:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
				uint8_t ppol = g_model.pulsePol ;
    9492:	20 91 c0 01 	lds	r18, 0x01C0
    9496:	21 70       	andi	r18, 0x01	; 1
  		 	if(sub==subN) { attr = INVERS ; CHECK_INCDEC_H_MODELVAR_0(ppol,1); g_model.pulsePol = ppol ; }
    9498:	93 e0       	ldi	r25, 0x03	; 3
    949a:	f9 16       	cp	r15, r25
    949c:	11 f0       	breq	.+4      	; 0x94a2 <_Z18menuProcModelIndexh+0xaa2>
    949e:	00 e0       	ldi	r16, 0x00	; 0
    94a0:	0e c0       	rjmp	.+28     	; 0x94be <_Z18menuProcModelIndexh+0xabe>
    94a2:	82 2f       	mov	r24, r18
    94a4:	61 e0       	ldi	r22, 0x01	; 1
    94a6:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    94aa:	28 2f       	mov	r18, r24
    94ac:	98 2f       	mov	r25, r24
    94ae:	91 70       	andi	r25, 0x01	; 1
    94b0:	80 91 c0 01 	lds	r24, 0x01C0
    94b4:	8e 7f       	andi	r24, 0xFE	; 254
    94b6:	89 2b       	or	r24, r25
    94b8:	80 93 c0 01 	sts	0x01C0, r24
    94bc:	01 e0       	ldi	r16, 0x01	; 1
  		 	lcd_putsAttIdx( 17*FW, y, PSTR(STR_POS_NEG), ppol,attr );
    94be:	86 e6       	ldi	r24, 0x66	; 102
    94c0:	60 e2       	ldi	r22, 0x20	; 32
    94c2:	40 eb       	ldi	r20, 0xB0	; 176
    94c4:	54 e0       	ldi	r21, 0x04	; 4
    94c6:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    94ca:	e8 e2       	ldi	r30, 0x28	; 40
    94cc:	ce 2e       	mov	r12, r30
    94ce:	74 e0       	ldi	r23, 0x04	; 4
    94d0:	e7 2e       	mov	r14, r23
				y += FH ;
				subN++;
			}
			if (protocol == PROTO_DSM2)
    94d2:	12 30       	cpi	r17, 0x02	; 2
    94d4:	29 f5       	brne	.+74     	; 0x9520 <_Z18menuProcModelIndexh+0xb20>
			{
			  uint8_t attr = 0 ;
  		  lcd_puts_Pleft(    y, PSTR(STR_DSM_TYPE));
    94d6:	8c 2d       	mov	r24, r12
    94d8:	67 ea       	ldi	r22, 0xA7	; 167
    94da:	74 e0       	ldi	r23, 0x04	; 4
    94dc:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
				uint8_t ltype = g_model.sub_protocol ;
    94e0:	20 91 b9 01 	lds	r18, 0x01B9
    94e4:	22 95       	swap	r18
    94e6:	26 95       	lsr	r18
    94e8:	26 95       	lsr	r18
    94ea:	23 70       	andi	r18, 0x03	; 3
			  if(sub==subN) { attr = INVERS ; CHECK_INCDEC_H_MODELVAR_0( ltype, 2 ) ; }
    94ec:	fe 14       	cp	r15, r14
    94ee:	11 f0       	breq	.+4      	; 0x94f4 <_Z18menuProcModelIndexh+0xaf4>
    94f0:	00 e0       	ldi	r16, 0x00	; 0
    94f2:	06 c0       	rjmp	.+12     	; 0x9500 <_Z18menuProcModelIndexh+0xb00>
    94f4:	82 2f       	mov	r24, r18
    94f6:	62 e0       	ldi	r22, 0x02	; 2
    94f8:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    94fc:	28 2f       	mov	r18, r24
    94fe:	01 e0       	ldi	r16, 0x01	; 1
				g_model.sub_protocol = ltype ;
    9500:	92 2f       	mov	r25, r18
    9502:	92 95       	swap	r25
    9504:	99 0f       	add	r25, r25
    9506:	99 0f       	add	r25, r25
    9508:	90 7c       	andi	r25, 0xC0	; 192
    950a:	80 91 b9 01 	lds	r24, 0x01B9
    950e:	8f 73       	andi	r24, 0x3F	; 63
    9510:	89 2b       	or	r24, r25
    9512:	80 93 b9 01 	sts	0x01B9, r24
  			lcd_putsAttIdx( 10*FW, y, PSTR(DSM2_STR), ltype, attr );
    9516:	8c e3       	ldi	r24, 0x3C	; 60
    9518:	6c 2d       	mov	r22, r12
    951a:	4a e8       	ldi	r20, 0x8A	; 138
    951c:	54 e0       	ldi	r21, 0x04	; 4
    951e:	3e cc       	rjmp	.-1924   	; 0x8d9c <_Z18menuProcModelIndexh+0x39c>
				y += FH ;
				subN++;
			}

			if (protocol == PROTO_PXX)
    9520:	11 30       	cpi	r17, 0x01	; 1
    9522:	09 f0       	breq	.+2      	; 0x9526 <_Z18menuProcModelIndexh+0xb26>
    9524:	82 c0       	rjmp	.+260    	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
			{
				lcd_puts_Pleft( y, PSTR(" Type\037 Country\037Bind\037Range") ) ;
    9526:	8c 2d       	mov	r24, r12
    9528:	60 e7       	ldi	r22, 0x70	; 112
    952a:	74 e0       	ldi	r23, 0x04	; 4
    952c:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
	  
				uint8_t attr = 0 ;
				uint8_t ltype = g_model.sub_protocol ;
    9530:	20 91 b9 01 	lds	r18, 0x01B9
    9534:	22 95       	swap	r18
    9536:	26 95       	lsr	r18
    9538:	26 95       	lsr	r18
    953a:	23 70       	andi	r18, 0x03	; 3
			  if(sub==subN) { attr = INVERS ; CHECK_INCDEC_H_MODELVAR_0( ltype, 2 ) ; }
    953c:	fe 14       	cp	r15, r14
    953e:	11 f0       	breq	.+4      	; 0x9544 <_Z18menuProcModelIndexh+0xb44>
    9540:	00 e0       	ldi	r16, 0x00	; 0
    9542:	06 c0       	rjmp	.+12     	; 0x9550 <_Z18menuProcModelIndexh+0xb50>
    9544:	82 2f       	mov	r24, r18
    9546:	62 e0       	ldi	r22, 0x02	; 2
    9548:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    954c:	28 2f       	mov	r18, r24
    954e:	01 e0       	ldi	r16, 0x01	; 1
				g_model.sub_protocol = ltype ;
    9550:	92 2f       	mov	r25, r18
    9552:	92 95       	swap	r25
    9554:	99 0f       	add	r25, r25
    9556:	99 0f       	add	r25, r25
    9558:	90 7c       	andi	r25, 0xC0	; 192
    955a:	80 91 b9 01 	lds	r24, 0x01B9
    955e:	8f 73       	andi	r24, 0x3F	; 63
    9560:	89 2b       	or	r24, r25
    9562:	80 93 b9 01 	sts	0x01B9, r24
  			lcd_putsAttIdx( 10*FW, y, PSTR("\003D16D8 LRP"), ltype, attr );
    9566:	8c e3       	ldi	r24, 0x3C	; 60
    9568:	6c 2d       	mov	r22, r12
    956a:	45 e6       	ldi	r20, 0x65	; 101
    956c:	54 e0       	ldi	r21, 0x04	; 4
    956e:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
				y += FH ;
    9572:	68 e0       	ldi	r22, 0x08	; 8
    9574:	d6 2e       	mov	r13, r22
    9576:	dc 0c       	add	r13, r12
				subN++;
    9578:	1e 2d       	mov	r17, r14
    957a:	1f 5f       	subi	r17, 0xFF	; 255
			
  			attr = 0 ;
				uint8_t lcountry = g_model.country ;
    957c:	20 91 b9 01 	lds	r18, 0x01B9
    9580:	22 95       	swap	r18
    9582:	23 70       	andi	r18, 0x03	; 3
  		  if(sub==subN) { attr = INVERS ; CHECK_INCDEC_H_MODELVAR_0( lcountry, 2 ) ;}
    9584:	f1 16       	cp	r15, r17
    9586:	11 f0       	breq	.+4      	; 0x958c <_Z18menuProcModelIndexh+0xb8c>
    9588:	00 e0       	ldi	r16, 0x00	; 0
    958a:	06 c0       	rjmp	.+12     	; 0x9598 <_Z18menuProcModelIndexh+0xb98>
    958c:	82 2f       	mov	r24, r18
    958e:	62 e0       	ldi	r22, 0x02	; 2
    9590:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    9594:	28 2f       	mov	r18, r24
    9596:	01 e0       	ldi	r16, 0x01	; 1
				g_model.country = lcountry ;
    9598:	92 2f       	mov	r25, r18
    959a:	93 70       	andi	r25, 0x03	; 3
    959c:	92 95       	swap	r25
    959e:	90 7f       	andi	r25, 0xF0	; 240
    95a0:	80 91 b9 01 	lds	r24, 0x01B9
    95a4:	8f 7c       	andi	r24, 0xCF	; 207
    95a6:	89 2b       	or	r24, r25
    95a8:	80 93 b9 01 	sts	0x01B9, r24
 			  lcd_putsAttIdx( 10*FW, y, PSTR("\003AmeJapEur"), lcountry, attr );
    95ac:	8c e3       	ldi	r24, 0x3C	; 60
    95ae:	6d 2d       	mov	r22, r13
    95b0:	4a e5       	ldi	r20, 0x5A	; 90
    95b2:	54 e0       	ldi	r21, 0x04	; 4
    95b4:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
				y += FH ;
    95b8:	0d 2d       	mov	r16, r13
    95ba:	08 5f       	subi	r16, 0xF8	; 248
				subN++;
    95bc:	1f 5f       	subi	r17, 0xFF	; 255
			
  			if(sub==subN)
    95be:	f1 16       	cp	r15, r17
    95c0:	91 f4       	brne	.+36     	; 0x95e6 <_Z18menuProcModelIndexh+0xbe6>
				{
					uint8_t newFlag = 0 ;
					lcd_char_inverse( 0, y, 4*FW, 0 ) ;
    95c2:	80 e0       	ldi	r24, 0x00	; 0
    95c4:	60 2f       	mov	r22, r16
    95c6:	48 e1       	ldi	r20, 0x18	; 24
    95c8:	20 e0       	ldi	r18, 0x00	; 0
    95ca:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
					newFlag = PXX_BIND ;
					if ( event==EVT_KEY_LONG(KEY_MENU))
    95ce:	80 e8       	ldi	r24, 0x80	; 128
    95d0:	b8 16       	cp	r11, r24
    95d2:	39 f4       	brne	.+14     	; 0x95e2 <_Z18menuProcModelIndexh+0xbe2>
					{
  			    pxxFlag = newFlag ;		    	//send bind code or range check code
    95d4:	81 e0       	ldi	r24, 0x01	; 1
    95d6:	80 93 0d 0e 	sts	0x0E0D, r24
						pushMenu(menuRangeBind) ;
    95da:	85 ef       	ldi	r24, 0xF5	; 245
    95dc:	9c e2       	ldi	r25, 0x2C	; 44
    95de:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
					}
					s_editMode = 0 ;
    95e2:	10 92 e5 06 	sts	0x06E5, r1
  			}	
				y += FH ;
				subN++;

  			if(sub==subN)
    95e6:	1f 5f       	subi	r17, 0xFF	; 255
    95e8:	f1 16       	cp	r15, r17
    95ea:	f9 f4       	brne	.+62     	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
				{
					uint8_t newFlag = 0 ;
					lcd_char_inverse( 0, y, 5*FW, 0 ) ;
    95ec:	08 5f       	subi	r16, 0xF8	; 248
    95ee:	80 e0       	ldi	r24, 0x00	; 0
    95f0:	60 2f       	mov	r22, r16
    95f2:	4e e1       	ldi	r20, 0x1E	; 30
    95f4:	20 e0       	ldi	r18, 0x00	; 0
    95f6:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
					newFlag = PXX_RANGE_CHECK ;
					if ( event==EVT_KEY_LONG(KEY_MENU))
    95fa:	90 e8       	ldi	r25, 0x80	; 128
    95fc:	b9 16       	cp	r11, r25
    95fe:	39 f4       	brne	.+14     	; 0x960e <_Z18menuProcModelIndexh+0xc0e>
					{
  			    pxxFlag = newFlag ;		    	//send bind code or range check code
    9600:	80 e2       	ldi	r24, 0x20	; 32
    9602:	80 93 0d 0e 	sts	0x0E0D, r24
						pushMenu(menuRangeBind) ;
    9606:	85 ef       	ldi	r24, 0xF5	; 245
    9608:	9c e2       	ldi	r25, 0x2C	; 44
    960a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
					}
					s_editMode = 0 ;
    960e:	10 92 e5 06 	sts	0x06E5, r1
    9612:	0b c0       	rjmp	.+22     	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
			}//end of - protocol PROTO_NRF*/
	  }
		break ;

		case M_SWITCHES :
			menuProcSwitches(sub) ;
    9614:	8f 2d       	mov	r24, r15
    9616:	0e 94 1e 29 	call	0x523c	; 0x523c <_ZL16menuProcSwitchesh>
    961a:	07 c0       	rjmp	.+14     	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
		break ;
		
		case M_LIMITS :
      menuProcLimits(sub) ;
    961c:	8f 2d       	mov	r24, r15
    961e:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <_ZL14menuProcLimitsh>
    9622:	03 c0       	rjmp	.+6      	; 0x962a <_Z18menuProcModelIndexh+0xc2a>
		break ;
		
		case M_SAFETY :
      menuProcSafetySwitches(sub) ;
    9624:	8f 2d       	mov	r24, r15
    9626:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <_ZL22menuProcSafetySwitchesh>
		break ;
	}
	asm("") ;
}
    962a:	df 91       	pop	r29
    962c:	cf 91       	pop	r28
    962e:	1f 91       	pop	r17
    9630:	0f 91       	pop	r16
    9632:	ff 90       	pop	r15
    9634:	ef 90       	pop	r14
    9636:	df 90       	pop	r13
    9638:	cf 90       	pop	r12
    963a:	bf 90       	pop	r11
    963c:	08 95       	ret

0000963e <_Z16menuProcVoiceOneh>:

#endif

#ifdef VOICE_ALARMS
// FUnctions need to include ON, OFF and BOTH possibly
void menuProcVoiceOne(uint8_t event)
    963e:	9f 92       	push	r9
    9640:	af 92       	push	r10
    9642:	bf 92       	push	r11
    9644:	cf 92       	push	r12
    9646:	df 92       	push	r13
    9648:	ef 92       	push	r14
    964a:	ff 92       	push	r15
    964c:	0f 93       	push	r16
    964e:	1f 93       	push	r17
    9650:	cf 93       	push	r28
    9652:	df 93       	push	r29
    9654:	98 2e       	mov	r9, r24
{
//	static const prog_uint8_t *Columns = &ProgColumns[COLUMNS_0] ;
	TITLEP(PSTR("Voice Alarm"));
    9656:	81 e8       	ldi	r24, 0x81	; 129
    9658:	99 e0       	ldi	r25, 0x09	; 9
    965a:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
	lcd_outdez( 13*FW, 0, s_currIdx+1 ) ;
    965e:	40 91 c8 08 	lds	r20, 0x08C8
    9662:	50 e0       	ldi	r21, 0x00	; 0
    9664:	4f 5f       	subi	r20, 0xFF	; 255
    9666:	5f 4f       	sbci	r21, 0xFF	; 255
    9668:	8e e4       	ldi	r24, 0x4E	; 78
    966a:	60 e0       	ldi	r22, 0x00	; 0
    966c:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
	static MState2 mstate2;
	VoiceAlarmData *pvad = &g_model.vad[s_currIdx] ;
    9670:	80 91 c8 08 	lds	r24, 0x08C8
    9674:	c8 2e       	mov	r12, r24
    9676:	dd 24       	eor	r13, r13
	uint8_t rows = pvad->fnameType ? 11-1: 10-1 ;
    9678:	f6 01       	movw	r30, r12
    967a:	a3 e0       	ldi	r26, 0x03	; 3
    967c:	ee 0f       	add	r30, r30
    967e:	ff 1f       	adc	r31, r31
    9680:	aa 95       	dec	r26
    9682:	e1 f7       	brne	.-8      	; 0x967c <_Z16menuProcVoiceOneh+0x3e>
    9684:	ec 0d       	add	r30, r12
    9686:	fd 1d       	adc	r31, r13
    9688:	ed 5d       	subi	r30, 0xDD	; 221
    968a:	fa 4f       	sbci	r31, 0xFA	; 250
    968c:	84 81       	ldd	r24, Z+4	; 0x04
    968e:	87 70       	andi	r24, 0x07	; 7
    9690:	11 f4       	brne	.+4      	; 0x9696 <_Z16menuProcVoiceOneh+0x58>
    9692:	09 e0       	ldi	r16, 0x09	; 9
    9694:	01 c0       	rjmp	.+2      	; 0x9698 <_Z16menuProcVoiceOneh+0x5a>
    9696:	0a e0       	ldi	r16, 0x0A	; 10
	mstate2.check(event,Columns,0, rows ) ;
    9698:	40 91 c0 08 	lds	r20, 0x08C0
    969c:	50 91 c1 08 	lds	r21, 0x08C1
    96a0:	8a ec       	ldi	r24, 0xCA	; 202
    96a2:	98 e0       	ldi	r25, 0x08	; 8
    96a4:	69 2d       	mov	r22, r9
    96a6:	20 e0       	ldi	r18, 0x00	; 0
    96a8:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <_ZN7MState25checkEhPKhhh>
//			copyFileName( (char *)pvad->file.name, SelectedVoiceFileName ) ;
//	    eeDirty(EE_MODEL) ;		// Save it
//		}
//	}
	
	int8_t sub = mstate2.m_posVert ;
    96ac:	b0 90 ca 08 	lds	r11, 0x08CA
//	if ( event == EVT_ENTRY )
//	{
//		RotaryState = ROTARY_MENU_UD ;
//	}

	if ( sub < 6 )
    96b0:	85 e0       	ldi	r24, 0x05	; 5
    96b2:	8b 15       	cp	r24, r11
    96b4:	24 f0       	brlt	.+8      	; 0x96be <_Z16menuProcVoiceOneh+0x80>
	{
		lcd_puts_Pleft( FH, PSTR("Source""\037""Function""\037""Value""\037""Switch""\037""Rate""\037""Haptic") ) ;
    96b6:	88 e0       	ldi	r24, 0x08	; 8
    96b8:	68 e5       	ldi	r22, 0x58	; 88
    96ba:	79 e0       	ldi	r23, 0x09	; 9
    96bc:	03 c0       	rjmp	.+6      	; 0x96c4 <_Z16menuProcVoiceOneh+0x86>
	}
	else
	{
		lcd_puts_Pleft( FH, PSTR("Play Source""\037""On no Telemetry""\037""FileType") ) ;
    96be:	88 e0       	ldi	r24, 0x08	; 8
    96c0:	63 e3       	ldi	r22, 0x33	; 51
    96c2:	79 e0       	ldi	r23, 0x09	; 9
    96c4:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
	}

	uint8_t y = FH ;
	uint8_t attr = 0 ;
	uint8_t blink = InverseBlink ;
    96c8:	a0 90 eb 06 	lds	r10, 0x06EB
	
	if ( sub < 6 )
    96cc:	a5 e0       	ldi	r26, 0x05	; 5
    96ce:	ab 15       	cp	r26, r11
    96d0:	0c f4       	brge	.+2      	; 0x96d4 <_Z16menuProcVoiceOneh+0x96>
    96d2:	37 c1       	rjmp	.+622    	; 0x9942 <_Z16menuProcVoiceOneh+0x304>
	{
		uint8_t subN = 0 ;
		displayNext() ;
    96d4:	0e 94 cb 24 	call	0x4996	; 0x4996 <_Z11displayNextv>

		if ( sub == subN )
    96d8:	bb 20       	and	r11, r11
    96da:	11 f0       	breq	.+4      	; 0x96e0 <_Z16menuProcVoiceOneh+0xa2>
    96dc:	20 e0       	ldi	r18, 0x00	; 0
    96de:	12 c0       	rjmp	.+36     	; 0x9704 <_Z16menuProcVoiceOneh+0xc6>
		{
			attr = blink ;
			CHECK_INCDEC_H_MODELVAR_0( pvad->source, NUM_XCHNRAW+NUM_TELEM_ITEMS ) ;
    96e0:	86 01       	movw	r16, r12
    96e2:	f3 e0       	ldi	r31, 0x03	; 3
    96e4:	00 0f       	add	r16, r16
    96e6:	11 1f       	adc	r17, r17
    96e8:	fa 95       	dec	r31
    96ea:	e1 f7       	brne	.-8      	; 0x96e4 <_Z16menuProcVoiceOneh+0xa6>
    96ec:	0c 0d       	add	r16, r12
    96ee:	1d 1d       	adc	r17, r13
    96f0:	0d 5d       	subi	r16, 0xDD	; 221
    96f2:	1a 4f       	sbci	r17, 0xFA	; 250
    96f4:	f8 01       	movw	r30, r16
    96f6:	80 81       	ld	r24, Z
    96f8:	6e e2       	ldi	r22, 0x2E	; 46
    96fa:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    96fe:	d8 01       	movw	r26, r16
    9700:	8c 93       	st	X, r24
    9702:	2a 2d       	mov	r18, r10
		}
		putsChnRaw( 16*FW, y, pvad->source, attr ) ;
    9704:	e6 01       	movw	r28, r12
    9706:	e3 e0       	ldi	r30, 0x03	; 3
    9708:	cc 0f       	add	r28, r28
    970a:	dd 1f       	adc	r29, r29
    970c:	ea 95       	dec	r30
    970e:	e1 f7       	brne	.-8      	; 0x9708 <_Z16menuProcVoiceOneh+0xca>
    9710:	cc 0d       	add	r28, r12
    9712:	dd 1d       	adc	r29, r13
    9714:	cd 5d       	subi	r28, 0xDD	; 221
    9716:	da 4f       	sbci	r29, 0xFA	; 250
    9718:	80 e6       	ldi	r24, 0x60	; 96
    971a:	68 e0       	ldi	r22, 0x08	; 8
    971c:	48 81       	ld	r20, Y
    971e:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
		if ( pvad->source )
    9722:	88 81       	ld	r24, Y
    9724:	88 23       	and	r24, r24
    9726:	d9 f0       	breq	.+54     	; 0x975e <_Z16menuProcVoiceOneh+0x120>
		{
			int16_t value ;
			value = getValue( pvad->source - 1 ) ;
    9728:	81 50       	subi	r24, 0x01	; 1
    972a:	0e 94 8c 14 	call	0x2918	; 0x2918 <_Z8getValueh>
    972e:	8c 01       	movw	r16, r24
  	  lcd_puts_Pleft( FH, PSTR("\007(\015)") ) ;
    9730:	88 e0       	ldi	r24, 0x08	; 8
    9732:	6e e2       	ldi	r22, 0x2E	; 46
    9734:	79 e0       	ldi	r23, 0x09	; 9
    9736:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
      if (pvad->source > CHOUT_BASE+NUM_CHNOUT)
    973a:	48 81       	ld	r20, Y
    973c:	45 32       	cpi	r20, 0x25	; 37
    973e:	50 f0       	brcs	.+20     	; 0x9754 <_Z16menuProcVoiceOneh+0x116>
 			{
				putsTelemetryChannel( 12*FW, FH, pvad->source-CHOUT_BASE-NUM_CHNOUT-1, value, 0, /*TELEM_NOTIME_UNIT |*/ TELEM_UNIT ) ;
    9740:	45 52       	subi	r20, 0x25	; 37
    9742:	88 e4       	ldi	r24, 0x48	; 72
    9744:	68 e0       	ldi	r22, 0x08	; 8
    9746:	98 01       	movw	r18, r16
    9748:	00 e0       	ldi	r16, 0x00	; 0
    974a:	72 e0       	ldi	r23, 0x02	; 2
    974c:	e7 2e       	mov	r14, r23
    974e:	0e 94 50 28 	call	0x50a0	; 0x50a0 <_Z20putsTelemetryChannelhhaihh>
    9752:	05 c0       	rjmp	.+10     	; 0x975e <_Z16menuProcVoiceOneh+0x120>
			}
			else
			{
				lcd_outdez( 12*FW, FH, value ) ;
    9754:	88 e4       	ldi	r24, 0x48	; 72
    9756:	68 e0       	ldi	r22, 0x08	; 8
    9758:	a8 01       	movw	r20, r16
    975a:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
		}
		y += FH ;
		subN += 1 ;
		
		attr = 0 ;
		if ( sub == subN )
    975e:	b1 e0       	ldi	r27, 0x01	; 1
    9760:	bb 16       	cp	r11, r27
    9762:	11 f0       	breq	.+4      	; 0x9768 <_Z16menuProcVoiceOneh+0x12a>
    9764:	00 e0       	ldi	r16, 0x00	; 0
    9766:	12 c0       	rjmp	.+36     	; 0x978c <_Z16menuProcVoiceOneh+0x14e>
		{
			attr = blink ;
      CHECK_INCDEC_H_MODELVAR_0( pvad->func, 6 ) ;
    9768:	86 01       	movw	r16, r12
    976a:	53 e0       	ldi	r21, 0x03	; 3
    976c:	00 0f       	add	r16, r16
    976e:	11 1f       	adc	r17, r17
    9770:	5a 95       	dec	r21
    9772:	e1 f7       	brne	.-8      	; 0x976c <_Z16menuProcVoiceOneh+0x12e>
    9774:	0c 0d       	add	r16, r12
    9776:	1d 1d       	adc	r17, r13
    9778:	0c 5d       	subi	r16, 0xDC	; 220
    977a:	1a 4f       	sbci	r17, 0xFA	; 250
    977c:	f8 01       	movw	r30, r16
    977e:	80 81       	ld	r24, Z
    9780:	66 e0       	ldi	r22, 0x06	; 6
    9782:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    9786:	d8 01       	movw	r26, r16
    9788:	8c 93       	st	X, r24
    978a:	0a 2d       	mov	r16, r10
		}	
		if ( pvad->func < 5 )
    978c:	f6 01       	movw	r30, r12
    978e:	43 e0       	ldi	r20, 0x03	; 3
    9790:	ee 0f       	add	r30, r30
    9792:	ff 1f       	adc	r31, r31
    9794:	4a 95       	dec	r20
    9796:	e1 f7       	brne	.-8      	; 0x9790 <_Z16menuProcVoiceOneh+0x152>
    9798:	ec 0d       	add	r30, r12
    979a:	fd 1d       	adc	r31, r13
    979c:	ec 5d       	subi	r30, 0xDC	; 220
    979e:	fa 4f       	sbci	r31, 0xFA	; 250
    97a0:	20 81       	ld	r18, Z
    97a2:	25 30       	cpi	r18, 0x05	; 5
    97a4:	28 f4       	brcc	.+10     	; 0x97b0 <_Z16menuProcVoiceOneh+0x172>
		{
			lcd_putsAttIdx( 13*FW, y, Str_Cswitch, pvad->func, attr ) ;	// v1>v2  v1<v2  
    97a6:	8e e4       	ldi	r24, 0x4E	; 78
    97a8:	60 e1       	ldi	r22, 0x10	; 16
    97aa:	4e e2       	ldi	r20, 0x2E	; 46
    97ac:	57 e0       	ldi	r21, 0x07	; 7
    97ae:	05 c0       	rjmp	.+10     	; 0x97ba <_Z16menuProcVoiceOneh+0x17c>
		}
		else
		{
			lcd_putsAttIdx( 13*FW, y, PSTR("\007v\140=val v=val  "), pvad->func-5, attr ) ;	// v1>v2  v1<v2  
    97b0:	25 50       	subi	r18, 0x05	; 5
    97b2:	8e e4       	ldi	r24, 0x4E	; 78
    97b4:	60 e1       	ldi	r22, 0x10	; 16
    97b6:	4e e1       	ldi	r20, 0x1E	; 30
    97b8:	59 e0       	ldi	r21, 0x09	; 9
    97ba:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
		}
		y += FH ;
		subN += 1 ;

		attr = 0 ;
		if ( sub == subN )
    97be:	b2 e0       	ldi	r27, 0x02	; 2
    97c0:	bb 16       	cp	r11, r27
    97c2:	11 f0       	breq	.+4      	; 0x97c8 <_Z16menuProcVoiceOneh+0x18a>
    97c4:	00 e0       	ldi	r16, 0x00	; 0
    97c6:	1b c0       	rjmp	.+54     	; 0x97fe <_Z16menuProcVoiceOneh+0x1c0>
		{
			attr = blink ;
			StepSize = 100 ;
    97c8:	84 e6       	ldi	r24, 0x64	; 100
    97ca:	80 93 1e 06 	sts	0x061E, r24
			pvad->offset = checkIncDec16( pvad->offset, -32000, 32000, EE_MODEL ) ;
    97ce:	86 01       	movw	r16, r12
    97d0:	33 e0       	ldi	r19, 0x03	; 3
    97d2:	00 0f       	add	r16, r16
    97d4:	11 1f       	adc	r17, r17
    97d6:	3a 95       	dec	r19
    97d8:	e1 f7       	brne	.-8      	; 0x97d2 <_Z16menuProcVoiceOneh+0x194>
    97da:	0c 0d       	add	r16, r12
    97dc:	1d 1d       	adc	r17, r13
    97de:	08 5d       	subi	r16, 0xD8	; 216
    97e0:	1a 4f       	sbci	r17, 0xFA	; 250
    97e2:	f8 01       	movw	r30, r16
    97e4:	80 81       	ld	r24, Z
    97e6:	91 81       	ldd	r25, Z+1	; 0x01
    97e8:	60 e0       	ldi	r22, 0x00	; 0
    97ea:	73 e8       	ldi	r23, 0x83	; 131
    97ec:	40 e0       	ldi	r20, 0x00	; 0
    97ee:	5d e7       	ldi	r21, 0x7D	; 125
    97f0:	22 e0       	ldi	r18, 0x02	; 2
    97f2:	0e 94 b2 12 	call	0x2564	; 0x2564 <_Z13checkIncDec16iiih>
    97f6:	d8 01       	movw	r26, r16
    97f8:	8d 93       	st	X+, r24
    97fa:	9c 93       	st	X, r25
    97fc:	0a 2d       	mov	r16, r10
		}
		if (pvad->source > CHOUT_BASE+NUM_CHNOUT)
    97fe:	f6 01       	movw	r30, r12
    9800:	23 e0       	ldi	r18, 0x03	; 3
    9802:	ee 0f       	add	r30, r30
    9804:	ff 1f       	adc	r31, r31
    9806:	2a 95       	dec	r18
    9808:	e1 f7       	brne	.-8      	; 0x9802 <_Z16menuProcVoiceOneh+0x1c4>
    980a:	ec 0d       	add	r30, r12
    980c:	fd 1d       	adc	r31, r13
    980e:	e6 55       	subi	r30, 0x56	; 86
    9810:	fe 4f       	sbci	r31, 0xFE	; 254
    9812:	e7 58       	subi	r30, 0x87	; 135
    9814:	fc 4f       	sbci	r31, 0xFC	; 252
    9816:	40 81       	ld	r20, Z
    9818:	35 96       	adiw	r30, 0x05	; 5
    981a:	45 32       	cpi	r20, 0x25	; 37
    981c:	50 f0       	brcs	.+20     	; 0x9832 <_Z16menuProcVoiceOneh+0x1f4>
		{
			putsTelemetryChannel( 20*FW, y, pvad->source-CHOUT_BASE-NUM_CHNOUT-1, pvad->offset, attr, /*TELEM_NOTIME_UNIT |*/ TELEM_UNIT | TELEM_CONSTANT ) ;
    981e:	45 52       	subi	r20, 0x25	; 37
    9820:	20 81       	ld	r18, Z
    9822:	31 81       	ldd	r19, Z+1	; 0x01
    9824:	88 e7       	ldi	r24, 0x78	; 120
    9826:	68 e1       	ldi	r22, 0x18	; 24
    9828:	92 e8       	ldi	r25, 0x82	; 130
    982a:	e9 2e       	mov	r14, r25
    982c:	0e 94 50 28 	call	0x50a0	; 0x50a0 <_Z20putsTelemetryChannelhhaihh>
    9830:	07 c0       	rjmp	.+14     	; 0x9840 <_Z16menuProcVoiceOneh+0x202>
		}
		else
		{
			lcd_outdezAtt( FW*20, y, pvad->offset, attr ) ;
    9832:	40 81       	ld	r20, Z
    9834:	51 81       	ldd	r21, Z+1	; 0x01
    9836:	88 e7       	ldi	r24, 0x78	; 120
    9838:	68 e1       	ldi	r22, 0x18	; 24
    983a:	20 2f       	mov	r18, r16
    983c:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
		}
		y += FH ;
		subN += 1 ;

		attr = 0 ;
		if ( sub == subN )
    9840:	b3 e0       	ldi	r27, 0x03	; 3
    9842:	bb 16       	cp	r11, r27
    9844:	11 f0       	breq	.+4      	; 0x984a <_Z16menuProcVoiceOneh+0x20c>
    9846:	20 e0       	ldi	r18, 0x00	; 0
    9848:	13 c0       	rjmp	.+38     	; 0x9870 <_Z16menuProcVoiceOneh+0x232>
		{
			attr = blink ;
      CHECK_INCDEC_MODELSWITCH( pvad->swtch, -MAX_DRSWITCH, MAX_DRSWITCH ) ;
    984a:	86 01       	movw	r16, r12
    984c:	83 e0       	ldi	r24, 0x03	; 3
    984e:	00 0f       	add	r16, r16
    9850:	11 1f       	adc	r17, r17
    9852:	8a 95       	dec	r24
    9854:	e1 f7       	brne	.-8      	; 0x984e <_Z16menuProcVoiceOneh+0x210>
    9856:	0c 0d       	add	r16, r12
    9858:	1d 1d       	adc	r17, r13
    985a:	0b 5d       	subi	r16, 0xDB	; 219
    985c:	1a 4f       	sbci	r17, 0xFA	; 250
    985e:	f8 01       	movw	r30, r16
    9860:	80 81       	ld	r24, Z
    9862:	6a ee       	ldi	r22, 0xEA	; 234
    9864:	46 e1       	ldi	r20, 0x16	; 22
    9866:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    986a:	d8 01       	movw	r26, r16
    986c:	8c 93       	st	X, r24
    986e:	2a 2d       	mov	r18, r10
    }
   	putsDrSwitches(16*FW, y, pvad->swtch, attr);
    9870:	e6 01       	movw	r28, r12
    9872:	03 e0       	ldi	r16, 0x03	; 3
    9874:	cc 0f       	add	r28, r28
    9876:	dd 1f       	adc	r29, r29
    9878:	0a 95       	dec	r16
    987a:	e1 f7       	brne	.-8      	; 0x9874 <_Z16menuProcVoiceOneh+0x236>
    987c:	cc 0d       	add	r28, r12
    987e:	dd 1d       	adc	r29, r13
    9880:	c6 55       	subi	r28, 0x56	; 86
    9882:	de 4f       	sbci	r29, 0xFE	; 254
    9884:	fe 01       	movw	r30, r28
    9886:	e5 58       	subi	r30, 0x85	; 133
    9888:	fc 4f       	sbci	r31, 0xFC	; 252
    988a:	80 e6       	ldi	r24, 0x60	; 96
    988c:	60 e2       	ldi	r22, 0x20	; 32
    988e:	40 81       	ld	r20, Z
    9890:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
		y += FH ;
		subN += 1 ;

		attr = 0 ;
		if ( sub == subN )
    9894:	b4 e0       	ldi	r27, 0x04	; 4
    9896:	bb 16       	cp	r11, r27
    9898:	11 f0       	breq	.+4      	; 0x989e <_Z16menuProcVoiceOneh+0x260>
    989a:	00 e0       	ldi	r16, 0x00	; 0
    989c:	0b c0       	rjmp	.+22     	; 0x98b4 <_Z16menuProcVoiceOneh+0x276>
		{
			attr = blink ;
      CHECK_INCDEC_H_MODELVAR_0( pvad->rate, 32 ) ;
    989e:	8e 01       	movw	r16, r28
    98a0:	04 58       	subi	r16, 0x84	; 132
    98a2:	1c 4f       	sbci	r17, 0xFC	; 252
    98a4:	f8 01       	movw	r30, r16
    98a6:	80 81       	ld	r24, Z
    98a8:	60 e2       	ldi	r22, 0x20	; 32
    98aa:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    98ae:	d8 01       	movw	r26, r16
    98b0:	8c 93       	st	X, r24
    98b2:	0a 2d       	mov	r16, r10
		}	
		if ( pvad->rate < 3 )
    98b4:	f6 01       	movw	r30, r12
    98b6:	13 e0       	ldi	r17, 0x03	; 3
    98b8:	ee 0f       	add	r30, r30
    98ba:	ff 1f       	adc	r31, r31
    98bc:	1a 95       	dec	r17
    98be:	e1 f7       	brne	.-8      	; 0x98b8 <_Z16menuProcVoiceOneh+0x27a>
    98c0:	ec 0d       	add	r30, r12
    98c2:	fd 1d       	adc	r31, r13
    98c4:	ea 5d       	subi	r30, 0xDA	; 218
    98c6:	fa 4f       	sbci	r31, 0xFA	; 250
    98c8:	20 81       	ld	r18, Z
    98ca:	23 30       	cpi	r18, 0x03	; 3
    98cc:	38 f4       	brcc	.+14     	; 0x98dc <_Z16menuProcVoiceOneh+0x29e>
		{
			lcd_putsAttIdx( 16*FW, y, Str_On_Off_Both,pvad->rate,attr);
    98ce:	80 e6       	ldi	r24, 0x60	; 96
    98d0:	68 e2       	ldi	r22, 0x28	; 40
    98d2:	44 e9       	ldi	r20, 0x94	; 148
    98d4:	58 e0       	ldi	r21, 0x08	; 8
    98d6:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    98da:	09 c0       	rjmp	.+18     	; 0x98ee <_Z16menuProcVoiceOneh+0x2b0>
		}
		else
		{
      lcd_outdezAtt(FW*18,y,pvad->rate-2,attr ) ;
    98dc:	42 2f       	mov	r20, r18
    98de:	50 e0       	ldi	r21, 0x00	; 0
    98e0:	42 50       	subi	r20, 0x02	; 2
    98e2:	50 40       	sbci	r21, 0x00	; 0
    98e4:	8c e6       	ldi	r24, 0x6C	; 108
    98e6:	68 e2       	ldi	r22, 0x28	; 40
    98e8:	20 2f       	mov	r18, r16
    98ea:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
		}
		y += FH ;
		subN += 1 ;

		uint8_t b = pvad->haptic ;
    98ee:	e6 01       	movw	r28, r12
    98f0:	b3 e0       	ldi	r27, 0x03	; 3
    98f2:	cc 0f       	add	r28, r28
    98f4:	dd 1f       	adc	r29, r29
    98f6:	ba 95       	dec	r27
    98f8:	e1 f7       	brne	.-8      	; 0x98f2 <_Z16menuProcVoiceOneh+0x2b4>
    98fa:	cc 0d       	add	r28, r12
    98fc:	dd 1d       	adc	r29, r13
    98fe:	c9 5d       	subi	r28, 0xD9	; 217
    9900:	da 4f       	sbci	r29, 0xFA	; 250
    9902:	28 81       	ld	r18, Y
    9904:	26 95       	lsr	r18
    9906:	26 95       	lsr	r18
    9908:	26 95       	lsr	r18
    990a:	23 70       	andi	r18, 0x03	; 3
		attr = 0 ;
		if ( sub == subN )
    990c:	b5 e0       	ldi	r27, 0x05	; 5
    990e:	bb 16       	cp	r11, r27
    9910:	11 f0       	breq	.+4      	; 0x9916 <_Z16menuProcVoiceOneh+0x2d8>
    9912:	00 e0       	ldi	r16, 0x00	; 0
    9914:	0f c0       	rjmp	.+30     	; 0x9934 <_Z16menuProcVoiceOneh+0x2f6>
		{
			attr = blink ;
      CHECK_INCDEC_H_MODELVAR_0( b, 3 ) ;
    9916:	82 2f       	mov	r24, r18
    9918:	63 e0       	ldi	r22, 0x03	; 3
    991a:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    991e:	28 2f       	mov	r18, r24
			pvad->haptic = b ;
    9920:	98 2f       	mov	r25, r24
    9922:	93 70       	andi	r25, 0x03	; 3
    9924:	99 0f       	add	r25, r25
    9926:	99 0f       	add	r25, r25
    9928:	99 0f       	add	r25, r25
    992a:	88 81       	ld	r24, Y
    992c:	87 7e       	andi	r24, 0xE7	; 231
    992e:	89 2b       	or	r24, r25
    9930:	88 83       	st	Y, r24
    9932:	0a 2d       	mov	r16, r10
		}
		lcd_putsAttIdx( 13*FW, y, PSTR("\007-------Haptic1Haptic2Haptic3"), b, attr ) ;
    9934:	8e e4       	ldi	r24, 0x4E	; 78
    9936:	60 e3       	ldi	r22, 0x30	; 48
    9938:	40 e0       	ldi	r20, 0x00	; 0
    993a:	59 e0       	ldi	r21, 0x09	; 9
    993c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    9940:	38 c1       	rjmp	.+624    	; 0x9bb2 <_Z16menuProcVoiceOneh+0x574>
	}
	else
	{
		uint8_t subN = 6 ;
		if ( sub == subN )
    9942:	e6 e0       	ldi	r30, 0x06	; 6
    9944:	be 16       	cp	r11, r30
    9946:	11 f0       	breq	.+4      	; 0x994c <_Z16menuProcVoiceOneh+0x30e>
    9948:	00 e0       	ldi	r16, 0x00	; 0
    994a:	1c c0       	rjmp	.+56     	; 0x9984 <_Z16menuProcVoiceOneh+0x346>
		{
			attr = blink ;
      CHECK_INCDEC_H_MODELVAR_0( pvad->vsource, 2 ) ;
    994c:	86 01       	movw	r16, r12
    994e:	a3 e0       	ldi	r26, 0x03	; 3
    9950:	00 0f       	add	r16, r16
    9952:	11 1f       	adc	r17, r17
    9954:	aa 95       	dec	r26
    9956:	e1 f7       	brne	.-8      	; 0x9950 <_Z16menuProcVoiceOneh+0x312>
    9958:	0c 0d       	add	r16, r12
    995a:	1d 1d       	adc	r17, r13
    995c:	09 5d       	subi	r16, 0xD9	; 217
    995e:	1a 4f       	sbci	r17, 0xFA	; 250
    9960:	d8 01       	movw	r26, r16
    9962:	8c 91       	ld	r24, X
    9964:	82 95       	swap	r24
    9966:	86 95       	lsr	r24
    9968:	83 70       	andi	r24, 0x03	; 3
    996a:	62 e0       	ldi	r22, 0x02	; 2
    996c:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    9970:	83 70       	andi	r24, 0x03	; 3
    9972:	82 95       	swap	r24
    9974:	88 0f       	add	r24, r24
    9976:	80 7e       	andi	r24, 0xE0	; 224
    9978:	f8 01       	movw	r30, r16
    997a:	90 81       	ld	r25, Z
    997c:	9f 79       	andi	r25, 0x9F	; 159
    997e:	98 2b       	or	r25, r24
    9980:	90 83       	st	Z, r25
    9982:	0a 2d       	mov	r16, r10
		}
		lcd_putsAttIdx( 14*FW, y, PSTR("\006No    BeforeAfter "), pvad->vsource, attr ) ;
    9984:	e6 01       	movw	r28, r12
    9986:	f3 e0       	ldi	r31, 0x03	; 3
    9988:	cc 0f       	add	r28, r28
    998a:	dd 1f       	adc	r29, r29
    998c:	fa 95       	dec	r31
    998e:	e1 f7       	brne	.-8      	; 0x9988 <_Z16menuProcVoiceOneh+0x34a>
    9990:	cc 0d       	add	r28, r12
    9992:	dd 1d       	adc	r29, r13
    9994:	c9 5d       	subi	r28, 0xD9	; 217
    9996:	da 4f       	sbci	r29, 0xFA	; 250
    9998:	28 81       	ld	r18, Y
    999a:	22 95       	swap	r18
    999c:	26 95       	lsr	r18
    999e:	23 70       	andi	r18, 0x03	; 3
    99a0:	84 e5       	ldi	r24, 0x54	; 84
    99a2:	68 e0       	ldi	r22, 0x08	; 8
    99a4:	4c ee       	ldi	r20, 0xEC	; 236
    99a6:	58 e0       	ldi	r21, 0x08	; 8
    99a8:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
		y += FH ;
		subN += 1 ;
	    
		attr = 0 ;
		if ( sub == subN )
    99ac:	f7 e0       	ldi	r31, 0x07	; 7
    99ae:	bf 16       	cp	r11, r31
    99b0:	11 f0       	breq	.+4      	; 0x99b6 <_Z16menuProcVoiceOneh+0x378>
    99b2:	00 e0       	ldi	r16, 0x00	; 0
    99b4:	0f c0       	rjmp	.+30     	; 0x99d4 <_Z16menuProcVoiceOneh+0x396>
		{
			attr = blink ;
      CHECK_INCDEC_H_MODELVAR_0( pvad->mute, 1 ) ;
    99b6:	88 81       	ld	r24, Y
    99b8:	88 1f       	adc	r24, r24
    99ba:	88 27       	eor	r24, r24
    99bc:	88 1f       	adc	r24, r24
    99be:	61 e0       	ldi	r22, 0x01	; 1
    99c0:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    99c4:	87 95       	ror	r24
    99c6:	88 27       	eor	r24, r24
    99c8:	87 95       	ror	r24
    99ca:	98 81       	ld	r25, Y
    99cc:	9f 77       	andi	r25, 0x7F	; 127
    99ce:	98 2b       	or	r25, r24
    99d0:	98 83       	st	Y, r25
    99d2:	0a 2d       	mov	r16, r10
		}
		lcd_putsAttIdx( 17*FW, y, PSTR("\004PlayMute"), pvad->mute, attr ) ;
    99d4:	e6 01       	movw	r28, r12
    99d6:	e3 e0       	ldi	r30, 0x03	; 3
    99d8:	cc 0f       	add	r28, r28
    99da:	dd 1f       	adc	r29, r29
    99dc:	ea 95       	dec	r30
    99de:	e1 f7       	brne	.-8      	; 0x99d8 <_Z16menuProcVoiceOneh+0x39a>
    99e0:	cc 0d       	add	r28, r12
    99e2:	dd 1d       	adc	r29, r13
    99e4:	c9 5d       	subi	r28, 0xD9	; 217
    99e6:	da 4f       	sbci	r29, 0xFA	; 250
    99e8:	28 81       	ld	r18, Y
    99ea:	22 1f       	adc	r18, r18
    99ec:	22 27       	eor	r18, r18
    99ee:	22 1f       	adc	r18, r18
    99f0:	86 e6       	ldi	r24, 0x66	; 102
    99f2:	60 e1       	ldi	r22, 0x10	; 16
    99f4:	42 ee       	ldi	r20, 0xE2	; 226
    99f6:	58 e0       	ldi	r21, 0x08	; 8
    99f8:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
		y += FH ;
		subN += 1 ;

		uint8_t previous = pvad->fnameType ;
    99fc:	18 81       	ld	r17, Y
    99fe:	17 70       	andi	r17, 0x07	; 7
		attr = 0 ;
		if ( sub == subN )
    9a00:	88 e0       	ldi	r24, 0x08	; 8
    9a02:	b8 16       	cp	r11, r24
    9a04:	11 f0       	breq	.+4      	; 0x9a0a <_Z16menuProcVoiceOneh+0x3cc>
    9a06:	00 e0       	ldi	r16, 0x00	; 0
    9a08:	0a c0       	rjmp	.+20     	; 0x9a1e <_Z16menuProcVoiceOneh+0x3e0>
		{
			attr = blink ;
      CHECK_INCDEC_H_MODELVAR_0( pvad->fnameType, 2 ) ;
    9a0a:	81 2f       	mov	r24, r17
    9a0c:	62 e0       	ldi	r22, 0x02	; 2
    9a0e:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    9a12:	87 70       	andi	r24, 0x07	; 7
    9a14:	98 81       	ld	r25, Y
    9a16:	98 7f       	andi	r25, 0xF8	; 248
    9a18:	98 2b       	or	r25, r24
    9a1a:	98 83       	st	Y, r25
    9a1c:	0a 2d       	mov	r16, r10
		}
		lcd_putsAttIdx( 14*FW, y, PSTR("\006------Number Audio"),pvad->fnameType,attr ) ;
    9a1e:	e6 01       	movw	r28, r12
    9a20:	73 e0       	ldi	r23, 0x03	; 3
    9a22:	cc 0f       	add	r28, r28
    9a24:	dd 1f       	adc	r29, r29
    9a26:	7a 95       	dec	r23
    9a28:	e1 f7       	brne	.-8      	; 0x9a22 <_Z16menuProcVoiceOneh+0x3e4>
    9a2a:	cc 0d       	add	r28, r12
    9a2c:	dd 1d       	adc	r29, r13
    9a2e:	67 e2       	ldi	r22, 0x27	; 39
    9a30:	e6 2e       	mov	r14, r22
    9a32:	65 e0       	ldi	r22, 0x05	; 5
    9a34:	f6 2e       	mov	r15, r22
    9a36:	ec 0e       	add	r14, r28
    9a38:	fd 1e       	adc	r15, r29
    9a3a:	d7 01       	movw	r26, r14
    9a3c:	2c 91       	ld	r18, X
    9a3e:	27 70       	andi	r18, 0x07	; 7
    9a40:	84 e5       	ldi	r24, 0x54	; 84
    9a42:	68 e1       	ldi	r22, 0x18	; 24
    9a44:	4e ec       	ldi	r20, 0xCE	; 206
    9a46:	58 e0       	ldi	r21, 0x08	; 8
    9a48:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
		if ( pvad->fnameType != previous )
    9a4c:	f7 01       	movw	r30, r14
    9a4e:	80 81       	ld	r24, Z
    9a50:	87 70       	andi	r24, 0x07	; 7
    9a52:	90 e0       	ldi	r25, 0x00	; 0
    9a54:	21 2f       	mov	r18, r17
    9a56:	30 e0       	ldi	r19, 0x00	; 0
    9a58:	82 17       	cp	r24, r18
    9a5a:	93 07       	cpc	r25, r19
    9a5c:	29 f0       	breq	.+10     	; 0x9a68 <_Z16menuProcVoiceOneh+0x42a>
		{
			pvad->vfile = 0 ;
    9a5e:	fe 01       	movw	r30, r28
    9a60:	e6 5d       	subi	r30, 0xD6	; 214
    9a62:	fa 4f       	sbci	r31, 0xFA	; 250
    9a64:	11 82       	std	Z+1, r1	; 0x01
    9a66:	10 82       	st	Z, r1
		}
		y += FH ;
		subN += 1 ;

		if ( pvad->fnameType )
    9a68:	e6 01       	movw	r28, r12
    9a6a:	53 e0       	ldi	r21, 0x03	; 3
    9a6c:	cc 0f       	add	r28, r28
    9a6e:	dd 1f       	adc	r29, r29
    9a70:	5a 95       	dec	r21
    9a72:	e1 f7       	brne	.-8      	; 0x9a6c <_Z16menuProcVoiceOneh+0x42e>
    9a74:	cc 0d       	add	r28, r12
    9a76:	dd 1d       	adc	r29, r13
    9a78:	8e 01       	movw	r16, r28
    9a7a:	0d 5d       	subi	r16, 0xDD	; 221
    9a7c:	1a 4f       	sbci	r17, 0xFA	; 250
    9a7e:	d8 01       	movw	r26, r16
    9a80:	14 96       	adiw	r26, 0x04	; 4
    9a82:	8c 91       	ld	r24, X
    9a84:	87 70       	andi	r24, 0x07	; 7
    9a86:	19 f4       	brne	.+6      	; 0x9a8e <_Z16menuProcVoiceOneh+0x450>
    9a88:	10 e2       	ldi	r17, 0x20	; 32
    9a8a:	09 e0       	ldi	r16, 0x09	; 9
    9a8c:	5f c0       	rjmp	.+190    	; 0x9b4c <_Z16menuProcVoiceOneh+0x50e>
		{	
			attr = 0 ;
  	  lcd_puts_Pleft( y, PSTR("Voice File") ) ;
    9a8e:	80 e2       	ldi	r24, 0x20	; 32
    9a90:	63 ec       	ldi	r22, 0xC3	; 195
    9a92:	78 e0       	ldi	r23, 0x08	; 8
    9a94:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
			if ( pvad->fnameType == 1 )	// Name
    9a98:	f8 01       	movw	r30, r16
    9a9a:	84 81       	ldd	r24, Z+4	; 0x04
    9a9c:	87 70       	andi	r24, 0x07	; 7
    9a9e:	81 30       	cpi	r24, 0x01	; 1
    9aa0:	71 f5       	brne	.+92     	; 0x9afe <_Z16menuProcVoiceOneh+0x4c0>
			{
				if ( sub == subN )
    9aa2:	f9 e0       	ldi	r31, 0x09	; 9
    9aa4:	bf 16       	cp	r11, r31
    9aa6:	11 f0       	breq	.+4      	; 0x9aac <_Z16menuProcVoiceOneh+0x46e>
    9aa8:	20 e0       	ldi	r18, 0x00	; 0
    9aaa:	11 c0       	rjmp	.+34     	; 0x9ace <_Z16menuProcVoiceOneh+0x490>
				{
					attr = blink ;
		  	  pvad->vfile = checkIncDec16( pvad->vfile, 0, 500, EE_MODEL);
    9aac:	8e 01       	movw	r16, r28
    9aae:	06 5d       	subi	r16, 0xD6	; 214
    9ab0:	1a 4f       	sbci	r17, 0xFA	; 250
    9ab2:	d8 01       	movw	r26, r16
    9ab4:	8d 91       	ld	r24, X+
    9ab6:	9c 91       	ld	r25, X
    9ab8:	60 e0       	ldi	r22, 0x00	; 0
    9aba:	70 e0       	ldi	r23, 0x00	; 0
    9abc:	44 ef       	ldi	r20, 0xF4	; 244
    9abe:	51 e0       	ldi	r21, 0x01	; 1
    9ac0:	22 e0       	ldi	r18, 0x02	; 2
    9ac2:	0e 94 b2 12 	call	0x2564	; 0x2564 <_Z13checkIncDec16iiih>
    9ac6:	f8 01       	movw	r30, r16
    9ac8:	91 83       	std	Z+1, r25	; 0x01
    9aca:	80 83       	st	Z, r24
    9acc:	2a 2d       	mov	r18, r10
				}
      	lcd_outdezAtt(FW*20,y,pvad->vfile,attr ) ;
    9ace:	e6 01       	movw	r28, r12
    9ad0:	43 e0       	ldi	r20, 0x03	; 3
    9ad2:	cc 0f       	add	r28, r28
    9ad4:	dd 1f       	adc	r29, r29
    9ad6:	4a 95       	dec	r20
    9ad8:	e1 f7       	brne	.-8      	; 0x9ad2 <_Z16menuProcVoiceOneh+0x494>
    9ada:	cc 0d       	add	r28, r12
    9adc:	dd 1d       	adc	r29, r13
    9ade:	c6 5d       	subi	r28, 0xD6	; 214
    9ae0:	da 4f       	sbci	r29, 0xFA	; 250
    9ae2:	48 81       	ld	r20, Y
    9ae4:	59 81       	ldd	r21, Y+1	; 0x01
    9ae6:	88 e7       	ldi	r24, 0x78	; 120
    9ae8:	60 e2       	ldi	r22, 0x20	; 32
    9aea:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
				if (event == EVT_KEY_LONG(KEY_MENU) )
    9aee:	f0 e8       	ldi	r31, 0x80	; 128
    9af0:	9f 16       	cp	r9, r31
    9af2:	51 f5       	brne	.+84     	; 0x9b48 <_Z16menuProcVoiceOneh+0x50a>
				{
					putVoiceQueueLong( pvad->vfile ) ;
    9af4:	88 81       	ld	r24, Y
    9af6:	99 81       	ldd	r25, Y+1	; 0x01
    9af8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_Z17putVoiceQueueLongj>
    9afc:	25 c0       	rjmp	.+74     	; 0x9b48 <_Z16menuProcVoiceOneh+0x50a>
				}
			}
			else if ( pvad->fnameType == 2 )	// Audio
    9afe:	82 30       	cpi	r24, 0x02	; 2
    9b00:	19 f5       	brne	.+70     	; 0x9b48 <_Z16menuProcVoiceOneh+0x50a>
			{
				if ( sub == subN )
    9b02:	89 e0       	ldi	r24, 0x09	; 9
    9b04:	b8 16       	cp	r11, r24
    9b06:	11 f0       	breq	.+4      	; 0x9b0c <_Z16menuProcVoiceOneh+0x4ce>
    9b08:	00 e0       	ldi	r16, 0x00	; 0
    9b0a:	0d c0       	rjmp	.+26     	; 0x9b26 <_Z16menuProcVoiceOneh+0x4e8>
				{
					attr = blink ;
					uint8_t b ;
					b = pvad->vfile ;
					CHECK_INCDEC_H_MODELVAR( b, 0, 15 ) ;
    9b0c:	8e 01       	movw	r16, r28
    9b0e:	06 5d       	subi	r16, 0xD6	; 214
    9b10:	1a 4f       	sbci	r17, 0xFA	; 250
    9b12:	d8 01       	movw	r26, r16
    9b14:	8c 91       	ld	r24, X
    9b16:	60 e0       	ldi	r22, 0x00	; 0
    9b18:	4f e0       	ldi	r20, 0x0F	; 15
    9b1a:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
					pvad->vfile = b ;
    9b1e:	f8 01       	movw	r30, r16
    9b20:	80 83       	st	Z, r24
    9b22:	11 82       	std	Z+1, r1	; 0x01
    9b24:	0a 2d       	mov	r16, r10
				}
				lcd_putsAttIdx(15*FW, y, Str_Sounds, pvad->vfile, attr ) ;
    9b26:	f6 01       	movw	r30, r12
    9b28:	33 e0       	ldi	r19, 0x03	; 3
    9b2a:	ee 0f       	add	r30, r30
    9b2c:	ff 1f       	adc	r31, r31
    9b2e:	3a 95       	dec	r19
    9b30:	e1 f7       	brne	.-8      	; 0x9b2a <_Z16menuProcVoiceOneh+0x4ec>
    9b32:	ec 0d       	add	r30, r12
    9b34:	fd 1d       	adc	r31, r13
    9b36:	e6 5d       	subi	r30, 0xD6	; 214
    9b38:	fa 4f       	sbci	r31, 0xFA	; 250
    9b3a:	8a e5       	ldi	r24, 0x5A	; 90
    9b3c:	60 e2       	ldi	r22, 0x20	; 32
    9b3e:	46 ec       	ldi	r20, 0xC6	; 198
    9b40:	57 e0       	ldi	r21, 0x07	; 7
    9b42:	20 81       	ld	r18, Z
    9b44:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    9b48:	18 e2       	ldi	r17, 0x28	; 40
    9b4a:	0a e0       	ldi	r16, 0x0A	; 10
			}
			y += FH ;
			subN += 1 ;
		}
			 
 		lcd_puts_Pleft( y, PSTR("Delete") ) ;
    9b4c:	81 2f       	mov	r24, r17
    9b4e:	6c eb       	ldi	r22, 0xBC	; 188
    9b50:	78 e0       	ldi	r23, 0x08	; 8
    9b52:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
		attr = 0 ;
		if ( sub == subN )
    9b56:	2b 2d       	mov	r18, r11
    9b58:	33 27       	eor	r19, r19
    9b5a:	27 fd       	sbrc	r18, 7
    9b5c:	30 95       	com	r19
    9b5e:	80 2f       	mov	r24, r16
    9b60:	90 e0       	ldi	r25, 0x00	; 0
    9b62:	28 17       	cp	r18, r24
    9b64:	39 07       	cpc	r19, r25
    9b66:	11 f0       	breq	.+4      	; 0x9b6c <_Z16menuProcVoiceOneh+0x52e>
    9b68:	00 e0       	ldi	r16, 0x00	; 0
    9b6a:	1c c0       	rjmp	.+56     	; 0x9ba4 <_Z16menuProcVoiceOneh+0x566>
		{
			attr = blink ;
			if (event == EVT_KEY_LONG(KEY_MENU) )
    9b6c:	f0 e8       	ldi	r31, 0x80	; 128
    9b6e:	9f 16       	cp	r9, r31
    9b70:	c1 f4       	brne	.+48     	; 0x9ba2 <_Z16menuProcVoiceOneh+0x564>
			{
    		memset(pvad,0,sizeof(VoiceAlarmData));
    9b72:	c6 01       	movw	r24, r12
    9b74:	23 e0       	ldi	r18, 0x03	; 3
    9b76:	88 0f       	add	r24, r24
    9b78:	99 1f       	adc	r25, r25
    9b7a:	2a 95       	dec	r18
    9b7c:	e1 f7       	brne	.-8      	; 0x9b76 <_Z16menuProcVoiceOneh+0x538>
    9b7e:	8c 0d       	add	r24, r12
    9b80:	9d 1d       	adc	r25, r13
    9b82:	8d 5d       	subi	r24, 0xDD	; 221
    9b84:	9a 4f       	sbci	r25, 0xFA	; 250
    9b86:	fc 01       	movw	r30, r24
    9b88:	89 e0       	ldi	r24, 0x09	; 9
    9b8a:	df 01       	movw	r26, r30
    9b8c:	1d 92       	st	X+, r1
    9b8e:	8a 95       	dec	r24
    9b90:	e9 f7       	brne	.-6      	; 0x9b8c <_Z16menuProcVoiceOneh+0x54e>
 	  		s_editMode = 0 ;
    9b92:	10 92 e5 06 	sts	0x06E5, r1
				if ( sub == 10 )
    9b96:	ba e0       	ldi	r27, 0x0A	; 10
    9b98:	bb 16       	cp	r11, r27
    9b9a:	19 f4       	brne	.+6      	; 0x9ba2 <_Z16menuProcVoiceOneh+0x564>
				{
					mstate2.m_posVert = 8 ;
    9b9c:	88 e0       	ldi	r24, 0x08	; 8
    9b9e:	80 93 ca 08 	sts	0x08CA, r24
    9ba2:	0a 2d       	mov	r16, r10
				}
			}
		}
		lcd_putsAtt( 12*FW, y, PSTR("MENU LONG"), attr ) ;
    9ba4:	88 e4       	ldi	r24, 0x48	; 72
    9ba6:	61 2f       	mov	r22, r17
    9ba8:	42 eb       	ldi	r20, 0xB2	; 178
    9baa:	58 e0       	ldi	r21, 0x08	; 8
    9bac:	20 2f       	mov	r18, r16
    9bae:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
//					}
//				break ;
//			}
//		}
//	}
}
    9bb2:	df 91       	pop	r29
    9bb4:	cf 91       	pop	r28
    9bb6:	1f 91       	pop	r17
    9bb8:	0f 91       	pop	r16
    9bba:	ff 90       	pop	r15
    9bbc:	ef 90       	pop	r14
    9bbe:	df 90       	pop	r13
    9bc0:	cf 90       	pop	r12
    9bc2:	bf 90       	pop	r11
    9bc4:	af 90       	pop	r10
    9bc6:	9f 90       	pop	r9
    9bc8:	08 95       	ret

00009bca <_Z13menuProcIndexh>:
			lcd_char_inverse( 0, highlight*FH, 66, 0 ) ;
		}
	}
}

void menuProcIndex(uint8_t event)
    9bca:	2f 92       	push	r2
    9bcc:	3f 92       	push	r3
    9bce:	4f 92       	push	r4
    9bd0:	5f 92       	push	r5
    9bd2:	6f 92       	push	r6
    9bd4:	7f 92       	push	r7
    9bd6:	8f 92       	push	r8
    9bd8:	9f 92       	push	r9
    9bda:	af 92       	push	r10
    9bdc:	bf 92       	push	r11
    9bde:	cf 92       	push	r12
    9be0:	df 92       	push	r13
    9be2:	ef 92       	push	r14
    9be4:	ff 92       	push	r15
    9be6:	0f 93       	push	r16
    9be8:	1f 93       	push	r17
    9bea:	df 93       	push	r29
    9bec:	cf 93       	push	r28
    9bee:	0f 92       	push	r0
    9bf0:	cd b7       	in	r28, 0x3d	; 61
    9bf2:	de b7       	in	r29, 0x3e	; 62
	static MState2 mstate;
	

//	uint8_t saveEvent = event ;

	event = indexProcess( event, &mstate, 4 ) ;
    9bf4:	6b ec       	ldi	r22, 0xCB	; 203
    9bf6:	78 e0       	ldi	r23, 0x08	; 8
    9bf8:	44 e0       	ldi	r20, 0x04	; 4
    9bfa:	0e 94 ee 23 	call	0x47dc	; 0x47dc <_ZL12indexProcesshP7MState2h>
    9bfe:	88 2e       	mov	r8, r24
	mstate.check( event, Columns, 0, IlinesCount-1 ) ;
    9c00:	40 91 c0 08 	lds	r20, 0x08C0
    9c04:	50 91 c1 08 	lds	r21, 0x08C1
    9c08:	00 91 c2 08 	lds	r16, 0x08C2
    9c0c:	01 50       	subi	r16, 0x01	; 1
    9c0e:	8b ec       	ldi	r24, 0xCB	; 203
    9c10:	98 e0       	ldi	r25, 0x08	; 8
    9c12:	68 2d       	mov	r22, r8
    9c14:	20 e0       	ldi	r18, 0x00	; 0
    9c16:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <_ZN7MState25checkEhPKhhh>
//	Tevent = event = saveEvent ;
	
	uint8_t sub = mstate.m_posVert ;
    9c1a:	e0 90 cb 08 	lds	r14, 0x08CB
	uint8_t y = 1*FH ;
	uint8_t subN = 0 ;
//	Columns = &ProgColumns[COLUMNS_0] ;
//	IlinesCount = 0 ;
	uint8_t blink = InverseBlink ;
    9c1e:	90 90 eb 06 	lds	r9, 0x06EB
	switch ( SubmenuIndex )
    9c22:	80 91 c3 08 	lds	r24, 0x08C3
    9c26:	85 30       	cpi	r24, 0x05	; 5
    9c28:	09 f4       	brne	.+2      	; 0x9c2c <_Z13menuProcIndexh+0x62>
    9c2a:	84 c1       	rjmp	.+776    	; 0x9f34 <_Z13menuProcIndexh+0x36a>
    9c2c:	86 30       	cpi	r24, 0x06	; 6
    9c2e:	90 f4       	brcc	.+36     	; 0x9c54 <_Z13menuProcIndexh+0x8a>
    9c30:	82 30       	cpi	r24, 0x02	; 2
    9c32:	09 f4       	brne	.+2      	; 0x9c36 <_Z13menuProcIndexh+0x6c>
    9c34:	dc c0       	rjmp	.+440    	; 0x9dee <_Z13menuProcIndexh+0x224>
    9c36:	83 30       	cpi	r24, 0x03	; 3
    9c38:	30 f4       	brcc	.+12     	; 0x9c46 <_Z13menuProcIndexh+0x7c>
    9c3a:	88 23       	and	r24, r24
    9c3c:	09 f1       	breq	.+66     	; 0x9c80 <_Z13menuProcIndexh+0xb6>
    9c3e:	81 30       	cpi	r24, 0x01	; 1
    9c40:	09 f0       	breq	.+2      	; 0x9c44 <_Z13menuProcIndexh+0x7a>
    9c42:	b6 c6       	rjmp	.+3436   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
    9c44:	2d c0       	rjmp	.+90     	; 0x9ca0 <_Z13menuProcIndexh+0xd6>
    9c46:	83 30       	cpi	r24, 0x03	; 3
    9c48:	09 f4       	brne	.+2      	; 0x9c4c <_Z13menuProcIndexh+0x82>
    9c4a:	87 c2       	rjmp	.+1294   	; 0xa15a <_Z13menuProcIndexh+0x590>
    9c4c:	84 30       	cpi	r24, 0x04	; 4
    9c4e:	09 f0       	breq	.+2      	; 0x9c52 <_Z13menuProcIndexh+0x88>
    9c50:	af c6       	rjmp	.+3422   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
    9c52:	16 c3       	rjmp	.+1580   	; 0xa280 <_Z13menuProcIndexh+0x6b6>
    9c54:	88 30       	cpi	r24, 0x08	; 8
    9c56:	09 f4       	brne	.+2      	; 0x9c5a <_Z13menuProcIndexh+0x90>
    9c58:	86 c4       	rjmp	.+2316   	; 0xa566 <_Z13menuProcIndexh+0x99c>
    9c5a:	89 30       	cpi	r24, 0x09	; 9
    9c5c:	38 f4       	brcc	.+14     	; 0x9c6c <_Z13menuProcIndexh+0xa2>
    9c5e:	86 30       	cpi	r24, 0x06	; 6
    9c60:	09 f4       	brne	.+2      	; 0x9c64 <_Z13menuProcIndexh+0x9a>
    9c62:	a4 c5       	rjmp	.+2888   	; 0xa7ac <_Z13menuProcIndexh+0xbe2>
    9c64:	87 30       	cpi	r24, 0x07	; 7
    9c66:	09 f0       	breq	.+2      	; 0x9c6a <_Z13menuProcIndexh+0xa0>
    9c68:	a3 c6       	rjmp	.+3398   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
    9c6a:	bf c5       	rjmp	.+2942   	; 0xa7ea <_Z13menuProcIndexh+0xc20>
    9c6c:	8a 30       	cpi	r24, 0x0A	; 10
    9c6e:	09 f4       	brne	.+2      	; 0x9c72 <_Z13menuProcIndexh+0xa8>
    9c70:	a1 c3       	rjmp	.+1858   	; 0xa3b4 <_Z13menuProcIndexh+0x7ea>
    9c72:	8a 30       	cpi	r24, 0x0A	; 10
    9c74:	08 f4       	brcc	.+2      	; 0x9c78 <_Z13menuProcIndexh+0xae>
    9c76:	96 c3       	rjmp	.+1836   	; 0xa3a4 <_Z13menuProcIndexh+0x7da>
    9c78:	8b 30       	cpi	r24, 0x0B	; 11
    9c7a:	09 f0       	breq	.+2      	; 0x9c7e <_Z13menuProcIndexh+0xb4>
    9c7c:	99 c6       	rjmp	.+3378   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
    9c7e:	02 c4       	rjmp	.+2052   	; 0xa484 <_Z13menuProcIndexh+0x8ba>
	{
		case M_INDEX :
  		TITLEP(Str_Radio_Setup);
    9c80:	8a e0       	ldi	r24, 0x0A	; 10
    9c82:	94 e0       	ldi	r25, 0x04	; 4
    9c84:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 11 ;
    9c88:	8b e0       	ldi	r24, 0x0B	; 11
    9c8a:	80 93 c2 08 	sts	0x08C2, r24
Str_Version,
Str_DiagSwtch,
Str_DiagAna
} ;	

			displayIndex( n_Strings, 4, 7, sub ) ;
    9c8e:	e3 94       	inc	r14
    9c90:	85 ea       	ldi	r24, 0xA5	; 165
    9c92:	9c e0       	ldi	r25, 0x0C	; 12
    9c94:	64 e0       	ldi	r22, 0x04	; 4
    9c96:	47 e0       	ldi	r20, 0x07	; 7
    9c98:	2e 2d       	mov	r18, r14
    9c9a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <_ZL12displayIndexPKPKchhh>
    9c9e:	88 c6       	rjmp	.+3344   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
		break ;
	
		case M_DISPLAY :
		{	
      TITLEP( Str_Display ) ;
    9ca0:	8d e8       	ldi	r24, 0x8D	; 141
    9ca2:	99 e0       	ldi	r25, 0x09	; 9
    9ca4:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 6 ;
    9ca8:	86 e0       	ldi	r24, 0x06	; 6
    9caa:	80 93 c2 08 	sts	0x08C2, r24
  		uint8_t attr ;
//			y = FH ;
			attr = (sub==subN) ? blink : 0 ;
    9cae:	ee 20       	and	r14, r14
    9cb0:	11 f0       	breq	.+4      	; 0x9cb6 <_Z13menuProcIndexh+0xec>
    9cb2:	10 e0       	ldi	r17, 0x00	; 0
    9cb4:	01 c0       	rjmp	.+2      	; 0x9cb8 <_Z13menuProcIndexh+0xee>
    9cb6:	19 2d       	mov	r17, r9
			lcd_xlabel_decimal( y, PSTR(STR_CONTRAST), g_eeGeneral.contrast, attr, PARAM_OFS ) ;
    9cb8:	40 91 66 01 	lds	r20, 0x0166
    9cbc:	88 e0       	ldi	r24, 0x08	; 8
    9cbe:	6c e9       	ldi	r22, 0x9C	; 156
    9cc0:	7c e0       	ldi	r23, 0x0C	; 12
    9cc2:	50 e0       	ldi	r21, 0x00	; 0
    9cc4:	21 2f       	mov	r18, r17
    9cc6:	06 e6       	ldi	r16, 0x66	; 102
    9cc8:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
//      lcd_puts_Pleft( y, PSTR(STR_CONTRAST) ) ;
//      lcd_outdezAtt( PARAM_OFS, y, g_eeGeneral.contrast, attr ) ;
      if ( attr )
    9ccc:	11 23       	and	r17, r17
    9cce:	51 f0       	breq	.+20     	; 0x9ce4 <_Z13menuProcIndexh+0x11a>
			{
				CHECK_INCDEC_H_GENVAR( g_eeGeneral.contrast, LCD_MINCONTRAST, LCD_MAXCONTRAST) ;
    9cd0:	80 91 66 01 	lds	r24, 0x0166
    9cd4:	6a e0       	ldi	r22, 0x0A	; 10
    9cd6:	4d e2       	ldi	r20, 0x2D	; 45
    9cd8:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    9cdc:	80 93 66 01 	sts	0x0166, r24
				lcdSetContrast() ;
    9ce0:	0e 94 29 6c 	call	0xd852	; 0xd852 <_Z14lcdSetContrastv>
			}
			y += FH ;
			subN += 1 ;

			attr = 0 ;
      lcd_puts_Pleft( y,PSTR(STR_LIGHT_SWITCH"\037""\037"STR_LIGHT_AFTER"\037"STR_LIGHT_STICK));
    9ce4:	80 e1       	ldi	r24, 0x10	; 16
    9ce6:	6a e6       	ldi	r22, 0x6A	; 106
    9ce8:	7c e0       	ldi	r23, 0x0C	; 12
    9cea:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
//      lcd_puts_Pleft( y,PSTR(STR_LIGHT_SWITCH));
      if(sub==subN) { attr = blink ; CHECK_INCDEC_GENERALSWITCH( g_eeGeneral.lightSw, -MAX_DRSWITCH, MAX_DRSWITCH);}
    9cee:	21 e0       	ldi	r18, 0x01	; 1
    9cf0:	e2 16       	cp	r14, r18
    9cf2:	11 f0       	breq	.+4      	; 0x9cf8 <_Z13menuProcIndexh+0x12e>
    9cf4:	20 e0       	ldi	r18, 0x00	; 0
    9cf6:	09 c0       	rjmp	.+18     	; 0x9d0a <_Z13menuProcIndexh+0x140>
    9cf8:	80 91 69 01 	lds	r24, 0x0169
    9cfc:	6a ee       	ldi	r22, 0xEA	; 234
    9cfe:	46 e1       	ldi	r20, 0x16	; 22
    9d00:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    9d04:	80 93 69 01 	sts	0x0169, r24
    9d08:	29 2d       	mov	r18, r9
      putsDrSwitches(PARAM_OFS-FW,y,g_eeGeneral.lightSw,attr);
    9d0a:	80 e6       	ldi	r24, 0x60	; 96
    9d0c:	60 e1       	ldi	r22, 0x10	; 16
    9d0e:	40 91 69 01 	lds	r20, 0x0169
    9d12:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
			y += FH ;
			subN += 1 ;

      g_eeGeneral.blightinv = onoffMenuItem_g( g_eeGeneral.blightinv, y, PSTR(STR_LIGHT_INVERT), sub==subN ) ;
    9d16:	80 91 84 01 	lds	r24, 0x0184
    9d1a:	82 95       	swap	r24
    9d1c:	86 95       	lsr	r24
    9d1e:	86 95       	lsr	r24
    9d20:	81 70       	andi	r24, 0x01	; 1
    9d22:	20 e0       	ldi	r18, 0x00	; 0
    9d24:	92 e0       	ldi	r25, 0x02	; 2
    9d26:	e9 16       	cp	r14, r25
    9d28:	09 f4       	brne	.+2      	; 0x9d2c <_Z13menuProcIndexh+0x162>
    9d2a:	21 e0       	ldi	r18, 0x01	; 1
    9d2c:	68 e1       	ldi	r22, 0x18	; 24
    9d2e:	49 e5       	ldi	r20, 0x59	; 89
    9d30:	5c e0       	ldi	r21, 0x0C	; 12
    9d32:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
    9d36:	81 70       	andi	r24, 0x01	; 1
    9d38:	82 95       	swap	r24
    9d3a:	88 0f       	add	r24, r24
    9d3c:	88 0f       	add	r24, r24
    9d3e:	80 7c       	andi	r24, 0xC0	; 192
    9d40:	90 91 84 01 	lds	r25, 0x0184
    9d44:	9f 7b       	andi	r25, 0xBF	; 191
    9d46:	98 2b       	or	r25, r24
    9d48:	90 93 84 01 	sts	0x0184, r25
    9d4c:	10 e2       	ldi	r17, 0x20	; 32
    9d4e:	f1 2e       	mov	r15, r17
    9d50:	00 e0       	ldi	r16, 0x00	; 0
				b = ( i == 0 ) ? g_eeGeneral.lightAutoOff : g_eeGeneral.lightOnStickMove ;

  			uint8_t attr = 0 ;
        if(sub==subN) { attr = blink ; CHECK_INCDEC_H_GENVAR_0( b, 600/5);}
        if(b) {
            lcd_outdezAtt(PARAM_OFS+2*FW, y, b*5,attr);
    9d52:	b5 e0       	ldi	r27, 0x05	; 5
    9d54:	db 2e       	mov	r13, r27

			for ( uint8_t i = 0 ; i < 2 ; i += 1 )
			{
				uint8_t b ;
//        lcd_puts_Pleft( y,( i == 0) ? PSTR(STR_LIGHT_AFTER) : PSTR(STR_LIGHT_STICK) );
				b = ( i == 0 ) ? g_eeGeneral.lightAutoOff : g_eeGeneral.lightOnStickMove ;
    9d56:	00 23       	and	r16, r16
    9d58:	19 f4       	brne	.+6      	; 0x9d60 <_Z13menuProcIndexh+0x196>
    9d5a:	10 91 80 01 	lds	r17, 0x0180
    9d5e:	02 c0       	rjmp	.+4      	; 0x9d64 <_Z13menuProcIndexh+0x19a>
    9d60:	10 91 88 01 	lds	r17, 0x0188

  			uint8_t attr = 0 ;
        if(sub==subN) { attr = blink ; CHECK_INCDEC_H_GENVAR_0( b, 600/5);}
    9d64:	80 2f       	mov	r24, r16
    9d66:	8d 5f       	subi	r24, 0xFD	; 253
    9d68:	e8 16       	cp	r14, r24
    9d6a:	11 f0       	breq	.+4      	; 0x9d70 <_Z13menuProcIndexh+0x1a6>
    9d6c:	20 e0       	ldi	r18, 0x00	; 0
    9d6e:	06 c0       	rjmp	.+12     	; 0x9d7c <_Z13menuProcIndexh+0x1b2>
    9d70:	81 2f       	mov	r24, r17
    9d72:	68 e7       	ldi	r22, 0x78	; 120
    9d74:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    9d78:	18 2f       	mov	r17, r24
    9d7a:	29 2d       	mov	r18, r9
        if(b) {
    9d7c:	11 23       	and	r17, r17
    9d7e:	69 f0       	breq	.+26     	; 0x9d9a <_Z13menuProcIndexh+0x1d0>
            lcd_outdezAtt(PARAM_OFS+2*FW, y, b*5,attr);
    9d80:	1d 9d       	mul	r17, r13
    9d82:	a0 01       	movw	r20, r0
    9d84:	11 24       	eor	r1, r1
    9d86:	82 e7       	ldi	r24, 0x72	; 114
    9d88:	6f 2d       	mov	r22, r15
    9d8a:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
            lcd_putc(PARAM_OFS+2*FW, y, 's');
    9d8e:	82 e7       	ldi	r24, 0x72	; 114
    9d90:	6f 2d       	mov	r22, r15
    9d92:	43 e7       	ldi	r20, 0x73	; 115
    9d94:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
    9d98:	06 c0       	rjmp	.+12     	; 0x9da6 <_Z13menuProcIndexh+0x1dc>
        }
        else
            lcd_putsAtt(PARAM_OFS, y, Str_OFF,attr);
    9d9a:	86 e6       	ldi	r24, 0x66	; 102
    9d9c:	6f 2d       	mov	r22, r15
    9d9e:	4b e2       	ldi	r20, 0x2B	; 43
    9da0:	51 e0       	ldi	r21, 0x01	; 1
    9da2:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
				if ( i == 0 )
    9da6:	00 23       	and	r16, r16
    9da8:	19 f4       	brne	.+6      	; 0x9db0 <_Z13menuProcIndexh+0x1e6>
				{
					g_eeGeneral.lightAutoOff = b ;
    9daa:	10 93 80 01 	sts	0x0180, r17
    9dae:	02 c0       	rjmp	.+4      	; 0x9db4 <_Z13menuProcIndexh+0x1ea>
				}
				else
				{
					g_eeGeneral.lightOnStickMove = b ;
    9db0:	10 93 88 01 	sts	0x0188, r17
				}
				y += FH ;
    9db4:	a8 e0       	ldi	r26, 0x08	; 8
    9db6:	fa 0e       	add	r15, r26

      g_eeGeneral.blightinv = onoffMenuItem_g( g_eeGeneral.blightinv, y, PSTR(STR_LIGHT_INVERT), sub==subN ) ;
			y += FH ;
			subN += 1 ;

			for ( uint8_t i = 0 ; i < 2 ; i += 1 )
    9db8:	0f 5f       	subi	r16, 0xFF	; 255
    9dba:	02 30       	cpi	r16, 0x02	; 2
    9dbc:	61 f6       	brne	.-104    	; 0x9d56 <_Z13menuProcIndexh+0x18c>
				}
				y += FH ;
				subN += 1 ;
			}
      
			g_eeGeneral.flashBeep = onoffMenuItem_g( g_eeGeneral.flashBeep, y, PSTR(STR_FLASH_ON_BEEP), sub==subN ) ;
    9dbe:	80 91 7e 01 	lds	r24, 0x017E
    9dc2:	86 95       	lsr	r24
    9dc4:	86 95       	lsr	r24
    9dc6:	86 95       	lsr	r24
    9dc8:	81 70       	andi	r24, 0x01	; 1
    9dca:	20 e0       	ldi	r18, 0x00	; 0
    9dcc:	b5 e0       	ldi	r27, 0x05	; 5
    9dce:	eb 16       	cp	r14, r27
    9dd0:	09 f4       	brne	.+2      	; 0x9dd4 <_Z13menuProcIndexh+0x20a>
    9dd2:	21 e0       	ldi	r18, 0x01	; 1
    9dd4:	60 e3       	ldi	r22, 0x30	; 48
    9dd6:	4b e4       	ldi	r20, 0x4B	; 75
    9dd8:	5c e0       	ldi	r21, 0x0C	; 12
    9dda:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
    9dde:	81 70       	andi	r24, 0x01	; 1
    9de0:	88 0f       	add	r24, r24
    9de2:	88 0f       	add	r24, r24
    9de4:	88 0f       	add	r24, r24
    9de6:	90 91 7e 01 	lds	r25, 0x017E
    9dea:	97 7f       	andi	r25, 0xF7	; 247
    9dec:	9f c0       	rjmp	.+318    	; 0x9f2c <_Z13menuProcIndexh+0x362>
		}
		break ;
		
		case M_AUDIO :
		{	
			TITLEP( Str_AudioHaptic ) ;
    9dee:	85 e9       	ldi	r24, 0x95	; 149
    9df0:	99 e0       	ldi	r25, 0x09	; 9
    9df2:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
#ifdef GLOBAL_COUNTDOWN
			IlinesCount = 6 ;
    9df6:	86 e0       	ldi	r24, 0x06	; 6
    9df8:	80 93 c2 08 	sts	0x08C2, r24
			IlinesCount = 5 ;
#endif
		
      uint8_t b ;
			uint8_t attr = LEFT ;
      lcd_puts_Pleft( y,PSTR(STR_VOLUME"\037"STR_BEEPER"\037"STR_SOUND_MODE"\037"STR_SPEAKER_PITCH));
    9dfc:	88 e0       	ldi	r24, 0x08	; 8
    9dfe:	63 e2       	ldi	r22, 0x23	; 35
    9e00:	7c e0       	ldi	r23, 0x0C	; 12
    9e02:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
      b = g_eeGeneral.volume+(NUM_VOL_LEVELS-1) ;
    9e06:	10 91 94 01 	lds	r17, 0x0194
    9e0a:	19 5f       	subi	r17, 0xF9	; 249
			if(sub==subN) { attr = blink | LEFT ; CHECK_INCDEC_H_GENVAR_0( b, NUM_VOL_LEVELS-1 ); }
    9e0c:	ee 20       	and	r14, r14
    9e0e:	11 f0       	breq	.+4      	; 0x9e14 <_Z13menuProcIndexh+0x24a>
    9e10:	00 e4       	ldi	r16, 0x40	; 64
    9e12:	07 c0       	rjmp	.+14     	; 0x9e22 <_Z13menuProcIndexh+0x258>
    9e14:	09 2d       	mov	r16, r9
    9e16:	00 64       	ori	r16, 0x40	; 64
    9e18:	81 2f       	mov	r24, r17
    9e1a:	67 e0       	ldi	r22, 0x07	; 7
    9e1c:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    9e20:	18 2f       	mov	r17, r24
//			lcd_xlabel_decimal( y, PSTR(STR_VOLUME), b, attr, PARAM_OFS ) ;
//      lcd_puts_Pleft( y,PSTR(STR_VOLUME));
      lcd_outdezAtt(PARAM_OFS, y, b, attr);
    9e22:	86 e6       	ldi	r24, 0x66	; 102
    9e24:	68 e0       	ldi	r22, 0x08	; 8
    9e26:	41 2f       	mov	r20, r17
    9e28:	50 e0       	ldi	r21, 0x00	; 0
    9e2a:	20 2f       	mov	r18, r16
    9e2c:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
			g_eeGeneral.volume = (int8_t)b-(NUM_VOL_LEVELS-1) ;
    9e30:	17 50       	subi	r17, 0x07	; 7
    9e32:	10 93 94 01 	sts	0x0194, r17
  		y += FH ;
			subN += 1 ;

  		attr = 0 ;
      b = g_eeGeneral.beeperVal ;
    9e36:	20 91 7b 01 	lds	r18, 0x017B
    9e3a:	26 95       	lsr	r18
    9e3c:	26 95       	lsr	r18
    9e3e:	26 95       	lsr	r18
    9e40:	27 70       	andi	r18, 0x07	; 7
//      lcd_puts_Pleft( y,PSTR(STR_BEEPER));
      if(sub==subN) { attr = blink ; CHECK_INCDEC_H_GENVAR_0( b, 6); g_eeGeneral.beeperVal = b ; }
    9e42:	e1 e0       	ldi	r30, 0x01	; 1
    9e44:	ee 16       	cp	r14, r30
    9e46:	11 f0       	breq	.+4      	; 0x9e4c <_Z13menuProcIndexh+0x282>
    9e48:	00 e0       	ldi	r16, 0x00	; 0
    9e4a:	11 c0       	rjmp	.+34     	; 0x9e6e <_Z13menuProcIndexh+0x2a4>
    9e4c:	82 2f       	mov	r24, r18
    9e4e:	66 e0       	ldi	r22, 0x06	; 6
    9e50:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    9e54:	28 2f       	mov	r18, r24
    9e56:	98 2f       	mov	r25, r24
    9e58:	97 70       	andi	r25, 0x07	; 7
    9e5a:	99 0f       	add	r25, r25
    9e5c:	99 0f       	add	r25, r25
    9e5e:	99 0f       	add	r25, r25
    9e60:	80 91 7b 01 	lds	r24, 0x017B
    9e64:	87 7c       	andi	r24, 0xC7	; 199
    9e66:	89 2b       	or	r24, r25
    9e68:	80 93 7b 01 	sts	0x017B, r24
    9e6c:	09 2d       	mov	r16, r9
      lcd_putsAttIdx(PARAM_OFS - FW - 4, y, PSTR(STR_BEEP_MODES),b,attr);
    9e6e:	8c e5       	ldi	r24, 0x5C	; 92
    9e70:	60 e1       	ldi	r22, 0x10	; 16
    9e72:	47 ef       	ldi	r20, 0xF7	; 247
    9e74:	5b e0       	ldi	r21, 0x0B	; 11
    9e76:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
  		y += FH ;
			subN += 1 ;

			attr = 0 ;
      b = g_eeGeneral.speakerMode ;
    9e7a:	20 91 87 01 	lds	r18, 0x0187
			if ( b > 3 )
    9e7e:	24 30       	cpi	r18, 0x04	; 4
    9e80:	08 f0       	brcs	.+2      	; 0x9e84 <_Z13menuProcIndexh+0x2ba>
    9e82:	24 e0       	ldi	r18, 0x04	; 4
			{
				b = 4 ;					
			}
//      lcd_puts_Pleft( y,PSTR(STR_SOUND_MODE));
      if(sub==subN) { attr = blink ; CHECK_INCDEC_H_GENVAR_0( b, 4 ); g_eeGeneral.speakerMode = ( b == 4 ) ? 7 : b ; }
    9e84:	f2 e0       	ldi	r31, 0x02	; 2
    9e86:	ef 16       	cp	r14, r31
    9e88:	11 f0       	breq	.+4      	; 0x9e8e <_Z13menuProcIndexh+0x2c4>
    9e8a:	00 e0       	ldi	r16, 0x00	; 0
    9e8c:	0b c0       	rjmp	.+22     	; 0x9ea4 <_Z13menuProcIndexh+0x2da>
    9e8e:	82 2f       	mov	r24, r18
    9e90:	64 e0       	ldi	r22, 0x04	; 4
    9e92:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    9e96:	28 2f       	mov	r18, r24
    9e98:	84 30       	cpi	r24, 0x04	; 4
    9e9a:	09 f4       	brne	.+2      	; 0x9e9e <_Z13menuProcIndexh+0x2d4>
    9e9c:	87 e0       	ldi	r24, 0x07	; 7
    9e9e:	80 93 87 01 	sts	0x0187, r24
    9ea2:	09 2d       	mov	r16, r9
      lcd_putsAttIdx( 11*FW, y, PSTR(STR_SPEAKER_OPTS),b,attr);
    9ea4:	82 e4       	ldi	r24, 0x42	; 66
    9ea6:	68 e1       	ldi	r22, 0x18	; 24
    9ea8:	43 ec       	ldi	r20, 0xC3	; 195
    9eaa:	5b e0       	ldi	r21, 0x0B	; 11
    9eac:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
  		y += FH ;
			subN += 1 ;

  		
			attr = LEFT ;
      if(sub==subN)
    9eb0:	23 e0       	ldi	r18, 0x03	; 3
    9eb2:	e2 16       	cp	r14, r18
    9eb4:	11 f0       	breq	.+4      	; 0x9eba <_Z13menuProcIndexh+0x2f0>
    9eb6:	20 e4       	ldi	r18, 0x40	; 64
    9eb8:	09 c0       	rjmp	.+18     	; 0x9ecc <_Z13menuProcIndexh+0x302>
			{
				attr = INVERS | LEFT ;
        CHECK_INCDEC_H_GENVAR( g_eeGeneral.speakerPitch, 1, 100);
    9eba:	80 91 85 01 	lds	r24, 0x0185
    9ebe:	61 e0       	ldi	r22, 0x01	; 1
    9ec0:	44 e6       	ldi	r20, 0x64	; 100
    9ec2:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    9ec6:	80 93 85 01 	sts	0x0185, r24
    9eca:	21 e4       	ldi	r18, 0x41	; 65
      }
//			lcd_xlabel_decimal( y, PSTR(STR_SPEAKER_PITCH), g_eeGeneral.speakerPitch, attr, PARAM_OFS ) ;
//      lcd_puts_Pleft( y,PSTR(STR_SPEAKER_PITCH));
      lcd_outdezAtt(PARAM_OFS,y,g_eeGeneral.speakerPitch,attr);
    9ecc:	40 91 85 01 	lds	r20, 0x0185
    9ed0:	86 e6       	ldi	r24, 0x66	; 102
    9ed2:	60 e2       	ldi	r22, 0x20	; 32
    9ed4:	50 e0       	ldi	r21, 0x00	; 0
    9ed6:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
  		y += FH ;
			subN += 1 ;

  		attr = LEFT ;
      if(sub==subN)
    9eda:	84 e0       	ldi	r24, 0x04	; 4
    9edc:	e8 16       	cp	r14, r24
    9ede:	11 f0       	breq	.+4      	; 0x9ee4 <_Z13menuProcIndexh+0x31a>
    9ee0:	20 e4       	ldi	r18, 0x40	; 64
    9ee2:	08 c0       	rjmp	.+16     	; 0x9ef4 <_Z13menuProcIndexh+0x32a>
			{
				attr = INVERS | LEFT ;
        CHECK_INCDEC_H_GENVAR_0( g_eeGeneral.hapticStrength, 5);
    9ee4:	80 91 86 01 	lds	r24, 0x0186
    9ee8:	65 e0       	ldi	r22, 0x05	; 5
    9eea:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    9eee:	80 93 86 01 	sts	0x0186, r24
    9ef2:	21 e4       	ldi	r18, 0x41	; 65
      }
			lcd_xlabel_decimal( y, PSTR(STR_HAPTICSTRENGTH), g_eeGeneral.hapticStrength, attr, PARAM_OFS ) ;
    9ef4:	40 91 86 01 	lds	r20, 0x0186
    9ef8:	88 e2       	ldi	r24, 0x28	; 40
    9efa:	62 eb       	ldi	r22, 0xB2	; 178
    9efc:	7b e0       	ldi	r23, 0x0B	; 11
    9efe:	50 e0       	ldi	r21, 0x00	; 0
    9f00:	06 e6       	ldi	r16, 0x66	; 102
    9f02:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
//      lcd_outdezAtt(PARAM_OFS,y,g_eeGeneral.hapticStrength,attr);
  		y += FH ;
			subN += 1 ;
		 
#ifdef GLOBAL_COUNTDOWN
      g_eeGeneral.minuteBeep = onoffMenuItem_g( g_eeGeneral.minuteBeep, y, Str_minute_Beep, sub==subN ) ;
    9f06:	80 91 7e 01 	lds	r24, 0x017E
    9f0a:	86 95       	lsr	r24
    9f0c:	81 70       	andi	r24, 0x01	; 1
    9f0e:	20 e0       	ldi	r18, 0x00	; 0
    9f10:	95 e0       	ldi	r25, 0x05	; 5
    9f12:	e9 16       	cp	r14, r25
    9f14:	09 f4       	brne	.+2      	; 0x9f18 <_Z13menuProcIndexh+0x34e>
    9f16:	21 e0       	ldi	r18, 0x01	; 1
    9f18:	60 e3       	ldi	r22, 0x30	; 48
    9f1a:	41 ea       	ldi	r20, 0xA1	; 161
    9f1c:	59 e0       	ldi	r21, 0x09	; 9
    9f1e:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
    9f22:	81 70       	andi	r24, 0x01	; 1
    9f24:	88 0f       	add	r24, r24
    9f26:	90 91 7e 01 	lds	r25, 0x017E
    9f2a:	9d 7f       	andi	r25, 0xFD	; 253
    9f2c:	98 2b       	or	r25, r24
    9f2e:	90 93 7e 01 	sts	0x017E, r25
    9f32:	3e c5       	rjmp	.+2684   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
		}
		break ;

		case M_CONTROLS :
		{	
			TITLEP( Str_Controls ) ;
    9f34:	8d ea       	ldi	r24, 0xAD	; 173
    9f36:	99 e0       	ldi	r25, 0x09	; 9
    9f38:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 10 ;
    9f3c:	8a e0       	ldi	r24, 0x0A	; 10
    9f3e:	80 93 c2 08 	sts	0x08C2, r24
			
			if ( sub < 6 )
    9f42:	a5 e0       	ldi	r26, 0x05	; 5
    9f44:	ae 15       	cp	r26, r14
    9f46:	08 f4       	brcc	.+2      	; 0x9f4a <_Z13menuProcIndexh+0x380>
    9f48:	d7 c0       	rjmp	.+430    	; 0xa0f8 <_Z13menuProcIndexh+0x52e>
			{
				displayNext() ;
    9f4a:	0e 94 cb 24 	call	0x4996	; 0x4996 <_Z11displayNextv>
				g_eeGeneral.crosstrim = onoffMenuItem_g( g_eeGeneral.crosstrim, y, PSTR(STR_CROSSTRIM), sub==subN) ;
    9f4e:	80 91 98 01 	lds	r24, 0x0198
    9f52:	81 70       	andi	r24, 0x01	; 1
    9f54:	20 e0       	ldi	r18, 0x00	; 0
    9f56:	ee 20       	and	r14, r14
    9f58:	09 f4       	brne	.+2      	; 0x9f5c <_Z13menuProcIndexh+0x392>
    9f5a:	21 e0       	ldi	r18, 0x01	; 1
    9f5c:	68 e0       	ldi	r22, 0x08	; 8
    9f5e:	48 ea       	ldi	r20, 0xA8	; 168
    9f60:	5b e0       	ldi	r21, 0x0B	; 11
    9f62:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
    9f66:	81 70       	andi	r24, 0x01	; 1
    9f68:	90 91 98 01 	lds	r25, 0x0198
    9f6c:	9e 7f       	andi	r25, 0xFE	; 254
    9f6e:	98 2b       	or	r25, r24
    9f70:	90 93 98 01 	sts	0x0198, r25
  			y += FH ;
				subN += 1 ;

      	g_eeGeneral.throttleReversed = onoffMenuItem_g( g_eeGeneral.throttleReversed, y, PSTR(STR_THR_REVERSE), sub==subN) ;
    9f74:	80 91 7e 01 	lds	r24, 0x017E
    9f78:	81 70       	andi	r24, 0x01	; 1
    9f7a:	20 e0       	ldi	r18, 0x00	; 0
    9f7c:	b1 e0       	ldi	r27, 0x01	; 1
    9f7e:	eb 16       	cp	r14, r27
    9f80:	09 f4       	brne	.+2      	; 0x9f84 <_Z13menuProcIndexh+0x3ba>
    9f82:	21 e0       	ldi	r18, 0x01	; 1
    9f84:	60 e1       	ldi	r22, 0x10	; 16
    9f86:	47 e9       	ldi	r20, 0x97	; 151
    9f88:	5b e0       	ldi	r21, 0x0B	; 11
    9f8a:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
    9f8e:	81 70       	andi	r24, 0x01	; 1
    9f90:	90 91 7e 01 	lds	r25, 0x017E
    9f94:	9e 7f       	andi	r25, 0xFE	; 254
    9f96:	98 2b       	or	r25, r24
    9f98:	90 93 7e 01 	sts	0x017E, r25
  			y += FH ;
				subN += 1 ;

      	g_eeGeneral.enablePpmsim = onoffMenuItem_g( g_eeGeneral.enablePpmsim, y, PSTR(STR_ENABLE_PPMSIM), sub==subN ) ;
    9f9c:	80 91 84 01 	lds	r24, 0x0184
    9fa0:	82 95       	swap	r24
    9fa2:	86 95       	lsr	r24
    9fa4:	81 70       	andi	r24, 0x01	; 1
    9fa6:	20 e0       	ldi	r18, 0x00	; 0
    9fa8:	e2 e0       	ldi	r30, 0x02	; 2
    9faa:	ee 16       	cp	r14, r30
    9fac:	09 f4       	brne	.+2      	; 0x9fb0 <_Z13menuProcIndexh+0x3e6>
    9fae:	21 e0       	ldi	r18, 0x01	; 1
    9fb0:	68 e1       	ldi	r22, 0x18	; 24
    9fb2:	49 e8       	ldi	r20, 0x89	; 137
    9fb4:	5b e0       	ldi	r21, 0x0B	; 11
    9fb6:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
    9fba:	81 70       	andi	r24, 0x01	; 1
    9fbc:	82 95       	swap	r24
    9fbe:	88 0f       	add	r24, r24
    9fc0:	80 7e       	andi	r24, 0xE0	; 224
    9fc2:	90 91 84 01 	lds	r25, 0x0184
    9fc6:	9f 7d       	andi	r25, 0xDF	; 223
    9fc8:	98 2b       	or	r25, r24
    9fca:	90 93 84 01 	sts	0x0184, r25
  			y += FH ;
				subN += 1 ;

				uint8_t attr = sub==subN ? blink : 0 ;
    9fce:	f3 e0       	ldi	r31, 0x03	; 3
    9fd0:	ef 16       	cp	r14, r31
    9fd2:	11 f0       	breq	.+4      	; 0x9fd8 <_Z13menuProcIndexh+0x40e>
    9fd4:	ff 24       	eor	r15, r15
    9fd6:	01 c0       	rjmp	.+2      	; 0x9fda <_Z13menuProcIndexh+0x410>
    9fd8:	f9 2c       	mov	r15, r9
	    	lcd_puts_Pleft( y, PSTR(STR_CHAN_ORDER"\037"STR_MODE) ) ;//   RAET->AETR
    9fda:	80 e2       	ldi	r24, 0x20	; 32
    9fdc:	65 e7       	ldi	r22, 0x75	; 117
    9fde:	7b e0       	ldi	r23, 0x0B	; 11
    9fe0:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
				uint8_t bch = pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup) ;
    9fe4:	e0 91 81 01 	lds	r30, 0x0181
    9fe8:	f0 e0       	ldi	r31, 0x00	; 0
    9fea:	ee 52       	subi	r30, 0x2E	; 46
    9fec:	ff 4f       	sbci	r31, 0xFF	; 255
    9fee:	04 91       	lpm	r16, Z+
    9ff0:	9c e6       	ldi	r25, 0x6C	; 108
      	for ( uint8_t i = 4 ; i > 0 ; i -= 1 )
				{
					uint8_t letter ;
					letter = pgm_read_byte( Str_1_RETA+(bch & 3) + 1 ) ;
    9ff2:	10 e0       	ldi	r17, 0x00	; 0
    9ff4:	f8 01       	movw	r30, r16
    9ff6:	e3 70       	andi	r30, 0x03	; 3
    9ff8:	f0 70       	andi	r31, 0x00	; 0
    9ffa:	e9 54       	subi	r30, 0x49	; 73
    9ffc:	f6 4f       	sbci	r31, 0xF6	; 246
    9ffe:	e4 91       	lpm	r30, Z+
  				lcd_putcAtt( (14+i)*FW, y, letter, attr ) ;
    a000:	89 2f       	mov	r24, r25
    a002:	60 e2       	ldi	r22, 0x20	; 32
    a004:	4e 2f       	mov	r20, r30
    a006:	2f 2d       	mov	r18, r15
    a008:	99 83       	std	Y+1, r25	; 0x01
    a00a:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
					bch >>= 2 ;
    a00e:	15 95       	asr	r17
    a010:	07 95       	ror	r16
    a012:	15 95       	asr	r17
    a014:	07 95       	ror	r16
    a016:	99 81       	ldd	r25, Y+1	; 0x01
    a018:	96 50       	subi	r25, 0x06	; 6
				subN += 1 ;

				uint8_t attr = sub==subN ? blink : 0 ;
	    	lcd_puts_Pleft( y, PSTR(STR_CHAN_ORDER"\037"STR_MODE) ) ;//   RAET->AETR
				uint8_t bch = pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup) ;
      	for ( uint8_t i = 4 ; i > 0 ; i -= 1 )
    a01a:	94 35       	cpi	r25, 0x54	; 84
    a01c:	51 f7       	brne	.-44     	; 0x9ff2 <_Z13menuProcIndexh+0x428>
					uint8_t letter ;
					letter = pgm_read_byte( Str_1_RETA+(bch & 3) + 1 ) ;
  				lcd_putcAtt( (14+i)*FW, y, letter, attr ) ;
					bch >>= 2 ;
				}
	    	if(attr) CHECK_INCDEC_H_GENVAR_0( g_eeGeneral.templateSetup, 23 ) ;
    a01e:	ff 20       	and	r15, r15
    a020:	39 f0       	breq	.+14     	; 0xa030 <_Z13menuProcIndexh+0x466>
    a022:	80 91 81 01 	lds	r24, 0x0181
    a026:	67 e1       	ldi	r22, 0x17	; 23
    a028:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    a02c:	80 93 81 01 	sts	0x0181, r24
    a030:	cc 24       	eor	r12, r12
    a032:	dd 24       	eor	r13, r13
    a034:	14 e2       	ldi	r17, 0x24	; 36
				subN += 1 ;
		
//	      lcd_puts_Pleft( y, PSTR(STR_MODE) );
      	for ( uint8_t i = 0 ; i < 4 ; i += 1 )
				{
					lcd_img((6+4*i)*FW, y, sticks,i ) ;
    a036:	81 2f       	mov	r24, r17
    a038:	68 e2       	ldi	r22, 0x28	; 40
    a03a:	4c eb       	ldi	r20, 0xBC	; 188
    a03c:	59 e0       	ldi	r21, 0x09	; 9
    a03e:	2c 2d       	mov	r18, r12
    a040:	0e 94 49 69 	call	0xd292	; 0xd292 <_Z7lcd_imghhPKhh>
					if (g_eeGeneral.stickReverse & (1<<i)) lcd_char_inverse( (6+4*i)*FW, y, 3*FW, 0 ) ;
    a044:	80 91 99 01 	lds	r24, 0x0199
    a048:	90 e0       	ldi	r25, 0x00	; 0
    a04a:	0c 2c       	mov	r0, r12
    a04c:	02 c0       	rjmp	.+4      	; 0xa052 <_Z13menuProcIndexh+0x488>
    a04e:	95 95       	asr	r25
    a050:	87 95       	ror	r24
    a052:	0a 94       	dec	r0
    a054:	e2 f7       	brpl	.-8      	; 0xa04e <_Z13menuProcIndexh+0x484>
    a056:	80 ff       	sbrs	r24, 0
    a058:	06 c0       	rjmp	.+12     	; 0xa066 <_Z13menuProcIndexh+0x49c>
    a05a:	81 2f       	mov	r24, r17
    a05c:	68 e2       	ldi	r22, 0x28	; 40
    a05e:	42 e1       	ldi	r20, 0x12	; 18
    a060:	20 e0       	ldi	r18, 0x00	; 0
    a062:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
    a066:	08 94       	sec
    a068:	c1 1c       	adc	r12, r1
    a06a:	d1 1c       	adc	r13, r1
    a06c:	18 5e       	subi	r17, 0xE8	; 232
	    	if(attr) CHECK_INCDEC_H_GENVAR_0( g_eeGeneral.templateSetup, 23 ) ;
  			y += FH ;
				subN += 1 ;
		
//	      lcd_puts_Pleft( y, PSTR(STR_MODE) );
      	for ( uint8_t i = 0 ; i < 4 ; i += 1 )
    a06e:	14 38       	cpi	r17, 0x84	; 132
    a070:	11 f7       	brne	.-60     	; 0xa036 <_Z13menuProcIndexh+0x46c>
				{
					lcd_img((6+4*i)*FW, y, sticks,i ) ;
					if (g_eeGeneral.stickReverse & (1<<i)) lcd_char_inverse( (6+4*i)*FW, y, 3*FW, 0 ) ;
				}
      	if(sub==subN)
    a072:	24 e0       	ldi	r18, 0x04	; 4
    a074:	e2 16       	cp	r14, r18
    a076:	69 f4       	brne	.+26     	; 0xa092 <_Z13menuProcIndexh+0x4c8>
				{
					CHECK_INCDEC_H_GENVAR_0( g_eeGeneral.stickReverse, 15 ) ;
    a078:	80 91 99 01 	lds	r24, 0x0199
    a07c:	6f e0       	ldi	r22, 0x0F	; 15
    a07e:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    a082:	80 93 99 01 	sts	0x0199, r24
//				plotType = PLOT_BLACK ;
					lcd_rect( 6*FW-1, y-1, 15*FW+2, 9 ) ;
    a086:	83 e2       	ldi	r24, 0x23	; 35
    a088:	67 e2       	ldi	r22, 0x27	; 39
    a08a:	4c e5       	ldi	r20, 0x5C	; 92
    a08c:	29 e0       	ldi	r18, 0x09	; 9
    a08e:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
				}
				y += FH ;
				subN += 1 ;

  			attr = 0 ;
				uint8_t mode = g_eeGeneral.stickMode ;
    a092:	40 91 7c 01 	lds	r20, 0x017C
        if(sub==subN)
    a096:	85 e0       	ldi	r24, 0x05	; 5
    a098:	e8 16       	cp	r14, r24
    a09a:	11 f0       	breq	.+4      	; 0xa0a0 <_Z13menuProcIndexh+0x4d6>
    a09c:	20 e0       	ldi	r18, 0x00	; 0
    a09e:	17 c0       	rjmp	.+46     	; 0xa0ce <_Z13menuProcIndexh+0x504>
				{
					attr = INVERS ;
					if ( s_editMode )
    a0a0:	80 91 e5 06 	lds	r24, 0x06E5
    a0a4:	88 23       	and	r24, r24
    a0a6:	11 f4       	brne	.+4      	; 0xa0ac <_Z13menuProcIndexh+0x4e2>
    a0a8:	21 e0       	ldi	r18, 0x01	; 1
    a0aa:	11 c0       	rjmp	.+34     	; 0xa0ce <_Z13menuProcIndexh+0x504>
					{
				 		attr = BLINK ;

						CHECK_INCDEC_H_GENVAR_0( mode,3);
    a0ac:	84 2f       	mov	r24, r20
    a0ae:	63 e0       	ldi	r22, 0x03	; 3
    a0b0:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    a0b4:	48 2f       	mov	r20, r24
						if ( mode != g_eeGeneral.stickMode )
    a0b6:	80 91 7c 01 	lds	r24, 0x017C
    a0ba:	48 17       	cp	r20, r24
    a0bc:	39 f0       	breq	.+14     	; 0xa0cc <_Z13menuProcIndexh+0x502>
						{
							g_eeGeneral.stickScroll = 0 ;
    a0be:	80 91 84 01 	lds	r24, 0x0184
    a0c2:	8f 77       	andi	r24, 0x7F	; 127
    a0c4:	80 93 84 01 	sts	0x0184, r24
							g_eeGeneral.stickMode = mode ;							
    a0c8:	40 93 7c 01 	sts	0x017C, r20
    a0cc:	22 e0       	ldi	r18, 0x02	; 2
						}
					}
				}
        lcd_putcAtt( 3*FW, y, '1'+mode,attr);
    a0ce:	4f 5c       	subi	r20, 0xCF	; 207
    a0d0:	82 e1       	ldi	r24, 0x12	; 18
    a0d2:	60 e3       	ldi	r22, 0x30	; 48
    a0d4:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
    a0d8:	10 e0       	ldi	r17, 0x00	; 0
    a0da:	04 e2       	ldi	r16, 0x24	; 36
#ifdef FIX_MODE
        for(uint8_t i=0; i<4; i++) putsChnRaw( (6+4*i)*FW, y, modeFixValue( i ), 0 ) ;//sub==3?INVERS:0);
    a0dc:	81 2f       	mov	r24, r17
    a0de:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_Z12modeFixValueh>
    a0e2:	48 2f       	mov	r20, r24
    a0e4:	80 2f       	mov	r24, r16
    a0e6:	60 e3       	ldi	r22, 0x30	; 48
    a0e8:	20 e0       	ldi	r18, 0x00	; 0
    a0ea:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
    a0ee:	1f 5f       	subi	r17, 0xFF	; 255
    a0f0:	08 5e       	subi	r16, 0xE8	; 232
    a0f2:	14 30       	cpi	r17, 0x04	; 4
    a0f4:	99 f7       	brne	.-26     	; 0xa0dc <_Z13menuProcIndexh+0x512>
    a0f6:	5c c4       	rjmp	.+2232   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
				subN += 1 ;
			}
			else
			{
				subN = 6 ;
				if ( sub >= IlinesCount )
    a0f8:	99 e0       	ldi	r25, 0x09	; 9
    a0fa:	9e 15       	cp	r25, r14
    a0fc:	28 f4       	brcc	.+10     	; 0xa108 <_Z13menuProcIndexh+0x53e>
				{
					sub = mstate.m_posVert = IlinesCount-1 ;
    a0fe:	89 e0       	ldi	r24, 0x09	; 9
    a100:	80 93 cb 08 	sts	0x08CB, r24
    a104:	f9 e0       	ldi	r31, 0x09	; 9
    a106:	ef 2e       	mov	r14, r31
				}
				// Edit custom stick names
				Columns = &ProgColumns[COLUMNS_3] ;
    a108:	8b e2       	ldi	r24, 0x2B	; 43
    a10a:	94 e0       	ldi	r25, 0x04	; 4
    a10c:	90 93 c1 08 	sts	0x08C1, r25
    a110:	80 93 c0 08 	sts	0x08C0, r24
    a114:	18 e0       	ldi	r17, 0x08	; 8
    a116:	ff 24       	eor	r15, r15
    a118:	cc 24       	eor	r12, r12
    a11a:	dd 24       	eor	r13, r13
      	for(uint8_t i=0; i<4; i++)
				{
      		lcd_putsAttIdx( FW*5, y, modi12x3, i, 0 ) ;
    a11c:	8e e1       	ldi	r24, 0x1E	; 30
    a11e:	61 2f       	mov	r22, r17
    a120:	43 e3       	ldi	r20, 0x33	; 51
    a122:	51 e0       	ldi	r21, 0x01	; 1
    a124:	2f 2d       	mov	r18, r15
    a126:	00 e0       	ldi	r16, 0x00	; 0
    a128:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
					editName( g_posHorz, y, &g_eeGeneral.customStickNames[i*4], 4, sub==subN ? EE_GENERAL : 0 ) ;
    a12c:	a6 01       	movw	r20, r12
    a12e:	46 56       	subi	r20, 0x66	; 102
    a130:	5e 4f       	sbci	r21, 0xFE	; 254
    a132:	8f 2d       	mov	r24, r15
    a134:	8a 5f       	subi	r24, 0xFA	; 250
    a136:	e8 16       	cp	r14, r24
    a138:	09 f4       	brne	.+2      	; 0xa13c <_Z13menuProcIndexh+0x572>
    a13a:	01 e0       	ldi	r16, 0x01	; 1
    a13c:	80 91 0c 07 	lds	r24, 0x070C
    a140:	61 2f       	mov	r22, r17
    a142:	24 e0       	ldi	r18, 0x04	; 4
    a144:	0e 94 8f 23 	call	0x471e	; 0x471e <_Z8editNamehhPhhh>
	 				y += FH ;
    a148:	18 5f       	subi	r17, 0xF8	; 248
				{
					sub = mstate.m_posVert = IlinesCount-1 ;
				}
				// Edit custom stick names
				Columns = &ProgColumns[COLUMNS_3] ;
      	for(uint8_t i=0; i<4; i++)
    a14a:	f3 94       	inc	r15
    a14c:	a4 e0       	ldi	r26, 0x04	; 4
    a14e:	b0 e0       	ldi	r27, 0x00	; 0
    a150:	ca 0e       	add	r12, r26
    a152:	db 1e       	adc	r13, r27
    a154:	18 32       	cpi	r17, 0x28	; 40
    a156:	11 f7       	brne	.-60     	; 0xa11c <_Z13menuProcIndexh+0x552>
    a158:	2b c4       	rjmp	.+2134   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
		} 
		break ;

		case M_ALARMS :
		{	
			TITLEP( Str_Alarms ) ;
    a15a:	87 e0       	ldi	r24, 0x07	; 7
    a15c:	9a e0       	ldi	r25, 0x0A	; 10
    a15e:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 7 ;
 #else
			IlinesCount = 6 ;
 #endif
#else
			IlinesCount = 6 ;
    a162:	86 e0       	ldi	r24, 0x06	; 6
    a164:	80 93 c2 08 	sts	0x08C2, r24
#endif
  		uint8_t attr = LEFT ;
      lcd_puts_Pleft( y,PSTR(STR_BATT_WARN"\037"STR_INACT_ALARM));
    a168:	88 e0       	ldi	r24, 0x08	; 8
    a16a:	62 e5       	ldi	r22, 0x52	; 82
    a16c:	7b e0       	ldi	r23, 0x0B	; 11
    a16e:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
      if(sub==subN) { attr = blink | LEFT ; CHECK_INCDEC_H_GENVAR( g_eeGeneral.vBatWarn, 40, 120); } //5-10V
    a172:	ee 20       	and	r14, r14
    a174:	11 f0       	breq	.+4      	; 0xa17a <_Z13menuProcIndexh+0x5b0>
    a176:	10 e4       	ldi	r17, 0x40	; 64
    a178:	0a c0       	rjmp	.+20     	; 0xa18e <_Z13menuProcIndexh+0x5c4>
    a17a:	19 2d       	mov	r17, r9
    a17c:	10 64       	ori	r17, 0x40	; 64
    a17e:	80 91 67 01 	lds	r24, 0x0167
    a182:	68 e2       	ldi	r22, 0x28	; 40
    a184:	48 e7       	ldi	r20, 0x78	; 120
    a186:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    a18a:	80 93 67 01 	sts	0x0167, r24
      putsVolts(PARAM_OFS, y, g_eeGeneral.vBatWarn, attr);
    a18e:	86 e6       	ldi	r24, 0x66	; 102
    a190:	68 e0       	ldi	r22, 0x08	; 8
    a192:	40 91 67 01 	lds	r20, 0x0167
    a196:	21 2f       	mov	r18, r17
    a198:	0e 94 de 6d 	call	0xdbbc	; 0xdbbc <_Z9putsVoltshhhh>
  		y += FH ;
			subN += 1 ;

  		attr = 0 ;//LEFT ;
      if(sub==subN) { attr = blink ;CHECK_INCDEC_H_GENVAR( g_eeGeneral.inactivityTimer, -10, 110); } //0..120minutes
    a19c:	b1 e0       	ldi	r27, 0x01	; 1
    a19e:	eb 16       	cp	r14, r27
    a1a0:	11 f0       	breq	.+4      	; 0xa1a6 <_Z13menuProcIndexh+0x5dc>
    a1a2:	00 e0       	ldi	r16, 0x00	; 0
    a1a4:	09 c0       	rjmp	.+18     	; 0xa1b8 <_Z13menuProcIndexh+0x5ee>
    a1a6:	80 91 7d 01 	lds	r24, 0x017D
    a1aa:	66 ef       	ldi	r22, 0xF6	; 246
    a1ac:	4e e6       	ldi	r20, 0x6E	; 110
    a1ae:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    a1b2:	80 93 7d 01 	sts	0x017D, r24
    a1b6:	09 2d       	mov	r16, r9
//			lcd_xlabel_decimal( y, PSTR(STR_INACT_ALARM), g_eeGeneral.inactivityTimer+10, attr, PARAM_OFS+2*FW-2 ) ;
//      lcd_puts_Pleft( y,PSTR(STR_INACT_ALARM));
      lcd_outdezAtt(PARAM_OFS+2*FW-2, y, g_eeGeneral.inactivityTimer+10, attr);
    a1b8:	40 91 7d 01 	lds	r20, 0x017D
    a1bc:	55 27       	eor	r21, r21
    a1be:	47 fd       	sbrc	r20, 7
    a1c0:	50 95       	com	r21
    a1c2:	46 5f       	subi	r20, 0xF6	; 246
    a1c4:	5f 4f       	sbci	r21, 0xFF	; 255
    a1c6:	80 e7       	ldi	r24, 0x70	; 112
    a1c8:	60 e1       	ldi	r22, 0x10	; 16
    a1ca:	20 2f       	mov	r18, r16
    a1cc:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
  		y += FH ;
			subN += 1 ;

      uint8_t b = g_eeGeneral.disableThrottleWarning;
      g_eeGeneral.disableThrottleWarning = offonMenuItem_g( b, y, PSTR(STR_THR_WARNING), sub==subN ) ;
    a1d0:	80 91 7b 01 	lds	r24, 0x017B
    a1d4:	81 70       	andi	r24, 0x01	; 1
    a1d6:	20 e0       	ldi	r18, 0x00	; 0
    a1d8:	e2 e0       	ldi	r30, 0x02	; 2
    a1da:	ee 16       	cp	r14, r30
    a1dc:	09 f4       	brne	.+2      	; 0xa1e0 <_Z13menuProcIndexh+0x616>
    a1de:	21 e0       	ldi	r18, 0x01	; 1
    a1e0:	68 e1       	ldi	r22, 0x18	; 24
    a1e2:	41 e4       	ldi	r20, 0x41	; 65
    a1e4:	5b e0       	ldi	r21, 0x0B	; 11
    a1e6:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZL15offonMenuItem_ghhPKch>
    a1ea:	81 70       	andi	r24, 0x01	; 1
    a1ec:	90 91 7b 01 	lds	r25, 0x017B
    a1f0:	9e 7f       	andi	r25, 0xFE	; 254
    a1f2:	98 2b       	or	r25, r24
    a1f4:	90 93 7b 01 	sts	0x017B, r25
  		y += FH ;
			subN += 1 ;

      b = g_eeGeneral.disableSwitchWarning;
      g_eeGeneral.disableSwitchWarning = offonMenuItem_g( b, y, Str_Switch_warn, sub==subN ) ;
    a1f8:	89 2f       	mov	r24, r25
    a1fa:	86 95       	lsr	r24
    a1fc:	81 70       	andi	r24, 0x01	; 1
    a1fe:	20 e0       	ldi	r18, 0x00	; 0
    a200:	f3 e0       	ldi	r31, 0x03	; 3
    a202:	ef 16       	cp	r14, r31
    a204:	09 f4       	brne	.+2      	; 0xa208 <_Z13menuProcIndexh+0x63e>
    a206:	21 e0       	ldi	r18, 0x01	; 1
    a208:	60 e2       	ldi	r22, 0x20	; 32
    a20a:	43 eb       	ldi	r20, 0xB3	; 179
    a20c:	52 e0       	ldi	r21, 0x02	; 2
    a20e:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZL15offonMenuItem_ghhPKch>
    a212:	81 70       	andi	r24, 0x01	; 1
    a214:	88 0f       	add	r24, r24
    a216:	90 91 7b 01 	lds	r25, 0x017B
    a21a:	9d 7f       	andi	r25, 0xFD	; 253
    a21c:	98 2b       	or	r25, r24
    a21e:	90 93 7b 01 	sts	0x017B, r25
  		y += FH ;
			subN += 1 ;

      b = g_eeGeneral.disableMemoryWarning;
      g_eeGeneral.disableMemoryWarning = offonMenuItem_g( b, y, PSTR(STR_MEM_WARN), sub==subN ) ;
    a222:	89 2f       	mov	r24, r25
    a224:	86 95       	lsr	r24
    a226:	86 95       	lsr	r24
    a228:	81 70       	andi	r24, 0x01	; 1
    a22a:	20 e0       	ldi	r18, 0x00	; 0
    a22c:	94 e0       	ldi	r25, 0x04	; 4
    a22e:	e9 16       	cp	r14, r25
    a230:	09 f4       	brne	.+2      	; 0xa234 <_Z13menuProcIndexh+0x66a>
    a232:	21 e0       	ldi	r18, 0x01	; 1
    a234:	68 e2       	ldi	r22, 0x28	; 40
    a236:	42 e3       	ldi	r20, 0x32	; 50
    a238:	5b e0       	ldi	r21, 0x0B	; 11
    a23a:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZL15offonMenuItem_ghhPKch>
    a23e:	81 70       	andi	r24, 0x01	; 1
    a240:	88 0f       	add	r24, r24
    a242:	88 0f       	add	r24, r24
    a244:	90 91 7b 01 	lds	r25, 0x017B
    a248:	9b 7f       	andi	r25, 0xFB	; 251
    a24a:	98 2b       	or	r25, r24
    a24c:	90 93 7b 01 	sts	0x017B, r25
  		y += FH ;
			subN += 1 ;

      b = g_eeGeneral.disableAlarmWarning;
      g_eeGeneral.disableAlarmWarning = offonMenuItem_g( b, y, PSTR(STR_ALARM_WARN), sub==subN ) ;
    a250:	89 2f       	mov	r24, r25
    a252:	88 1f       	adc	r24, r24
    a254:	88 27       	eor	r24, r24
    a256:	88 1f       	adc	r24, r24
    a258:	20 e0       	ldi	r18, 0x00	; 0
    a25a:	a5 e0       	ldi	r26, 0x05	; 5
    a25c:	ea 16       	cp	r14, r26
    a25e:	09 f4       	brne	.+2      	; 0xa262 <_Z13menuProcIndexh+0x698>
    a260:	21 e0       	ldi	r18, 0x01	; 1
    a262:	60 e3       	ldi	r22, 0x30	; 48
    a264:	44 e2       	ldi	r20, 0x24	; 36
    a266:	5b e0       	ldi	r21, 0x0B	; 11
    a268:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZL15offonMenuItem_ghhPKch>
    a26c:	87 95       	ror	r24
    a26e:	88 27       	eor	r24, r24
    a270:	87 95       	ror	r24
    a272:	90 91 7b 01 	lds	r25, 0x017B
    a276:	9f 77       	andi	r25, 0x7F	; 127
    a278:	98 2b       	or	r25, r24
    a27a:	90 93 7b 01 	sts	0x017B, r25
    a27e:	98 c3       	rjmp	.+1840   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
		} 
		break ;

		case M_GENERAL :
		{
			TITLEP( Str_General ) ;
    a280:	81 e2       	ldi	r24, 0x21	; 33
    a282:	94 e0       	ldi	r25, 0x04	; 4
    a284:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
#ifndef NOPOTSCROLL
#ifdef GLOBAL_COUNTDOWN
			IlinesCount = 6 ;
    a288:	86 e0       	ldi	r24, 0x06	; 6
    a28a:	80 93 c2 08 	sts	0x08C2, r24
			IlinesCount = 5 ;
#else
			IlinesCount = 4 ;
#endif		 
#endif		 
			if ( sub==0 )
    a28e:	ee 20       	and	r14, r14
    a290:	31 f4       	brne	.+12     	; 0xa29e <_Z13menuProcIndexh+0x6d4>
			{
				Columns = &ProgColumns[COLUMNS_9] ;
    a292:	8e e2       	ldi	r24, 0x2E	; 46
    a294:	94 e0       	ldi	r25, 0x04	; 4
    a296:	90 93 c1 08 	sts	0x08C1, r25
    a29a:	80 93 c0 08 	sts	0x08C0, r24
			}
			editName( g_posHorz, y, (uint8_t *)g_eeGeneral.ownerName, sizeof(g_eeGeneral.ownerName), (sub==subN) ? EE_GENERAL : 0 ) ;
    a29e:	00 e0       	ldi	r16, 0x00	; 0
    a2a0:	ee 20       	and	r14, r14
    a2a2:	09 f4       	brne	.+2      	; 0xa2a6 <_Z13menuProcIndexh+0x6dc>
    a2a4:	01 e0       	ldi	r16, 0x01	; 1
    a2a6:	80 91 0c 07 	lds	r24, 0x070C
    a2aa:	68 e0       	ldi	r22, 0x08	; 8
    a2ac:	49 e8       	ldi	r20, 0x89	; 137
    a2ae:	51 e0       	ldi	r21, 0x01	; 1
    a2b0:	2a e0       	ldi	r18, 0x0A	; 10
    a2b2:	0e 94 8f 23 	call	0x471e	; 0x471e <_Z8editNamehhPhhh>
  		y += FH ;
			subN += 1 ;

#ifdef GLOBAL_COUNTDOWN
      g_eeGeneral.preBeep = onoffMenuItem_g( g_eeGeneral.preBeep, y, Str_Beep_Countdown, sub==subN ) ;
    a2b6:	80 91 7e 01 	lds	r24, 0x017E
    a2ba:	86 95       	lsr	r24
    a2bc:	86 95       	lsr	r24
    a2be:	81 70       	andi	r24, 0x01	; 1
    a2c0:	20 e0       	ldi	r18, 0x00	; 0
    a2c2:	b1 e0       	ldi	r27, 0x01	; 1
    a2c4:	eb 16       	cp	r14, r27
    a2c6:	09 f4       	brne	.+2      	; 0xa2ca <_Z13menuProcIndexh+0x700>
    a2c8:	21 e0       	ldi	r18, 0x01	; 1
    a2ca:	60 e1       	ldi	r22, 0x10	; 16
    a2cc:	4e e0       	ldi	r20, 0x0E	; 14
    a2ce:	5a e0       	ldi	r21, 0x0A	; 10
    a2d0:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
    a2d4:	81 70       	andi	r24, 0x01	; 1
    a2d6:	88 0f       	add	r24, r24
    a2d8:	88 0f       	add	r24, r24
    a2da:	90 91 7e 01 	lds	r25, 0x017E
    a2de:	9b 7f       	andi	r25, 0xFB	; 251
    a2e0:	98 2b       	or	r25, r24
    a2e2:	90 93 7e 01 	sts	0x017E, r25
  		y += FH ;
			subN += 1 ;
#endif
		 
      uint8_t b = g_eeGeneral.disableSplashScreen;
      g_eeGeneral.disableSplashScreen = offonMenuItem_g( b, y, PSTR(STR_SPLASH_SCREEN), sub==subN ) ;
    a2e6:	89 2f       	mov	r24, r25
    a2e8:	82 95       	swap	r24
    a2ea:	81 70       	andi	r24, 0x01	; 1
    a2ec:	20 e0       	ldi	r18, 0x00	; 0
    a2ee:	e2 e0       	ldi	r30, 0x02	; 2
    a2f0:	ee 16       	cp	r14, r30
    a2f2:	09 f4       	brne	.+2      	; 0xa2f6 <_Z13menuProcIndexh+0x72c>
    a2f4:	21 e0       	ldi	r18, 0x01	; 1
    a2f6:	68 e1       	ldi	r22, 0x18	; 24
    a2f8:	46 e1       	ldi	r20, 0x16	; 22
    a2fa:	5b e0       	ldi	r21, 0x0B	; 11
    a2fc:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZL15offonMenuItem_ghhPKch>
    a300:	81 70       	andi	r24, 0x01	; 1
    a302:	82 95       	swap	r24
    a304:	80 7f       	andi	r24, 0xF0	; 240
    a306:	90 91 7e 01 	lds	r25, 0x017E
    a30a:	9f 7e       	andi	r25, 0xEF	; 239
    a30c:	98 2b       	or	r25, r24
    a30e:	90 93 7e 01 	sts	0x017E, r25
  		y += FH ;
			subN += 1 ;

      b = g_eeGeneral.hideNameOnSplash;
      g_eeGeneral.hideNameOnSplash = offonMenuItem_g( b, y, PSTR(STR_SPLASH_NAME), sub==subN ) ;
    a312:	80 91 84 01 	lds	r24, 0x0184
    a316:	82 95       	swap	r24
    a318:	81 70       	andi	r24, 0x01	; 1
    a31a:	20 e0       	ldi	r18, 0x00	; 0
    a31c:	f3 e0       	ldi	r31, 0x03	; 3
    a31e:	ef 16       	cp	r14, r31
    a320:	09 f4       	brne	.+2      	; 0xa324 <_Z13menuProcIndexh+0x75a>
    a322:	21 e0       	ldi	r18, 0x01	; 1
    a324:	60 e2       	ldi	r22, 0x20	; 32
    a326:	4a e0       	ldi	r20, 0x0A	; 10
    a328:	5b e0       	ldi	r21, 0x0B	; 11
    a32a:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZL15offonMenuItem_ghhPKch>
    a32e:	81 70       	andi	r24, 0x01	; 1
    a330:	82 95       	swap	r24
    a332:	80 7f       	andi	r24, 0xF0	; 240
    a334:	90 91 84 01 	lds	r25, 0x0184
    a338:	9f 7e       	andi	r25, 0xEF	; 239
    a33a:	98 2b       	or	r25, r24
    a33c:	90 93 84 01 	sts	0x0184, r25
			subN += 1 ;


#ifndef NOPOTSCROLL
      b = g_eeGeneral.disablePotScroll ;
      g_eeGeneral.disablePotScroll = offonMenuItem_g( b, y, PSTR(STR_POTSCROLL), sub==subN ) ;
    a340:	80 91 7e 01 	lds	r24, 0x017E
    a344:	82 95       	swap	r24
    a346:	86 95       	lsr	r24
    a348:	81 70       	andi	r24, 0x01	; 1
    a34a:	20 e0       	ldi	r18, 0x00	; 0
    a34c:	94 e0       	ldi	r25, 0x04	; 4
    a34e:	e9 16       	cp	r14, r25
    a350:	09 f4       	brne	.+2      	; 0xa354 <_Z13menuProcIndexh+0x78a>
    a352:	21 e0       	ldi	r18, 0x01	; 1
    a354:	68 e2       	ldi	r22, 0x28	; 40
    a356:	40 e0       	ldi	r20, 0x00	; 0
    a358:	5b e0       	ldi	r21, 0x0B	; 11
    a35a:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZL15offonMenuItem_ghhPKch>
    a35e:	81 70       	andi	r24, 0x01	; 1
    a360:	82 95       	swap	r24
    a362:	88 0f       	add	r24, r24
    a364:	80 7e       	andi	r24, 0xE0	; 224
    a366:	90 91 7e 01 	lds	r25, 0x017E
    a36a:	9f 7d       	andi	r25, 0xDF	; 223
    a36c:	98 2b       	or	r25, r24
    a36e:	90 93 7e 01 	sts	0x017E, r25
  		y += FH ;
			subN += 1 ;
#endif
     
			g_eeGeneral.stickScroll = onoffMenuItem_g( g_eeGeneral.stickScroll, y, PSTR(STR_STICKSCROLL), sub==subN ) ;
    a372:	80 91 84 01 	lds	r24, 0x0184
    a376:	88 1f       	adc	r24, r24
    a378:	88 27       	eor	r24, r24
    a37a:	88 1f       	adc	r24, r24
    a37c:	20 e0       	ldi	r18, 0x00	; 0
    a37e:	a5 e0       	ldi	r26, 0x05	; 5
    a380:	ea 16       	cp	r14, r26
    a382:	09 f4       	brne	.+2      	; 0xa386 <_Z13menuProcIndexh+0x7bc>
    a384:	21 e0       	ldi	r18, 0x01	; 1
    a386:	60 e3       	ldi	r22, 0x30	; 48
    a388:	44 ef       	ldi	r20, 0xF4	; 244
    a38a:	5a e0       	ldi	r21, 0x0A	; 10
    a38c:	0e 94 28 25 	call	0x4a50	; 0x4a50 <_ZL15onoffMenuItem_ghhPKch>
    a390:	87 95       	ror	r24
    a392:	88 27       	eor	r24, r24
    a394:	87 95       	ror	r24
    a396:	90 91 84 01 	lds	r25, 0x0184
    a39a:	9f 77       	andi	r25, 0x7F	; 127
    a39c:	98 2b       	or	r25, r24
    a39e:	90 93 84 01 	sts	0x0184, r25
    a3a2:	06 c3       	rjmp	.+1548   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
		}			 
		break ;

		case M_VERSION :
		{	
      TITLEP( Str_Version ) ;
    a3a4:	8d e1       	ldi	r24, 0x1D	; 29
    a3a6:	9a e0       	ldi	r25, 0x0A	; 10
    a3a8:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
//			IlinesCount = 0 ;

    lcd_puts_Pleft( 2*FH,Stamps );
    a3ac:	80 e1       	ldi	r24, 0x10	; 16
    a3ae:	67 e6       	ldi	r22, 0x67	; 103
    a3b0:	72 e0       	ldi	r23, 0x02	; 2
    a3b2:	e9 c0       	rjmp	.+466    	; 0xa586 <_Z13menuProcIndexh+0x9bc>
		}
		break ;

		case M_DIAGKEYS	:
		{
      TITLEP( PSTR(STR_DIAG) ) ;
    a3b4:	8f ee       	ldi	r24, 0xEF	; 239
    a3b6:	9a e0       	ldi	r25, 0x0A	; 10
    a3b8:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
    a3bc:	ff 24       	eor	r15, r15
    a3be:	ee 24       	eor	r14, r14
    a3c0:	ef e0       	ldi	r30, 0x0F	; 15
    a3c2:	ce 2e       	mov	r12, r30
    a3c4:	d1 2c       	mov	r13, r1
			
	    uint8_t x=7*FW;
  	  for(uint8_t i=0; i<9; i++)
    	{
        uint8_t y=i*FH; //+FH;
        if(i>(SW_ID0-SW_BASE_DIAG)) y-=FH; //overwrite ID0
    a3c6:	b3 e0       	ldi	r27, 0x03	; 3
    a3c8:	bf 15       	cp	r27, r15
    a3ca:	10 f0       	brcs	.+4      	; 0xa3d0 <_Z13menuProcIndexh+0x806>
    a3cc:	0e 2d       	mov	r16, r14
    a3ce:	02 c0       	rjmp	.+4      	; 0xa3d4 <_Z13menuProcIndexh+0x80a>
    a3d0:	0e 2d       	mov	r16, r14
    a3d2:	08 50       	subi	r16, 0x08	; 8
        bool t=keyState((EnumKeys)(SW_BASE_DIAG+i));
    a3d4:	c6 01       	movw	r24, r12
    a3d6:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    a3da:	18 2f       	mov	r17, r24
        putsDrSwitches(x,y,i+1,0); //ohne ofF,on
    a3dc:	f3 94       	inc	r15
    a3de:	8a e2       	ldi	r24, 0x2A	; 42
    a3e0:	60 2f       	mov	r22, r16
    a3e2:	4f 2d       	mov	r20, r15
    a3e4:	20 e0       	ldi	r18, 0x00	; 0
    a3e6:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
				putc_0_1( x+FW*4+2, y , t ) ;
    a3ea:	84 e4       	ldi	r24, 0x44	; 68
    a3ec:	60 2f       	mov	r22, r16
    a3ee:	41 2f       	mov	r20, r17
    a3f0:	0e 94 ba 22 	call	0x4574	; 0x4574 <_Z8putc_0_1hhh>
    a3f4:	e8 e0       	ldi	r30, 0x08	; 8
    a3f6:	ee 0e       	add	r14, r30
    a3f8:	08 94       	sec
    a3fa:	c1 1c       	adc	r12, r1
    a3fc:	d1 1c       	adc	r13, r1
		{
      TITLEP( PSTR(STR_DIAG) ) ;
//			IlinesCount = 0 ;
			
	    uint8_t x=7*FW;
  	  for(uint8_t i=0; i<9; i++)
    a3fe:	f9 e0       	ldi	r31, 0x09	; 9
    a400:	ff 16       	cp	r15, r31
    a402:	09 f7       	brne	.-62     	; 0xa3c6 <_Z13menuProcIndexh+0x7fc>
        putsDrSwitches(x,y,i+1,0); //ohne ofF,on
				putc_0_1( x+FW*4+2, y , t ) ;
    	}

	    x=0;
	    lcd_puts_Pleft(2*FH,PSTR(STR_KEYNAMES) ) ;
    a404:	80 e1       	ldi	r24, 0x10	; 16
    a406:	6d ec       	ldi	r22, 0xCD	; 205
    a408:	7a e0       	ldi	r23, 0x0A	; 10
    a40a:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    a40e:	10 e0       	ldi	r17, 0x00	; 0
    a410:	08 e3       	ldi	r16, 0x38	; 56
  	  for(uint8_t i=0; i<6; i++)
    	{
        uint8_t y=(5-i)*FH+2*FH;
        bool t=keyState((EnumKeys)(KEY_MENU+i));
    a412:	81 2f       	mov	r24, r17
    a414:	90 e0       	ldi	r25, 0x00	; 0
    a416:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    a41a:	48 2f       	mov	r20, r24
//      	lcd_putsAttIdx(  x, y, PSTR(STR_KEYNAMES),i,0);
        putc_0_1( x+FW*5+2,  y, t ) ;
    a41c:	80 e2       	ldi	r24, 0x20	; 32
    a41e:	60 2f       	mov	r22, r16
    a420:	0e 94 ba 22 	call	0x4574	; 0x4574 <_Z8putc_0_1hhh>
				putc_0_1( x+FW*4+2, y , t ) ;
    	}

	    x=0;
	    lcd_puts_Pleft(2*FH,PSTR(STR_KEYNAMES) ) ;
  	  for(uint8_t i=0; i<6; i++)
    a424:	1f 5f       	subi	r17, 0xFF	; 255
    a426:	08 50       	subi	r16, 0x08	; 8
    a428:	16 30       	cpi	r17, 0x06	; 6
    a42a:	99 f7       	brne	.-26     	; 0xa412 <_Z13menuProcIndexh+0x848>
//      	lcd_putsAttIdx(  x, y, PSTR(STR_KEYNAMES),i,0);
        putc_0_1( x+FW*5+2,  y, t ) ;
    	}

	    x=14*FW;
  	  lcd_puts_P(x, 3*FH,PSTR(STR_TRIM_M_P) ) ;
    a42c:	84 e5       	ldi	r24, 0x54	; 84
    a42e:	68 e1       	ldi	r22, 0x18	; 24
    a430:	45 ec       	ldi	r20, 0xC5	; 197
    a432:	5a e0       	ldi	r21, 0x0A	; 10
    a434:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
    a438:	00 e0       	ldi	r16, 0x00	; 0
    a43a:	10 e2       	ldi	r17, 0x20	; 32
    a43c:	76 e0       	ldi	r23, 0x06	; 6
    a43e:	e7 2e       	mov	r14, r23
    a440:	f1 2c       	mov	r15, r1
	    for(uint8_t i=0; i<4; i++)
  	  {
        uint8_t y=i*FH+FH*4;
        lcd_img(    x,       y, sticks,i);
    a442:	84 e5       	ldi	r24, 0x54	; 84
    a444:	61 2f       	mov	r22, r17
    a446:	4c eb       	ldi	r20, 0xBC	; 188
    a448:	59 e0       	ldi	r21, 0x09	; 9
    a44a:	20 2f       	mov	r18, r16
    a44c:	0e 94 49 69 	call	0xd292	; 0xd292 <_Z7lcd_imghhPKhh>
        bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
    a450:	c7 01       	movw	r24, r14
    a452:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    a456:	48 2f       	mov	r20, r24
        putc_0_1( x+FW*4, y, tm ) ;
    a458:	8c e6       	ldi	r24, 0x6C	; 108
    a45a:	61 2f       	mov	r22, r17
    a45c:	0e 94 ba 22 	call	0x4574	; 0x4574 <_Z8putc_0_1hhh>
        bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
    a460:	c7 01       	movw	r24, r14
    a462:	01 96       	adiw	r24, 0x01	; 1
    a464:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    a468:	48 2f       	mov	r20, r24
        putc_0_1( x+FW*6, y, tp ) ;
    a46a:	88 e7       	ldi	r24, 0x78	; 120
    a46c:	61 2f       	mov	r22, r17
    a46e:	0e 94 ba 22 	call	0x4574	; 0x4574 <_Z8putc_0_1hhh>
        putc_0_1( x+FW*5+2,  y, t ) ;
    	}

	    x=14*FW;
  	  lcd_puts_P(x, 3*FH,PSTR(STR_TRIM_M_P) ) ;
	    for(uint8_t i=0; i<4; i++)
    a472:	0f 5f       	subi	r16, 0xFF	; 255
    a474:	18 5f       	subi	r17, 0xF8	; 248
    a476:	82 e0       	ldi	r24, 0x02	; 2
    a478:	90 e0       	ldi	r25, 0x00	; 0
    a47a:	e8 0e       	add	r14, r24
    a47c:	f9 1e       	adc	r15, r25
    a47e:	04 30       	cpi	r16, 0x04	; 4
    a480:	01 f7       	brne	.-64     	; 0xa442 <_Z13menuProcIndexh+0x878>
    a482:	96 c2       	rjmp	.+1324   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
		}			 
		break ;

		case M_DIAGANA	:
		{
      TITLEP( PSTR(STR_ANA) ) ;
    a484:	81 ec       	ldi	r24, 0xC1	; 193
    a486:	9a e0       	ldi	r25, 0x0A	; 10
    a488:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 1 ;
    a48c:	81 e0       	ldi	r24, 0x01	; 1
    a48e:	80 93 c2 08 	sts	0x08C2, r24

			StickScrollAllowed = 0 ;
    a492:	10 92 06 06 	sts	0x0606, r1
    a496:	10 e0       	ldi	r17, 0x00	; 0
    a498:	00 e0       	ldi	r16, 0x00	; 0
				{
 					index = modeFixValue( i ) - 1 ;
 				}
#endif
        if(i<7)  lcd_outdez(15*FW, y, (int32_t)calibratedStick[index]*100/1024);
        else putsVBat(15*FW,y,blink|PREC1) ;
    a49a:	60 e2       	ldi	r22, 0x20	; 32
    a49c:	f6 2e       	mov	r15, r22
    a49e:	f9 28       	or	r15, r9

			StickScrollAllowed = 0 ;
	    for(uint8_t i=0; i<8; i++)
  	  {
        uint8_t y=i*FH;
        lcd_putc( 4*FW, y, 'A' ) ;
    a4a0:	88 e1       	ldi	r24, 0x18	; 24
    a4a2:	60 2f       	mov	r22, r16
    a4a4:	41 e4       	ldi	r20, 0x41	; 65
    a4a6:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
        lcd_putc( 5*FW, y, '1'+i ) ;
    a4aa:	41 2f       	mov	r20, r17
    a4ac:	4f 5c       	subi	r20, 0xCF	; 207
    a4ae:	8e e1       	ldi	r24, 0x1E	; 30
    a4b0:	60 2f       	mov	r22, r16
    a4b2:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
        lcd_outhex4( 7*FW, y,anaIn(i));
    a4b6:	81 2f       	mov	r24, r17
    a4b8:	0e 94 33 10 	call	0x2066	; 0x2066 <_Z5anaInh>
    a4bc:	ac 01       	movw	r20, r24
    a4be:	8a e2       	ldi	r24, 0x2A	; 42
    a4c0:	60 2f       	mov	r22, r16
    a4c2:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z11lcd_outhex4hhj>
				uint8_t index = i ;
#ifdef FIX_MODE
				if ( i < 4 )
    a4c6:	14 30       	cpi	r17, 0x04	; 4
    a4c8:	28 f4       	brcc	.+10     	; 0xa4d4 <_Z13menuProcIndexh+0x90a>
				{
 					index = modeFixValue( i ) - 1 ;
    a4ca:	81 2f       	mov	r24, r17
    a4cc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_Z12modeFixValueh>
    a4d0:	81 50       	subi	r24, 0x01	; 1
    a4d2:	03 c0       	rjmp	.+6      	; 0xa4da <_Z13menuProcIndexh+0x910>
 				}
#endif
        if(i<7)  lcd_outdez(15*FW, y, (int32_t)calibratedStick[index]*100/1024);
    a4d4:	17 30       	cpi	r17, 0x07	; 7
    a4d6:	f9 f0       	breq	.+62     	; 0xa516 <_Z13menuProcIndexh+0x94c>
    a4d8:	81 2f       	mov	r24, r17
    a4da:	e8 2f       	mov	r30, r24
    a4dc:	f0 e0       	ldi	r31, 0x00	; 0
    a4de:	ee 0f       	add	r30, r30
    a4e0:	ff 1f       	adc	r31, r31
    a4e2:	ea 54       	subi	r30, 0x4A	; 74
    a4e4:	f9 4f       	sbci	r31, 0xF9	; 249
    a4e6:	60 81       	ld	r22, Z
    a4e8:	71 81       	ldd	r23, Z+1	; 0x01
    a4ea:	88 27       	eor	r24, r24
    a4ec:	77 fd       	sbrc	r23, 7
    a4ee:	80 95       	com	r24
    a4f0:	98 2f       	mov	r25, r24
    a4f2:	24 e6       	ldi	r18, 0x64	; 100
    a4f4:	30 e0       	ldi	r19, 0x00	; 0
    a4f6:	40 e0       	ldi	r20, 0x00	; 0
    a4f8:	50 e0       	ldi	r21, 0x00	; 0
    a4fa:	0e 94 4c 7e 	call	0xfc98	; 0xfc98 <__mulsi3>
    a4fe:	20 e0       	ldi	r18, 0x00	; 0
    a500:	34 e0       	ldi	r19, 0x04	; 4
    a502:	40 e0       	ldi	r20, 0x00	; 0
    a504:	50 e0       	ldi	r21, 0x00	; 0
    a506:	0e 94 cd 7e 	call	0xfd9a	; 0xfd9a <__divmodsi4>
    a50a:	8a e5       	ldi	r24, 0x5A	; 90
    a50c:	60 2f       	mov	r22, r16
    a50e:	a9 01       	movw	r20, r18
    a510:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
    a514:	05 c0       	rjmp	.+10     	; 0xa520 <_Z13menuProcIndexh+0x956>
        else putsVBat(15*FW,y,blink|PREC1) ;
    a516:	8a e5       	ldi	r24, 0x5A	; 90
    a518:	60 2f       	mov	r22, r16
    a51a:	4f 2d       	mov	r20, r15
    a51c:	0e 94 f2 6d 	call	0xdbe4	; 0xdbe4 <_Z8putsVBathhh>
		{
      TITLEP( PSTR(STR_ANA) ) ;
			IlinesCount = 1 ;

			StickScrollAllowed = 0 ;
	    for(uint8_t i=0; i<8; i++)
    a520:	1f 5f       	subi	r17, 0xFF	; 255
    a522:	08 5f       	subi	r16, 0xF8	; 248
    a524:	18 30       	cpi	r17, 0x08	; 8
    a526:	09 f0       	breq	.+2      	; 0xa52a <_Z13menuProcIndexh+0x960>
    a528:	bb cf       	rjmp	.-138    	; 0xa4a0 <_Z13menuProcIndexh+0x8d6>
 				}
#endif
        if(i<7)  lcd_outdez(15*FW, y, (int32_t)calibratedStick[index]*100/1024);
        else putsVBat(15*FW,y,blink|PREC1) ;
    	}
	    lcd_puts_Pleft(5*FH,PSTR("\022BG")) ;
    a52a:	88 e2       	ldi	r24, 0x28	; 40
    a52c:	6d eb       	ldi	r22, 0xBD	; 189
    a52e:	7a e0       	ldi	r23, 0x0A	; 10
    a530:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
  	  lcd_outdez(20*FW, 6*FH, BandGap );
    a534:	40 91 04 01 	lds	r20, 0x0104
    a538:	50 91 05 01 	lds	r21, 0x0105
    a53c:	88 e7       	ldi	r24, 0x78	; 120
    a53e:	60 e3       	ldi	r22, 0x30	; 48
    a540:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
//	    if(sub==0)
//  	  {
#ifndef NOPOTSCROLL
        scroll_disabled = 1;
    a544:	81 e0       	ldi	r24, 0x01	; 1
    a546:	80 93 e9 06 	sts	0x06E9, r24
#endif        
				if ( s_editMode )
    a54a:	80 91 e5 06 	lds	r24, 0x06E5
    a54e:	88 23       	and	r24, r24
    a550:	09 f4       	brne	.+2      	; 0xa554 <_Z13menuProcIndexh+0x98a>
    a552:	2e c2       	rjmp	.+1116   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
				{
					CHECK_INCDEC_H_GENVAR( g_eeGeneral.vBatCalib, -127, 127);
    a554:	80 91 68 01 	lds	r24, 0x0168
    a558:	61 e8       	ldi	r22, 0x81	; 129
    a55a:	4f e7       	ldi	r20, 0x7F	; 127
    a55c:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    a560:	80 93 68 01 	sts	0x0168, r24
    a564:	25 c2       	rjmp	.+1098   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
		}			 
		break ;

		case M_TRAINER :
		{
      TITLEP( Str_Trainer ) ;
    a566:	85 e2       	ldi	r24, 0x25	; 37
    a568:	9a e0       	ldi	r25, 0x0A	; 10
    a56a:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 6 ;
    a56e:	86 e0       	ldi	r24, 0x06	; 6
    a570:	80 93 c2 08 	sts	0x08C2, r24

//    MENU(STR_TRAINER, menuTabDiag, e_Trainer, 7, {0, 3, 3, 3, 3, 0/*, 0*/});

			uint8_t subSub = g_posHorz ;
    a574:	60 90 0c 07 	lds	r6, 0x070C

			if (SLAVE_MODE)
    a578:	80 91 63 00 	lds	r24, 0x0063
    a57c:	81 ff       	sbrs	r24, 1
    a57e:	06 c0       	rjmp	.+12     	; 0xa58c <_Z13menuProcIndexh+0x9c2>
			{ // i am the slave
		    lcd_puts_Pleft( 3*FH, PSTR(STR_SLAVE));
    a580:	88 e1       	ldi	r24, 0x18	; 24
    a582:	66 eb       	ldi	r22, 0xB6	; 182
    a584:	7a e0       	ldi	r23, 0x0A	; 10
    a586:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    a58a:	12 c2       	rjmp	.+1060   	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
			}
			else
			{
				y = 2*FH;
		    uint8_t attr;
				lcd_puts_Pleft( 1*FH, PSTR(STR_MODE_SRC_SW));
    a58c:	88 e0       	ldi	r24, 0x08	; 8
    a58e:	66 ea       	ldi	r22, 0xA6	; 166
    a590:	7a e0       	ldi	r23, 0x0A	; 10
    a592:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    a596:	40 e1       	ldi	r20, 0x10	; 16
    a598:	c4 2e       	mov	r12, r20
    a59a:	aa 24       	eor	r10, r10
    a59c:	bb 24       	eor	r11, r11

			    for (uint8_t j=0; j<4; j++)
					{
						if ( sub==i )
						{
							Columns  = &ProgColumns[COLUMNS_3] ;
    a59e:	3b e2       	ldi	r19, 0x2B	; 43
    a5a0:	43 2e       	mov	r4, r19
    a5a2:	34 e0       	ldi	r19, 0x04	; 4
    a5a4:	53 2e       	mov	r5, r19
		    uint8_t attr;
				lcd_puts_Pleft( 1*FH, PSTR(STR_MODE_SRC_SW));

				for (uint8_t i=0; i<4; i++)
				{
    			volatile TrainerMix *td = &g_eeGeneral.trainer.mix[i];
    a5a6:	15 01       	movw	r2, r10
    a5a8:	22 0c       	add	r2, r2
    a5aa:	33 1c       	adc	r3, r3
    a5ac:	a2 e7       	ldi	r26, 0x72	; 114
    a5ae:	b1 e0       	ldi	r27, 0x01	; 1
    a5b0:	2a 0e       	add	r2, r26
    a5b2:	3b 1e       	adc	r3, r27
			lcd_char_inverse( 0, highlight*FH, 66, 0 ) ;
		}
	}
}

void menuProcIndex(uint8_t event)
    a5b4:	7a 2c       	mov	r7, r10

				for (uint8_t i=0; i<4; i++)
				{
    			volatile TrainerMix *td = &g_eeGeneral.trainer.mix[i];
					int8_t x ;
			    putsChnRaw(0, y, i+1, 0);
    a5b6:	4a 2d       	mov	r20, r10
    a5b8:	4f 5f       	subi	r20, 0xFF	; 255
    a5ba:	80 e0       	ldi	r24, 0x00	; 0
    a5bc:	6c 2d       	mov	r22, r12
    a5be:	20 e0       	ldi	r18, 0x00	; 0
    a5c0:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
    a5c4:	dd 24       	eor	r13, r13

			    for (uint8_t j=0; j<4; j++)
					{
						if ( sub==i )
    a5c6:	e7 14       	cp	r14, r7
    a5c8:	41 f4       	brne	.+16     	; 0xa5da <_Z13menuProcIndexh+0xa10>
						{
							Columns  = &ProgColumns[COLUMNS_3] ;
    a5ca:	50 92 c1 08 	sts	0x08C1, r5
    a5ce:	40 92 c0 08 	sts	0x08C0, r4
						}
      			attr = ((sub==i && subSub==j) ? blink : 0) ;
    a5d2:	6d 14       	cp	r6, r13
    a5d4:	11 f4       	brne	.+4      	; 0xa5da <_Z13menuProcIndexh+0xa10>
    a5d6:	f9 2c       	mov	r15, r9
    a5d8:	01 c0       	rjmp	.+2      	; 0xa5dc <_Z13menuProcIndexh+0xa12>
    a5da:	ff 24       	eor	r15, r15

						switch(j)
    a5dc:	b1 e0       	ldi	r27, 0x01	; 1
    a5de:	db 16       	cp	r13, r27
    a5e0:	41 f1       	breq	.+80     	; 0xa632 <_Z13menuProcIndexh+0xa68>
    a5e2:	db 16       	cp	r13, r27
    a5e4:	48 f0       	brcs	.+18     	; 0xa5f8 <_Z13menuProcIndexh+0xa2e>
    a5e6:	e2 e0       	ldi	r30, 0x02	; 2
    a5e8:	de 16       	cp	r13, r30
    a5ea:	09 f4       	brne	.+2      	; 0xa5ee <_Z13menuProcIndexh+0xa24>
    a5ec:	45 c0       	rjmp	.+138    	; 0xa678 <_Z13menuProcIndexh+0xaae>
    a5ee:	f3 e0       	ldi	r31, 0x03	; 3
    a5f0:	df 16       	cp	r13, r31
    a5f2:	09 f0       	breq	.+2      	; 0xa5f6 <_Z13menuProcIndexh+0xa2c>
    a5f4:	72 c0       	rjmp	.+228    	; 0xa6da <_Z13menuProcIndexh+0xb10>
    a5f6:	57 c0       	rjmp	.+174    	; 0xa6a6 <_Z13menuProcIndexh+0xadc>
						{
							case 0 :
								x = td->mode ;
    a5f8:	d1 01       	movw	r26, r2
    a5fa:	11 96       	adiw	r26, 0x01	; 1
    a5fc:	1c 91       	ld	r17, X
    a5fe:	12 95       	swap	r17
    a600:	16 95       	lsr	r17
    a602:	16 95       	lsr	r17
    a604:	13 70       	andi	r17, 0x03	; 3
						    lcd_putsAttIdx(4*FW, y, PSTR(STR_OFF_PLUS_EQ),x, attr);
    a606:	88 e1       	ldi	r24, 0x18	; 24
    a608:	6c 2d       	mov	r22, r12
    a60a:	4b e9       	ldi	r20, 0x9B	; 155
    a60c:	5a e0       	ldi	r21, 0x0A	; 10
    a60e:	21 2f       	mov	r18, r17
    a610:	0f 2d       	mov	r16, r15
    a612:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    						if (attr&BLINK)	{ CHECK_INCDEC_H_GENVAR_0( x, 2); td->mode = x ; } //!! bitfield
    a616:	f1 fe       	sbrs	r15, 1
    a618:	60 c0       	rjmp	.+192    	; 0xa6da <_Z13menuProcIndexh+0xb10>
    a61a:	81 2f       	mov	r24, r17
    a61c:	62 e0       	ldi	r22, 0x02	; 2
    a61e:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    a622:	82 95       	swap	r24
    a624:	88 0f       	add	r24, r24
    a626:	88 0f       	add	r24, r24
    a628:	80 7c       	andi	r24, 0xC0	; 192
    a62a:	f1 01       	movw	r30, r2
    a62c:	91 81       	ldd	r25, Z+1	; 0x01
    a62e:	9f 73       	andi	r25, 0x3F	; 63
    a630:	20 c0       	rjmp	.+64     	; 0xa672 <_Z13menuProcIndexh+0xaa8>
							break ;

							case 1 :
								x = td->studWeight ;
    a632:	d1 01       	movw	r26, r2
    a634:	11 96       	adiw	r26, 0x01	; 1
    a636:	1c 91       	ld	r17, X
    a638:	11 0f       	add	r17, r17
    a63a:	11 0f       	add	r17, r17
    a63c:	15 95       	asr	r17
    a63e:	15 95       	asr	r17
  		  				lcd_outdezAtt(11*FW, y, x*13/4, attr);
    a640:	bd e0       	ldi	r27, 0x0D	; 13
    a642:	1b 02       	muls	r17, r27
    a644:	c0 01       	movw	r24, r0
    a646:	11 24       	eor	r1, r1
    a648:	64 e0       	ldi	r22, 0x04	; 4
    a64a:	70 e0       	ldi	r23, 0x00	; 0
    a64c:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    a650:	ab 01       	movw	r20, r22
    a652:	82 e4       	ldi	r24, 0x42	; 66
    a654:	6c 2d       	mov	r22, r12
    a656:	2f 2d       	mov	r18, r15
    a658:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    						if (attr&BLINK) { CHECK_INCDEC_H_GENVAR( x, -31, 31); td->studWeight = x ; } //!! bitfield
    a65c:	f1 fe       	sbrs	r15, 1
    a65e:	3d c0       	rjmp	.+122    	; 0xa6da <_Z13menuProcIndexh+0xb10>
    a660:	81 2f       	mov	r24, r17
    a662:	61 ee       	ldi	r22, 0xE1	; 225
    a664:	4f e1       	ldi	r20, 0x1F	; 31
    a666:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    a66a:	8f 73       	andi	r24, 0x3F	; 63
    a66c:	f1 01       	movw	r30, r2
    a66e:	91 81       	ldd	r25, Z+1	; 0x01
    a670:	90 7c       	andi	r25, 0xC0	; 192
    a672:	98 2b       	or	r25, r24
    a674:	91 83       	std	Z+1, r25	; 0x01
    a676:	31 c0       	rjmp	.+98     	; 0xa6da <_Z13menuProcIndexh+0xb10>
							break ;

							case 2 :
								x = td->srcChn ;
    a678:	d1 01       	movw	r26, r2
    a67a:	1c 91       	ld	r17, X
    a67c:	17 70       	andi	r17, 0x07	; 7
			    			lcd_putsAttIdx(12*FW, y, Str_Chans_Gv, x+16, attr);
    a67e:	21 2f       	mov	r18, r17
    a680:	20 5f       	subi	r18, 0xF0	; 240
    a682:	88 e4       	ldi	r24, 0x48	; 72
    a684:	6c 2d       	mov	r22, r12
    a686:	42 ec       	ldi	r20, 0xC2	; 194
    a688:	52 e0       	ldi	r21, 0x02	; 2
    a68a:	0f 2d       	mov	r16, r15
    a68c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    						if (attr&BLINK) { CHECK_INCDEC_H_GENVAR_0( x, 3); td->srcChn = x ; } //!! bitfield
    a690:	f1 fe       	sbrs	r15, 1
    a692:	23 c0       	rjmp	.+70     	; 0xa6da <_Z13menuProcIndexh+0xb10>
    a694:	81 2f       	mov	r24, r17
    a696:	63 e0       	ldi	r22, 0x03	; 3
    a698:	0e 94 8e 13 	call	0x271c	; 0x271c <_Z15checkIncDec_hg0aa>
    a69c:	87 70       	andi	r24, 0x07	; 7
    a69e:	f1 01       	movw	r30, r2
    a6a0:	90 81       	ld	r25, Z
    a6a2:	98 7f       	andi	r25, 0xF8	; 248
    a6a4:	18 c0       	rjmp	.+48     	; 0xa6d6 <_Z13menuProcIndexh+0xb0c>
							break ;
				
							case 3 :
								x = td->swtch ;
    a6a6:	d1 01       	movw	r26, r2
    a6a8:	1c 91       	ld	r17, X
    a6aa:	15 95       	asr	r17
    a6ac:	15 95       	asr	r17
    a6ae:	15 95       	asr	r17
	  	  				putsDrSwitches(15*FW, y, x, attr);
    a6b0:	8a e5       	ldi	r24, 0x5A	; 90
    a6b2:	6c 2d       	mov	r22, r12
    a6b4:	41 2f       	mov	r20, r17
    a6b6:	2f 2d       	mov	r18, r15
    a6b8:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
    						if (attr&BLINK) { CHECK_INCDEC_GENERALSWITCH( x, -15, 15); td->swtch = x ; }
    a6bc:	f1 fe       	sbrs	r15, 1
    a6be:	0d c0       	rjmp	.+26     	; 0xa6da <_Z13menuProcIndexh+0xb10>
    a6c0:	81 2f       	mov	r24, r17
    a6c2:	61 ef       	ldi	r22, 0xF1	; 241
    a6c4:	4f e0       	ldi	r20, 0x0F	; 15
    a6c6:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    a6ca:	88 0f       	add	r24, r24
    a6cc:	88 0f       	add	r24, r24
    a6ce:	88 0f       	add	r24, r24
    a6d0:	f1 01       	movw	r30, r2
    a6d2:	90 81       	ld	r25, Z
    a6d4:	97 70       	andi	r25, 0x07	; 7
    a6d6:	98 2b       	or	r25, r24
    a6d8:	90 83       	st	Z, r25
				{
    			volatile TrainerMix *td = &g_eeGeneral.trainer.mix[i];
					int8_t x ;
			    putsChnRaw(0, y, i+1, 0);

			    for (uint8_t j=0; j<4; j++)
    a6da:	d3 94       	inc	r13
    a6dc:	f4 e0       	ldi	r31, 0x04	; 4
    a6de:	df 16       	cp	r13, r31
    a6e0:	09 f0       	breq	.+2      	; 0xa6e4 <_Z13menuProcIndexh+0xb1a>
    a6e2:	71 cf       	rjmp	.-286    	; 0xa5c6 <_Z13menuProcIndexh+0x9fc>
    a6e4:	08 94       	sec
    a6e6:	a1 1c       	adc	r10, r1
    a6e8:	b1 1c       	adc	r11, r1
			{
				y = 2*FH;
		    uint8_t attr;
				lcd_puts_Pleft( 1*FH, PSTR(STR_MODE_SRC_SW));

				for (uint8_t i=0; i<4; i++)
    a6ea:	28 e2       	ldi	r18, 0x28	; 40
    a6ec:	c2 16       	cp	r12, r18
    a6ee:	19 f0       	breq	.+6      	; 0xa6f6 <_Z13menuProcIndexh+0xb2c>
	  	  				putsDrSwitches(15*FW, y, x, attr);
    						if (attr&BLINK) { CHECK_INCDEC_GENERALSWITCH( x, -15, 15); td->swtch = x ; }
							break ;
						}
					}
   				y += FH ;
    a6f0:	88 e0       	ldi	r24, 0x08	; 8
    a6f2:	c8 0e       	add	r12, r24
    a6f4:	58 cf       	rjmp	.-336    	; 0xa5a6 <_Z13menuProcIndexh+0x9dc>
				}

				attr = PREC1 ;
				if(sub==4) { attr = PREC1 | blink ; CHECK_INCDEC_H_GENVAR( g_eeGeneral.PPM_Multiplier, -10, 40);}
    a6f6:	94 e0       	ldi	r25, 0x04	; 4
    a6f8:	e9 16       	cp	r14, r25
    a6fa:	11 f0       	breq	.+4      	; 0xa700 <_Z13menuProcIndexh+0xb36>
    a6fc:	00 e2       	ldi	r16, 0x20	; 32
    a6fe:	0a c0       	rjmp	.+20     	; 0xa714 <_Z13menuProcIndexh+0xb4a>
    a700:	09 2d       	mov	r16, r9
    a702:	00 62       	ori	r16, 0x20	; 32
    a704:	80 91 82 01 	lds	r24, 0x0182
    a708:	66 ef       	ldi	r22, 0xF6	; 246
    a70a:	48 e2       	ldi	r20, 0x28	; 40
    a70c:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z14checkIncDec_hgaaa>
    a710:	80 93 82 01 	sts	0x0182, r24
				lcd_xlabel_decimal( 6*FH, PSTR(STR_MULTIPLIER), g_eeGeneral.PPM_Multiplier+10, attr, 13*FW ) ;
    a714:	40 91 82 01 	lds	r20, 0x0182
    a718:	55 27       	eor	r21, r21
    a71a:	47 fd       	sbrc	r20, 7
    a71c:	50 95       	com	r21
    a71e:	46 5f       	subi	r20, 0xF6	; 246
    a720:	5f 4f       	sbci	r21, 0xFF	; 255
    a722:	80 e3       	ldi	r24, 0x30	; 48
    a724:	60 e9       	ldi	r22, 0x90	; 144
    a726:	7a e0       	ldi	r23, 0x0A	; 10
    a728:	20 2f       	mov	r18, r16
    a72a:	0e e4       	ldi	r16, 0x4E	; 78
    a72c:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
    a730:	cc 24       	eor	r12, r12
    a732:	dd 24       	eor	r13, r13
    a734:	10 e3       	ldi	r17, 0x30	; 48
//				lcd_outdezAtt(13*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, attr);

				for (uint8_t i=0; i<4; i++)
				{
    			uint8_t x = (i*8+16)*FW/2;
    			lcd_outdezAtt(x , 7*FH, (g_ppmIns[i]-g_eeGeneral.trainer.calib[i])*2, PREC1);
    a736:	f6 01       	movw	r30, r12
    a738:	ec 5d       	subi	r30, 0xDC	; 220
    a73a:	f9 4f       	sbci	r31, 0xF9	; 249
    a73c:	d6 01       	movw	r26, r12
    a73e:	a8 5c       	subi	r26, 0xC8	; 200
    a740:	be 4f       	sbci	r27, 0xFE	; 254
    a742:	40 81       	ld	r20, Z
    a744:	51 81       	ldd	r21, Z+1	; 0x01
    a746:	d2 96       	adiw	r26, 0x32	; 50
    a748:	8d 91       	ld	r24, X+
    a74a:	9c 91       	ld	r25, X
    a74c:	d3 97       	sbiw	r26, 0x33	; 51
    a74e:	48 1b       	sub	r20, r24
    a750:	59 0b       	sbc	r21, r25
    a752:	44 0f       	add	r20, r20
    a754:	55 1f       	adc	r21, r21
    a756:	81 2f       	mov	r24, r17
    a758:	68 e3       	ldi	r22, 0x38	; 56
    a75a:	20 e2       	ldi	r18, 0x20	; 32
    a75c:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    a760:	a2 e0       	ldi	r26, 0x02	; 2
    a762:	b0 e0       	ldi	r27, 0x00	; 0
    a764:	ca 0e       	add	r12, r26
    a766:	db 1e       	adc	r13, r27
    a768:	18 5e       	subi	r17, 0xE8	; 232
				if(sub==4) { attr = PREC1 | blink ; CHECK_INCDEC_H_GENVAR( g_eeGeneral.PPM_Multiplier, -10, 40);}
				lcd_xlabel_decimal( 6*FH, PSTR(STR_MULTIPLIER), g_eeGeneral.PPM_Multiplier+10, attr, 13*FW ) ;
//				lcd_puts_Pleft( y, PSTR(STR_MULTIPLIER));
//				lcd_outdezAtt(13*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, attr);

				for (uint8_t i=0; i<4; i++)
    a76a:	10 39       	cpi	r17, 0x90	; 144
    a76c:	21 f7       	brne	.-56     	; 0xa736 <_Z13menuProcIndexh+0xb6c>
				{
    			uint8_t x = (i*8+16)*FW/2;
    			lcd_outdezAtt(x , 7*FH, (g_ppmIns[i]-g_eeGeneral.trainer.calib[i])*2, PREC1);
				}
				attr = 0 ;
				if (sub==5)
    a76e:	b5 e0       	ldi	r27, 0x05	; 5
    a770:	eb 16       	cp	r14, r27
    a772:	11 f0       	breq	.+4      	; 0xa778 <_Z13menuProcIndexh+0xbae>
    a774:	20 e0       	ldi	r18, 0x00	; 0
    a776:	13 c0       	rjmp	.+38     	; 0xa79e <_Z13menuProcIndexh+0xbd4>
				{
    			if (event==EVT_KEY_FIRST(KEY_MENU))
    a778:	e0 e6       	ldi	r30, 0x60	; 96
    a77a:	8e 16       	cp	r8, r30
    a77c:	79 f4       	brne	.+30     	; 0xa79c <_Z13menuProcIndexh+0xbd2>
					{
        		memcpy(g_eeGeneral.trainer.calib, g_ppmIns, sizeof(g_eeGeneral.trainer.calib));
    a77e:	aa e6       	ldi	r26, 0x6A	; 106
    a780:	b1 e0       	ldi	r27, 0x01	; 1
    a782:	e4 e2       	ldi	r30, 0x24	; 36
    a784:	f6 e0       	ldi	r31, 0x06	; 6
    a786:	88 e0       	ldi	r24, 0x08	; 8
    a788:	01 90       	ld	r0, Z+
    a78a:	0d 92       	st	X+, r0
    a78c:	81 50       	subi	r24, 0x01	; 1
    a78e:	e1 f7       	brne	.-8      	; 0xa788 <_Z13menuProcIndexh+0xbbe>
		        STORE_GENERALVARS;     //eeWriteGeneral();
    a790:	81 e0       	ldi	r24, 0x01	; 1
    a792:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
        		audioDefevent(AU_MENUS);
    a796:	87 e1       	ldi	r24, 0x17	; 23
    a798:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    a79c:	21 e0       	ldi	r18, 0x01	; 1
			    }
					attr = INVERS ;
				}
				lcd_putsAtt(0*FW, 7*FH, PSTR(STR_CAL), attr ) ;
    a79e:	80 e0       	ldi	r24, 0x00	; 0
    a7a0:	68 e3       	ldi	r22, 0x38	; 56
    a7a2:	4c e8       	ldi	r20, 0x8C	; 140
    a7a4:	5a e0       	ldi	r21, 0x0A	; 10
    a7a6:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
    a7aa:	02 c1       	rjmp	.+516    	; 0xa9b0 <_Z13menuProcIndexh+0xde6>
			}
		}			 
		break ;

		case M_HARDWARE :
      TITLEP( Str_Hardware ) ;
    a7ac:	8d e2       	ldi	r24, 0x2D	; 45
    a7ae:	9a e0       	ldi	r25, 0x0A	; 10
    a7b0:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
			IlinesCount = 3 ;
#else
#ifdef FRSKY
			IlinesCount = 2 ;
#else
			IlinesCount = 1 ;
    a7b4:	81 e0       	ldi	r24, 0x01	; 1
    a7b6:	80 93 c2 08 	sts	0x08C2, r24
#endif			
#endif			
 	    uint8_t b ;
 	    b = g_eeGeneral.disableBG ;
 	    g_eeGeneral.disableBG = offonMenuItem_g( b, y, PSTR(STR_BANDGAP), sub==subN ) ;
    a7ba:	80 91 7e 01 	lds	r24, 0x017E
    a7be:	82 95       	swap	r24
    a7c0:	86 95       	lsr	r24
    a7c2:	86 95       	lsr	r24
    a7c4:	81 70       	andi	r24, 0x01	; 1
    a7c6:	20 e0       	ldi	r18, 0x00	; 0
    a7c8:	ee 20       	and	r14, r14
    a7ca:	09 f4       	brne	.+2      	; 0xa7ce <_Z13menuProcIndexh+0xc04>
    a7cc:	21 e0       	ldi	r18, 0x01	; 1
    a7ce:	68 e0       	ldi	r22, 0x08	; 8
    a7d0:	44 e8       	ldi	r20, 0x84	; 132
    a7d2:	5a e0       	ldi	r21, 0x0A	; 10
    a7d4:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZL15offonMenuItem_ghhPKch>
    a7d8:	81 70       	andi	r24, 0x01	; 1
    a7da:	82 95       	swap	r24
    a7dc:	88 0f       	add	r24, r24
    a7de:	88 0f       	add	r24, r24
    a7e0:	80 7c       	andi	r24, 0xC0	; 192
    a7e2:	90 91 7e 01 	lds	r25, 0x017E
    a7e6:	9f 7b       	andi	r25, 0xBF	; 191
    a7e8:	a1 cb       	rjmp	.-2238   	; 0x9f2c <_Z13menuProcIndexh+0x362>
 #endif
		break ;

		case M_CALIB :
		{
      TITLEP( Str_Calibration ) ;
    a7ea:	86 e3       	ldi	r24, 0x36	; 54
    a7ec:	9a e0       	ldi	r25, 0x0A	; 10
    a7ee:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
//    SIMPLE_MENU(STR_CALIBRATIO, menuTabDiag, e_Calib, 2);
			IlinesCount = 1 ;
    a7f2:	81 e0       	ldi	r24, 0x01	; 1
    a7f4:	80 93 c2 08 	sts	0x08C2, r24

	    mstate.m_posVert = 0; // make sure we don't scroll or move cursor here
    a7f8:	10 92 cb 08 	sts	0x08CB, r1
    a7fc:	83 e5       	ldi	r24, 0x53	; 83
    a7fe:	e8 2e       	mov	r14, r24
    a800:	86 e0       	ldi	r24, 0x06	; 6
    a802:	f8 2e       	mov	r15, r24
    a804:	67 01       	movw	r12, r14
    a806:	10 e0       	ldi	r17, 0x00	; 0

	    for(uint8_t i=0; i<7; i++)
			{ //get low and high vals for sticks and trims
        int16_t vt = anaIn(i);
    a808:	81 2f       	mov	r24, r17
    a80a:	0e 94 33 10 	call	0x2066	; 0x2066 <_Z5anaInh>
    a80e:	bc 01       	movw	r22, r24
        Xmem.Cal_data.loVals[i] = min(vt,Xmem.Cal_data.loVals[i]);
    a810:	d6 01       	movw	r26, r12
    a812:	1e 96       	adiw	r26, 0x0e	; 14
    a814:	4d 91       	ld	r20, X+
    a816:	5c 91       	ld	r21, X
    a818:	1f 97       	sbiw	r26, 0x0f	; 15
    a81a:	9c 01       	movw	r18, r24
    a81c:	48 17       	cp	r20, r24
    a81e:	59 07       	cpc	r21, r25
    a820:	0c f4       	brge	.+2      	; 0xa824 <_Z13menuProcIndexh+0xc5a>
    a822:	9a 01       	movw	r18, r20
    a824:	f6 01       	movw	r30, r12
    a826:	37 87       	std	Z+15, r19	; 0x0f
    a828:	26 87       	std	Z+14, r18	; 0x0e
        Xmem.Cal_data.hiVals[i] = max(vt,Xmem.Cal_data.hiVals[i]);
    a82a:	44 8d       	ldd	r20, Z+28	; 0x1c
    a82c:	55 8d       	ldd	r21, Z+29	; 0x1d
    a82e:	9b 01       	movw	r18, r22
    a830:	64 17       	cp	r22, r20
    a832:	75 07       	cpc	r23, r21
    a834:	0c f4       	brge	.+2      	; 0xa838 <_Z13menuProcIndexh+0xc6e>
    a836:	9a 01       	movw	r18, r20
    a838:	d6 01       	movw	r26, r12
    a83a:	5d 96       	adiw	r26, 0x1d	; 29
    a83c:	3c 93       	st	X, r19
    a83e:	2e 93       	st	-X, r18
    a840:	5c 97       	sbiw	r26, 0x1c	; 28
        if(i>=4) Xmem.Cal_data.midVals[i] = (Xmem.Cal_data.loVals[i] + Xmem.Cal_data.hiVals[i])/2;
    a842:	14 30       	cpi	r17, 0x04	; 4
    a844:	68 f0       	brcs	.+26     	; 0xa860 <_Z13menuProcIndexh+0xc96>
    a846:	1e 96       	adiw	r26, 0x0e	; 14
    a848:	8d 91       	ld	r24, X+
    a84a:	9c 91       	ld	r25, X
    a84c:	1f 97       	sbiw	r26, 0x0f	; 15
    a84e:	82 0f       	add	r24, r18
    a850:	93 1f       	adc	r25, r19
    a852:	62 e0       	ldi	r22, 0x02	; 2
    a854:	70 e0       	ldi	r23, 0x00	; 0
    a856:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    a85a:	f6 01       	movw	r30, r12
    a85c:	71 83       	std	Z+1, r23	; 0x01
    a85e:	60 83       	st	Z, r22
//    SIMPLE_MENU(STR_CALIBRATIO, menuTabDiag, e_Calib, 2);
			IlinesCount = 1 ;

	    mstate.m_posVert = 0; // make sure we don't scroll or move cursor here

	    for(uint8_t i=0; i<7; i++)
    a860:	1f 5f       	subi	r17, 0xFF	; 255
    a862:	82 e0       	ldi	r24, 0x02	; 2
    a864:	90 e0       	ldi	r25, 0x00	; 0
    a866:	c8 0e       	add	r12, r24
    a868:	d9 1e       	adc	r13, r25
    a86a:	17 30       	cpi	r17, 0x07	; 7
    a86c:	69 f6       	brne	.-102    	; 0xa808 <_Z13menuProcIndexh+0xc3e>
        Xmem.Cal_data.hiVals[i] = max(vt,Xmem.Cal_data.hiVals[i]);
        if(i>=4) Xmem.Cal_data.midVals[i] = (Xmem.Cal_data.loVals[i] + Xmem.Cal_data.hiVals[i])/2;
  	  }

#ifndef NOPOTSCROLL
	    scroll_disabled = Xmem.Cal_data.idxState; // make sure we don't scroll while calibrating
    a86e:	80 91 7d 06 	lds	r24, 0x067D
    a872:	80 93 e9 06 	sts	0x06E9, r24
#endif

	    switch(event)
    a876:	90 e2       	ldi	r25, 0x20	; 32
    a878:	89 16       	cp	r8, r25
    a87a:	21 f0       	breq	.+8      	; 0xa884 <_Z13menuProcIndexh+0xcba>
    a87c:	af eb       	ldi	r26, 0xBF	; 191
    a87e:	8a 16       	cp	r8, r26
    a880:	71 f4       	brne	.+28     	; 0xa89e <_Z13menuProcIndexh+0xcd4>
    a882:	0b c0       	rjmp	.+22     	; 0xa89a <_Z13menuProcIndexh+0xcd0>
    		case EVT_ENTRY:
        	Xmem.Cal_data.idxState = 0;
        break;

		    case EVT_KEY_BREAK(KEY_MENU):
    	    Xmem.Cal_data.idxState++;
    a884:	8f 5f       	subi	r24, 0xFF	; 255
    a886:	80 93 7d 06 	sts	0x067D, r24
	        if(Xmem.Cal_data.idxState==3)
    a88a:	83 30       	cpi	r24, 0x03	; 3
    a88c:	41 f4       	brne	.+16     	; 0xa89e <_Z13menuProcIndexh+0xcd4>
  	      {
            audioDefevent(AU_MENUS);
    a88e:	87 e1       	ldi	r24, 0x17	; 23
    a890:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
            STORE_GENERALVARS;     //eeWriteGeneral();
    a894:	81 e0       	ldi	r24, 0x01	; 1
    a896:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
            Xmem.Cal_data.idxState = 0;
    a89a:	10 92 7d 06 	sts	0x067D, r1
    	    }
     	  break;
	    }

	    switch(Xmem.Cal_data.idxState)
    a89e:	80 91 7d 06 	lds	r24, 0x067D
    a8a2:	81 30       	cpi	r24, 0x01	; 1
    a8a4:	61 f0       	breq	.+24     	; 0xa8be <_Z13menuProcIndexh+0xcf4>
    a8a6:	81 30       	cpi	r24, 0x01	; 1
    a8a8:	20 f0       	brcs	.+8      	; 0xa8b2 <_Z13menuProcIndexh+0xce8>
    a8aa:	82 30       	cpi	r24, 0x02	; 2
    a8ac:	09 f0       	breq	.+2      	; 0xa8b0 <_Z13menuProcIndexh+0xce6>
    a8ae:	7e c0       	rjmp	.+252    	; 0xa9ac <_Z13menuProcIndexh+0xde2>
    a8b0:	22 c0       	rjmp	.+68     	; 0xa8f6 <_Z13menuProcIndexh+0xd2c>
  	  {
		    case 0:
        //START CALIBRATION
        //[MENU]
//        lcd_puts_Pleft( 2*FH, PSTR("\002START CALIBRATION") ) ;//, 17, sub>0 ? INVERS : 0);
	        lcd_puts_Pleft( 3*FH, PSTR(STR_MENU_TO_START) ) ;//, 15, sub>0 ? INVERS : 0);
    a8b2:	88 e1       	ldi	r24, 0x18	; 24
    a8b4:	63 e7       	ldi	r22, 0x73	; 115
    a8b6:	7a e0       	ldi	r23, 0x0A	; 10
    a8b8:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    a8bc:	77 c0       	rjmp	.+238    	; 0xa9ac <_Z13menuProcIndexh+0xde2>
        break;
    a8be:	10 e0       	ldi	r17, 0x00	; 0
        //SET MIDPOINT
        //[MENU]

      	  for(uint8_t i=0; i<7; i++)
	        {
            Xmem.Cal_data.loVals[i] =  15000;
    a8c0:	08 e9       	ldi	r16, 0x98	; 152
    a8c2:	c0 2e       	mov	r12, r16
    a8c4:	0a e3       	ldi	r16, 0x3A	; 58
    a8c6:	d0 2e       	mov	r13, r16
            Xmem.Cal_data.hiVals[i] = -15000;
    a8c8:	b8 e6       	ldi	r27, 0x68	; 104
    a8ca:	ab 2e       	mov	r10, r27
    a8cc:	b5 ec       	ldi	r27, 0xC5	; 197
    a8ce:	bb 2e       	mov	r11, r27
        //SET MIDPOINT
        //[MENU]

      	  for(uint8_t i=0; i<7; i++)
	        {
            Xmem.Cal_data.loVals[i] =  15000;
    a8d0:	f7 01       	movw	r30, r14
    a8d2:	d7 86       	std	Z+15, r13	; 0x0f
    a8d4:	c6 86       	std	Z+14, r12	; 0x0e
            Xmem.Cal_data.hiVals[i] = -15000;
    a8d6:	b5 8e       	std	Z+29, r11	; 0x1d
    a8d8:	a4 8e       	std	Z+28, r10	; 0x1c
            Xmem.Cal_data.midVals[i] = anaIn(i);
    a8da:	81 2f       	mov	r24, r17
    a8dc:	0e 94 33 10 	call	0x2066	; 0x2066 <_Z5anaInh>
    a8e0:	d7 01       	movw	r26, r14
    a8e2:	8d 93       	st	X+, r24
    a8e4:	9d 93       	st	X+, r25
    a8e6:	7d 01       	movw	r14, r26

  		  case 1: //get mid
        //SET MIDPOINT
        //[MENU]

      	  for(uint8_t i=0; i<7; i++)
    a8e8:	1f 5f       	subi	r17, 0xFF	; 255
    a8ea:	17 30       	cpi	r17, 0x07	; 7
    a8ec:	89 f7       	brne	.-30     	; 0xa8d0 <_Z13menuProcIndexh+0xd06>
	        {
            Xmem.Cal_data.loVals[i] =  15000;
            Xmem.Cal_data.hiVals[i] = -15000;
            Xmem.Cal_data.midVals[i] = anaIn(i);
  	      }
    	    lcd_puts_Pleft( 2*FH, PSTR(STR_SET_MIDPOINT) ) ;//, 12, sub>0 ? INVERS : 0);
    a8ee:	80 e1       	ldi	r24, 0x10	; 16
    a8f0:	65 e6       	ldi	r22, 0x65	; 101
    a8f2:	7a e0       	ldi	r23, 0x0A	; 10
    a8f4:	53 c0       	rjmp	.+166    	; 0xa99c <_Z13menuProcIndexh+0xdd2>
        break;

		    case 2:
        //MOVE STICKS/POTS
        //[MENU]
					StickScrollAllowed = 0 ;
    a8f6:	10 92 06 06 	sts	0x0606, r1
    a8fa:	09 e3       	ldi	r16, 0x39	; 57
    a8fc:	11 e0       	ldi	r17, 0x01	; 1

      	  for(uint8_t i=0; i<7; i++)
					{
            if(abs(Xmem.Cal_data.loVals[i]-Xmem.Cal_data.hiVals[i])>50)
    a8fe:	f7 01       	movw	r30, r14
    a900:	26 85       	ldd	r18, Z+14	; 0x0e
    a902:	37 85       	ldd	r19, Z+15	; 0x0f
    a904:	84 8d       	ldd	r24, Z+28	; 0x1c
    a906:	95 8d       	ldd	r25, Z+29	; 0x1d
    a908:	28 1b       	sub	r18, r24
    a90a:	39 0b       	sbc	r19, r25
    a90c:	37 ff       	sbrs	r19, 7
    a90e:	03 c0       	rjmp	.+6      	; 0xa916 <_Z13menuProcIndexh+0xd4c>
    a910:	30 95       	com	r19
    a912:	21 95       	neg	r18
    a914:	3f 4f       	sbci	r19, 0xFF	; 255
    a916:	23 33       	cpi	r18, 0x33	; 51
    a918:	31 05       	cpc	r19, r1
    a91a:	5c f1       	brlt	.+86     	; 0xa972 <_Z13menuProcIndexh+0xda8>
						{
              g_eeGeneral.calibMid[i]  = Xmem.Cal_data.midVals[i];
    a91c:	d7 01       	movw	r26, r14
    a91e:	ed 91       	ld	r30, X+
    a920:	fc 91       	ld	r31, X
    a922:	d8 01       	movw	r26, r16
    a924:	ed 93       	st	X+, r30
    a926:	fc 93       	st	X, r31
              int16_t v = Xmem.Cal_data.midVals[i] - Xmem.Cal_data.loVals[i];
    a928:	d7 01       	movw	r26, r14
    a92a:	1e 96       	adiw	r26, 0x0e	; 14
    a92c:	8d 91       	ld	r24, X+
    a92e:	9c 91       	ld	r25, X
    a930:	1f 97       	sbiw	r26, 0x0f	; 15
    a932:	9f 01       	movw	r18, r30
    a934:	28 1b       	sub	r18, r24
    a936:	39 0b       	sbc	r19, r25
              g_eeGeneral.calibSpanNeg[i] = v - v/64;
    a938:	c9 01       	movw	r24, r18
    a93a:	60 e4       	ldi	r22, 0x40	; 64
    a93c:	70 e0       	ldi	r23, 0x00	; 0
    a93e:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    a942:	26 1b       	sub	r18, r22
    a944:	37 0b       	sbc	r19, r23
    a946:	d8 01       	movw	r26, r16
    a948:	1f 96       	adiw	r26, 0x0f	; 15
    a94a:	3c 93       	st	X, r19
    a94c:	2e 93       	st	-X, r18
    a94e:	1e 97       	sbiw	r26, 0x0e	; 14
              v = Xmem.Cal_data.hiVals[i] - Xmem.Cal_data.midVals[i];
    a950:	d7 01       	movw	r26, r14
    a952:	5c 96       	adiw	r26, 0x1c	; 28
    a954:	2d 91       	ld	r18, X+
    a956:	3c 91       	ld	r19, X
    a958:	5d 97       	sbiw	r26, 0x1d	; 29
    a95a:	2e 1b       	sub	r18, r30
    a95c:	3f 0b       	sbc	r19, r31
              g_eeGeneral.calibSpanPos[i] = v - v/64;
    a95e:	c9 01       	movw	r24, r18
    a960:	60 e4       	ldi	r22, 0x40	; 64
    a962:	70 e0       	ldi	r23, 0x00	; 0
    a964:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    a968:	26 1b       	sub	r18, r22
    a96a:	37 0b       	sbc	r19, r23
    a96c:	f8 01       	movw	r30, r16
    a96e:	35 8f       	std	Z+29, r19	; 0x1d
    a970:	24 8f       	std	Z+28, r18	; 0x1c
    a972:	82 e0       	ldi	r24, 0x02	; 2
    a974:	90 e0       	ldi	r25, 0x00	; 0
    a976:	e8 0e       	add	r14, r24
    a978:	f9 1e       	adc	r15, r25
    a97a:	0e 5f       	subi	r16, 0xFE	; 254
    a97c:	1f 4f       	sbci	r17, 0xFF	; 255
		    case 2:
        //MOVE STICKS/POTS
        //[MENU]
					StickScrollAllowed = 0 ;

      	  for(uint8_t i=0; i<7; i++)
    a97e:	91 e6       	ldi	r25, 0x61	; 97
    a980:	e9 16       	cp	r14, r25
    a982:	96 e0       	ldi	r25, 0x06	; 6
    a984:	f9 06       	cpc	r15, r25
    a986:	09 f0       	breq	.+2      	; 0xa98a <_Z13menuProcIndexh+0xdc0>
    a988:	ba cf       	rjmp	.-140    	; 0xa8fe <_Z13menuProcIndexh+0xd34>
              g_eeGeneral.calibSpanNeg[i] = v - v/64;
              v = Xmem.Cal_data.hiVals[i] - Xmem.Cal_data.midVals[i];
              g_eeGeneral.calibSpanPos[i] = v - v/64;
            }
					}
        	g_eeGeneral.chkSum = evalChkSum() ;
    a98a:	0e 94 70 61 	call	0xc2e0	; 0xc2e0 <_Z10evalChkSumv>
    a98e:	90 93 64 01 	sts	0x0164, r25
    a992:	80 93 63 01 	sts	0x0163, r24
	        lcd_puts_Pleft( 2*FH, PSTR(STR_MOVE_STICKS) ) ; //, 16, sub>0 ? INVERS : 0);
    a996:	80 e1       	ldi	r24, 0x10	; 16
    a998:	63 e5       	ldi	r22, 0x53	; 83
    a99a:	7a e0       	ldi	r23, 0x0A	; 10
    a99c:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
  	      lcd_puts_P(3*FW, 3*FH, menuWhenDone ) ; //, 16, sub>0 ? BLINK : 0);
    a9a0:	82 e1       	ldi	r24, 0x12	; 18
    a9a2:	68 e1       	ldi	r22, 0x18	; 24
    a9a4:	42 e4       	ldi	r20, 0x42	; 66
    a9a6:	5a e0       	ldi	r21, 0x0A	; 10
    a9a8:	0e 94 af 6a 	call	0xd55e	; 0xd55e <_Z10lcd_puts_PhhPKc>
        break;
	    }

    	doMainScreenGrphics();
    a9ac:	0e 94 4a 23 	call	0x4694	; 0x4694 <_Z19doMainScreenGrphicsv>
		}
		break ;

	}
  asm("") ;		// Forces execution to here, prevents compiler filling in 'pops'
}
    a9b0:	0f 90       	pop	r0
    a9b2:	cf 91       	pop	r28
    a9b4:	df 91       	pop	r29
    a9b6:	1f 91       	pop	r17
    a9b8:	0f 91       	pop	r16
    a9ba:	ff 90       	pop	r15
    a9bc:	ef 90       	pop	r14
    a9be:	df 90       	pop	r13
    a9c0:	cf 90       	pop	r12
    a9c2:	bf 90       	pop	r11
    a9c4:	af 90       	pop	r10
    a9c6:	9f 90       	pop	r9
    a9c8:	8f 90       	pop	r8
    a9ca:	7f 90       	pop	r7
    a9cc:	6f 90       	pop	r6
    a9ce:	5f 90       	pop	r5
    a9d0:	4f 90       	pop	r4
    a9d2:	3f 90       	pop	r3
    a9d4:	2f 90       	pop	r2
    a9d6:	08 95       	ret

0000a9d8 <_Z12menuPhaseOneh>:
//	lcd_outhex4( 64, 4*FH, v ) ;

	asm("") ;
}

void menuPhaseOne(uint8_t event)
    a9d8:	9f 92       	push	r9
    a9da:	af 92       	push	r10
    a9dc:	bf 92       	push	r11
    a9de:	cf 92       	push	r12
    a9e0:	df 92       	push	r13
    a9e2:	ef 92       	push	r14
    a9e4:	ff 92       	push	r15
    a9e6:	0f 93       	push	r16
    a9e8:	1f 93       	push	r17
    a9ea:	cf 93       	push	r28
    a9ec:	df 93       	push	r29
    a9ee:	18 2f       	mov	r17, r24
{
  PhaseData *phase = &g_model.phaseData[s_currIdx] ;
    a9f0:	c0 90 c8 08 	lds	r12, 0x08C8
  SUBMENU( STR_FL_MODE, 4, { 0, 3, 0 /*, 0*/} ) ;
    a9f4:	8a e9       	ldi	r24, 0x9A	; 154
    a9f6:	9d e0       	ldi	r25, 0x0D	; 13
    a9f8:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
    a9fc:	86 ed       	ldi	r24, 0xD6	; 214
    a9fe:	98 e0       	ldi	r25, 0x08	; 8
    aa00:	61 2f       	mov	r22, r17
    aa02:	42 ea       	ldi	r20, 0xA2	; 162
    aa04:	5d e0       	ldi	r21, 0x0D	; 13
    aa06:	22 e0       	ldi	r18, 0x02	; 2
    aa08:	03 e0       	ldi	r16, 0x03	; 3
    aa0a:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <_ZN7MState25checkEhPKhhh>
  lcd_putc( 8*FW, 0, '1'+s_currIdx ) ;
    aa0e:	40 91 c8 08 	lds	r20, 0x08C8
    aa12:	4f 5c       	subi	r20, 0xCF	; 207
    aa14:	80 e3       	ldi	r24, 0x30	; 48
    aa16:	60 e0       	ldi	r22, 0x00	; 0
    aa18:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>

  uint8_t sub = mstate2.m_posVert;
    aa1c:	90 90 d6 08 	lds	r9, 0x08D6
    aa20:	bb 24       	eor	r11, r11
    aa22:	08 e0       	ldi	r16, 0x08	; 8
    aa24:	a0 2e       	mov	r10, r16
//  int8_t editMode = s_editMode;
	
  for (uint8_t i = 0 ; i < 4 ; i += 1 )
	{
    uint8_t y = (i+1) * FH;
		uint8_t attr = (sub==i ? InverseBlink : 0);
    aa26:	9b 14       	cp	r9, r11
    aa28:	11 f0       	breq	.+4      	; 0xaa2e <_Z12menuPhaseOneh+0x56>
    aa2a:	ee 24       	eor	r14, r14
    aa2c:	02 c0       	rjmp	.+4      	; 0xaa32 <_Z12menuPhaseOneh+0x5a>
    aa2e:	e0 90 eb 06 	lds	r14, 0x06EB
    
		switch(i)
    aa32:	21 e0       	ldi	r18, 0x01	; 1
    aa34:	b2 16       	cp	r11, r18
    aa36:	b9 f1       	breq	.+110    	; 0xaaa6 <_Z12menuPhaseOneh+0xce>
    aa38:	b2 16       	cp	r11, r18
    aa3a:	48 f0       	brcs	.+18     	; 0xaa4e <_Z12menuPhaseOneh+0x76>
    aa3c:	82 e0       	ldi	r24, 0x02	; 2
    aa3e:	b8 16       	cp	r11, r24
    aa40:	09 f4       	brne	.+2      	; 0xaa44 <_Z12menuPhaseOneh+0x6c>
    aa42:	88 c0       	rjmp	.+272    	; 0xab54 <_Z12menuPhaseOneh+0x17c>
    aa44:	23 e0       	ldi	r18, 0x03	; 3
    aa46:	b2 16       	cp	r11, r18
    aa48:	09 f0       	breq	.+2      	; 0xaa4c <_Z12menuPhaseOneh+0x74>
    aa4a:	11 c1       	rjmp	.+546    	; 0xac6e <_Z12menuPhaseOneh+0x296>
    aa4c:	c6 c0       	rjmp	.+396    	; 0xabda <_Z12menuPhaseOneh+0x202>
		{
      case 0 : // switch
//				lcd_puts_Pleft( y, PSTR(STR_SWITCH) ) ;
				lcd_puts_Pleft( y, PSTR(STR_SWITCH_TRIMS"\037""Fade In""\037""Fade Out") ) ;
    aa4e:	8a 2d       	mov	r24, r10
    aa50:	6c e7       	ldi	r22, 0x7C	; 124
    aa52:	7d e0       	ldi	r23, 0x0D	; 13
    aa54:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
				phase->swtch = edit_dr_switch( 8*FW, y, phase->swtch, attr, attr ? EDIT_DR_SWITCH_EDIT : 0 ) ;
    aa58:	8c 2d       	mov	r24, r12
    aa5a:	90 e0       	ldi	r25, 0x00	; 0
    aa5c:	fc 01       	movw	r30, r24
    aa5e:	13 e0       	ldi	r17, 0x03	; 3
    aa60:	ee 0f       	add	r30, r30
    aa62:	ff 1f       	adc	r31, r31
    aa64:	1a 95       	dec	r17
    aa66:	e1 f7       	brne	.-8      	; 0xaa60 <_Z12menuPhaseOneh+0x88>
    aa68:	88 0f       	add	r24, r24
    aa6a:	99 1f       	adc	r25, r25
    aa6c:	e8 0f       	add	r30, r24
    aa6e:	f9 1f       	adc	r31, r25
    aa70:	e9 58       	subi	r30, 0x89	; 137
    aa72:	fb 4f       	sbci	r31, 0xFB	; 251
    aa74:	00 e0       	ldi	r16, 0x00	; 0
    aa76:	e1 10       	cpse	r14, r1
    aa78:	01 e0       	ldi	r16, 0x01	; 1
    aa7a:	80 e3       	ldi	r24, 0x30	; 48
    aa7c:	6a 2d       	mov	r22, r10
    aa7e:	40 81       	ld	r20, Z
    aa80:	2e 2d       	mov	r18, r14
    aa82:	0e 94 3b 3c 	call	0x7876	; 0x7876 <_Z14edit_dr_switchhhahh>
    aa86:	2c 2d       	mov	r18, r12
    aa88:	30 e0       	ldi	r19, 0x00	; 0
    aa8a:	f9 01       	movw	r30, r18
    aa8c:	a3 e0       	ldi	r26, 0x03	; 3
    aa8e:	ee 0f       	add	r30, r30
    aa90:	ff 1f       	adc	r31, r31
    aa92:	aa 95       	dec	r26
    aa94:	e1 f7       	brne	.-8      	; 0xaa8e <_Z12menuPhaseOneh+0xb6>
    aa96:	22 0f       	add	r18, r18
    aa98:	33 1f       	adc	r19, r19
    aa9a:	e2 0f       	add	r30, r18
    aa9c:	f3 1f       	adc	r31, r19
    aa9e:	e9 58       	subi	r30, 0x89	; 137
    aaa0:	fb 4f       	sbci	r31, 0xFB	; 251
    aaa2:	80 83       	st	Z, r24
    aaa4:	e4 c0       	rjmp	.+456    	; 0xac6e <_Z12menuPhaseOneh+0x296>
			break;
    aaa6:	8c 2d       	mov	r24, r12
    aaa8:	90 e0       	ldi	r25, 0x00	; 0
    aaaa:	ec 01       	movw	r28, r24
    aaac:	63 e0       	ldi	r22, 0x03	; 3
    aaae:	cc 0f       	add	r28, r28
    aab0:	dd 1f       	adc	r29, r29
    aab2:	6a 95       	dec	r22
    aab4:	e1 f7       	brne	.-8      	; 0xaaae <_Z12menuPhaseOneh+0xd6>
    aab6:	88 0f       	add	r24, r24
    aab8:	99 1f       	adc	r25, r25
    aaba:	c8 0f       	add	r28, r24
    aabc:	d9 1f       	adc	r29, r25
    aabe:	c1 59       	subi	r28, 0x91	; 145
    aac0:	db 4f       	sbci	r29, 0xFB	; 251
    aac2:	ff 24       	eor	r15, r15
    aac4:	4c e3       	ldi	r20, 0x3C	; 60
    aac6:	d4 2e       	mov	r13, r20

      case 1 : // trims
//				lcd_puts_Pleft( y, PSTR(STR_TRIMS) ) ;
      	for ( uint8_t t = 0 ; t<NUM_STICKS ; t += 1 )
				{
      	  putsTrimMode( (10+t)*FW, y, s_currIdx+1, t, (g_posHorz==t) ? attr : 0 ) ;
    aac8:	40 91 c8 08 	lds	r20, 0x08C8
    aacc:	80 91 0c 07 	lds	r24, 0x070C
    aad0:	8f 15       	cp	r24, r15
    aad2:	11 f0       	breq	.+4      	; 0xaad8 <_Z12menuPhaseOneh+0x100>
    aad4:	00 e0       	ldi	r16, 0x00	; 0
    aad6:	01 c0       	rjmp	.+2      	; 0xaada <_Z12menuPhaseOneh+0x102>
    aad8:	0e 2d       	mov	r16, r14
    aada:	4f 5f       	subi	r20, 0xFF	; 255
    aadc:	8d 2d       	mov	r24, r13
    aade:	6a 2d       	mov	r22, r10
    aae0:	2f 2d       	mov	r18, r15
    aae2:	0e 94 4e 3a 	call	0x749c	; 0x749c <_Z12putsTrimModehhhhh>
	#ifndef NOPOTSCROLL
      	  if (attr && g_posHorz==t && ( s_editing ) )
    aae6:	ee 20       	and	r14, r14
    aae8:	61 f1       	breq	.+88     	; 0xab42 <_Z12menuPhaseOneh+0x16a>
    aaea:	80 91 0c 07 	lds	r24, 0x070C
    aaee:	8f 15       	cp	r24, r15
    aaf0:	41 f5       	brne	.+80     	; 0xab42 <_Z12menuPhaseOneh+0x16a>
    aaf2:	80 91 e6 06 	lds	r24, 0x06E6
    aaf6:	88 23       	and	r24, r24
    aaf8:	21 f1       	breq	.+72     	; 0xab42 <_Z12menuPhaseOneh+0x16a>
	#else
      	  if (attr && g_posHorz==t && ( s_editMode ) )
	#endif
					{
  			    int16_t v = phase->trim[t] + ( TRIM_EXTENDED_MAX + 1 ) ;
    aafa:	08 81       	ld	r16, Y
    aafc:	19 81       	ldd	r17, Y+1	; 0x01
    aafe:	0b 50       	subi	r16, 0x0B	; 11
    ab00:	1e 4f       	sbci	r17, 0xFE	; 254
            lcd_outhex4( 90, 6*FH, v ) ;
    ab02:	8a e5       	ldi	r24, 0x5A	; 90
    ab04:	60 e3       	ldi	r22, 0x30	; 48
    ab06:	a8 01       	movw	r20, r16
    ab08:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z11lcd_outhex4hhj>
      	    if (v < TRIM_EXTENDED_MAX)
    ab0c:	81 e0       	ldi	r24, 0x01	; 1
    ab0e:	04 3f       	cpi	r16, 0xF4	; 244
    ab10:	18 07       	cpc	r17, r24
    ab12:	14 f4       	brge	.+4      	; 0xab18 <_Z12menuPhaseOneh+0x140>
    ab14:	04 ef       	ldi	r16, 0xF4	; 244
    ab16:	11 e0       	ldi	r17, 0x01	; 1
						{
							v = TRIM_EXTENDED_MAX;
						}
						int16_t u = v ;
      	    v = checkIncDec16( u, TRIM_EXTENDED_MAX, TRIM_EXTENDED_MAX+MAX_MODES, EE_MODEL ) ;
    ab18:	c8 01       	movw	r24, r16
    ab1a:	64 ef       	ldi	r22, 0xF4	; 244
    ab1c:	71 e0       	ldi	r23, 0x01	; 1
    ab1e:	48 ef       	ldi	r20, 0xF8	; 248
    ab20:	51 e0       	ldi	r21, 0x01	; 1
    ab22:	22 e0       	ldi	r18, 0x02	; 2
    ab24:	0e 94 b2 12 	call	0x2564	; 0x2564 <_Z13checkIncDec16iiih>

						if (v != u)
    ab28:	80 17       	cp	r24, r16
    ab2a:	91 07       	cpc	r25, r17
    ab2c:	51 f0       	breq	.+20     	; 0xab42 <_Z12menuPhaseOneh+0x16a>
						{
      	      if (v == TRIM_EXTENDED_MAX) v = 0 ;
    ab2e:	21 e0       	ldi	r18, 0x01	; 1
    ab30:	84 3f       	cpi	r24, 0xF4	; 244
    ab32:	92 07       	cpc	r25, r18
    ab34:	11 f4       	brne	.+4      	; 0xab3a <_Z12menuPhaseOneh+0x162>
    ab36:	80 e0       	ldi	r24, 0x00	; 0
    ab38:	90 e0       	ldi	r25, 0x00	; 0
							phase->trim[t] = v - ( TRIM_EXTENDED_MAX + 1 ) ;
    ab3a:	85 5f       	subi	r24, 0xF5	; 245
    ab3c:	91 40       	sbci	r25, 0x01	; 1
    ab3e:	99 83       	std	Y+1, r25	; 0x01
    ab40:	88 83       	st	Y, r24
				phase->swtch = edit_dr_switch( 8*FW, y, phase->swtch, attr, attr ? EDIT_DR_SWITCH_EDIT : 0 ) ;
			break;

      case 1 : // trims
//				lcd_puts_Pleft( y, PSTR(STR_TRIMS) ) ;
      	for ( uint8_t t = 0 ; t<NUM_STICKS ; t += 1 )
    ab42:	f3 94       	inc	r15
    ab44:	86 e0       	ldi	r24, 0x06	; 6
    ab46:	d8 0e       	add	r13, r24
    ab48:	22 96       	adiw	r28, 0x02	; 2
    ab4a:	24 e0       	ldi	r18, 0x04	; 4
    ab4c:	f2 16       	cp	r15, r18
    ab4e:	09 f0       	breq	.+2      	; 0xab52 <_Z12menuPhaseOneh+0x17a>
    ab50:	bb cf       	rjmp	.-138    	; 0xaac8 <_Z12menuPhaseOneh+0xf0>
    ab52:	8d c0       	rjmp	.+282    	; 0xac6e <_Z12menuPhaseOneh+0x296>
      	  }
      	}
      break;
      
			case 2 : // fadeIn
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( phase->fadeIn, 15 ) ;
    ab54:	ee 20       	and	r14, r14
    ab56:	31 f1       	breq	.+76     	; 0xaba4 <_Z12menuPhaseOneh+0x1cc>
    ab58:	8c 2d       	mov	r24, r12
    ab5a:	90 e0       	ldi	r25, 0x00	; 0
    ab5c:	fc 01       	movw	r30, r24
    ab5e:	33 e0       	ldi	r19, 0x03	; 3
    ab60:	ee 0f       	add	r30, r30
    ab62:	ff 1f       	adc	r31, r31
    ab64:	3a 95       	dec	r19
    ab66:	e1 f7       	brne	.-8      	; 0xab60 <_Z12menuPhaseOneh+0x188>
    ab68:	88 0f       	add	r24, r24
    ab6a:	99 1f       	adc	r25, r25
    ab6c:	e8 0f       	add	r30, r24
    ab6e:	f9 1f       	adc	r31, r25
    ab70:	e8 58       	subi	r30, 0x88	; 136
    ab72:	fb 4f       	sbci	r31, 0xFB	; 251
    ab74:	80 81       	ld	r24, Z
    ab76:	8f 70       	andi	r24, 0x0F	; 15
    ab78:	6f e0       	ldi	r22, 0x0F	; 15
    ab7a:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    ab7e:	2c 2d       	mov	r18, r12
    ab80:	30 e0       	ldi	r19, 0x00	; 0
    ab82:	f9 01       	movw	r30, r18
    ab84:	03 e0       	ldi	r16, 0x03	; 3
    ab86:	ee 0f       	add	r30, r30
    ab88:	ff 1f       	adc	r31, r31
    ab8a:	0a 95       	dec	r16
    ab8c:	e1 f7       	brne	.-8      	; 0xab86 <_Z12menuPhaseOneh+0x1ae>
    ab8e:	22 0f       	add	r18, r18
    ab90:	33 1f       	adc	r19, r19
    ab92:	e2 0f       	add	r30, r18
    ab94:	f3 1f       	adc	r31, r19
    ab96:	e8 58       	subi	r30, 0x88	; 136
    ab98:	fb 4f       	sbci	r31, 0xFB	; 251
    ab9a:	8f 70       	andi	r24, 0x0F	; 15
    ab9c:	90 81       	ld	r25, Z
    ab9e:	90 7f       	andi	r25, 0xF0	; 240
    aba0:	98 2b       	or	r25, r24
    aba2:	90 83       	st	Z, r25
//				lcd_label_decimal( y, PSTR("Fade In"), phase->fadeIn * 5, attr | PREC1 ) ;
			  lcd_outdezAtt( 17*FW, y, phase->fadeIn * 5, attr | PREC1 ) ;
    aba4:	8c 2d       	mov	r24, r12
    aba6:	90 e0       	ldi	r25, 0x00	; 0
    aba8:	fc 01       	movw	r30, r24
    abaa:	b3 e0       	ldi	r27, 0x03	; 3
    abac:	ee 0f       	add	r30, r30
    abae:	ff 1f       	adc	r31, r31
    abb0:	ba 95       	dec	r27
    abb2:	e1 f7       	brne	.-8      	; 0xabac <_Z12menuPhaseOneh+0x1d4>
    abb4:	88 0f       	add	r24, r24
    abb6:	99 1f       	adc	r25, r25
    abb8:	e8 0f       	add	r30, r24
    abba:	f9 1f       	adc	r31, r25
    abbc:	e8 58       	subi	r30, 0x88	; 136
    abbe:	fb 4f       	sbci	r31, 0xFB	; 251
    abc0:	80 81       	ld	r24, Z
    abc2:	8f 70       	andi	r24, 0x0F	; 15
    abc4:	90 e0       	ldi	r25, 0x00	; 0
    abc6:	ac 01       	movw	r20, r24
    abc8:	44 0f       	add	r20, r20
    abca:	55 1f       	adc	r21, r21
    abcc:	44 0f       	add	r20, r20
    abce:	55 1f       	adc	r21, r21
    abd0:	48 0f       	add	r20, r24
    abd2:	59 1f       	adc	r21, r25
    abd4:	80 e2       	ldi	r24, 0x20	; 32
    abd6:	e8 2a       	or	r14, r24
    abd8:	45 c0       	rjmp	.+138    	; 0xac64 <_Z12menuPhaseOneh+0x28c>
			
			break ;
      
			case 3 : // fadeOut
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( phase->fadeOut, 15 ) ;
    abda:	ee 20       	and	r14, r14
    abdc:	41 f1       	breq	.+80     	; 0xac2e <_Z12menuPhaseOneh+0x256>
    abde:	8c 2d       	mov	r24, r12
    abe0:	90 e0       	ldi	r25, 0x00	; 0
    abe2:	fc 01       	movw	r30, r24
    abe4:	73 e0       	ldi	r23, 0x03	; 3
    abe6:	ee 0f       	add	r30, r30
    abe8:	ff 1f       	adc	r31, r31
    abea:	7a 95       	dec	r23
    abec:	e1 f7       	brne	.-8      	; 0xabe6 <_Z12menuPhaseOneh+0x20e>
    abee:	88 0f       	add	r24, r24
    abf0:	99 1f       	adc	r25, r25
    abf2:	e8 0f       	add	r30, r24
    abf4:	f9 1f       	adc	r31, r25
    abf6:	e8 58       	subi	r30, 0x88	; 136
    abf8:	fb 4f       	sbci	r31, 0xFB	; 251
    abfa:	80 81       	ld	r24, Z
    abfc:	82 95       	swap	r24
    abfe:	8f 70       	andi	r24, 0x0F	; 15
    ac00:	6f e0       	ldi	r22, 0x0F	; 15
    ac02:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    ac06:	2c 2d       	mov	r18, r12
    ac08:	30 e0       	ldi	r19, 0x00	; 0
    ac0a:	f9 01       	movw	r30, r18
    ac0c:	53 e0       	ldi	r21, 0x03	; 3
    ac0e:	ee 0f       	add	r30, r30
    ac10:	ff 1f       	adc	r31, r31
    ac12:	5a 95       	dec	r21
    ac14:	e1 f7       	brne	.-8      	; 0xac0e <_Z12menuPhaseOneh+0x236>
    ac16:	22 0f       	add	r18, r18
    ac18:	33 1f       	adc	r19, r19
    ac1a:	e2 0f       	add	r30, r18
    ac1c:	f3 1f       	adc	r31, r19
    ac1e:	e8 58       	subi	r30, 0x88	; 136
    ac20:	fb 4f       	sbci	r31, 0xFB	; 251
    ac22:	82 95       	swap	r24
    ac24:	80 7f       	andi	r24, 0xF0	; 240
    ac26:	90 81       	ld	r25, Z
    ac28:	9f 70       	andi	r25, 0x0F	; 15
    ac2a:	98 2b       	or	r25, r24
    ac2c:	90 83       	st	Z, r25
//				lcd_label_decimal( y, PSTR("Fade Out"), phase->fadeOut * 5, attr | PREC1 ) ;
			  lcd_outdezAtt( 17*FW, y, phase->fadeOut * 5, attr | PREC1 ) ;
    ac2e:	8c 2d       	mov	r24, r12
    ac30:	90 e0       	ldi	r25, 0x00	; 0
    ac32:	fc 01       	movw	r30, r24
    ac34:	33 e0       	ldi	r19, 0x03	; 3
    ac36:	ee 0f       	add	r30, r30
    ac38:	ff 1f       	adc	r31, r31
    ac3a:	3a 95       	dec	r19
    ac3c:	e1 f7       	brne	.-8      	; 0xac36 <_Z12menuPhaseOneh+0x25e>
    ac3e:	88 0f       	add	r24, r24
    ac40:	99 1f       	adc	r25, r25
    ac42:	e8 0f       	add	r30, r24
    ac44:	f9 1f       	adc	r31, r25
    ac46:	e8 58       	subi	r30, 0x88	; 136
    ac48:	fb 4f       	sbci	r31, 0xFB	; 251
    ac4a:	80 81       	ld	r24, Z
    ac4c:	82 95       	swap	r24
    ac4e:	8f 70       	andi	r24, 0x0F	; 15
    ac50:	90 e0       	ldi	r25, 0x00	; 0
    ac52:	ac 01       	movw	r20, r24
    ac54:	44 0f       	add	r20, r20
    ac56:	55 1f       	adc	r21, r21
    ac58:	44 0f       	add	r20, r20
    ac5a:	55 1f       	adc	r21, r21
    ac5c:	48 0f       	add	r20, r24
    ac5e:	59 1f       	adc	r21, r25
    ac60:	20 e2       	ldi	r18, 0x20	; 32
    ac62:	e2 2a       	or	r14, r18
    ac64:	86 e6       	ldi	r24, 0x66	; 102
    ac66:	6a 2d       	mov	r22, r10
    ac68:	2e 2d       	mov	r18, r14
    ac6a:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
  lcd_putc( 8*FW, 0, '1'+s_currIdx ) ;

  uint8_t sub = mstate2.m_posVert;
//  int8_t editMode = s_editMode;
	
  for (uint8_t i = 0 ; i < 4 ; i += 1 )
    ac6e:	b3 94       	inc	r11
    ac70:	88 e0       	ldi	r24, 0x08	; 8
    ac72:	a8 0e       	add	r10, r24
    ac74:	24 e0       	ldi	r18, 0x04	; 4
    ac76:	b2 16       	cp	r11, r18
    ac78:	09 f0       	breq	.+2      	; 0xac7c <_Z12menuPhaseOneh+0x2a4>
    ac7a:	d5 ce       	rjmp	.-598    	; 0xaa26 <_Z12menuPhaseOneh+0x4e>
//				lcd_label_decimal( y, PSTR("Fade Out"), phase->fadeOut * 5, attr | PREC1 ) ;
			  lcd_outdezAtt( 17*FW, y, phase->fadeOut * 5, attr | PREC1 ) ;
			break ;
	  }
	}
}
    ac7c:	df 91       	pop	r29
    ac7e:	cf 91       	pop	r28
    ac80:	1f 91       	pop	r17
    ac82:	0f 91       	pop	r16
    ac84:	ff 90       	pop	r15
    ac86:	ef 90       	pop	r14
    ac88:	df 90       	pop	r13
    ac8a:	cf 90       	pop	r12
    ac8c:	bf 90       	pop	r11
    ac8e:	af 90       	pop	r10
    ac90:	9f 90       	pop	r9
    ac92:	08 95       	ret

0000ac94 <_Z15menuProcGlobalsh>:

}
#endif


void menuProcGlobals(uint8_t event)
    ac94:	af 92       	push	r10
    ac96:	bf 92       	push	r11
    ac98:	cf 92       	push	r12
    ac9a:	df 92       	push	r13
    ac9c:	ef 92       	push	r14
    ac9e:	ff 92       	push	r15
    aca0:	0f 93       	push	r16
    aca2:	1f 93       	push	r17
    aca4:	cf 93       	push	r28
    aca6:	df 93       	push	r29
    aca8:	18 2f       	mov	r17, r24
{
#ifdef MODEL_INDEX
	TITLEP(Str_Globals) ;
    acaa:	82 ee       	ldi	r24, 0xE2	; 226
    acac:	96 e0       	ldi	r25, 0x06	; 6
    acae:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
#else
	static const prog_uint8_t APM mstate_tab[] = {1,1,1,1,1,1,1,0} ;
#endif
//	if (SubMenuFromIndex)
//	{
		mstate2.check(event, mstate_tab, DIM(mstate_tab)-1, MAX_GVARS + 1 + NUM_SCALERS-1-1) ;
    acb2:	8f ed       	ldi	r24, 0xDF	; 223
    acb4:	98 e0       	ldi	r25, 0x08	; 8
    acb6:	61 2f       	mov	r22, r17
    acb8:	42 e0       	ldi	r20, 0x02	; 2
    acba:	50 e1       	ldi	r21, 0x10	; 16
    acbc:	27 e0       	ldi	r18, 0x07	; 7
    acbe:	0a e0       	ldi	r16, 0x0A	; 10
    acc0:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <_ZN7MState25checkEhPKhhh>
#else  
	MENU(STR_GLOBAL_VARS, menuTabModel, e_Globals, MAX_GVARS + 1, {0, 1} ) ;
#endif
#endif

	uint8_t subN = mstate2.m_posVert ;
    acc4:	d0 90 df 08 	lds	r13, 0x08DF
	uint8_t subSub = g_posHorz;
    acc8:	a0 90 0c 07 	lds	r10, 0x070C
	uint8_t y = FH ;

#ifdef SCALERS
  switch (event)
    accc:	1e 32       	cpi	r17, 0x2E	; 46
    acce:	11 f0       	breq	.+4      	; 0xacd4 <_Z15menuProcGlobalsh+0x40>
    acd0:	10 36       	cpi	r17, 0x60	; 96
    acd2:	89 f4       	brne	.+34     	; 0xacf6 <_Z15menuProcGlobalsh+0x62>
	{
    case EVT_KEY_FIRST(KEY_MENU) :
    case EVT_KEY_BREAK(BTN_RE) :
			if ( subN >= 7 ) //&& sub <= MAX_MODES )
    acd4:	86 e0       	ldi	r24, 0x06	; 6
    acd6:	8d 15       	cp	r24, r13
    acd8:	90 f4       	brcc	.+36     	; 0xacfe <_Z15menuProcGlobalsh+0x6a>
			{
        s_currIdx = subN - 7 ;
    acda:	99 ef       	ldi	r25, 0xF9	; 249
    acdc:	d9 0e       	add	r13, r25
    acde:	d0 92 c8 08 	sts	0x08C8, r13
    ace2:	e7 e0       	ldi	r30, 0x07	; 7
    ace4:	de 0e       	add	r13, r30
//				RotaryState = ROTARY_MENU_UD ;
        killEvents(event);
    ace6:	81 2f       	mov	r24, r17
    ace8:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        pushMenu(menuScaleOne) ;
    acec:	8a e8       	ldi	r24, 0x8A	; 138
    acee:	9e e5       	ldi	r25, 0x5E	; 94
    acf0:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
    acf4:	5b c0       	rjmp	.+182    	; 0xadac <_Z15menuProcGlobalsh+0x118>
    	}
		break;
  }
 if ( subN < 7 )
    acf6:	f6 e0       	ldi	r31, 0x06	; 6
    acf8:	fd 15       	cp	r31, r13
    acfa:	08 f4       	brcc	.+2      	; 0xacfe <_Z15menuProcGlobalsh+0x6a>
    acfc:	57 c0       	rjmp	.+174    	; 0xadac <_Z15menuProcGlobalsh+0x118>
    acfe:	18 e0       	ldi	r17, 0x08	; 8
    ad00:	ee 24       	eor	r14, r14
    ad02:	ff 24       	eor	r15, r15
 {
#endif
	for (uint8_t i=0; i<MAX_GVARS; i++ )
	{
    lcd_puts_Pleft(y, Str_GV ) ;
    ad04:	81 2f       	mov	r24, r17
    ad06:	6d ec       	ldi	r22, 0xCD	; 205
    ad08:	7f e0       	ldi	r23, 0x0F	; 15
    ad0a:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>

}
#endif


void menuProcGlobals(uint8_t event)
    ad0e:	be 2c       	mov	r11, r14
 {
#endif
	for (uint8_t i=0; i<MAX_GVARS; i++ )
	{
    lcd_puts_Pleft(y, Str_GV ) ;
		lcd_putc( 2*FW, y, i+'1') ;
    ad10:	4e 2d       	mov	r20, r14
    ad12:	4f 5c       	subi	r20, 0xCF	; 207
    ad14:	8c e0       	ldi	r24, 0x0C	; 12
    ad16:	61 2f       	mov	r22, r17
    ad18:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
		GvarData *pgv = &g_model.gvars[i] ;
    ad1c:	e7 01       	movw	r28, r14
    ad1e:	cc 0f       	add	r28, r28
    ad20:	dd 1f       	adc	r29, r29
    ad22:	cf 59       	subi	r28, 0x9F	; 159
    ad24:	db 4f       	sbci	r29, 0xFB	; 251
		FORCE_INDIRECT(pgv) ;
    ad26:	cc 24       	eor	r12, r12
			}
		}
#else
		for(uint8_t j=0; j<2;j++)
		{
      uint8_t attr = ((subN==i && subSub==j) ? InverseBlink : 0);
    ad28:	db 14       	cp	r13, r11
    ad2a:	29 f4       	brne	.+10     	; 0xad36 <_Z15menuProcGlobalsh+0xa2>
    ad2c:	ac 14       	cp	r10, r12
    ad2e:	19 f4       	brne	.+6      	; 0xad36 <_Z15menuProcGlobalsh+0xa2>
    ad30:	00 91 eb 06 	lds	r16, 0x06EB
    ad34:	01 c0       	rjmp	.+2      	; 0xad38 <_Z15menuProcGlobalsh+0xa4>
    ad36:	00 e0       	ldi	r16, 0x00	; 0
			uint8_t active = attr ;	// (attr && s_editing) ;
			if ( s_editMode == 0 )
    ad38:	80 91 e5 06 	lds	r24, 0x06E5
    ad3c:	81 11       	cpse	r24, r1
    ad3e:	80 2f       	mov	r24, r16
			{
				active = 0 ;
			}
      if ( j == 0 )
    ad40:	cc 20       	and	r12, r12
    ad42:	b9 f4       	brne	.+46     	; 0xad72 <_Z15menuProcGlobalsh+0xde>
			{
  			if(active) CHECK_INCDEC_H_MODELVAR_0( pgv->gvsource, 28 ) ;
    ad44:	88 23       	and	r24, r24
    ad46:	29 f0       	breq	.+10     	; 0xad52 <_Z15menuProcGlobalsh+0xbe>
    ad48:	89 81       	ldd	r24, Y+1	; 0x01
    ad4a:	6c e1       	ldi	r22, 0x1C	; 28
    ad4c:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    ad50:	89 83       	std	Y+1, r24	; 0x01
				if ( pgv->gvsource < 13 )
    ad52:	29 81       	ldd	r18, Y+1	; 0x01
    ad54:	2d 30       	cpi	r18, 0x0D	; 13
    ad56:	28 f4       	brcc	.+10     	; 0xad62 <_Z15menuProcGlobalsh+0xce>
				{
					lcd_putsAttIdx( 10*FW, y, PSTR(STR_GV_SOURCE), pgv->gvsource, attr ) ;
    ad58:	8c e3       	ldi	r24, 0x3C	; 60
    ad5a:	61 2f       	mov	r22, r17
    ad5c:	49 ed       	ldi	r20, 0xD9	; 217
    ad5e:	5f e0       	ldi	r21, 0x0F	; 15
    ad60:	05 c0       	rjmp	.+10     	; 0xad6c <_Z15menuProcGlobalsh+0xd8>
				}
				else
				{
					lcd_putsAttIdx( 10*FW, y, Str_Chans_Gv, pgv->gvsource+3, attr ) ;
    ad62:	2d 5f       	subi	r18, 0xFD	; 253
    ad64:	8c e3       	ldi	r24, 0x3C	; 60
    ad66:	61 2f       	mov	r22, r17
    ad68:	42 ec       	ldi	r20, 0xC2	; 194
    ad6a:	52 e0       	ldi	r21, 0x02	; 2
    ad6c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    ad70:	11 c0       	rjmp	.+34     	; 0xad94 <_Z15menuProcGlobalsh+0x100>
//					put_curve( 12*FW, y, pgv->gvsource-6, attr ) ;
				}
			}
			else
			{
  			if(active) CHECK_INCDEC_H_MODELVAR( pgv->gvar, -125, 125 ) ;
    ad72:	88 23       	and	r24, r24
    ad74:	31 f0       	breq	.+12     	; 0xad82 <_Z15menuProcGlobalsh+0xee>
    ad76:	88 81       	ld	r24, Y
    ad78:	63 e8       	ldi	r22, 0x83	; 131
    ad7a:	4d e7       	ldi	r20, 0x7D	; 125
    ad7c:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    ad80:	88 83       	st	Y, r24
				lcd_outdezAtt( 18*FW, y, pgv->gvar, attr) ;
    ad82:	48 81       	ld	r20, Y
    ad84:	55 27       	eor	r21, r21
    ad86:	47 fd       	sbrc	r20, 7
    ad88:	50 95       	com	r21
    ad8a:	8c e6       	ldi	r24, 0x6C	; 108
    ad8c:	61 2f       	mov	r22, r17
    ad8e:	20 2f       	mov	r18, r16
    ad90:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
  			if(active) CHECK_INCDEC_H_MODELVAR( pgv->gvar, -125, 125 ) ;
				lcd_outdezAtt( 18*FW, y, pgv->gvar, attr) ;
			}
		}
#else
		for(uint8_t j=0; j<2;j++)
    ad94:	c3 94       	inc	r12
    ad96:	82 e0       	ldi	r24, 0x02	; 2
    ad98:	c8 16       	cp	r12, r24
    ad9a:	31 f6       	brne	.-116    	; 0xad28 <_Z15menuProcGlobalsh+0x94>
    ad9c:	08 94       	sec
    ad9e:	e1 1c       	adc	r14, r1
    ada0:	f1 1c       	adc	r15, r1
		break;
  }
 if ( subN < 7 )
 {
#endif
	for (uint8_t i=0; i<MAX_GVARS; i++ )
    ada2:	18 33       	cpi	r17, 0x38	; 56
    ada4:	09 f4       	brne	.+2      	; 0xada8 <_Z15menuProcGlobalsh+0x114>
    ada6:	55 c0       	rjmp	.+170    	; 0xae52 <_Z15menuProcGlobalsh+0x1be>
  			if(active) CHECK_INCDEC_H_MODELVAR( pgv->gvar, -125, 125 ) ;
				lcd_outdezAtt( 18*FW, y, pgv->gvar, attr) ;
			}
		}
#endif
		y += FH ;
    ada8:	18 5f       	subi	r17, 0xF8	; 248
    adaa:	ac cf       	rjmp	.-168    	; 0xad04 <_Z15menuProcGlobalsh+0x70>
    adac:	c0 e0       	ldi	r28, 0x00	; 0
    adae:	d0 e0       	ldi	r29, 0x00	; 0
    adb0:	28 e0       	ldi	r18, 0x08	; 8
    adb2:	f2 2e       	mov	r15, r18
	for (uint8_t i=0; i<NUM_SCALERS; i++ )
	{
  	lcd_puts_Pleft( (i+1)*FH, PSTR("SC\011+\015*\22/") ) ;
  	lcd_putc( 2*FW, (i+1)*FH, i+'1' ) ;
		ScaleData *pscaler ;
		pscaler = &g_model.Scalers[i] ;
    adb4:	9b e0       	ldi	r25, 0x0B	; 11
    adb6:	a9 2e       	mov	r10, r25
    adb8:	b1 2c       	mov	r11, r1
 else
 {
	uint8_t sub = subN - 7 ;
	for (uint8_t i=0; i<NUM_SCALERS; i++ )
	{
  	lcd_puts_Pleft( (i+1)*FH, PSTR("SC\011+\015*\22/") ) ;
    adba:	8f 2d       	mov	r24, r15
    adbc:	60 ed       	ldi	r22, 0xD0	; 208
    adbe:	7f e0       	ldi	r23, 0x0F	; 15
    adc0:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
  	lcd_putc( 2*FW, (i+1)*FH, i+'1' ) ;
    adc4:	fe 01       	movw	r30, r28
    adc6:	ef 5c       	subi	r30, 0xCF	; 207
    adc8:	4e 2f       	mov	r20, r30
    adca:	8c e0       	ldi	r24, 0x0C	; 12
    adcc:	6f 2d       	mov	r22, r15
    adce:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
		ScaleData *pscaler ;
		pscaler = &g_model.Scalers[i] ;
    add2:	ca 9d       	mul	r28, r10
    add4:	80 01       	movw	r16, r0
    add6:	cb 9d       	mul	r28, r11
    add8:	10 0d       	add	r17, r0
    adda:	da 9d       	mul	r29, r10
    addc:	10 0d       	add	r17, r0
    adde:	11 24       	eor	r1, r1
    ade0:	03 51       	subi	r16, 0x13	; 19
    ade2:	1b 4f       	sbci	r17, 0xFB	; 251
		FORCE_INDIRECT(pscaler) ;
    ade4:	f8 01       	movw	r30, r16
    ade6:	8f 01       	movw	r16, r30

		putsChnRaw( 4*FW, (i+1)*FH, pscaler->source, 0 ) ;
    ade8:	88 e1       	ldi	r24, 0x18	; 24
    adea:	6f 2d       	mov	r22, r15
    adec:	40 81       	ld	r20, Z
    adee:	20 e0       	ldi	r18, 0x00	; 0
    adf0:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
		lcd_outdez( 12*FW+3, (i+1)*FH, pscaler->offset ) ;
    adf4:	f8 01       	movw	r30, r16
    adf6:	41 81       	ldd	r20, Z+1	; 0x01
    adf8:	52 81       	ldd	r21, Z+2	; 0x02
    adfa:	8b e4       	ldi	r24, 0x4B	; 75
    adfc:	6f 2d       	mov	r22, r15
    adfe:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
		lcd_outdez( 16*FW, (i+1)*FH, pscaler->mult+1 ) ;
    ae02:	f8 01       	movw	r30, r16
    ae04:	43 81       	ldd	r20, Z+3	; 0x03
    ae06:	50 e0       	ldi	r21, 0x00	; 0
    ae08:	4f 5f       	subi	r20, 0xFF	; 255
    ae0a:	5f 4f       	sbci	r21, 0xFF	; 255
    ae0c:	80 e6       	ldi	r24, 0x60	; 96
    ae0e:	6f 2d       	mov	r22, r15
    ae10:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
		lcd_outdez( 21*FW, (i+1)*FH, pscaler->div+1 ) ;
    ae14:	f8 01       	movw	r30, r16
    ae16:	44 81       	ldd	r20, Z+4	; 0x04
    ae18:	50 e0       	ldi	r21, 0x00	; 0
    ae1a:	4f 5f       	subi	r20, 0xFF	; 255
    ae1c:	5f 4f       	sbci	r21, 0xFF	; 255
    ae1e:	8e e7       	ldi	r24, 0x7E	; 126
    ae20:	6f 2d       	mov	r22, r15
    ae22:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
    ae26:	21 96       	adiw	r28, 0x01	; 1
    ae28:	f8 e0       	ldi	r31, 0x08	; 8
    ae2a:	ff 0e       	add	r15, r31
#ifdef SCALERS
 }
 else
 {
	uint8_t sub = subN - 7 ;
	for (uint8_t i=0; i<NUM_SCALERS; i++ )
    ae2c:	88 e2       	ldi	r24, 0x28	; 40
    ae2e:	f8 16       	cp	r15, r24
    ae30:	21 f6       	brne	.-120    	; 0xadba <_Z15menuProcGlobalsh+0x126>
		putsChnRaw( 4*FW, (i+1)*FH, pscaler->source, 0 ) ;
		lcd_outdez( 12*FW+3, (i+1)*FH, pscaler->offset ) ;
		lcd_outdez( 16*FW, (i+1)*FH, pscaler->mult+1 ) ;
		lcd_outdez( 21*FW, (i+1)*FH, pscaler->div+1 ) ;
	}
	lcd_char_inverse( 0, (sub+1)*FH, 126, 0 ) ;
    ae32:	99 ef       	ldi	r25, 0xF9	; 249
    ae34:	d9 0e       	add	r13, r25
    ae36:	6d 2d       	mov	r22, r13
    ae38:	70 e0       	ldi	r23, 0x00	; 0
    ae3a:	6f 5f       	subi	r22, 0xFF	; 255
    ae3c:	7f 4f       	sbci	r23, 0xFF	; 255
    ae3e:	83 e0       	ldi	r24, 0x03	; 3
    ae40:	66 0f       	add	r22, r22
    ae42:	77 1f       	adc	r23, r23
    ae44:	8a 95       	dec	r24
    ae46:	e1 f7       	brne	.-8      	; 0xae40 <_Z15menuProcGlobalsh+0x1ac>
    ae48:	80 e0       	ldi	r24, 0x00	; 0
    ae4a:	4e e7       	ldi	r20, 0x7E	; 126
    ae4c:	20 e0       	ldi	r18, 0x00	; 0
    ae4e:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
 }
#endif
	asm("") ;
}
    ae52:	df 91       	pop	r29
    ae54:	cf 91       	pop	r28
    ae56:	1f 91       	pop	r17
    ae58:	0f 91       	pop	r16
    ae5a:	ff 90       	pop	r15
    ae5c:	ef 90       	pop	r14
    ae5e:	df 90       	pop	r13
    ae60:	cf 90       	pop	r12
    ae62:	bf 90       	pop	r11
    ae64:	af 90       	pop	r10
    ae66:	08 95       	ret

0000ae68 <_ZN7MState213check_columnsEhh>:
//void MState2::check_simple(uint8_t event, uint8_t curr, const MenuFuncP *menuTab, uint8_t menuTabSize, uint8_t maxrow)
//{
//    check(event, curr, menuTab, menuTabSize, 0, 0, maxrow);
//}

void MState2::check_columns( uint8_t event, uint8_t maxrow)
    ae68:	0f 93       	push	r16
    ae6a:	04 2f       	mov	r16, r20
{
  check( event, Columns, 0, maxrow ) ;
    ae6c:	40 91 c0 08 	lds	r20, 0x08C0
    ae70:	50 91 c1 08 	lds	r21, 0x08C1
    ae74:	20 e0       	ldi	r18, 0x00	; 0
    ae76:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <_ZN7MState25checkEhPKhhh>
}
    ae7a:	0f 91       	pop	r16
    ae7c:	08 95       	ret

0000ae7e <_Z18menuProcVoiceAlarmh>:
}
#endif

#ifdef VOICE_ALARMS

void menuProcVoiceAlarm(uint8_t event)
    ae7e:	cf 92       	push	r12
    ae80:	df 92       	push	r13
    ae82:	ef 92       	push	r14
    ae84:	ff 92       	push	r15
    ae86:	0f 93       	push	r16
    ae88:	1f 93       	push	r17
    ae8a:	cf 93       	push	r28
    ae8c:	df 93       	push	r29
    ae8e:	08 2f       	mov	r16, r24
{
//  SUBMENU("Voice Alarms", NUM_VOICE_ALARMS, {0} ) ;
	TITLE("Voice Alarms") ;
    ae90:	85 ea       	ldi	r24, 0xA5	; 165
    ae92:	98 e0       	ldi	r25, 0x08	; 8
    ae94:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
	static MState2 mstate2 ;
	mstate2.check_columns(event, NUM_VOICE_ALARMS ) ;
    ae98:	89 ec       	ldi	r24, 0xC9	; 201
    ae9a:	98 e0       	ldi	r25, 0x08	; 8
    ae9c:	60 2f       	mov	r22, r16
    ae9e:	48 e0       	ldi	r20, 0x08	; 8
    aea0:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>

  int8_t sub = mstate2.m_posVert ;
    aea4:	10 91 c9 08 	lds	r17, 0x08C9

  uint8_t t_pgOfs = evalOffset(sub, 6) ;
    aea8:	81 2f       	mov	r24, r17
    aeaa:	66 e0       	ldi	r22, 0x06	; 6
    aeac:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    aeb0:	e8 2e       	mov	r14, r24

  switch (event)
    aeb2:	0e 32       	cpi	r16, 0x2E	; 46
    aeb4:	11 f0       	breq	.+4      	; 0xaeba <_Z18menuProcVoiceAlarmh+0x3c>
    aeb6:	00 36       	cpi	r16, 0x60	; 96
    aeb8:	49 f4       	brne	.+18     	; 0xaecc <_Z18menuProcVoiceAlarmh+0x4e>
	{
    case EVT_KEY_FIRST(KEY_MENU) :
    case EVT_KEY_BREAK(BTN_RE) :
      s_currIdx = sub ;
    aeba:	10 93 c8 08 	sts	0x08C8, r17
      killEvents(event);
    aebe:	80 2f       	mov	r24, r16
    aec0:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
      pushMenu(menuProcVoiceOne) ;
    aec4:	8f e1       	ldi	r24, 0x1F	; 31
    aec6:	9b e4       	ldi	r25, 0x4B	; 75
    aec8:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
    aecc:	78 e0       	ldi	r23, 0x08	; 8
    aece:	f7 2e       	mov	r15, r23
		
		if (pvad->haptic)
		{
			lcd_putc( 20*FW, y, 'H' ) ;
		}
		if ( attr )
    aed0:	c1 2e       	mov	r12, r17
    aed2:	dd 24       	eor	r13, r13
    aed4:	c7 fc       	sbrc	r12, 7
    aed6:	d0 94       	com	r13

  uint8_t y = 1*FH ;
  for (uint8_t i = 0 ; i < NUM_VOICE_ALARMS ; i += 1 )
	{
    uint8_t k = i + t_pgOfs ;
    uint8_t attr = sub == k ? INVERS : 0 ;
    aed8:	ce 2d       	mov	r28, r14
    aeda:	d0 e0       	ldi	r29, 0x00	; 0
		VoiceAlarmData *pvad = &g_model.vad[k] ;
      
		if(y>7*FH) break ;

#if (NUM_VOICE_ALARMS<10)
		lcd_xlabel_decimal( y, PSTR("VA"), k+1, 0, FW*3-1 ) ;
    aedc:	ae 01       	movw	r20, r28
    aede:	4f 5f       	subi	r20, 0xFF	; 255
    aee0:	5f 4f       	sbci	r21, 0xFF	; 255
    aee2:	8f 2d       	mov	r24, r15
    aee4:	62 ea       	ldi	r22, 0xA2	; 162
    aee6:	78 e0       	ldi	r23, 0x08	; 8
    aee8:	20 e0       	ldi	r18, 0x00	; 0
    aeea:	01 e1       	ldi	r16, 0x11	; 17
    aeec:	0e 94 98 22 	call	0x4530	; 0x4530 <_Z18lcd_xlabel_decimalhPKcjhh>
#else
		lcd_xlabel_decimal( y, PSTR("VA"), k+1, 0, (k<9) ? FW*3-1 : FW*4-2 ) ;
#endif
		putsChnRaw( 5*FW, y, pvad->source, 0 ) ;
    aef0:	8e 01       	movw	r16, r28
    aef2:	63 e0       	ldi	r22, 0x03	; 3
    aef4:	00 0f       	add	r16, r16
    aef6:	11 1f       	adc	r17, r17
    aef8:	6a 95       	dec	r22
    aefa:	e1 f7       	brne	.-8      	; 0xaef4 <_Z18menuProcVoiceAlarmh+0x76>
    aefc:	0c 0f       	add	r16, r28
    aefe:	1d 1f       	adc	r17, r29
    af00:	06 55       	subi	r16, 0x56	; 86
    af02:	1e 4f       	sbci	r17, 0xFE	; 254
    af04:	07 58       	subi	r16, 0x87	; 135
    af06:	1c 4f       	sbci	r17, 0xFC	; 252
    af08:	8e e1       	ldi	r24, 0x1E	; 30
    af0a:	6f 2d       	mov	r22, r15
    af0c:	f8 01       	movw	r30, r16
    af0e:	40 81       	ld	r20, Z
    af10:	20 e0       	ldi	r18, 0x00	; 0
    af12:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
		putsDrSwitches( 9*FW, y, pvad->swtch, 0 ) ;
    af16:	0e 5f       	subi	r16, 0xFE	; 254
    af18:	1f 4f       	sbci	r17, 0xFF	; 255
    af1a:	86 e3       	ldi	r24, 0x36	; 54
    af1c:	6f 2d       	mov	r22, r15
    af1e:	f8 01       	movw	r30, r16
    af20:	41 91       	ld	r20, Z+
    af22:	8f 01       	movw	r16, r30
    af24:	20 e0       	ldi	r18, 0x00	; 0
    af26:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
		if ( pvad->rate < 3 )
    af2a:	f8 01       	movw	r30, r16
    af2c:	20 81       	ld	r18, Z
    af2e:	23 30       	cpi	r18, 0x03	; 3
    af30:	40 f4       	brcc	.+16     	; 0xaf42 <_Z18menuProcVoiceAlarmh+0xc4>
		{
			lcd_putsAttIdx( 13*FW, y, Str_On_Off_Both,pvad->rate,0 ) ;
    af32:	8e e4       	ldi	r24, 0x4E	; 78
    af34:	6f 2d       	mov	r22, r15
    af36:	44 e9       	ldi	r20, 0x94	; 148
    af38:	58 e0       	ldi	r21, 0x08	; 8
    af3a:	00 e0       	ldi	r16, 0x00	; 0
    af3c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    af40:	08 c0       	rjmp	.+16     	; 0xaf52 <_Z18menuProcVoiceAlarmh+0xd4>
		}
		else
		{
      lcd_outdez(FW*16,y,pvad->rate-2 ) ;
    af42:	42 2f       	mov	r20, r18
    af44:	50 e0       	ldi	r21, 0x00	; 0
    af46:	42 50       	subi	r20, 0x02	; 2
    af48:	50 40       	sbci	r21, 0x00	; 0
    af4a:	80 e6       	ldi	r24, 0x60	; 96
    af4c:	6f 2d       	mov	r22, r15
    af4e:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>
		}

    uint8_t type = pvad->fnameType ;
		switch ( type )
    af52:	fe 01       	movw	r30, r28
    af54:	53 e0       	ldi	r21, 0x03	; 3
    af56:	ee 0f       	add	r30, r30
    af58:	ff 1f       	adc	r31, r31
    af5a:	5a 95       	dec	r21
    af5c:	e1 f7       	brne	.-8      	; 0xaf56 <_Z18menuProcVoiceAlarmh+0xd8>
    af5e:	ec 0f       	add	r30, r28
    af60:	fd 1f       	adc	r31, r29
    af62:	e9 5d       	subi	r30, 0xD9	; 217
    af64:	fa 4f       	sbci	r31, 0xFA	; 250
    af66:	e0 81       	ld	r30, Z
    af68:	e7 70       	andi	r30, 0x07	; 7
    af6a:	e1 30       	cpi	r30, 0x01	; 1
    af6c:	19 f0       	breq	.+6      	; 0xaf74 <_Z18menuProcVoiceAlarmh+0xf6>
    af6e:	e2 30       	cpi	r30, 0x02	; 2
    af70:	51 f4       	brne	.+20     	; 0xaf86 <_Z18menuProcVoiceAlarmh+0x108>
    af72:	04 c0       	rjmp	.+8      	; 0xaf7c <_Z18menuProcVoiceAlarmh+0xfe>
		{
//			case 1 :
//				lcd_putc( 19*FW, y, 'N' ) ;
//			break ;
			case 1 :
				lcd_putc( 19*FW, y, '#' ) ;
    af74:	82 e7       	ldi	r24, 0x72	; 114
    af76:	6f 2d       	mov	r22, r15
    af78:	43 e2       	ldi	r20, 0x23	; 35
    af7a:	03 c0       	rjmp	.+6      	; 0xaf82 <_Z18menuProcVoiceAlarmh+0x104>
			break ;
			case 2 :
				lcd_putc( 19*FW, y, 'A' ) ;
    af7c:	82 e7       	ldi	r24, 0x72	; 114
    af7e:	6f 2d       	mov	r22, r15
    af80:	41 e4       	ldi	r20, 0x41	; 65
    af82:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
			break ;
		}

		
		if (pvad->haptic)
    af86:	fe 01       	movw	r30, r28
    af88:	43 e0       	ldi	r20, 0x03	; 3
    af8a:	ee 0f       	add	r30, r30
    af8c:	ff 1f       	adc	r31, r31
    af8e:	4a 95       	dec	r20
    af90:	e1 f7       	brne	.-8      	; 0xaf8a <_Z18menuProcVoiceAlarmh+0x10c>
    af92:	ec 0f       	add	r30, r28
    af94:	fd 1f       	adc	r31, r29
    af96:	ed 5d       	subi	r30, 0xDD	; 221
    af98:	fa 4f       	sbci	r31, 0xFA	; 250
    af9a:	84 81       	ldd	r24, Z+4	; 0x04
    af9c:	88 71       	andi	r24, 0x18	; 24
    af9e:	29 f0       	breq	.+10     	; 0xafaa <_Z18menuProcVoiceAlarmh+0x12c>
		{
			lcd_putc( 20*FW, y, 'H' ) ;
    afa0:	88 e7       	ldi	r24, 0x78	; 120
    afa2:	6f 2d       	mov	r22, r15
    afa4:	48 e4       	ldi	r20, 0x48	; 72
    afa6:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
		}
		if ( attr )
    afaa:	cc 16       	cp	r12, r28
    afac:	dd 06       	cpc	r13, r29
    afae:	31 f4       	brne	.+12     	; 0xafbc <_Z18menuProcVoiceAlarmh+0x13e>
		{
			lcd_char_inverse( 0, y, 20*FW, 0 ) ;
    afb0:	80 e0       	ldi	r24, 0x00	; 0
    afb2:	6f 2d       	mov	r22, r15
    afb4:	48 e7       	ldi	r20, 0x78	; 120
    afb6:	20 e0       	ldi	r18, 0x00	; 0
    afb8:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
    afbc:	e3 94       	inc	r14
		}
		
		y += FH ;
    afbe:	f8 e0       	ldi	r31, 0x08	; 8
    afc0:	ff 0e       	add	r15, r31
	{
    uint8_t k = i + t_pgOfs ;
    uint8_t attr = sub == k ? INVERS : 0 ;
		VoiceAlarmData *pvad = &g_model.vad[k] ;
      
		if(y>7*FH) break ;
    afc2:	88 e3       	ldi	r24, 0x38	; 56
    afc4:	8f 15       	cp	r24, r15
    afc6:	08 f0       	brcs	.+2      	; 0xafca <_Z18menuProcVoiceAlarmh+0x14c>
    afc8:	87 cf       	rjmp	.-242    	; 0xaed8 <_Z18menuProcVoiceAlarmh+0x5a>
		}
		
		y += FH ;
  }

}
    afca:	df 91       	pop	r29
    afcc:	cf 91       	pop	r28
    afce:	1f 91       	pop	r17
    afd0:	0f 91       	pop	r16
    afd2:	ff 90       	pop	r15
    afd4:	ef 90       	pop	r14
    afd6:	df 90       	pop	r13
    afd8:	cf 90       	pop	r12
    afda:	08 95       	ret

0000afdc <_Z19menuProcModelSelecth>:
// MOVE- move model to another model slot
// DELETE - This one is important.

const prog_char APM ModelPopList[] = STR_MODEL_POPUP ;

void menuProcModelSelect(uint8_t event)
    afdc:	bf 92       	push	r11
    afde:	cf 92       	push	r12
    afe0:	df 92       	push	r13
    afe2:	ef 92       	push	r14
    afe4:	ff 92       	push	r15
    afe6:	0f 93       	push	r16
    afe8:	1f 93       	push	r17
    afea:	e8 2e       	mov	r14, r24
{
    static MState2 mstate2;
    TITLE(STR_MODELSEL);
    afec:	85 e6       	ldi	r24, 0x65	; 101
    afee:	9d e0       	ldi	r25, 0x0D	; 13
    aff0:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>

    int8_t subOld  = mstate2.m_posVert;
    aff4:	b0 90 d4 08 	lds	r11, 0x08D4
    
		if ( !PopupData.PopupActive )
    aff8:	80 91 8b 06 	lds	r24, 0x068B
    affc:	88 23       	and	r24, r24
    affe:	31 f4       	brne	.+12     	; 0xb00c <_Z19menuProcModelSelecth+0x30>
		{
//			RotaryState = ROTARY_MENU_UD ;
			mstate2.check_columns(event, MAX_MODELS-1);
    b000:	84 ed       	ldi	r24, 0xD4	; 212
    b002:	98 e0       	ldi	r25, 0x08	; 8
    b004:	6e 2d       	mov	r22, r14
    b006:	4f e0       	ldi	r20, 0x0F	; 15
    b008:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>
//			mstate2.check_submenu_simple(event,MAX_MODELS-1) ;
		}

    lcd_puts_Pleft(  0, PSTR(STR_11_FREE));
    b00c:	80 e0       	ldi	r24, 0x00	; 0
    b00e:	6f e5       	ldi	r22, 0x5F	; 95
    b010:	7d e0       	ldi	r23, 0x0D	; 13
    b012:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    lcd_outdez(  17*FW, 0, EeFsGetFree());
    b016:	0e 94 81 65 	call	0xcb02	; 0xcb02 <_Z11EeFsGetFreev>
    b01a:	ac 01       	movw	r20, r24
    b01c:	86 e6       	ldi	r24, 0x66	; 102
    b01e:	60 e0       	ldi	r22, 0x00	; 0
    b020:	0e 94 da 6d 	call	0xdbb4	; 0xdbb4 <_Z10lcd_outdezhhi>

//    DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), INVERS);

    uint8_t  sub    = mstate2.m_posVert;
    b024:	d0 90 d4 08 	lds	r13, 0x08D4
    static uint8_t sel_editMode;
    if ( DupIfNonzero == 2 )
    b028:	80 91 11 07 	lds	r24, 0x0711
    b02c:	82 30       	cpi	r24, 0x02	; 2
    b02e:	21 f4       	brne	.+8      	; 0xb038 <_Z19menuProcModelSelecth+0x5c>
    {
        sel_editMode = false ;
    b030:	10 92 d3 08 	sts	0x08D3, r1
        DupIfNonzero = 0 ;
    b034:	10 92 11 07 	sts	0x0711, r1
    }
		uint8_t t_pgOfs = s_pgOfs ;
    b038:	10 91 e4 06 	lds	r17, 0x06E4
		uint8_t temp = 1+t_pgOfs ;
    if(sub < temp)
    b03c:	81 2f       	mov	r24, r17
    b03e:	8f 5f       	subi	r24, 0xFF	; 255
    b040:	d8 16       	cp	r13, r24
    b042:	40 f4       	brcc	.+16     	; 0xb054 <_Z19menuProcModelSelecth+0x78>
		{
			t_pgOfs = sub > 1 ? sub-1 : 0 ;
    b044:	81 e0       	ldi	r24, 0x01	; 1
    b046:	8d 15       	cp	r24, r13
    b048:	10 f0       	brcs	.+4      	; 0xb04e <_Z19menuProcModelSelecth+0x72>
    b04a:	10 e0       	ldi	r17, 0x00	; 0
    b04c:	0c c0       	rjmp	.+24     	; 0xb066 <_Z19menuProcModelSelecth+0x8a>
    b04e:	1d 2d       	mov	r17, r13
    b050:	11 50       	subi	r17, 0x01	; 1
    b052:	09 c0       	rjmp	.+18     	; 0xb066 <_Z19menuProcModelSelecth+0x8a>
		}
    else if(sub > (temp = 4+t_pgOfs) )
    b054:	81 2f       	mov	r24, r17
    b056:	8c 5f       	subi	r24, 0xFC	; 252
    b058:	8d 15       	cp	r24, r13
    b05a:	28 f4       	brcc	.+10     	; 0xb066 <_Z19menuProcModelSelecth+0x8a>
		{
		  t_pgOfs = sub - 4 ;
    b05c:	1d 2d       	mov	r17, r13
    b05e:	14 50       	subi	r17, 0x04	; 4
    b060:	1b 30       	cpi	r17, 0x0B	; 11
    b062:	08 f0       	brcs	.+2      	; 0xb066 <_Z19menuProcModelSelecth+0x8a>
    b064:	1a e0       	ldi	r17, 0x0A	; 10
			if ( t_pgOfs > MAX_MODELS-6 )
			{
				t_pgOfs = MAX_MODELS-6 ;
			}
		}
		s_pgOfs = t_pgOfs ;
    b066:	10 93 e4 06 	sts	0x06E4, r17
    b06a:	e0 e1       	ldi	r30, 0x10	; 16
    b06c:	fe 2e       	mov	r15, r30
    b06e:	c1 2e       	mov	r12, r17
    b070:	c3 94       	inc	r12
    b072:	00 e0       	ldi	r16, 0x00	; 0
    b074:	d1 16       	cp	r13, r17
    b076:	09 f4       	brne	.+2      	; 0xb07a <_Z19menuProcModelSelecth+0x9e>
    b078:	01 e0       	ldi	r16, 0x01	; 1

    for(uint8_t i=0; i<6; i++){
        uint8_t y=(i+2)*FH;
        uint8_t k=i+t_pgOfs;
//        lcd_outdezNAtt(  3*FW, y, (uint16_t)k+1, ((sub==k) ? INVERS : 0) + LEADING0,2);
				lcd_2_digits( 3*FW, y, k+1, (sub==k) ? INVERS : 0 ) ;
    b07a:	82 e1       	ldi	r24, 0x12	; 18
    b07c:	6f 2d       	mov	r22, r15
    b07e:	4c 2d       	mov	r20, r12
    b080:	20 2f       	mov	r18, r16
    b082:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <_Z12lcd_2_digitshhhh>
        if(k==g_eeGeneral.currModel) lcd_putc(1,  y,'*');
    b086:	80 91 65 01 	lds	r24, 0x0165
    b08a:	18 17       	cp	r17, r24
    b08c:	29 f4       	brne	.+10     	; 0xb098 <_Z19menuProcModelSelecth+0xbc>
    b08e:	81 e0       	ldi	r24, 0x01	; 1
    b090:	6f 2d       	mov	r22, r15
    b092:	4a e2       	ldi	r20, 0x2A	; 42
    b094:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
        eeLoadModelName(k,Xmem.buf,sizeof(Xmem.buf));
    b098:	81 2f       	mov	r24, r17
    b09a:	63 e5       	ldi	r22, 0x53	; 83
    b09c:	76 e0       	ldi	r23, 0x06	; 6
    b09e:	4f e0       	ldi	r20, 0x0F	; 15
    b0a0:	0e 94 60 63 	call	0xc6c0	; 0xc6c0 <_Z15eeLoadModelNamehPch>
        lcd_putsnAtt(  4*FW, y, Xmem.buf,sizeof(Xmem.buf),BSS|((sub==k) ? (sel_editMode ? INVERS : 0 ) : 0));
    b0a4:	00 23       	and	r16, r16
    b0a6:	31 f0       	breq	.+12     	; 0xb0b4 <_Z19menuProcModelSelecth+0xd8>
    b0a8:	80 91 d3 08 	lds	r24, 0x08D3
    b0ac:	88 23       	and	r24, r24
    b0ae:	11 f0       	breq	.+4      	; 0xb0b4 <_Z19menuProcModelSelecth+0xd8>
    b0b0:	01 e1       	ldi	r16, 0x11	; 17
    b0b2:	01 c0       	rjmp	.+2      	; 0xb0b6 <_Z19menuProcModelSelecth+0xda>
    b0b4:	00 e1       	ldi	r16, 0x10	; 16
    b0b6:	88 e1       	ldi	r24, 0x18	; 24
    b0b8:	6f 2d       	mov	r22, r15
    b0ba:	43 e5       	ldi	r20, 0x53	; 83
    b0bc:	56 e0       	ldi	r21, 0x06	; 6
    b0be:	2f e0       	ldi	r18, 0x0F	; 15
    b0c0:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
    b0c4:	88 e0       	ldi	r24, 0x08	; 8
    b0c6:	f8 0e       	add	r15, r24
				t_pgOfs = MAX_MODELS-6 ;
			}
		}
		s_pgOfs = t_pgOfs ;

    for(uint8_t i=0; i<6; i++){
    b0c8:	80 e4       	ldi	r24, 0x40	; 64
    b0ca:	f8 16       	cp	r15, r24
    b0cc:	11 f0       	breq	.+4      	; 0xb0d2 <_Z19menuProcModelSelecth+0xf6>
    b0ce:	1c 2d       	mov	r17, r12
    b0d0:	ce cf       	rjmp	.-100    	; 0xb06e <_Z19menuProcModelSelecth+0x92>
        if(k==g_eeGeneral.currModel) lcd_putc(1,  y,'*');
        eeLoadModelName(k,Xmem.buf,sizeof(Xmem.buf));
        lcd_putsnAtt(  4*FW, y, Xmem.buf,sizeof(Xmem.buf),BSS|((sub==k) ? (sel_editMode ? INVERS : 0 ) : 0));
    }

	if ( PopupData.PopupActive )
    b0d2:	80 91 8b 06 	lds	r24, 0x068B
    b0d6:	88 23       	and	r24, r24
    b0d8:	09 f4       	brne	.+2      	; 0xb0dc <_Z19menuProcModelSelecth+0x100>
    b0da:	6a c0       	rjmp	.+212    	; 0xb1b0 <_Z19menuProcModelSelecth+0x1d4>
	{
		uint8_t mask = (g_eeGeneral.currModel == mstate2.m_posVert) ? 0x19 : 0x3E ;
    b0dc:	90 91 d4 08 	lds	r25, 0x08D4
    b0e0:	80 91 65 01 	lds	r24, 0x0165
    b0e4:	89 17       	cp	r24, r25
    b0e6:	11 f0       	breq	.+4      	; 0xb0ec <_Z19menuProcModelSelecth+0x110>
    b0e8:	1e e3       	ldi	r17, 0x3E	; 62
    b0ea:	01 c0       	rjmp	.+2      	; 0xb0ee <_Z19menuProcModelSelecth+0x112>
    b0ec:	19 e1       	ldi	r17, 0x19	; 25
		if ( eeModelExists( mstate2.m_posVert ) == 0 )
    b0ee:	89 2f       	mov	r24, r25
    b0f0:	0e 94 0a 63 	call	0xc614	; 0xc614 <_Z13eeModelExistsh>
    b0f4:	88 23       	and	r24, r24
    b0f6:	09 f4       	brne	.+2      	; 0xb0fa <_Z19menuProcModelSelecth+0x11e>
    b0f8:	16 e1       	ldi	r17, 0x16	; 22
		{
			mask = 0x16 ;
		}
		uint8_t popaction = doPopup( ModelPopList, mask, 10 ) ;
    b0fa:	89 e3       	ldi	r24, 0x39	; 57
    b0fc:	9d e0       	ldi	r25, 0x0D	; 13
    b0fe:	61 2f       	mov	r22, r17
    b100:	4a e0       	ldi	r20, 0x0A	; 10
    b102:	0e 94 c1 3b 	call	0x7782	; 0x7782 <_Z7doPopupPKchh>
    b106:	98 2f       	mov	r25, r24
		
  	if ( popaction == POPUP_SELECT )
    b108:	81 30       	cpi	r24, 0x01	; 1
    b10a:	09 f0       	breq	.+2      	; 0xb10e <_Z19menuProcModelSelecth+0x132>
    b10c:	97 c0       	rjmp	.+302    	; 0xb23c <_Z19menuProcModelSelecth+0x260>
		{
			uint8_t popidx = PopupData.PopupSel ;
    b10e:	00 91 8d 06 	lds	r16, 0x068D
			if ( popidx == 0 )	// edit
    b112:	00 23       	and	r16, r16
    b114:	09 f4       	brne	.+2      	; 0xb118 <_Z19menuProcModelSelecth+0x13c>
    b116:	bd c0       	rjmp	.+378    	; 0xb292 <_Z19menuProcModelSelecth+0x2b6>
			{
				chainMenu(menuProcModelIndex) ;
			}
			else if ( ( popidx == 1 ) || ( popidx == 2 ) )	// select or SEL/EDIT
    b118:	80 2f       	mov	r24, r16
    b11a:	81 50       	subi	r24, 0x01	; 1
    b11c:	82 30       	cpi	r24, 0x02	; 2
    b11e:	90 f5       	brcc	.+100    	; 0xb184 <_Z19menuProcModelSelecth+0x1a8>
			{
       	g_eeGeneral.currModel = mstate2.m_posVert;
    b120:	10 91 d4 08 	lds	r17, 0x08D4
    b124:	10 93 65 01 	sts	0x0165, r17
				PausePulses = 1 ;
    b128:	90 93 0e 0e 	sts	0x0E0E, r25
// For popup	 
//  eeLoadModelName(k,Xmem.buf,sizeof(Xmem.buf));
//  lcd_putsnAtt( 4*FW, y, Xmem.buf,sizeof(Xmem.buf),BSS);
	
	
	killEvents(event);
    b12c:	8e 2d       	mov	r24, r14
    b12e:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
  eeWaitComplete();    // Wait to load model if writing something
    b132:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>
  eeLoadModel(g_eeGeneral.currModel = index);
    b136:	10 93 65 01 	sts	0x0165, r17
    b13a:	81 2f       	mov	r24, r17
    b13c:	0e 94 03 64 	call	0xc806	; 0xc806 <_Z11eeLoadModelh>
	AlarmControl.VoiceCheckFlag |= 2 ;// Set switch current states
    b140:	80 91 03 01 	lds	r24, 0x0103
    b144:	82 60       	ori	r24, 0x02	; 2
    b146:	80 93 03 01 	sts	0x0103, r24
  STORE_GENERALVARS;
    b14a:	81 e0       	ldi	r24, 0x01	; 1
    b14c:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
  eeWaitComplete();
    b150:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>

  checkTHR() ;
    b154:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z8checkTHRv>
  checkSwitches();
    b158:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_Z13checkSwitchesv>
	putVoiceQueueUpper( g_model.modelVoice ) ;
    b15c:	80 91 b4 01 	lds	r24, 0x01B4
    b160:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_Z18putVoiceQueueUpperh>

  kn_initAll(g_model.protocol);
    b164:	80 91 b9 01 	lds	r24, 0x01B9
    b168:	8f 70       	andi	r24, 0x0F	; 15
    b16a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <_Z10kn_initAllh>
			else if ( ( popidx == 1 ) || ( popidx == 2 ) )	// select or SEL/EDIT
			{
       	g_eeGeneral.currModel = mstate2.m_posVert;
				PausePulses = 1 ;
			 	qloadModel( event, mstate2.m_posVert ) ;
				startPulses() ;
    b16e:	0e 94 ea 76 	call	0xedd4	; 0xedd4 <_Z11startPulsesv>
				if ( ( PopupData.PopupActive == 2 ) || ( popidx == 2 ) )
    b172:	80 91 8b 06 	lds	r24, 0x068B
    b176:	82 30       	cpi	r24, 0x02	; 2
    b178:	09 f4       	brne	.+2      	; 0xb17c <_Z19menuProcModelSelecth+0x1a0>
    b17a:	8b c0       	rjmp	.+278    	; 0xb292 <_Z19menuProcModelSelecth+0x2b6>
    b17c:	02 30       	cpi	r16, 0x02	; 2
    b17e:	09 f0       	breq	.+2      	; 0xb182 <_Z19menuProcModelSelecth+0x1a6>
    b180:	4e c0       	rjmp	.+156    	; 0xb21e <_Z19menuProcModelSelecth+0x242>
    b182:	87 c0       	rjmp	.+270    	; 0xb292 <_Z19menuProcModelSelecth+0x2b6>
				else
				{
	        popMenu(true) ;
				}
			}
			else if ( popidx == 5 )		// Delete
    b184:	05 30       	cpi	r16, 0x05	; 5
    b186:	31 f4       	brne	.+12     	; 0xb194 <_Z19menuProcModelSelecth+0x1b8>
			{
       	killEvents(event);
    b188:	8e 2d       	mov	r24, r14
    b18a:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
       	DupIfNonzero = 0 ;
    b18e:	10 92 11 07 	sts	0x0711, r1
    b192:	04 c0       	rjmp	.+8      	; 0xb19c <_Z19menuProcModelSelecth+0x1c0>
				DupSub = sub ;
       	pushMenu(menuDeleteDupModel);
			}
			else if( popidx == 3 )	// copy
    b194:	03 30       	cpi	r16, 0x03	; 3
    b196:	49 f4       	brne	.+18     	; 0xb1aa <_Z19menuProcModelSelecth+0x1ce>
			{
				{
 	        DupIfNonzero = 1 ;
    b198:	90 93 11 07 	sts	0x0711, r25
 	        DupSub = sub ;
    b19c:	d0 92 12 07 	sts	0x0712, r13
 	        pushMenu(menuDeleteDupModel);//menuProcExpoAll);
    b1a0:	88 e7       	ldi	r24, 0x78	; 120
    b1a2:	9a e3       	ldi	r25, 0x3A	; 58
    b1a4:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
    b1a8:	49 c0       	rjmp	.+146    	; 0xb23c <_Z19menuProcModelSelecth+0x260>
				}
			}
			else // Move (4)
			{
 	    	sel_editMode = true ;
    b1aa:	90 93 d3 08 	sts	0x08D3, r25
    b1ae:	46 c0       	rjmp	.+140    	; 0xb23c <_Z19menuProcModelSelecth+0x260>
			}
		}
	}
	else
	{
		switch(event)
    b1b0:	85 e6       	ldi	r24, 0x65	; 101
    b1b2:	8e 15       	cp	r24, r14
    b1b4:	50 f0       	brcs	.+20     	; 0xb1ca <_Z19menuProcModelSelecth+0x1ee>
    b1b6:	84 e6       	ldi	r24, 0x64	; 100
    b1b8:	e8 16       	cp	r14, r24
    b1ba:	b0 f4       	brcc	.+44     	; 0xb1e8 <_Z19menuProcModelSelecth+0x20c>
    b1bc:	80 e6       	ldi	r24, 0x60	; 96
    b1be:	e8 16       	cp	r14, r24
    b1c0:	e1 f0       	breq	.+56     	; 0xb1fa <_Z19menuProcModelSelecth+0x21e>
    b1c2:	81 e6       	ldi	r24, 0x61	; 97
    b1c4:	e8 16       	cp	r14, r24
    b1c6:	d1 f5       	brne	.+116    	; 0xb23c <_Z19menuProcModelSelecth+0x260>
    b1c8:	0a c0       	rjmp	.+20     	; 0xb1de <_Z19menuProcModelSelecth+0x202>
    b1ca:	81 e8       	ldi	r24, 0x81	; 129
    b1cc:	e8 16       	cp	r14, r24
    b1ce:	39 f1       	breq	.+78     	; 0xb21e <_Z19menuProcModelSelecth+0x242>
    b1d0:	8f eb       	ldi	r24, 0xBF	; 191
    b1d2:	e8 16       	cp	r14, r24
    b1d4:	41 f1       	breq	.+80     	; 0xb226 <_Z19menuProcModelSelecth+0x24a>
    b1d6:	8e e6       	ldi	r24, 0x6E	; 110
    b1d8:	e8 16       	cp	r14, r24
    b1da:	81 f5       	brne	.+96     	; 0xb23c <_Z19menuProcModelSelecth+0x260>
    b1dc:	0e c0       	rjmp	.+28     	; 0xb1fa <_Z19menuProcModelSelecth+0x21e>
    {
    //case  EVT_KEY_FIRST(KEY_MENU):
    	case  EVT_KEY_FIRST(KEY_EXIT):
        if(sel_editMode)
    b1de:	80 91 d3 08 	lds	r24, 0x08D3
    b1e2:	88 23       	and	r24, r24
    b1e4:	59 f1       	breq	.+86     	; 0xb23c <_Z19menuProcModelSelecth+0x260>
    b1e6:	0f c0       	rjmp	.+30     	; 0xb206 <_Z19menuProcModelSelecth+0x22a>
        }
    	break;
    
			case  EVT_KEY_FIRST(KEY_LEFT):
    	case  EVT_KEY_FIRST(KEY_RIGHT):
        if(g_eeGeneral.currModel != mstate2.m_posVert)
    b1e8:	90 91 65 01 	lds	r25, 0x0165
    b1ec:	80 91 d4 08 	lds	r24, 0x08D4
    b1f0:	98 17       	cp	r25, r24
    b1f2:	09 f4       	brne	.+2      	; 0xb1f6 <_Z19menuProcModelSelecth+0x21a>
    b1f4:	4e c0       	rjmp	.+156    	; 0xb292 <_Z19menuProcModelSelecth+0x2b6>
        {
					PopupData.PopupActive = 2 ;
    b1f6:	82 e0       	ldi	r24, 0x02	; 2
    b1f8:	0a c0       	rjmp	.+20     	; 0xb20e <_Z19menuProcModelSelecth+0x232>
        //      if(event==EVT_KEY_FIRST(KEY_EXIT))  chainMenu(menuProcModelSelect);
				}
	    break;
    	case  EVT_KEY_FIRST(KEY_MENU) :
			case  EVT_KEY_FIRST(BTN_RE) :
  		  s_editMode = 0 ;
    b1fa:	10 92 e5 06 	sts	0x06E5, r1
				if(sel_editMode)
    b1fe:	80 91 d3 08 	lds	r24, 0x08D3
    b202:	88 23       	and	r24, r24
    b204:	19 f0       	breq	.+6      	; 0xb20c <_Z19menuProcModelSelecth+0x230>
				{
  		    sel_editMode = false ;
    b206:	10 92 d3 08 	sts	0x08D3, r1
    b20a:	18 c0       	rjmp	.+48     	; 0xb23c <_Z19menuProcModelSelecth+0x260>
				}
				else
				{
					PopupData.PopupActive = 1 ;
    b20c:	81 e0       	ldi	r24, 0x01	; 1
    b20e:	80 93 8b 06 	sts	0x068B, r24
				 	killEvents(event) ;
    b212:	8e 2d       	mov	r24, r14
    b214:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
					PopupData.PopupIdx = 0 ;
    b218:	10 92 8c 06 	sts	0x068C, r1
    b21c:	0f c0       	rjmp	.+30     	; 0xb23c <_Z19menuProcModelSelecth+0x260>
				}	 
    	break;
    	case  EVT_KEY_LONG(KEY_EXIT):  // make sure exit long exits to main
        popMenu(true);
    b21e:	81 e0       	ldi	r24, 0x01	; 1
    b220:	0e 94 14 1a 	call	0x3428	; 0x3428 <_Z7popMenub>
    b224:	0b c0       	rjmp	.+22     	; 0xb23c <_Z19menuProcModelSelecth+0x260>
//        }
//        break;

	    case EVT_ENTRY:
//				MenuTimer = 2000 ;	// * 0.01 Seconds = 20 seconds
        sel_editMode = false;
    b226:	10 92 d3 08 	sts	0x08D3, r1
				PopupData.PopupActive = 0 ;
    b22a:	10 92 8b 06 	sts	0x068B, r1
        mstate2.m_posVert = g_eeGeneral.currModel;
    b22e:	80 91 65 01 	lds	r24, 0x0165
    b232:	80 93 d4 08 	sts	0x08D4, r24
        eeCheck(true); //force writing of current model data before this is changed
    b236:	81 e0       	ldi	r24, 0x01	; 1
    b238:	0e 94 99 61 	call	0xc332	; 0xc332 <_Z7eeCheckb>
	    break;
    }
	}
  if(sel_editMode && subOld!=sub)
    b23c:	80 91 d3 08 	lds	r24, 0x08D3
    b240:	88 23       	and	r24, r24
    b242:	f9 f0       	breq	.+62     	; 0xb282 <_Z19menuProcModelSelecth+0x2a6>
    b244:	0b 2d       	mov	r16, r11
    b246:	11 27       	eor	r17, r17
    b248:	07 fd       	sbrc	r16, 7
    b24a:	10 95       	com	r17
    b24c:	8d 2d       	mov	r24, r13
    b24e:	90 e0       	ldi	r25, 0x00	; 0
    b250:	08 17       	cp	r16, r24
    b252:	19 07       	cpc	r17, r25
    b254:	b1 f0       	breq	.+44     	; 0xb282 <_Z19menuProcModelSelecth+0x2a6>
	{
		EFile::swap(FILE_MODEL(subOld),FILE_MODEL(sub));
    b256:	6d 2d       	mov	r22, r13
    b258:	6f 5f       	subi	r22, 0xFF	; 255
    b25a:	8b 2d       	mov	r24, r11
    b25c:	8f 5f       	subi	r24, 0xFF	; 255
    b25e:	0e 94 41 66 	call	0xcc82	; 0xcc82 <_ZN5EFile4swapEhh>
		
		if ( sub == g_eeGeneral.currModel )
    b262:	80 91 65 01 	lds	r24, 0x0165
    b266:	d8 16       	cp	r13, r24
    b268:	19 f4       	brne	.+6      	; 0xb270 <_Z19menuProcModelSelecth+0x294>
		{
			g_eeGeneral.currModel = subOld ;
    b26a:	b0 92 65 01 	sts	0x0165, r11
    b26e:	06 c0       	rjmp	.+12     	; 0xb27c <_Z19menuProcModelSelecth+0x2a0>
  	  STORE_GENERALVARS ;     //eeWriteGeneral();
		}
		else if ( subOld == g_eeGeneral.currModel )
    b270:	90 e0       	ldi	r25, 0x00	; 0
    b272:	08 17       	cp	r16, r24
    b274:	19 07       	cpc	r17, r25
    b276:	29 f4       	brne	.+10     	; 0xb282 <_Z19menuProcModelSelecth+0x2a6>
		{
			g_eeGeneral.currModel = sub ;
    b278:	d0 92 65 01 	sts	0x0165, r13
  	  STORE_GENERALVARS ;     //eeWriteGeneral();
    b27c:	81 e0       	ldi	r24, 0x01	; 1
    b27e:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
		}
  }
	asm("") ;	// Prevents compiler from creating 2 sets of register pops
}
    b282:	1f 91       	pop	r17
    b284:	0f 91       	pop	r16
    b286:	ff 90       	pop	r15
    b288:	ef 90       	pop	r14
    b28a:	df 90       	pop	r13
    b28c:	cf 90       	pop	r12
    b28e:	bf 90       	pop	r11
    b290:	08 95       	ret
  #else
        	if(event==EVT_KEY_FIRST(KEY_LEFT)) { chainMenu(menuProcSafetySwitches); }//{killEvents(event);popMenu(true);}
  #endif
 #endif
#endif
        	if(event==EVT_KEY_FIRST(KEY_RIGHT)) { chainMenu(menuProcModelIndex); }
    b292:	80 e0       	ldi	r24, 0x00	; 0
    b294:	95 e4       	ldi	r25, 0x45	; 69
    b296:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <_Z9chainMenuPFvhE>
    b29a:	d0 cf       	rjmp	.-96     	; 0xb23c <_Z19menuProcModelSelecth+0x260>

0000b29c <_Z15menuModelPhasesh>:
{
  lcd_puts_P( x, y, PSTR(STR_SP_FM)+1 ) ;
  lcd_putc( x+2*FW, y, '0'+mode ) ;
}

void menuModelPhases(uint8_t event)
    b29c:	9f 92       	push	r9
    b29e:	af 92       	push	r10
    b2a0:	bf 92       	push	r11
    b2a2:	cf 92       	push	r12
    b2a4:	df 92       	push	r13
    b2a6:	ef 92       	push	r14
    b2a8:	ff 92       	push	r15
    b2aa:	0f 93       	push	r16
    b2ac:	1f 93       	push	r17
    b2ae:	cf 93       	push	r28
    b2b0:	df 93       	push	r29
    b2b2:	18 2f       	mov	r17, r24
{
	uint8_t i ;
  uint8_t attr ;
  
	TITLEP(Str_Modes) ;
    b2b4:	85 ed       	ldi	r24, 0xD5	; 213
    b2b6:	96 e0       	ldi	r25, 0x06	; 6
    b2b8:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
	static MState2 mstate2 ;
//	if (SubMenuFromIndex)
//	{
		mstate2.check_columns(event,5-1-1) ;
    b2bc:	85 ed       	ldi	r24, 0xD5	; 213
    b2be:	98 e0       	ldi	r25, 0x08	; 8
    b2c0:	61 2f       	mov	r22, r17
    b2c2:	43 e0       	ldi	r20, 0x03	; 3
    b2c4:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>
//	{
//		mstate2.check_simple(event,e_Phases,menuTabModel,DIM(menuTabModel),5-1) ;
//	}
////	SIMPLE_MENU(Str_Modes, menuTabModel, e_Phases, 5 ) ;
	
	uint8_t  sub    = mstate2.m_posVert ;
    b2c8:	90 90 d5 08 	lds	r9, 0x08D5
//	evalOffset(sub, 6) ;

  switch (event)
    b2cc:	10 36       	cpi	r17, 0x60	; 96
    b2ce:	11 f0       	breq	.+4      	; 0xb2d4 <_Z15menuModelPhasesh+0x38>
    b2d0:	1e 36       	cpi	r17, 0x6E	; 110
    b2d2:	49 f4       	brne	.+18     	; 0xb2e6 <_Z15menuModelPhasesh+0x4a>
    case EVT_KEY_FIRST(KEY_MENU) :
    case EVT_KEY_FIRST(BTN_RE) :
//			if ( sub > 0 ) //&& sub <= MAX_MODES )
//			{
//        s_currIdx = sub - 1 ;
        s_currIdx = sub ;
    b2d4:	90 92 c8 08 	sts	0x08C8, r9
//				RotaryState = ROTARY_MENU_UD ;
        killEvents(event);
    b2d8:	81 2f       	mov	r24, r17
    b2da:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        pushMenu(menuPhaseOne) ;
    b2de:	8c ee       	ldi	r24, 0xEC	; 236
    b2e0:	94 e5       	ldi	r25, 0x54	; 84
    b2e2:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
//    	}
		break;
  }
    
#ifdef FIX_MODE
	lcd_puts_Pleft( 2*FH, PSTR(STR_SP_FM0"\012RETA") ) ;
    b2e6:	80 e1       	ldi	r24, 0x10	; 16
    b2e8:	6e e6       	ldi	r22, 0x6E	; 110
    b2ea:	7d e0       	ldi	r23, 0x0D	; 13
    b2ec:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    b2f0:	cc 24       	eor	r12, r12
    b2f2:	dd 24       	eor	r13, r13
    b2f4:	88 e1       	ldi	r24, 0x18	; 24
    b2f6:	e8 2e       	mov	r14, r24
    b2f8:	1c 2d       	mov	r17, r12
    b2fa:	bb 24       	eor	r11, r11
    b2fc:	c9 14       	cp	r12, r9
    b2fe:	11 f4       	brne	.+4      	; 0xb304 <_Z15menuModelPhasesh+0x68>
    b300:	bb 24       	eor	r11, r11
    b302:	b3 94       	inc	r11

  for ( i=0 ; i<MAX_MODES ; i += 1 )
	{
    uint8_t y=(i+3)*FH ;
    attr = (i == sub) ? INVERS : 0 ;
		PhaseData *p = &g_model.phaseData[i] ;
    b304:	e6 01       	movw	r28, r12
    b306:	cc 0f       	add	r28, r28
    b308:	dd 1f       	adc	r29, r29
    b30a:	c6 01       	movw	r24, r12
    b30c:	b3 e0       	ldi	r27, 0x03	; 3
    b30e:	88 0f       	add	r24, r24
    b310:	99 1f       	adc	r25, r25
    b312:	ba 95       	dec	r27
    b314:	e1 f7       	brne	.-8      	; 0xb30e <_Z15menuModelPhasesh+0x72>
    b316:	c8 0f       	add	r28, r24
    b318:	d9 1f       	adc	r29, r25
    b31a:	c1 59       	subi	r28, 0x91	; 145
    b31c:	db 4f       	sbci	r29, 0xFB	; 251
		FORCE_INDIRECT(p) ;
		if ( p->fadeIn || p->fadeOut )
    b31e:	89 85       	ldd	r24, Y+9	; 0x09
    b320:	88 23       	and	r24, r24
    b322:	31 f0       	breq	.+12     	; 0xb330 <_Z15menuModelPhasesh+0x94>
		{
	    lcd_putcAtt( 20*FW+1, y, '*', attr ) ;
    b324:	89 e7       	ldi	r24, 0x79	; 121
    b326:	6e 2d       	mov	r22, r14
    b328:	4a e2       	ldi	r20, 0x2A	; 42
    b32a:	2b 2d       	mov	r18, r11
    b32c:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
    b330:	a1 2e       	mov	r10, r17
    b332:	a3 94       	inc	r10
		}
		dispFlightModename( FW, y, i+1 ) ;
    b334:	86 e0       	ldi	r24, 0x06	; 6
    b336:	6e 2d       	mov	r22, r14
    b338:	4a 2d       	mov	r20, r10
    b33a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18dispFlightModenamehhh>
    putsDrSwitches( 4*FW, y, p->swtch, attr ) ;
    b33e:	88 e1       	ldi	r24, 0x18	; 24
    b340:	6e 2d       	mov	r22, r14
    b342:	48 85       	ldd	r20, Y+8	; 0x08
    b344:	2b 2d       	mov	r18, r11
    b346:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
    b34a:	10 e0       	ldi	r17, 0x00	; 0
    b34c:	ac e3       	ldi	r26, 0x3C	; 60
    b34e:	fa 2e       	mov	r15, r26
    for ( uint8_t t = 0 ; t < NUM_STICKS ; t += 1 )
		{
			putsTrimMode( (10+t)*FW, y, i+1, t, attr ) ;
    b350:	8f 2d       	mov	r24, r15
    b352:	6e 2d       	mov	r22, r14
    b354:	4a 2d       	mov	r20, r10
    b356:	21 2f       	mov	r18, r17
    b358:	0b 2d       	mov	r16, r11
    b35a:	0e 94 4e 3a 	call	0x749c	; 0x749c <_Z12putsTrimModehhhhh>
		{
	    lcd_putcAtt( 20*FW+1, y, '*', attr ) ;
		}
		dispFlightModename( FW, y, i+1 ) ;
    putsDrSwitches( 4*FW, y, p->swtch, attr ) ;
    for ( uint8_t t = 0 ; t < NUM_STICKS ; t += 1 )
    b35e:	1f 5f       	subi	r17, 0xFF	; 255
    b360:	86 e0       	ldi	r24, 0x06	; 6
    b362:	f8 0e       	add	r15, r24
    b364:	14 30       	cpi	r17, 0x04	; 4
    b366:	a1 f7       	brne	.-24     	; 0xb350 <_Z15menuModelPhasesh+0xb4>
    b368:	08 94       	sec
    b36a:	c1 1c       	adc	r12, r1
    b36c:	d1 1c       	adc	r13, r1
    b36e:	88 e0       	ldi	r24, 0x08	; 8
    b370:	e8 0e       	add	r14, r24
  		lcd_putsAttIdx( (9+i)*FW, 2*FH, Str_1_RETA, pgm_read_byte(modn12x3+g_eeGeneral.stickMode*4+(i-1))-1, 0 ) ;
    }
  }
#endif

  for ( i=0 ; i<MAX_MODES ; i += 1 )
    b372:	88 e3       	ldi	r24, 0x38	; 56
    b374:	e8 16       	cp	r14, r24
    b376:	09 f0       	breq	.+2      	; 0xb37a <_Z15menuModelPhasesh+0xde>
    b378:	bf cf       	rjmp	.-130    	; 0xb2f8 <_Z15menuModelPhasesh+0x5c>
		}
//    lcd_outdezAtt(17*FW, y, p->fadeIn * 5, attr | PREC1 ) ;
//    lcd_outdezAtt(21*FW, y, p->fadeOut * 5, attr | PREC1 ) ;
	}

	i = getFlightPhase() ;
    b37a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <_Z14getFlightPhasev>
	lcd_rect( 0, (i+2)*FH-1, 4*FW+2, 9 ) ;
    b37e:	68 2f       	mov	r22, r24
    b380:	70 e0       	ldi	r23, 0x00	; 0
    b382:	6e 5f       	subi	r22, 0xFE	; 254
    b384:	7f 4f       	sbci	r23, 0xFF	; 255
    b386:	f3 e0       	ldi	r31, 0x03	; 3
    b388:	66 0f       	add	r22, r22
    b38a:	77 1f       	adc	r23, r23
    b38c:	fa 95       	dec	r31
    b38e:	e1 f7       	brne	.-8      	; 0xb388 <_Z15menuModelPhasesh+0xec>
    b390:	61 50       	subi	r22, 0x01	; 1
    b392:	80 e0       	ldi	r24, 0x00	; 0
    b394:	4a e1       	ldi	r20, 0x1A	; 26
    b396:	29 e0       	ldi	r18, 0x09	; 9
    b398:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
}
    b39c:	df 91       	pop	r29
    b39e:	cf 91       	pop	r28
    b3a0:	1f 91       	pop	r17
    b3a2:	0f 91       	pop	r16
    b3a4:	ff 90       	pop	r15
    b3a6:	ef 90       	pop	r14
    b3a8:	df 90       	pop	r13
    b3aa:	cf 90       	pop	r12
    b3ac:	bf 90       	pop	r11
    b3ae:	af 90       	pop	r10
    b3b0:	9f 90       	pop	r9
    b3b2:	08 95       	ret

0000b3b4 <_Z11menuProcMixh>:
//	}

}


void menuProcMix(uint8_t event)
    b3b4:	3f 92       	push	r3
    b3b6:	4f 92       	push	r4
    b3b8:	5f 92       	push	r5
    b3ba:	6f 92       	push	r6
    b3bc:	7f 92       	push	r7
    b3be:	8f 92       	push	r8
    b3c0:	9f 92       	push	r9
    b3c2:	af 92       	push	r10
    b3c4:	bf 92       	push	r11
    b3c6:	cf 92       	push	r12
    b3c8:	df 92       	push	r13
    b3ca:	ef 92       	push	r14
    b3cc:	ff 92       	push	r15
    b3ce:	0f 93       	push	r16
    b3d0:	1f 93       	push	r17
    b3d2:	cf 93       	push	r28
    b3d4:	df 93       	push	r29
    b3d6:	58 2e       	mov	r5, r24
{
	TITLE(STR_MIXER);
    b3d8:	87 e3       	ldi	r24, 0x37	; 55
    b3da:	9e e0       	ldi	r25, 0x0E	; 14
    b3dc:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
	static MState2 mstate2;

	if ( s_moveMode )
    b3e0:	80 91 10 07 	lds	r24, 0x0710
    b3e4:	88 23       	and	r24, r24
    b3e6:	c1 f0       	breq	.+48     	; 0xb418 <_Z11menuProcMixh+0x64>

int8_t qRotary()
{
	int8_t diff = 0 ;

	if ( Rotary.Rotary_diff > 0)
    b3e8:	80 91 a9 05 	lds	r24, 0x05A9
    b3ec:	18 16       	cp	r1, r24
    b3ee:	14 f4       	brge	.+4      	; 0xb3f4 <_Z11menuProcMixh+0x40>
    b3f0:	81 e0       	ldi	r24, 0x01	; 1
    b3f2:	05 c0       	rjmp	.+10     	; 0xb3fe <_Z11menuProcMixh+0x4a>
	{
		diff = 1 ;
	}
	else if ( Rotary.Rotary_diff < 0)
    b3f4:	88 23       	and	r24, r24
    b3f6:	11 f0       	breq	.+4      	; 0xb3fc <_Z11menuProcMixh+0x48>
    b3f8:	8f ef       	ldi	r24, 0xFF	; 255
    b3fa:	01 c0       	rjmp	.+2      	; 0xb3fe <_Z11menuProcMixh+0x4a>
    b3fc:	80 e0       	ldi	r24, 0x00	; 0
	{
		diff = -1 ;
	}
	Rotary.Rotary_diff = 0 ;
    b3fe:	10 92 a9 05 	sts	0x05A9, r1

	if ( s_moveMode )
	{
		int8_t moveByRotary ;
		moveByRotary = qRotary() ;		// Do this now, check_simple destroys rotary data
		if ( moveByRotary )
    b402:	88 23       	and	r24, r24
    b404:	49 f0       	breq	.+18     	; 0xb418 <_Z11menuProcMixh+0x64>
		{
			if ( moveByRotary > 0 )
    b406:	81 30       	cpi	r24, 0x01	; 1
    b408:	19 f0       	breq	.+6      	; 0xb410 <_Z11menuProcMixh+0x5c>
    b40a:	43 e6       	ldi	r20, 0x63	; 99
    b40c:	54 2e       	mov	r5, r20
    b40e:	02 c0       	rjmp	.+4      	; 0xb414 <_Z11menuProcMixh+0x60>
    b410:	32 e6       	ldi	r19, 0x62	; 98
    b412:	53 2e       	mov	r5, r19
			}
			else
			{
				event = EVT_KEY_FIRST(KEY_UP) ;
			}
			Tevent = event ;
    b414:	50 92 aa 05 	sts	0x05AA, r5
		}
	}

	if ( !PopupData.PopupActive )
    b418:	80 91 8b 06 	lds	r24, 0x068B
    b41c:	88 23       	and	r24, r24
    b41e:	39 f4       	brne	.+14     	; 0xb42e <_Z11menuProcMixh+0x7a>
	{
#ifdef MODEL_INDEX
//		if (SubMenuFromIndex)
//		{
			mstate2.check_columns(event,s_mixMaxSel) ;
    b420:	8b ed       	ldi	r24, 0xDB	; 219
    b422:	98 e0       	ldi	r25, 0x08	; 8
    b424:	65 2d       	mov	r22, r5
    b426:	40 91 0e 07 	lds	r20, 0x070E
    b42a:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>
#ifdef MODEL_INDEX
//		}
#endif
	}
  
	uint8_t  sub    = mstate2.m_posVert + 1 ;
    b42e:	80 90 db 08 	lds	r8, 0x08DB
    b432:	83 94       	inc	r8
	uint8_t	menulong = 0 ;
	
  switch(Tevent)
    b434:	90 91 aa 05 	lds	r25, 0x05AA
    b438:	90 36       	cpi	r25, 0x60	; 96
    b43a:	41 f0       	breq	.+16     	; 0xb44c <_Z11menuProcMixh+0x98>
    b43c:	9f 3b       	cpi	r25, 0xBF	; 191
    b43e:	19 f0       	breq	.+6      	; 0xb446 <_Z11menuProcMixh+0x92>
    b440:	9e 32       	cpi	r25, 0x2E	; 46
    b442:	c9 f4       	brne	.+50     	; 0xb476 <_Z11menuProcMixh+0xc2>
    b444:	03 c0       	rjmp	.+6      	; 0xb44c <_Z11menuProcMixh+0x98>
	{
    case EVT_ENTRY:
	    s_moveMode = false ;
    b446:	10 92 10 07 	sts	0x0710, r1
    b44a:	15 c0       	rjmp	.+42     	; 0xb476 <_Z11menuProcMixh+0xc2>
		break ;

    case EVT_KEY_FIRST(KEY_MENU):
    case EVT_KEY_BREAK(BTN_RE):
			if ( s_moveMode )
    b44c:	80 91 10 07 	lds	r24, 0x0710
    b450:	88 23       	and	r24, r24
    b452:	29 f0       	breq	.+10     	; 0xb45e <_Z11menuProcMixh+0xaa>
			{
	    	s_moveMode = false ;
    b454:	10 92 10 07 	sts	0x0710, r1
				RotaryState = ROTARY_MENU_UD ;
    b458:	10 92 af 06 	sts	0x06AF, r1
    b45c:	0c c0       	rjmp	.+24     	; 0xb476 <_Z11menuProcMixh+0xc2>
				break ;
			}
			// Else fall through    
			if ( !PopupData.PopupActive )
    b45e:	80 91 8b 06 	lds	r24, 0x068B
    b462:	88 23       	and	r24, r24
    b464:	41 f4       	brne	.+16     	; 0xb476 <_Z11menuProcMixh+0xc2>
			{
		  	killEvents(Tevent);
    b466:	89 2f       	mov	r24, r25
    b468:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
				Tevent = 0 ;			// Prevent changing weight to/from Gvar
    b46c:	10 92 aa 05 	sts	0x05AA, r1
    b470:	66 24       	eor	r6, r6
    b472:	63 94       	inc	r6
    b474:	01 c0       	rjmp	.+2      	; 0xb478 <_Z11menuProcMixh+0xc4>
    b476:	66 24       	eor	r6, r6
			}
    break;
	}

//  if(sub==0) s_moveMode = false;
	uint8_t t_pgOfs = evalOffset( sub, 7 ) ;
    b478:	88 2d       	mov	r24, r8
    b47a:	67 e0       	ldi	r22, 0x07	; 7
    b47c:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    b480:	48 2e       	mov	r4, r24
	 
	if ( PopupData.PopupActive )
    b482:	80 91 8b 06 	lds	r24, 0x068B
    b486:	88 23       	and	r24, r24
    b488:	11 f0       	breq	.+4      	; 0xb48e <_Z11menuProcMixh+0xda>
	{
		Tevent = 0 ;
    b48a:	10 92 aa 05 	sts	0x05AA, r1
	}

  uint8_t mix_index = 0 ;
  uint8_t current = 1 ;

	if ( s_moveMode )
    b48e:	80 91 10 07 	lds	r24, 0x0710
    b492:	88 23       	and	r24, r24
    b494:	69 f0       	breq	.+26     	; 0xb4b0 <_Z11menuProcMixh+0xfc>
	{
		uint8_t dir ;

		if ( ( dir = (Tevent == EVT_KEY_FIRST(KEY_DOWN) ) ) || Tevent == EVT_KEY_FIRST(KEY_UP) )
    b496:	80 91 aa 05 	lds	r24, 0x05AA
    b49a:	60 e0       	ldi	r22, 0x00	; 0
    b49c:	82 36       	cpi	r24, 0x62	; 98
    b49e:	11 f4       	brne	.+4      	; 0xb4a4 <_Z11menuProcMixh+0xf0>
    b4a0:	61 e0       	ldi	r22, 0x01	; 1
    b4a2:	02 c0       	rjmp	.+4      	; 0xb4a8 <_Z11menuProcMixh+0xf4>
    b4a4:	83 36       	cpi	r24, 0x63	; 99
    b4a6:	21 f4       	brne	.+8      	; 0xb4b0 <_Z11menuProcMixh+0xfc>
		{
			moveMix( s_currMixIdx, dir ) ; //true=inc=down false=dec=up - Issue 49
    b4a8:	80 91 d8 08 	lds	r24, 0x08D8
    b4ac:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <_Z7moveMixhh>
    b4b0:	cc 24       	eor	r12, r12
    b4b2:	ff 24       	eor	r15, r15
    b4b4:	f3 94       	inc	r15
    b4b6:	99 24       	eor	r9, r9
    b4b8:	93 94       	inc	r9
	{
    MixData *pmd ;
		
		pmd=mixaddress(mix_index) ;

    if ( t_pgOfs < current && current-t_pgOfs < 8)
    b4ba:	a4 2c       	mov	r10, r4
    b4bc:	bb 24       	eor	r11, r11
							{
								PopupData.PopupIdx = 0 ;
								PopupData.PopupActive = 1 ;
								event = 0 ;		// Kill this off
							}
							if ( PopupData.PopupActive == 0 )
    b4be:	33 24       	eor	r3, r3
    b4c0:	33 94       	inc	r3

  for ( uint8_t chan=1 ; chan <= NUM_CHNOUT ; chan += 1 )
	{
    MixData *pmd ;
		
		pmd=mixaddress(mix_index) ;
    b4c2:	8c 2d       	mov	r24, r12
    b4c4:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z10mixaddressh>
    b4c8:	ec 01       	movw	r28, r24

    if ( t_pgOfs < current && current-t_pgOfs < 8)
    b4ca:	4f 14       	cp	r4, r15
    b4cc:	88 f4       	brcc	.+34     	; 0xb4f0 <_Z11menuProcMixh+0x13c>
    b4ce:	6f 2d       	mov	r22, r15
    b4d0:	70 e0       	ldi	r23, 0x00	; 0
    b4d2:	6a 19       	sub	r22, r10
    b4d4:	7b 09       	sbc	r23, r11
    b4d6:	68 30       	cpi	r22, 0x08	; 8
    b4d8:	71 05       	cpc	r23, r1
    b4da:	54 f4       	brge	.+20     	; 0xb4f0 <_Z11menuProcMixh+0x13c>
		{
      putsChn(0, (current-t_pgOfs)*FH, chan, 0) ; // show CHx
    b4dc:	23 e0       	ldi	r18, 0x03	; 3
    b4de:	66 0f       	add	r22, r22
    b4e0:	77 1f       	adc	r23, r23
    b4e2:	2a 95       	dec	r18
    b4e4:	e1 f7       	brne	.-8      	; 0xb4de <_Z11menuProcMixh+0x12a>
    b4e6:	80 e0       	ldi	r24, 0x00	; 0
    b4e8:	49 2d       	mov	r20, r9
    b4ea:	20 e0       	ldi	r18, 0x00	; 0
    b4ec:	0e 94 22 20 	call	0x4044	; 0x4044 <_Z7putsChnhhhh>
    }

		uint8_t firstMix = mix_index ;

		if (mix_index<MAX_MIXERS && /* pmd->srcRaw && */ pmd->destCh == chan)
    b4f0:	8f e1       	ldi	r24, 0x1F	; 31
    b4f2:	8c 15       	cp	r24, r12
    b4f4:	08 f4       	brcc	.+2      	; 0xb4f8 <_Z11menuProcMixh+0x144>
    b4f6:	aa c0       	rjmp	.+340    	; 0xb64c <_Z11menuProcMixh+0x298>
    b4f8:	78 80       	ld	r7, Y
    b4fa:	79 14       	cp	r7, r9
    b4fc:	09 f0       	breq	.+2      	; 0xb500 <_Z11menuProcMixh+0x14c>
    b4fe:	a6 c0       	rjmp	.+332    	; 0xb64c <_Z11menuProcMixh+0x298>
    b500:	dc 2c       	mov	r13, r12
		{
    	do
			{
				if (t_pgOfs < current )
    b502:	4f 14       	cp	r4, r15
    b504:	08 f0       	brcs	.+2      	; 0xb508 <_Z11menuProcMixh+0x154>
    b506:	97 c0       	rjmp	.+302    	; 0xb636 <_Z11menuProcMixh+0x282>
				{
					if ( current-t_pgOfs < 8 )
    b508:	6f 2d       	mov	r22, r15
    b50a:	70 e0       	ldi	r23, 0x00	; 0
    b50c:	6a 19       	sub	r22, r10
    b50e:	7b 09       	sbc	r23, r11
    b510:	68 30       	cpi	r22, 0x08	; 8
    b512:	71 05       	cpc	r23, r1
    b514:	0c f0       	brlt	.+2      	; 0xb518 <_Z11menuProcMixh+0x164>
    b516:	7f c0       	rjmp	.+254    	; 0xb616 <_Z11menuProcMixh+0x262>
					{
    	  	  uint8_t y = (current-t_pgOfs)*FH ;
    b518:	16 2f       	mov	r17, r22
    b51a:	11 0f       	add	r17, r17
    b51c:	11 0f       	add	r17, r17
    b51e:	11 0f       	add	r17, r17
    				uint8_t attr = 0 ;

						if ( !s_moveMode && (sub == current) )
    b520:	80 91 10 07 	lds	r24, 0x0710
    b524:	88 23       	and	r24, r24
    b526:	a1 f4       	brne	.+40     	; 0xb550 <_Z11menuProcMixh+0x19c>
    b528:	8f 14       	cp	r8, r15
    b52a:	91 f4       	brne	.+36     	; 0xb550 <_Z11menuProcMixh+0x19c>
						{
							s_currMixIdx = mix_index ;
    b52c:	d0 92 d8 08 	sts	0x08D8, r13
							s_currDestCh = chan ;		// For insert
    b530:	70 92 d9 08 	sts	0x08D9, r7
							if ( menulong )
    b534:	66 20       	and	r6, r6
    b536:	29 f0       	breq	.+10     	; 0xb542 <_Z11menuProcMixh+0x18e>
							{
								PopupData.PopupIdx = 0 ;
    b538:	10 92 8c 06 	sts	0x068C, r1
								PopupData.PopupActive = 1 ;
    b53c:	30 92 8b 06 	sts	0x068B, r3
    b540:	55 24       	eor	r5, r5
								event = 0 ;		// Kill this off
							}
							if ( PopupData.PopupActive == 0 )
    b542:	80 91 8b 06 	lds	r24, 0x068B
    b546:	88 23       	and	r24, r24
    b548:	19 f4       	brne	.+6      	; 0xb550 <_Z11menuProcMixh+0x19c>
    b54a:	ee 24       	eor	r14, r14
    b54c:	e3 94       	inc	r14
    b54e:	01 c0       	rjmp	.+2      	; 0xb552 <_Z11menuProcMixh+0x19e>
    b550:	ee 24       	eor	r14, r14
							{
    						attr = INVERS ;
							}
						}
        	  if(firstMix != mix_index) //show prefix only if not first mix
    b552:	cd 14       	cp	r12, r13
    b554:	51 f0       	breq	.+20     	; 0xb56a <_Z11menuProcMixh+0x1b6>
        	 		lcd_putsAttIdx( 3*FW+1, y, PSTR("\001+*R"),pmd->mltpx,0 ) ;
    b556:	2f 81       	ldd	r18, Y+7	; 0x07
    b558:	26 95       	lsr	r18
    b55a:	23 70       	andi	r18, 0x03	; 3
    b55c:	83 e1       	ldi	r24, 0x13	; 19
    b55e:	61 2f       	mov	r22, r17
    b560:	42 e3       	ldi	r20, 0x32	; 50
    b562:	5e e0       	ldi	r21, 0x0E	; 14
    b564:	00 e0       	ldi	r16, 0x00	; 0
    b566:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>

						putsChnOpRaw( 8*FW, y, pmd, 0 ) ;
    b56a:	80 e3       	ldi	r24, 0x30	; 48
    b56c:	61 2f       	mov	r22, r17
    b56e:	ae 01       	movw	r20, r28
    b570:	20 e0       	ldi	r18, 0x00	; 0
    b572:	0e 94 9f 24 	call	0x493e	; 0x493e <_Z12putsChnOpRawhhP9t_MixDatah>

	#if GVARS
						pmd->weight = gvarMenuItem( 7*FW+FW/2, y, pmd->weight, -125, 125, attr ) ;
    b576:	8d e2       	ldi	r24, 0x2D	; 45
    b578:	61 2f       	mov	r22, r17
    b57a:	4a 81       	ldd	r20, Y+2	; 0x02
    b57c:	23 e8       	ldi	r18, 0x83	; 131
    b57e:	0d e7       	ldi	r16, 0x7D	; 125
    b580:	0e 94 67 25 	call	0x4ace	; 0x4ace <_Z12gvarMenuItemhhaaah>
    b584:	8a 83       	std	Y+2, r24	; 0x02
//						{
//							lcd_char_inverse( 0, y, 12*FW, 0 ) ;
//						}

//    	  	  lcd_putcAtt(    7*FW+FW/2, y, '%', 0 ) ; //tattr);
    	  	  if( pmd->swtch) putsDrSwitches( 12*FW, y, pmd->swtch, 0 ) ; //tattr);
    b586:	4b 81       	ldd	r20, Y+3	; 0x03
    b588:	44 23       	and	r20, r20
    b58a:	29 f0       	breq	.+10     	; 0xb596 <_Z11menuProcMixh+0x1e2>
    b58c:	88 e4       	ldi	r24, 0x48	; 72
    b58e:	61 2f       	mov	r22, r17
    b590:	20 e0       	ldi	r18, 0x00	; 0
    b592:	0e 94 3c 14 	call	0x2878	; 0x2878 <_Z14putsDrSwitcheshhah>
						if ( pmd->curve )
    b596:	4c 81       	ldd	r20, Y+4	; 0x04
    b598:	44 23       	and	r20, r20
    b59a:	b9 f0       	breq	.+46     	; 0xb5ca <_Z11menuProcMixh+0x216>
						{
							if ( pmd->differential ) lcd_putcAtt( 16*FW, y, CHR_d, 0 ) ;
    b59c:	8f 81       	ldd	r24, Y+7	; 0x07
    b59e:	87 ff       	sbrs	r24, 7
    b5a0:	04 c0       	rjmp	.+8      	; 0xb5aa <_Z11menuProcMixh+0x1f6>
    b5a2:	80 e6       	ldi	r24, 0x60	; 96
    b5a4:	61 2f       	mov	r22, r17
    b5a6:	44 e6       	ldi	r20, 0x64	; 100
    b5a8:	0d c0       	rjmp	.+26     	; 0xb5c4 <_Z11menuProcMixh+0x210>
							else
							{
								if ( ( pmd->curve > -28 ) && ( pmd->curve <= 27 ) )
    b5aa:	84 2f       	mov	r24, r20
    b5ac:	85 5e       	subi	r24, 0xE5	; 229
    b5ae:	87 33       	cpi	r24, 0x37	; 55
    b5b0:	30 f4       	brcc	.+12     	; 0xb5be <_Z11menuProcMixh+0x20a>
								{
	    	  	  		put_curve( 16*FW, y, pmd->curve, 0 ) ;
    b5b2:	80 e6       	ldi	r24, 0x60	; 96
    b5b4:	61 2f       	mov	r22, r17
    b5b6:	20 e0       	ldi	r18, 0x00	; 0
    b5b8:	0e 94 c3 22 	call	0x4586	; 0x4586 <_Z9put_curvehhah>
    b5bc:	06 c0       	rjmp	.+12     	; 0xb5ca <_Z11menuProcMixh+0x216>
								}
								else
								{
									lcd_putcAtt( 16*FW, y, 'E', 0 ) ;
    b5be:	80 e6       	ldi	r24, 0x60	; 96
    b5c0:	61 2f       	mov	r22, r17
    b5c2:	45 e4       	ldi	r20, 0x45	; 69
    b5c4:	20 e0       	ldi	r18, 0x00	; 0
    b5c6:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
								}
							}
						}
						char cs = ' ';
        	  if (pmd->speedDown || pmd->speedUp)
    b5ca:	8e 81       	ldd	r24, Y+6	; 0x06
    b5cc:	88 23       	and	r24, r24
    b5ce:	11 f0       	breq	.+4      	; 0xb5d4 <_Z11menuProcMixh+0x220>
    b5d0:	43 e5       	ldi	r20, 0x53	; 83
    b5d2:	01 c0       	rjmp	.+2      	; 0xb5d6 <_Z11menuProcMixh+0x222>
    b5d4:	40 e2       	ldi	r20, 0x20	; 32
        	    cs = CHR_S ;
        	  if ((pmd->delayUp || pmd->delayDown))
    b5d6:	8d 81       	ldd	r24, Y+5	; 0x05
    b5d8:	88 23       	and	r24, r24
    b5da:	29 f0       	breq	.+10     	; 0xb5e6 <_Z11menuProcMixh+0x232>
        	    cs = (cs ==CHR_S ? '*' : CHR_D);
    b5dc:	43 35       	cpi	r20, 0x53	; 83
    b5de:	11 f0       	breq	.+4      	; 0xb5e4 <_Z11menuProcMixh+0x230>
    b5e0:	44 e4       	ldi	r20, 0x44	; 68
    b5e2:	01 c0       	rjmp	.+2      	; 0xb5e6 <_Z11menuProcMixh+0x232>
    b5e4:	4a e2       	ldi	r20, 0x2A	; 42
        	  lcd_putc(20*FW+1, y, cs ) ;
    b5e6:	89 e7       	ldi	r24, 0x79	; 121
    b5e8:	61 2f       	mov	r22, r17
    b5ea:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>

						if ( s_moveMode )
    b5ee:	80 91 10 07 	lds	r24, 0x0710
    b5f2:	88 23       	and	r24, r24
    b5f4:	01 f1       	breq	.+64     	; 0xb636 <_Z11menuProcMixh+0x282>
						{
							if ( s_moveMixIdx == mix_index )
    b5f6:	80 91 da 08 	lds	r24, 0x08DA
    b5fa:	8d 15       	cp	r24, r13
    b5fc:	e1 f4       	brne	.+56     	; 0xb636 <_Z11menuProcMixh+0x282>
							{
								lcd_char_inverse( 4*FW, y, 17*FW, 0 ) ;
    b5fe:	88 e1       	ldi	r24, 0x18	; 24
    b600:	61 2f       	mov	r22, r17
    b602:	46 e6       	ldi	r20, 0x66	; 102
    b604:	20 e0       	ldi	r18, 0x00	; 0
    b606:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <_Z16lcd_char_inversehhhh>
								s_currMixIdx = mix_index ;
    b60a:	d0 92 d8 08 	sts	0x08D8, r13
								sub = mstate2.m_posVert = current ;
    b60e:	f0 92 db 08 	sts	0x08DB, r15
    b612:	8f 2c       	mov	r8, r15
    b614:	10 c0       	rjmp	.+32     	; 0xb636 <_Z11menuProcMixh+0x282>
							}
						}
					}
					else
					{
						if ( current-t_pgOfs == 8 )
    b616:	68 30       	cpi	r22, 0x08	; 8
    b618:	71 05       	cpc	r23, r1
    b61a:	69 f4       	brne	.+26     	; 0xb636 <_Z11menuProcMixh+0x282>
						{
							if ( s_moveMode )
    b61c:	80 91 10 07 	lds	r24, 0x0710
    b620:	88 23       	and	r24, r24
    b622:	49 f0       	breq	.+18     	; 0xb636 <_Z11menuProcMixh+0x282>
							{
								if ( s_moveMixIdx == mix_index )
    b624:	80 91 da 08 	lds	r24, 0x08DA
    b628:	8d 15       	cp	r24, r13
    b62a:	29 f4       	brne	.+10     	; 0xb636 <_Z11menuProcMixh+0x282>
								{
									mstate2.m_posVert += 1 ;								
    b62c:	80 91 db 08 	lds	r24, 0x08DB
    b630:	8f 5f       	subi	r24, 0xFF	; 255
    b632:	80 93 db 08 	sts	0x08DB, r24
								}
							}
						}
					}
				}
				current += 1 ; mix_index += 1; pmd += 1 ;  // mixCnt += 1 ; 
    b636:	f3 94       	inc	r15
    b638:	d3 94       	inc	r13

		uint8_t firstMix = mix_index ;

		if (mix_index<MAX_MIXERS && /* pmd->srcRaw && */ pmd->destCh == chan)
		{
    	do
    b63a:	8f e1       	ldi	r24, 0x1F	; 31
    b63c:	8d 15       	cp	r24, r13
    b63e:	78 f1       	brcs	.+94     	; 0xb69e <_Z11menuProcMixh+0x2ea>
								}
							}
						}
					}
				}
				current += 1 ; mix_index += 1; pmd += 1 ;  // mixCnt += 1 ; 
    b640:	2a 96       	adiw	r28, 0x0a	; 10

		uint8_t firstMix = mix_index ;

		if (mix_index<MAX_MIXERS && /* pmd->srcRaw && */ pmd->destCh == chan)
		{
    	do
    b642:	88 81       	ld	r24, Y
    b644:	87 15       	cp	r24, r7
    b646:	09 f4       	brne	.+2      	; 0xb64a <_Z11menuProcMixh+0x296>
    b648:	5c cf       	rjmp	.-328    	; 0xb502 <_Z11menuProcMixh+0x14e>
    b64a:	29 c0       	rjmp	.+82     	; 0xb69e <_Z11menuProcMixh+0x2ea>
				current += 1 ; mix_index += 1; pmd += 1 ;  // mixCnt += 1 ; 
    	} while ( (mix_index<MAX_MIXERS && /* pmd->srcRaw && */ pmd->destCh == chan)) ;
		}
		else
		{
			if (sub == current)
    b64c:	8f 14       	cp	r8, r15
    b64e:	29 f5       	brne	.+74     	; 0xb69a <_Z11menuProcMixh+0x2e6>
			{
				s_currDestCh = chan ;		// For insert
    b650:	90 92 d9 08 	sts	0x08D9, r9
				s_currMixIdx = mix_index ;
    b654:	c0 92 d8 08 	sts	0x08D8, r12
				lcd_rect( 0, (current-t_pgOfs)*FH-1, 25, 9 ) ;
    b658:	6f 2d       	mov	r22, r15
    b65a:	70 e0       	ldi	r23, 0x00	; 0
    b65c:	6a 19       	sub	r22, r10
    b65e:	7b 09       	sbc	r23, r11
    b660:	93 e0       	ldi	r25, 0x03	; 3
    b662:	66 0f       	add	r22, r22
    b664:	77 1f       	adc	r23, r23
    b666:	9a 95       	dec	r25
    b668:	e1 f7       	brne	.-8      	; 0xb662 <_Z11menuProcMixh+0x2ae>
    b66a:	61 50       	subi	r22, 0x01	; 1
    b66c:	80 e0       	ldi	r24, 0x00	; 0
    b66e:	49 e1       	ldi	r20, 0x19	; 25
    b670:	29 e0       	ldi	r18, 0x09	; 9
    b672:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
//				s_moveMode = 0 ;		// Can't move this
				if ( menulong )		// Must need to insert here
    b676:	66 20       	and	r6, r6
    b678:	81 f0       	breq	.+32     	; 0xb69a <_Z11menuProcMixh+0x2e6>
				{
      		if ( !reachMixerCountLimit())
    b67a:	0e 94 63 22 	call	0x44c6	; 0x44c6 <_Z20reachMixerCountLimitv>
    b67e:	88 23       	and	r24, r24
    b680:	61 f4       	brne	.+24     	; 0xb69a <_Z11menuProcMixh+0x2e6>
      		{
//						s_currMixInsMode = 1 ;
      			insertMix(s_currMixIdx, 0 ) ;
    b682:	80 91 d8 08 	lds	r24, 0x08D8
    b686:	60 e0       	ldi	r22, 0x00	; 0
    b688:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <_ZL9insertMixhh>
  	    		s_moveMode=false;
    b68c:	10 92 10 07 	sts	0x0710, r1
	      		pushMenu(menuProcMixOne) ;
    b690:	88 eb       	ldi	r24, 0xB8	; 184
    b692:	9b e5       	ldi	r25, 0x5B	; 91
    b694:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
    b698:	08 c0       	rjmp	.+16     	; 0xb6aa <_Z11menuProcMixh+0x2f6>
						break ;
//						return ;
      		}
				}
			}
			current += 1 ;
    b69a:	f3 94       	inc	r15
    b69c:	01 c0       	rjmp	.+2      	; 0xb6a0 <_Z11menuProcMixh+0x2ec>
    b69e:	cd 2c       	mov	r12, r13
		{
			moveMix( s_currMixIdx, dir ) ; //true=inc=down false=dec=up - Issue 49
		}
	}

  for ( uint8_t chan=1 ; chan <= NUM_CHNOUT ; chan += 1 )
    b6a0:	93 94       	inc	r9
    b6a2:	81 e1       	ldi	r24, 0x11	; 17
    b6a4:	98 16       	cp	r9, r24
    b6a6:	09 f0       	breq	.+2      	; 0xb6aa <_Z11menuProcMixh+0x2f6>
    b6a8:	0c cf       	rjmp	.-488    	; 0xb4c2 <_Z11menuProcMixh+0x10e>
			}
		}
	}
#endif
#endif
	if ( PopupData.PopupActive )
    b6aa:	80 91 8b 06 	lds	r24, 0x068B
    b6ae:	88 23       	and	r24, r24
    b6b0:	09 f4       	brne	.+2      	; 0xb6b4 <_Z11menuProcMixh+0x300>
    b6b2:	48 c0       	rjmp	.+144    	; 0xb744 <_Z11menuProcMixh+0x390>
	{
		Tevent = event ;
    b6b4:	50 92 aa 05 	sts	0x05AA, r5
}


static void mixpopup()
{
	uint8_t popaction = doPopup( MixPopList, 0x1F, 8 ) ;
    b6b8:	8d e3       	ldi	r24, 0x3D	; 61
    b6ba:	9e e0       	ldi	r25, 0x0E	; 14
    b6bc:	6f e1       	ldi	r22, 0x1F	; 31
    b6be:	48 e0       	ldi	r20, 0x08	; 8
    b6c0:	0e 94 c1 3b 	call	0x7782	; 0x7782 <_Z7doPopupPKchh>
	
//	uint8_t popaction = popupProcess( 4 ) ;
	uint8_t popidx = PopupData.PopupSel ;
    b6c4:	90 91 8d 06 	lds	r25, 0x068D
//	lcd_char_inverse( 4*FW, (popidx+1)*FH, 6*FW, 0 ) ;

  if ( popaction == POPUP_SELECT )
    b6c8:	81 30       	cpi	r24, 0x01	; 1
    b6ca:	b1 f5       	brne	.+108    	; 0xb738 <_Z11menuProcMixh+0x384>
	{
		if ( popidx == 1 )
    b6cc:	91 30       	cpi	r25, 0x01	; 1
    b6ce:	79 f4       	brne	.+30     	; 0xb6ee <_Z11menuProcMixh+0x33a>
		{
      if ( !reachMixerCountLimit())
    b6d0:	0e 94 63 22 	call	0x44c6	; 0x44c6 <_Z20reachMixerCountLimitv>
    b6d4:	88 23       	and	r24, r24
    b6d6:	69 f4       	brne	.+26     	; 0xb6f2 <_Z11menuProcMixh+0x33e>
      {
//				s_currMixInsMode = 1 ;
      	insertMix(++s_currMixIdx, 0 ) ;
    b6d8:	80 91 d8 08 	lds	r24, 0x08D8
    b6dc:	8f 5f       	subi	r24, 0xFF	; 255
    b6de:	80 93 d8 08 	sts	0x08D8, r24
    b6e2:	60 e0       	ldi	r22, 0x00	; 0
    b6e4:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <_ZL9insertMixhh>
  	    s_moveMode=false;
    b6e8:	10 92 10 07 	sts	0x0710, r1
    b6ec:	02 c0       	rjmp	.+4      	; 0xb6f2 <_Z11menuProcMixh+0x33e>
			}
		}
		if ( popidx < 2 )
    b6ee:	92 30       	cpi	r25, 0x02	; 2
    b6f0:	18 f4       	brcc	.+6      	; 0xb6f8 <_Z11menuProcMixh+0x344>
		{
	    pushMenu(menuProcMixOne) ;
    b6f2:	88 eb       	ldi	r24, 0xB8	; 184
    b6f4:	9b e5       	ldi	r25, 0x5B	; 91
    b6f6:	0e c0       	rjmp	.+28     	; 0xb714 <_Z11menuProcMixh+0x360>
		}
		else if ( popidx == 4 )		// Delete
    b6f8:	94 30       	cpi	r25, 0x04	; 4
    b6fa:	79 f4       	brne	.+30     	; 0xb71a <_Z11menuProcMixh+0x366>
		{
			mixToDelete = s_currMixIdx;
    b6fc:	80 91 d8 08 	lds	r24, 0x08D8
    b700:	80 93 0f 07 	sts	0x070F, r24
			killEvents(Tevent);
    b704:	80 91 aa 05 	lds	r24, 0x05AA
    b708:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
			Tevent = 0 ;
    b70c:	10 92 aa 05 	sts	0x05AA, r1
			pushMenu(menuDeleteMix);
    b710:	88 e4       	ldi	r24, 0x48	; 72
    b712:	9b e3       	ldi	r25, 0x3B	; 59
    b714:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
    b718:	0d c0       	rjmp	.+26     	; 0xb734 <_Z11menuProcMixh+0x380>
		}
		else
		{
			if( popidx == 2 )	// copy
    b71a:	92 30       	cpi	r25, 0x02	; 2
    b71c:	41 f4       	brne	.+16     	; 0xb72e <_Z11menuProcMixh+0x37a>
			{
     		insertMix(++s_currMixIdx, 1 ) ;
    b71e:	80 91 d8 08 	lds	r24, 0x08D8
    b722:	8f 5f       	subi	r24, 0xFF	; 255
    b724:	80 93 d8 08 	sts	0x08D8, r24
    b728:	61 e0       	ldi	r22, 0x01	; 1
    b72a:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <_ZL9insertMixhh>
			}
			// PopupIdx == 2 or 3, copy or move
			s_moveMode = 1 ;
    b72e:	81 e0       	ldi	r24, 0x01	; 1
    b730:	80 93 10 07 	sts	0x0710, r24
		}
		PopupData.PopupActive = 0 ;
    b734:	10 92 8b 06 	sts	0x068B, r1
//	{
//		PopupActive = 0 ;
//		killEvents( Tevent ) ;
//		Tevent = 0 ;
//	}
	s_moveMixIdx = s_currMixIdx ;
    b738:	80 91 d8 08 	lds	r24, 0x08D8
    b73c:	80 93 da 08 	sts	0x08DA, r24
#endif
	if ( PopupData.PopupActive )
	{
		Tevent = event ;
		mixpopup() ;
    s_editMode = false;
    b740:	10 92 e5 06 	sts	0x06E5, r1
	s_mixMaxSel = current - 1 ;
#else
	s_mixMaxSel = current - 2 ;
#endif
#else
	s_mixMaxSel = current - 2 ;
    b744:	8e ef       	ldi	r24, 0xFE	; 254
    b746:	f8 0e       	add	r15, r24
    b748:	f0 92 0e 07 	sts	0x070E, r15
#endif
}
    b74c:	df 91       	pop	r29
    b74e:	cf 91       	pop	r28
    b750:	1f 91       	pop	r17
    b752:	0f 91       	pop	r16
    b754:	ff 90       	pop	r15
    b756:	ef 90       	pop	r14
    b758:	df 90       	pop	r13
    b75a:	cf 90       	pop	r12
    b75c:	bf 90       	pop	r11
    b75e:	af 90       	pop	r10
    b760:	9f 90       	pop	r9
    b762:	8f 90       	pop	r8
    b764:	7f 90       	pop	r7
    b766:	6f 90       	pop	r6
    b768:	5f 90       	pop	r5
    b76a:	4f 90       	pop	r4
    b76c:	3f 90       	pop	r3
    b76e:	08 95       	ret

0000b770 <_Z14menuProcMixOneh>:
	}
	asm("") ;
}


void menuProcMixOne(uint8_t event)
    b770:	5f 92       	push	r5
    b772:	6f 92       	push	r6
    b774:	7f 92       	push	r7
    b776:	8f 92       	push	r8
    b778:	9f 92       	push	r9
    b77a:	af 92       	push	r10
    b77c:	bf 92       	push	r11
    b77e:	cf 92       	push	r12
    b780:	df 92       	push	r13
    b782:	ef 92       	push	r14
    b784:	ff 92       	push	r15
    b786:	0f 93       	push	r16
    b788:	1f 93       	push	r17
    b78a:	cf 93       	push	r28
    b78c:	df 93       	push	r29
    b78e:	a8 2e       	mov	r10, r24
{
//	static uint8_t edit3Switch ;
  MixData *md2 = mixaddress( s_currMixIdx ) ;
    b790:	80 91 d8 08 	lds	r24, 0x08D8
    b794:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z10mixaddressh>
    b798:	ec 01       	movw	r28, r24
//		numItems = 16 ;
//	}
//    SIMPLE_SUBMENU_NOTITLE(numItems, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0 } ) ;

	static MState2 mstate2 ;
	mstate2.check_columns(event, 15 ) ;
    b79a:	8d ed       	ldi	r24, 0xDD	; 221
    b79c:	98 e0       	ldi	r25, 0x08	; 8
    b79e:	6a 2d       	mov	r22, r10
    b7a0:	4f e0       	ldi	r20, 0x0F	; 15
    b7a2:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>
//	{
//		edit3Switch = 0 ;
//	}
//	uint8_t l_edit3Switch = edit3Switch ;
		 
		uint8_t x = TITLEP( PSTR(STR_EDIT_MIX));
    b7a6:	85 e8       	ldi	r24, 0x85	; 133
    b7a8:	9f e0       	ldi	r25, 0x0F	; 15
    b7aa:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
//		if ( event == EVT_ENTRY )
//		{
//			RotaryState = ROTARY_MENU_UD ;
//		}

    putsChn(x+1*FW,0,md2->destCh,0);
    b7ae:	8a 5f       	subi	r24, 0xFA	; 250
    b7b0:	60 e0       	ldi	r22, 0x00	; 0
    b7b2:	48 81       	ld	r20, Y
    b7b4:	20 e0       	ldi	r18, 0x00	; 0
    b7b6:	0e 94 22 20 	call	0x4044	; 0x4044 <_Z7putsChnhhhh>
    uint8_t  sub    = mstate2.m_posVert;
    b7ba:	80 90 dd 08 	lds	r8, 0x08DD

    uint8_t t_pgOfs = evalOffset(sub, 6);
    b7be:	88 2d       	mov	r24, r8
    b7c0:	66 e0       	ldi	r22, 0x06	; 6
    b7c2:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    b7c6:	c8 2e       	mov	r12, r24
		lcd_puts_Pskip( FH, PSTR(STR_2SOURCE"\037"STR_2WEIGHT"\037""\001"STR_OFFSET"\037"STR_2FIX_OFFSET
    b7c8:	88 e0       	ldi	r24, 0x08	; 8
    b7ca:	63 ef       	ldi	r22, 0xF3	; 243
    b7cc:	7e e0       	ldi	r23, 0x0E	; 14
    b7ce:	40 91 e4 06 	lds	r20, 0x06E4
    b7d2:	0e 94 9c 6a 	call	0xd538	; 0xd538 <_Z14lcd_puts_PskiphPKch>
    b7d6:	78 e0       	ldi	r23, 0x08	; 8
    b7d8:	f7 2e       	mov	r15, r23
						uint8_t b = 1 ;
//            lcd_puts_Pleft( y, PSTR("\001MODES"));

						if ( attr )
						{
							Columns = &ProgColumns[COLUMNS_4] ;
    b7da:	99 24       	eor	r9, r9
    b7dc:	93 94       	inc	r9
    b7de:	6c e2       	ldi	r22, 0x2C	; 44
    b7e0:	66 2e       	mov	r6, r22
    b7e2:	64 e0       	ldi	r22, 0x04	; 4
    b7e4:	76 2e       	mov	r7, r22
    		    if(attr) CHECK_INCDEC_H_MODELVAR_0( value2, 2 ) ;
					 	if ( value != value2 )
						{
							if ( value2 == 2 )
							{
								md2->curve = -128 ;
    b7e6:	50 e8       	ldi	r21, 0x80	; 128
    b7e8:	55 2e       	mov	r5, r21

    for(uint8_t k=0; k<7; k++)
    {
        uint8_t y = (k+1) * FH;
        uint8_t i = k + t_pgOfs;
        uint8_t attr = sub==i ? InverseBlink : 0;
    b7ea:	8c 14       	cp	r8, r12
    b7ec:	11 f0       	breq	.+4      	; 0xb7f2 <_Z14menuProcMixOneh+0x82>
    b7ee:	ee 24       	eor	r14, r14
    b7f0:	02 c0       	rjmp	.+4      	; 0xb7f6 <_Z14menuProcMixOneh+0x86>
    b7f2:	e0 90 eb 06 	lds	r14, 0x06EB
    		uint8_t b ;
        switch(i){
    b7f6:	87 e0       	ldi	r24, 0x07	; 7
    b7f8:	c8 16       	cp	r12, r24
    b7fa:	09 f4       	brne	.+2      	; 0xb7fe <_Z14menuProcMixOneh+0x8e>
    b7fc:	f5 c0       	rjmp	.+490    	; 0xb9e8 <_Z14menuProcMixOneh+0x278>
    b7fe:	8c 15       	cp	r24, r12
    b800:	b0 f0       	brcs	.+44     	; 0xb82e <_Z14menuProcMixOneh+0xbe>
    b802:	93 e0       	ldi	r25, 0x03	; 3
    b804:	c9 16       	cp	r12, r25
    b806:	09 f4       	brne	.+2      	; 0xb80a <_Z14menuProcMixOneh+0x9a>
    b808:	6e c0       	rjmp	.+220    	; 0xb8e6 <_Z14menuProcMixOneh+0x176>
    b80a:	9c 15       	cp	r25, r12
    b80c:	40 f0       	brcs	.+16     	; 0xb81e <_Z14menuProcMixOneh+0xae>
    b80e:	81 e0       	ldi	r24, 0x01	; 1
    b810:	c8 16       	cp	r12, r24
    b812:	09 f4       	brne	.+2      	; 0xb816 <_Z14menuProcMixOneh+0xa6>
    b814:	56 c0       	rjmp	.+172    	; 0xb8c2 <_Z14menuProcMixOneh+0x152>
    b816:	8c 15       	cp	r24, r12
    b818:	08 f4       	brcc	.+2      	; 0xb81c <_Z14menuProcMixOneh+0xac>
    b81a:	5c c0       	rjmp	.+184    	; 0xb8d4 <_Z14menuProcMixOneh+0x164>
    b81c:	26 c0       	rjmp	.+76     	; 0xb86a <_Z14menuProcMixOneh+0xfa>
    b81e:	95 e0       	ldi	r25, 0x05	; 5
    b820:	c9 16       	cp	r12, r25
    b822:	09 f4       	brne	.+2      	; 0xb826 <_Z14menuProcMixOneh+0xb6>
    b824:	a1 c0       	rjmp	.+322    	; 0xb968 <_Z14menuProcMixOneh+0x1f8>
    b826:	9c 15       	cp	r25, r12
    b828:	08 f4       	brcc	.+2      	; 0xb82c <_Z14menuProcMixOneh+0xbc>
    b82a:	b0 c0       	rjmp	.+352    	; 0xb98c <_Z14menuProcMixOneh+0x21c>
    b82c:	6d c0       	rjmp	.+218    	; 0xb908 <_Z14menuProcMixOneh+0x198>
    b82e:	8b e0       	ldi	r24, 0x0B	; 11
    b830:	c8 16       	cp	r12, r24
    b832:	09 f4       	brne	.+2      	; 0xb836 <_Z14menuProcMixOneh+0xc6>
    b834:	99 c1       	rjmp	.+818    	; 0xbb68 <_Z14menuProcMixOneh+0x3f8>
    b836:	8c 15       	cp	r24, r12
    b838:	40 f0       	brcs	.+16     	; 0xb84a <_Z14menuProcMixOneh+0xda>
    b83a:	99 e0       	ldi	r25, 0x09	; 9
    b83c:	c9 16       	cp	r12, r25
    b83e:	09 f4       	brne	.+2      	; 0xb842 <_Z14menuProcMixOneh+0xd2>
    b840:	2c c1       	rjmp	.+600    	; 0xba9a <_Z14menuProcMixOneh+0x32a>
    b842:	9c 15       	cp	r25, r12
    b844:	08 f4       	brcc	.+2      	; 0xb848 <_Z14menuProcMixOneh+0xd8>
    b846:	6d c1       	rjmp	.+730    	; 0xbb22 <_Z14menuProcMixOneh+0x3b2>
    b848:	1d c1       	rjmp	.+570    	; 0xba84 <_Z14menuProcMixOneh+0x314>
    b84a:	8d e0       	ldi	r24, 0x0D	; 13
    b84c:	c8 16       	cp	r12, r24
    b84e:	09 f4       	brne	.+2      	; 0xb852 <_Z14menuProcMixOneh+0xe2>
    b850:	ae c1       	rjmp	.+860    	; 0xbbae <_Z14menuProcMixOneh+0x43e>
    b852:	c8 16       	cp	r12, r24
    b854:	08 f4       	brcc	.+2      	; 0xb858 <_Z14menuProcMixOneh+0xe8>
    b856:	9f c1       	rjmp	.+830    	; 0xbb96 <_Z14menuProcMixOneh+0x426>
    b858:	9e e0       	ldi	r25, 0x0E	; 14
    b85a:	c9 16       	cp	r12, r25
    b85c:	09 f4       	brne	.+2      	; 0xb860 <_Z14menuProcMixOneh+0xf0>
    b85e:	b3 c1       	rjmp	.+870    	; 0xbbc6 <_Z14menuProcMixOneh+0x456>
    b860:	8f e0       	ldi	r24, 0x0F	; 15
    b862:	c8 16       	cp	r12, r24
    b864:	09 f0       	breq	.+2      	; 0xb868 <_Z14menuProcMixOneh+0xf8>
    b866:	c6 c1       	rjmp	.+908    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
    b868:	ba c1       	rjmp	.+884    	; 0xbbde <_Z14menuProcMixOneh+0x46e>
        case 0:
				{
					uint8_t value = md2->srcRaw ;
    b86a:	19 81       	ldd	r17, Y+1	; 0x01
					putsChnOpRaw( FW*14,y,md2, attr ) ;
    b86c:	84 e5       	ldi	r24, 0x54	; 84
    b86e:	6f 2d       	mov	r22, r15
    b870:	ae 01       	movw	r20, r28
    b872:	2e 2d       	mov	r18, r14
    b874:	0e 94 9f 24 	call	0x493e	; 0x493e <_Z12putsChnOpRawhhP9t_MixDatah>
					if ( value == MIX_3POS )
    b878:	15 32       	cpi	r17, 0x25	; 37
    b87a:	31 f4       	brne	.+12     	; 0xb888 <_Z14menuProcMixOneh+0x118>
					{
						value += md2->sw23pos ;
    b87c:	19 85       	ldd	r17, Y+9	; 0x09
    b87e:	12 95       	swap	r17
    b880:	16 95       	lsr	r17
    b882:	17 70       	andi	r17, 0x07	; 7
    b884:	1b 5d       	subi	r17, 0xDB	; 219
    b886:	03 c0       	rjmp	.+6      	; 0xb88e <_Z14menuProcMixOneh+0x11e>
					}
					else
					{
						if ( value > MIX_3POS )
    b888:	16 32       	cpi	r17, 0x26	; 38
    b88a:	08 f0       	brcs	.+2      	; 0xb88e <_Z14menuProcMixOneh+0x11e>
						{
							value += 6 ;
    b88c:	1a 5f       	subi	r17, 0xFA	; 250
						}
					}
					if ( attr )
    b88e:	ee 20       	and	r14, r14
    b890:	09 f4       	brne	.+2      	; 0xb894 <_Z14menuProcMixOneh+0x124>
    b892:	b0 c1       	rjmp	.+864    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
					{
            CHECK_INCDEC_H_MODELVAR( value, 1,NUM_XCHNRAW+1+MAX_GVARS+1+NUM_SCALERS + 6 ) ;	// 6 for switches
    b894:	81 2f       	mov	r24, r17
    b896:	61 e0       	ldi	r22, 0x01	; 1
    b898:	47 e3       	ldi	r20, 0x37	; 55
    b89a:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    b89e:	98 2f       	mov	r25, r24
						if ( value >= MIX_3POS )
    b8a0:	85 32       	cpi	r24, 0x25	; 37
    b8a2:	68 f0       	brcs	.+26     	; 0xb8be <_Z14menuProcMixOneh+0x14e>
						{
							if ( value > MIX_3POS + 6 )
    b8a4:	8c 32       	cpi	r24, 0x2C	; 44
    b8a6:	10 f0       	brcs	.+4      	; 0xb8ac <_Z14menuProcMixOneh+0x13c>
							{
								value -= 6 ;
    b8a8:	96 50       	subi	r25, 0x06	; 6
    b8aa:	09 c0       	rjmp	.+18     	; 0xb8be <_Z14menuProcMixOneh+0x14e>
							}
							else
							{
								md2->sw23pos = value - MIX_3POS ;
    b8ac:	95 52       	subi	r25, 0x25	; 37
    b8ae:	92 95       	swap	r25
    b8b0:	99 0f       	add	r25, r25
    b8b2:	90 7e       	andi	r25, 0xE0	; 224
    b8b4:	89 85       	ldd	r24, Y+9	; 0x09
    b8b6:	8f 71       	andi	r24, 0x1F	; 31
    b8b8:	89 2b       	or	r24, r25
    b8ba:	89 87       	std	Y+9, r24	; 0x09
    b8bc:	95 e2       	ldi	r25, 0x25	; 37
								value = MIX_3POS ;
							}
						}
						md2->srcRaw = value ;
    b8be:	99 83       	std	Y+1, r25	; 0x01
    b8c0:	99 c1       	rjmp	.+818    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
				break ;

				case 1:
//            lcd_puts_Pleft(  y,PSTR(STR_2WEIGHT));
#if GVARS
						md2->weight = gvarMenuItem( FW*16, y, md2->weight, -125, 125, attr ) ;
    b8c2:	80 e6       	ldi	r24, 0x60	; 96
    b8c4:	6f 2d       	mov	r22, r15
    b8c6:	4a 81       	ldd	r20, Y+2	; 0x02
    b8c8:	23 e8       	ldi	r18, 0x83	; 131
    b8ca:	0d e7       	ldi	r16, 0x7D	; 125
    b8cc:	0e 94 67 25 	call	0x4ace	; 0x4ace <_Z12gvarMenuItemhhaaah>
    b8d0:	8a 83       	std	Y+2, r24	; 0x02
    b8d2:	90 c1       	rjmp	.+800    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
            lcd_puts_P(  2*FW,y,md2->enableFmTrim ? PSTR(STR_FMTRIMVAL) : PSTR(STR_OFFSET));
#else
//            lcd_puts_Pleft( y, PSTR(STR_OFFSET) ) ;
#endif
#if GVARS
						md2->sOffset = gvarMenuItem( FW*16, y, md2->sOffset, -125, 125, attr ) ;
    b8d4:	80 e6       	ldi	r24, 0x60	; 96
    b8d6:	6f 2d       	mov	r22, r15
    b8d8:	48 85       	ldd	r20, Y+8	; 0x08
    b8da:	23 e8       	ldi	r18, 0x83	; 131
    b8dc:	0d e7       	ldi	r16, 0x7D	; 125
    b8de:	0e 94 67 25 	call	0x4ace	; 0x4ace <_Z12gvarMenuItemhhaaah>
    b8e2:	88 87       	std	Y+8, r24	; 0x08
    b8e4:	87 c1       	rjmp	.+782    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    b8e6:	8f 81       	ldd	r24, Y+7	; 0x07
    b8e8:	86 95       	lsr	r24
    b8ea:	86 95       	lsr	r24
    b8ec:	86 95       	lsr	r24
    b8ee:	81 70       	andi	r24, 0x01	; 1
    b8f0:	6f 2d       	mov	r22, r15
    b8f2:	4e 2d       	mov	r20, r14
    b8f4:	22 e0       	ldi	r18, 0x02	; 2
    b8f6:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
						lcd_outdezAtt(FW*14,y,md2->sOffset,attr|LEFT);
            if(attr) CHECK_INCDEC_H_MODELVAR( md2->sOffset, -125,125);
#endif
            break;
        case 3:
						md2->lateOffset = onoffItem_m( md2->lateOffset, y, attr ) ;
    b8fa:	81 70       	andi	r24, 0x01	; 1
    b8fc:	88 0f       	add	r24, r24
    b8fe:	88 0f       	add	r24, r24
    b900:	88 0f       	add	r24, r24
    b902:	9f 81       	ldd	r25, Y+7	; 0x07
    b904:	97 7f       	andi	r25, 0xF7	; 247
    b906:	2d c1       	rjmp	.+602    	; 0xbb62 <_Z14menuProcMixOneh+0x3f2>
            break;
        case 4:
#ifdef FMODE_TRIM
						md2->enableFmTrim = onoffMenuItem_m( md2->enableFmTrim, y, PSTR(STR_FLMODETRIM), attr ) ;
#else
						if ( ( md2->srcRaw <=4 ) )
    b908:	89 81       	ldd	r24, Y+1	; 0x01
    b90a:	1f 81       	ldd	r17, Y+7	; 0x07
    b90c:	85 30       	cpi	r24, 0x05	; 5
    b90e:	a8 f4       	brcc	.+42     	; 0xb93a <_Z14menuProcMixOneh+0x1ca>
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    b910:	12 95       	swap	r17
    b912:	16 95       	lsr	r17
    b914:	16 95       	lsr	r17
    b916:	11 70       	andi	r17, 0x01	; 1
    b918:	89 2d       	mov	r24, r9
    b91a:	81 1b       	sub	r24, r17
    b91c:	6f 2d       	mov	r22, r15
    b91e:	4e 2d       	mov	r20, r14
    b920:	22 e0       	ldi	r18, 0x02	; 2
    b922:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
#ifdef FMODE_TRIM
						md2->enableFmTrim = onoffMenuItem_m( md2->enableFmTrim, y, PSTR(STR_FLMODETRIM), attr ) ;
#else
						if ( ( md2->srcRaw <=4 ) )
						{
							md2->disableExpoDr = offonItem_m( md2->disableExpoDr, y, attr ) ;
    b926:	99 2d       	mov	r25, r9
    b928:	98 1b       	sub	r25, r24
    b92a:	91 70       	andi	r25, 0x01	; 1
    b92c:	92 95       	swap	r25
    b92e:	99 0f       	add	r25, r25
    b930:	99 0f       	add	r25, r25
    b932:	90 7c       	andi	r25, 0xC0	; 192
    b934:	8f 81       	ldd	r24, Y+7	; 0x07
    b936:	8f 7b       	andi	r24, 0xBF	; 191
    b938:	26 c0       	rjmp	.+76     	; 0xb986 <_Z14menuProcMixOneh+0x216>
						}
						else
						{
							md2->disableExpoDr = onoffMenuItem_m( md2->disableExpoDr, y, PSTR("\001Use Output   "), attr ) ;
    b93a:	12 95       	swap	r17
    b93c:	16 95       	lsr	r17
    b93e:	16 95       	lsr	r17
    b940:	11 70       	andi	r17, 0x01	; 1
}

static uint8_t onoffMenuItem( uint8_t value, uint8_t y, const prog_char *s, uint8_t condition, uint8_t flags )
{
    lcd_puts_Pleft(y, s);
		return onoffItem(value, y, condition, EE_MODEL ) ;
    b942:	8f 2d       	mov	r24, r15
    b944:	64 ee       	ldi	r22, 0xE4	; 228
    b946:	7e e0       	ldi	r23, 0x0E	; 14
    b948:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
    b94c:	81 2f       	mov	r24, r17
    b94e:	6f 2d       	mov	r22, r15
    b950:	4e 2d       	mov	r20, r14
    b952:	22 e0       	ldi	r18, 0x02	; 2
    b954:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
						{
							md2->disableExpoDr = offonItem_m( md2->disableExpoDr, y, attr ) ;
						}
						else
						{
							md2->disableExpoDr = onoffMenuItem_m( md2->disableExpoDr, y, PSTR("\001Use Output   "), attr ) ;
    b958:	81 70       	andi	r24, 0x01	; 1
    b95a:	82 95       	swap	r24
    b95c:	88 0f       	add	r24, r24
    b95e:	88 0f       	add	r24, r24
    b960:	80 7c       	andi	r24, 0xC0	; 192
    b962:	9f 81       	ldd	r25, Y+7	; 0x07
    b964:	9f 7b       	andi	r25, 0xBF	; 191
    b966:	fd c0       	rjmp	.+506    	; 0xbb62 <_Z14menuProcMixOneh+0x3f2>
  return value ;
}

static uint8_t onoffItem_m( uint8_t value, uint8_t y, uint8_t condition )
{
	return onoffItem( value, y, condition, EE_MODEL ) ;
    b968:	8f 81       	ldd	r24, Y+7	; 0x07
    b96a:	81 70       	andi	r24, 0x01	; 1
    b96c:	99 2d       	mov	r25, r9
    b96e:	98 1b       	sub	r25, r24
    b970:	89 2f       	mov	r24, r25
    b972:	6f 2d       	mov	r22, r15
    b974:	4e 2d       	mov	r20, r14
    b976:	22 e0       	ldi	r18, 0x02	; 2
    b978:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZL9onoffItemhhhh>
							md2->disableExpoDr = onoffMenuItem_m( md2->disableExpoDr, y, PSTR("\001Use Output   "), attr ) ;
						}
#endif
						break;
        case 5:
						md2->carryTrim = offonItem_m( md2->carryTrim, y, attr ) ;
    b97c:	99 2d       	mov	r25, r9
    b97e:	98 1b       	sub	r25, r24
    b980:	91 70       	andi	r25, 0x01	; 1
    b982:	8f 81       	ldd	r24, Y+7	; 0x07
    b984:	8e 7f       	andi	r24, 0xFE	; 254
    b986:	89 2b       	or	r24, r25
    b988:	8f 83       	std	Y+7, r24	; 0x07
    b98a:	34 c1       	rjmp	.+616    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
						break;
        case 6 :
					{	
					 	uint8_t value = md2->differential ;
    b98c:	1f 81       	ldd	r17, Y+7	; 0x07
    b98e:	11 1f       	adc	r17, r17
    b990:	11 27       	eor	r17, r17
    b992:	11 1f       	adc	r17, r17
						if ( value == 0 )
    b994:	21 f0       	breq	.+8      	; 0xb99e <_Z14menuProcMixOneh+0x22e>
							{
								value = 2 ;		// Expo
							}
						}
					 	uint8_t value2 = value ;
	          lcd_putsAtt(  1*FW, y, value ? ( value == 2 ) ? PSTR("\021Expo") : PSTR(STR_15DIFF) : PSTR(STR_Curve), attr ) ;
    b996:	48 ed       	ldi	r20, 0xD8	; 216
    b998:	5e e0       	ldi	r21, 0x0E	; 14
    b99a:	11 e0       	ldi	r17, 0x01	; 1
    b99c:	0a c0       	rjmp	.+20     	; 0xb9b2 <_Z14menuProcMixOneh+0x242>
        case 6 :
					{	
					 	uint8_t value = md2->differential ;
						if ( value == 0 )
						{
							if ( ( md2->curve <= -28 ) || ( md2->curve >= 27 ) )
    b99e:	8c 81       	ldd	r24, Y+4	; 0x04
    b9a0:	85 5e       	subi	r24, 0xE5	; 229
    b9a2:	86 33       	cpi	r24, 0x36	; 54
    b9a4:	20 f0       	brcs	.+8      	; 0xb9ae <_Z14menuProcMixOneh+0x23e>
							{
								value = 2 ;		// Expo
							}
						}
					 	uint8_t value2 = value ;
	          lcd_putsAtt(  1*FW, y, value ? ( value == 2 ) ? PSTR("\021Expo") : PSTR(STR_15DIFF) : PSTR(STR_Curve), attr ) ;
    b9a6:	4e ed       	ldi	r20, 0xDE	; 222
    b9a8:	5e e0       	ldi	r21, 0x0E	; 14
    b9aa:	12 e0       	ldi	r17, 0x02	; 2
    b9ac:	02 c0       	rjmp	.+4      	; 0xb9b2 <_Z14menuProcMixOneh+0x242>
    b9ae:	42 ed       	ldi	r20, 0xD2	; 210
    b9b0:	5e e0       	ldi	r21, 0x0E	; 14
    b9b2:	86 e0       	ldi	r24, 0x06	; 6
    b9b4:	6f 2d       	mov	r22, r15
    b9b6:	2e 2d       	mov	r18, r14
    b9b8:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
    		    if(attr) CHECK_INCDEC_H_MODELVAR_0( value2, 2 ) ;
    b9bc:	ee 20       	and	r14, r14
    b9be:	09 f4       	brne	.+2      	; 0xb9c2 <_Z14menuProcMixOneh+0x252>
    b9c0:	19 c1       	rjmp	.+562    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
    b9c2:	81 2f       	mov	r24, r17
    b9c4:	62 e0       	ldi	r22, 0x02	; 2
    b9c6:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    b9ca:	98 2f       	mov	r25, r24
					 	if ( value != value2 )
    b9cc:	18 17       	cp	r17, r24
    b9ce:	09 f4       	brne	.+2      	; 0xb9d2 <_Z14menuProcMixOneh+0x262>
    b9d0:	11 c1       	rjmp	.+546    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
						{
							if ( value2 == 2 )
    b9d2:	82 30       	cpi	r24, 0x02	; 2
    b9d4:	11 f4       	brne	.+4      	; 0xb9da <_Z14menuProcMixOneh+0x26a>
							{
								md2->curve = -128 ;
    b9d6:	5c 82       	std	Y+4, r5	; 0x04
    b9d8:	01 c0       	rjmp	.+2      	; 0xb9dc <_Z14menuProcMixOneh+0x26c>
							}
							else
							{
								md2->curve = 0 ;
    b9da:	1c 82       	std	Y+4, r1	; 0x04
							}
							md2->differential = value2 & 1 ;	// 0 and 2 turn it off
    b9dc:	97 95       	ror	r25
    b9de:	99 27       	eor	r25, r25
    b9e0:	97 95       	ror	r25
    b9e2:	8f 81       	ldd	r24, Y+7	; 0x07
    b9e4:	8f 77       	andi	r24, 0x7F	; 127
    b9e6:	cf cf       	rjmp	.-98     	; 0xb986 <_Z14menuProcMixOneh+0x216>
						}
					}
        break;
        case 7 :
						if ( md2->differential )		// Non zero for curve
    b9e8:	8f 81       	ldd	r24, Y+7	; 0x07
    b9ea:	87 ff       	sbrs	r24, 7
    b9ec:	09 c0       	rjmp	.+18     	; 0xba00 <_Z14menuProcMixOneh+0x290>
						{
		          md2->curve = gvarMenuItem( 12*FW, y, md2->curve, -100, 100, attr ) ;
    b9ee:	88 e4       	ldi	r24, 0x48	; 72
    b9f0:	6f 2d       	mov	r22, r15
    b9f2:	4c 81       	ldd	r20, Y+4	; 0x04
    b9f4:	2c e9       	ldi	r18, 0x9C	; 156
    b9f6:	04 e6       	ldi	r16, 0x64	; 100
    b9f8:	0e 94 67 25 	call	0x4ace	; 0x4ace <_Z12gvarMenuItemhhaaah>
    b9fc:	8c 83       	std	Y+4, r24	; 0x04
    b9fe:	fa c0       	rjmp	.+500    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
						}
						else
						{	
							if ( ( md2->curve <= -28 ) || ( md2->curve > 27 ) )
    ba00:	4c 81       	ldd	r20, Y+4	; 0x04
    ba02:	84 2f       	mov	r24, r20
    ba04:	85 5e       	subi	r24, 0xE5	; 229
    ba06:	87 33       	cpi	r24, 0x37	; 55
    ba08:	b8 f0       	brcs	.+46     	; 0xba38 <_Z14menuProcMixOneh+0x2c8>
							{
								int8_t value = md2->curve + 128 ;	// 0 to 100, AND -100 to -1
    ba0a:	14 2f       	mov	r17, r20
    ba0c:	10 58       	subi	r17, 0x80	; 128
            		lcd_outdezAtt(FW*17,y,value,attr|LEFT);
    ba0e:	41 2f       	mov	r20, r17
    ba10:	55 27       	eor	r21, r21
    ba12:	47 fd       	sbrc	r20, 7
    ba14:	50 95       	com	r21
    ba16:	2e 2d       	mov	r18, r14
    ba18:	20 64       	ori	r18, 0x40	; 64
    ba1a:	86 e6       	ldi	r24, 0x66	; 102
    ba1c:	6f 2d       	mov	r22, r15
    ba1e:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
            		if(attr) CHECK_INCDEC_H_MODELVAR( value, -100, 100 ) ;
    ba22:	ee 20       	and	r14, r14
    ba24:	31 f0       	breq	.+12     	; 0xba32 <_Z14menuProcMixOneh+0x2c2>
    ba26:	81 2f       	mov	r24, r17
    ba28:	6c e9       	ldi	r22, 0x9C	; 156
    ba2a:	44 e6       	ldi	r20, 0x64	; 100
    ba2c:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    ba30:	18 2f       	mov	r17, r24
								md2->curve = value - 128 ;
    ba32:	10 58       	subi	r17, 0x80	; 128
    ba34:	1c 83       	std	Y+4, r17	; 0x04
    ba36:	de c0       	rjmp	.+444    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
							}
							else
							{
								put_curve( 2*FW, y, md2->curve, attr ) ;
    ba38:	8c e0       	ldi	r24, 0x0C	; 12
    ba3a:	6f 2d       	mov	r22, r15
    ba3c:	2e 2d       	mov	r18, r14
    ba3e:	0e 94 c3 22 	call	0x4586	; 0x4586 <_Z9put_curvehhah>
          	  	if(attr)
    ba42:	ee 20       	and	r14, r14
    ba44:	09 f4       	brne	.+2      	; 0xba48 <_Z14menuProcMixOneh+0x2d8>
    ba46:	d6 c0       	rjmp	.+428    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
								{
									CHECK_INCDEC_H_MODELVAR( md2->curve, -MAX_CURVE5-MAX_CURVE9 , MAX_CURVE5+MAX_CURVE9+7-1);
    ba48:	8c 81       	ldd	r24, Y+4	; 0x04
    ba4a:	60 ef       	ldi	r22, 0xF0	; 240
    ba4c:	46 e1       	ldi	r20, 0x16	; 22
    ba4e:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    ba52:	8c 83       	std	Y+4, r24	; 0x04
									if ( event==EVT_KEY_FIRST(KEY_MENU) )
    ba54:	90 e6       	ldi	r25, 0x60	; 96
    ba56:	a9 16       	cp	r10, r25
    ba58:	09 f0       	breq	.+2      	; 0xba5c <_Z14menuProcMixOneh+0x2ec>
    ba5a:	cc c0       	rjmp	.+408    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
									{
										if ( md2->curve>=CURVE_BASE )
    ba5c:	87 30       	cpi	r24, 0x07	; 7
    ba5e:	3c f0       	brlt	.+14     	; 0xba6e <_Z14menuProcMixOneh+0x2fe>
										{
          	  	    	s_curveChan = md2->curve-CURVE_BASE;
    ba60:	87 50       	subi	r24, 0x07	; 7
    ba62:	80 93 dc 08 	sts	0x08DC, r24
	          		      pushMenu(menuProcCurveOne);
    ba66:	87 e7       	ldi	r24, 0x77	; 119
    ba68:	90 e6       	ldi	r25, 0x60	; 96
    ba6a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
										}
										if ( md2->curve < 0 )
    ba6e:	8c 81       	ldd	r24, Y+4	; 0x04
    ba70:	87 ff       	sbrs	r24, 7
    ba72:	c0 c0       	rjmp	.+384    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
										{
          	  	    	s_curveChan = -md2->curve-1 ;
    ba74:	80 95       	com	r24
    ba76:	80 93 dc 08 	sts	0x08DC, r24
	          		      pushMenu(menuProcCurveOne);
    ba7a:	87 e7       	ldi	r24, 0x77	; 119
    ba7c:	90 e6       	ldi	r25, 0x60	; 96
    ba7e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
    ba82:	b8 c0       	rjmp	.+368    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
							}
						}
        break;
        case 8:
//            lcd_puts_Pleft(  y,PSTR(STR_2SWITCH));
						md2->swtch = edit_dr_switch( 13*FW, y, md2->swtch, attr, attr ? EDIT_DR_SWITCH_EDIT : 0 ) ;
    ba84:	00 e0       	ldi	r16, 0x00	; 0
    ba86:	e1 10       	cpse	r14, r1
    ba88:	01 e0       	ldi	r16, 0x01	; 1
    ba8a:	8e e4       	ldi	r24, 0x4E	; 78
    ba8c:	6f 2d       	mov	r22, r15
    ba8e:	4b 81       	ldd	r20, Y+3	; 0x03
    ba90:	2e 2d       	mov	r18, r14
    ba92:	0e 94 3b 3c 	call	0x7876	; 0x7876 <_Z14edit_dr_switchhhahh>
    ba96:	8b 83       	std	Y+3, r24	; 0x03
    ba98:	ad c0       	rjmp	.+346    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
        case 9:
					{
						uint8_t b = 1 ;
//            lcd_puts_Pleft( y, PSTR("\001MODES"));

						if ( attr )
    ba9a:	ee 20       	and	r14, r14
    ba9c:	21 f0       	breq	.+8      	; 0xbaa6 <_Z14menuProcMixOneh+0x336>
						{
							Columns = &ProgColumns[COLUMNS_4] ;
    ba9e:	70 92 c1 08 	sts	0x08C1, r7
    baa2:	60 92 c0 08 	sts	0x08C0, r6
    baa6:	dd 24       	eor	r13, r13
    baa8:	d3 94       	inc	r13
    baaa:	10 e0       	ldi	r17, 0x00	; 0
    baac:	0f e3       	ldi	r16, 0x3F	; 63
						{
							uint8_t z = md2->modeControl ;
    					lcd_putcAtt( (9+p)*(FW+1), y, '0'+p, ( z & b ) ? 0 : INVERS ) ;
							if( attr && ( g_posHorz == p ) )
							{
								lcd_rect( (9+p)*(FW+1)-1, y-1, FW+2, 9 ) ;
    baae:	bf 2c       	mov	r11, r15
    bab0:	ba 94       	dec	r11
						}

  					for ( uint8_t p = 0 ; p<MAX_MODES+1 ; p++ )
						{
							uint8_t z = md2->modeControl ;
    					lcd_putcAtt( (9+p)*(FW+1), y, '0'+p, ( z & b ) ? 0 : INVERS ) ;
    bab2:	41 2f       	mov	r20, r17
    bab4:	40 5d       	subi	r20, 0xD0	; 208
    bab6:	50 e0       	ldi	r21, 0x00	; 0
    bab8:	2d 2d       	mov	r18, r13
    baba:	30 e0       	ldi	r19, 0x00	; 0
    babc:	89 85       	ldd	r24, Y+9	; 0x09
    babe:	8f 71       	andi	r24, 0x1F	; 31
    bac0:	90 e0       	ldi	r25, 0x00	; 0
    bac2:	28 23       	and	r18, r24
    bac4:	39 23       	and	r19, r25
    bac6:	23 2b       	or	r18, r19
    bac8:	09 f4       	brne	.+2      	; 0xbacc <_Z14menuProcMixOneh+0x35c>
    baca:	51 e0       	ldi	r21, 0x01	; 1
    bacc:	80 2f       	mov	r24, r16
    bace:	6f 2d       	mov	r22, r15
    bad0:	25 2f       	mov	r18, r21
    bad2:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
							if( attr && ( g_posHorz == p ) )
    bad6:	ee 20       	and	r14, r14
    bad8:	e9 f0       	breq	.+58     	; 0xbb14 <_Z14menuProcMixOneh+0x3a4>
    bada:	80 91 0c 07 	lds	r24, 0x070C
    bade:	81 17       	cp	r24, r17
    bae0:	c9 f4       	brne	.+50     	; 0xbb14 <_Z14menuProcMixOneh+0x3a4>
							{
								lcd_rect( (9+p)*(FW+1)-1, y-1, FW+2, 9 ) ;
    bae2:	80 2f       	mov	r24, r16
    bae4:	81 50       	subi	r24, 0x01	; 1
    bae6:	6b 2d       	mov	r22, r11
    bae8:	48 e0       	ldi	r20, 0x08	; 8
    baea:	29 e0       	ldi	r18, 0x09	; 9
    baec:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>
								if ( event==EVT_KEY_BREAK(KEY_MENU) || event==EVT_KEY_BREAK(BTN_RE) ) 
    baf0:	80 e2       	ldi	r24, 0x20	; 32
    baf2:	a8 16       	cp	r10, r24
    baf4:	19 f0       	breq	.+6      	; 0xbafc <_Z14menuProcMixOneh+0x38c>
    baf6:	9e e2       	ldi	r25, 0x2E	; 46
    baf8:	a9 16       	cp	r10, r25
    bafa:	61 f4       	brne	.+24     	; 0xbb14 <_Z14menuProcMixOneh+0x3a4>
								{
									md2->modeControl ^= b ;
    bafc:	89 85       	ldd	r24, Y+9	; 0x09
    bafe:	9d 2d       	mov	r25, r13
    bb00:	98 27       	eor	r25, r24
    bb02:	9f 71       	andi	r25, 0x1F	; 31
    bb04:	80 7e       	andi	r24, 0xE0	; 224
    bb06:	89 2b       	or	r24, r25
    bb08:	89 87       	std	Y+9, r24	; 0x09
      						eeDirty(EE_MODEL) ;
    bb0a:	82 e0       	ldi	r24, 0x02	; 2
    bb0c:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
    							s_editMode = false ;
    bb10:	10 92 e5 06 	sts	0x06E5, r1
						if ( attr )
						{
							Columns = &ProgColumns[COLUMNS_4] ;
						}

  					for ( uint8_t p = 0 ; p<MAX_MODES+1 ; p++ )
    bb14:	1f 5f       	subi	r17, 0xFF	; 255
    bb16:	09 5f       	subi	r16, 0xF9	; 249
    bb18:	15 30       	cpi	r17, 0x05	; 5
    bb1a:	09 f4       	brne	.+2      	; 0xbb1e <_Z14menuProcMixOneh+0x3ae>
    bb1c:	6b c0       	rjmp	.+214    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
									md2->modeControl ^= b ;
      						eeDirty(EE_MODEL) ;
    							s_editMode = false ;
								}
							}
							b <<= 1 ;
    bb1e:	dd 0c       	add	r13, r13
    bb20:	c8 cf       	rjmp	.-112    	; 0xbab2 <_Z14menuProcMixOneh+0x342>
						}
					}
        break ;
        case 10:
//            lcd_puts_Pleft(  y,PSTR(STR_2WARNING));
						b = md2->mixWarn ;
    bb22:	1f 81       	ldd	r17, Y+7	; 0x07
    bb24:	12 95       	swap	r17
    bb26:	13 70       	andi	r17, 0x03	; 3
            if(b)
    bb28:	49 f0       	breq	.+18     	; 0xbb3c <_Z14menuProcMixOneh+0x3cc>
                lcd_outdezAtt(FW*14,y,b,attr|LEFT);
    bb2a:	2e 2d       	mov	r18, r14
    bb2c:	20 64       	ori	r18, 0x40	; 64
    bb2e:	84 e5       	ldi	r24, 0x54	; 84
    bb30:	6f 2d       	mov	r22, r15
    bb32:	41 2f       	mov	r20, r17
    bb34:	50 e0       	ldi	r21, 0x00	; 0
    bb36:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    bb3a:	07 c0       	rjmp	.+14     	; 0xbb4a <_Z14menuProcMixOneh+0x3da>
            else
                lcd_putsAtt(  FW*13,y,Str_OFF,attr);
    bb3c:	8e e4       	ldi	r24, 0x4E	; 78
    bb3e:	6f 2d       	mov	r22, r15
    bb40:	4b e2       	ldi	r20, 0x2B	; 43
    bb42:	51 e0       	ldi	r21, 0x01	; 1
    bb44:	2e 2d       	mov	r18, r14
    bb46:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
            if(attr) { CHECK_INCDEC_H_MODELVAR_0( b, 3); md2->mixWarn = b ; }
    bb4a:	ee 20       	and	r14, r14
    bb4c:	09 f4       	brne	.+2      	; 0xbb50 <_Z14menuProcMixOneh+0x3e0>
    bb4e:	52 c0       	rjmp	.+164    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
    bb50:	81 2f       	mov	r24, r17
    bb52:	63 e0       	ldi	r22, 0x03	; 3
    bb54:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    bb58:	83 70       	andi	r24, 0x03	; 3
    bb5a:	82 95       	swap	r24
    bb5c:	80 7f       	andi	r24, 0xF0	; 240
    bb5e:	9f 81       	ldd	r25, Y+7	; 0x07
    bb60:	9f 7c       	andi	r25, 0xCF	; 207
    bb62:	98 2b       	or	r25, r24
    bb64:	9f 83       	std	Y+7, r25	; 0x07
    bb66:	46 c0       	rjmp	.+140    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
            break;
        case 11:
//            lcd_puts_Pleft(  y,PSTR(STR_2MULTIPLEX));
            lcd_putsAttIdx(13*FW, y,PSTR(STR_ADD_MULT_REP),md2->mltpx,attr);
    bb68:	2f 81       	ldd	r18, Y+7	; 0x07
    bb6a:	26 95       	lsr	r18
    bb6c:	23 70       	andi	r18, 0x03	; 3
    bb6e:	8e e4       	ldi	r24, 0x4E	; 78
    bb70:	6f 2d       	mov	r22, r15
    bb72:	48 eb       	ldi	r20, 0xB8	; 184
    bb74:	5e e0       	ldi	r21, 0x0E	; 14
    bb76:	0e 2d       	mov	r16, r14
    bb78:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
//            lcd_putsAttIdx_right( y,PSTR(STR_ADD_MULT_REP),md2->mltpx,attr);
            if(attr) CHECK_INCDEC_H_MODELVAR_0( md2->mltpx, 2); //!! bitfield
    bb7c:	ee 20       	and	r14, r14
    bb7e:	d1 f1       	breq	.+116    	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
    bb80:	8f 81       	ldd	r24, Y+7	; 0x07
    bb82:	86 95       	lsr	r24
    bb84:	83 70       	andi	r24, 0x03	; 3
    bb86:	62 e0       	ldi	r22, 0x02	; 2
    bb88:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    bb8c:	83 70       	andi	r24, 0x03	; 3
    bb8e:	88 0f       	add	r24, r24
    bb90:	9f 81       	ldd	r25, Y+7	; 0x07
    bb92:	99 7f       	andi	r25, 0xF9	; 249
    bb94:	e6 cf       	rjmp	.-52     	; 0xbb62 <_Z14menuProcMixOneh+0x3f2>
            break;
        case 12:
						md2->delayDown = editSlowDelay( y, attr, md2->delayDown ) ;
    bb96:	4d 81       	ldd	r20, Y+5	; 0x05
    bb98:	42 95       	swap	r20
    bb9a:	4f 70       	andi	r20, 0x0F	; 15
    bb9c:	8f 2d       	mov	r24, r15
    bb9e:	6e 2d       	mov	r22, r14
    bba0:	0e 94 77 22 	call	0x44ee	; 0x44ee <_ZL13editSlowDelayhhh>
    bba4:	82 95       	swap	r24
    bba6:	80 7f       	andi	r24, 0xF0	; 240
    bba8:	9d 81       	ldd	r25, Y+5	; 0x05
    bbaa:	9f 70       	andi	r25, 0x0F	; 15
    bbac:	09 c0       	rjmp	.+18     	; 0xbbc0 <_Z14menuProcMixOneh+0x450>
            break;
        case 13:
						md2->delayUp = editSlowDelay( y, attr, md2->delayUp ) ;
    bbae:	4d 81       	ldd	r20, Y+5	; 0x05
    bbb0:	4f 70       	andi	r20, 0x0F	; 15
    bbb2:	8f 2d       	mov	r24, r15
    bbb4:	6e 2d       	mov	r22, r14
    bbb6:	0e 94 77 22 	call	0x44ee	; 0x44ee <_ZL13editSlowDelayhhh>
    bbba:	8f 70       	andi	r24, 0x0F	; 15
    bbbc:	9d 81       	ldd	r25, Y+5	; 0x05
    bbbe:	90 7f       	andi	r25, 0xF0	; 240
    bbc0:	98 2b       	or	r25, r24
    bbc2:	9d 83       	std	Y+5, r25	; 0x05
    bbc4:	17 c0       	rjmp	.+46     	; 0xbbf4 <_Z14menuProcMixOneh+0x484>
            break;
        case 14:
						md2->speedDown = editSlowDelay( y, attr, md2->speedDown ) ;
    bbc6:	4e 81       	ldd	r20, Y+6	; 0x06
    bbc8:	42 95       	swap	r20
    bbca:	4f 70       	andi	r20, 0x0F	; 15
    bbcc:	8f 2d       	mov	r24, r15
    bbce:	6e 2d       	mov	r22, r14
    bbd0:	0e 94 77 22 	call	0x44ee	; 0x44ee <_ZL13editSlowDelayhhh>
    bbd4:	82 95       	swap	r24
    bbd6:	80 7f       	andi	r24, 0xF0	; 240
    bbd8:	9e 81       	ldd	r25, Y+6	; 0x06
    bbda:	9f 70       	andi	r25, 0x0F	; 15
    bbdc:	09 c0       	rjmp	.+18     	; 0xbbf0 <_Z14menuProcMixOneh+0x480>
            break;
        case 15:
						md2->speedUp = editSlowDelay( y, attr, md2->speedUp ) ;
    bbde:	4e 81       	ldd	r20, Y+6	; 0x06
    bbe0:	4f 70       	andi	r20, 0x0F	; 15
    bbe2:	8f 2d       	mov	r24, r15
    bbe4:	6e 2d       	mov	r22, r14
    bbe6:	0e 94 77 22 	call	0x44ee	; 0x44ee <_ZL13editSlowDelayhhh>
    bbea:	8f 70       	andi	r24, 0x0F	; 15
    bbec:	9e 81       	ldd	r25, Y+6	; 0x06
    bbee:	90 7f       	andi	r25, 0xF0	; 240
    bbf0:	98 2b       	or	r25, r24
    bbf2:	9e 83       	std	Y+6, r25	; 0x06
    bbf4:	c3 94       	inc	r12
    bbf6:	88 e0       	ldi	r24, 0x08	; 8
    bbf8:	f8 0e       	add	r15, r24
		lcd_puts_Pskip( FH, PSTR(STR_2SOURCE"\037"STR_2WEIGHT"\037""\001"STR_OFFSET"\037"STR_2FIX_OFFSET
			"\037"STR_ENABLEEXPO"\037"STR_2TRIM"\037\037\037"STR_2SWITCH"\037""\001MODES""\037"STR_2WARNING
			"\037"STR_2MULTIPLEX"\037"STR_2DELAY_DOWN"\037"STR_2DELAY_UP"\037"STR_2SLOW_DOWN"\037"STR_2SLOW_UP
			"\037""SWCH Switch"), s_pgOfs ) ;

    for(uint8_t k=0; k<7; k++)
    bbfa:	90 e4       	ldi	r25, 0x40	; 64
    bbfc:	f9 16       	cp	r15, r25
    bbfe:	09 f0       	breq	.+2      	; 0xbc02 <_Z14menuProcMixOneh+0x492>
    bc00:	f4 cd       	rjmp	.-1048   	; 0xb7ea <_Z14menuProcMixOneh+0x7a>
//                popMenu();
//            }
//            break;
        }
    }
}
    bc02:	df 91       	pop	r29
    bc04:	cf 91       	pop	r28
    bc06:	1f 91       	pop	r17
    bc08:	0f 91       	pop	r16
    bc0a:	ff 90       	pop	r15
    bc0c:	ef 90       	pop	r14
    bc0e:	df 90       	pop	r13
    bc10:	cf 90       	pop	r12
    bc12:	bf 90       	pop	r11
    bc14:	af 90       	pop	r10
    bc16:	9f 90       	pop	r9
    bc18:	8f 90       	pop	r8
    bc1a:	7f 90       	pop	r7
    bc1c:	6f 90       	pop	r6
    bc1e:	5f 90       	pop	r5
    bc20:	08 95       	ret

0000bc22 <_Z17menuProcTemplatesh>:
}

#endif

#ifndef NO_TEMPLATES
void menuProcTemplates(uint8_t event)  //Issue 73
    bc22:	cf 92       	push	r12
    bc24:	df 92       	push	r13
    bc26:	ef 92       	push	r14
    bc28:	ff 92       	push	r15
    bc2a:	0f 93       	push	r16
    bc2c:	1f 93       	push	r17
    bc2e:	cf 93       	push	r28
    bc30:	df 93       	push	r29
    bc32:	18 2f       	mov	r17, r24
{
//    SIMPLE_MENU(STR_TEMPLATES, menuTabModel, e_Templates, NUM_TEMPLATES+2);
//    SIMPLE_SUBMENU(STR_TEMPLATES, NUM_TEMPLATES+1) ;
		TITLE(STR_TEMPLATES) ;
    bc34:	83 ec       	ldi	r24, 0xC3	; 195
    bc36:	9f e0       	ldi	r25, 0x0F	; 15
    bc38:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
		static MState2 mstate2 ;
		mstate2.check_columns(event, NUM_TEMPLATES ) ;
    bc3c:	8e ed       	ldi	r24, 0xDE	; 222
    bc3e:	98 e0       	ldi	r25, 0x08	; 8
    bc40:	61 2f       	mov	r22, r17
    bc42:	48 e0       	ldi	r20, 0x08	; 8
    bc44:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>

    uint8_t t_pgOfs ;
    uint8_t y = 0;
    uint8_t k = 0;
    int8_t  sub    = mstate2.m_posVert ;
    bc48:	f0 90 de 08 	lds	r15, 0x08DE

    t_pgOfs = evalOffset(sub, 6);
    bc4c:	8f 2d       	mov	r24, r15
    bc4e:	66 e0       	ldi	r22, 0x06	; 6
    bc50:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    bc54:	08 2f       	mov	r16, r24

    switch(event)
    bc56:	10 38       	cpi	r17, 0x80	; 128
    bc58:	a9 f4       	brne	.+42     	; 0xbc84 <_Z17menuProcTemplatesh+0x62>
    {
    case EVT_KEY_LONG(KEY_MENU):
        killEvents(event);
    bc5a:	80 e8       	ldi	r24, 0x80	; 128
    bc5c:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
        //apply mixes or delete
        s_noHi = NO_HI_LEN;
    bc60:	89 e1       	ldi	r24, 0x19	; 25
    bc62:	80 93 e7 06 	sts	0x06E7, r24
        if(sub==NUM_TEMPLATES)
    bc66:	88 e0       	ldi	r24, 0x08	; 8
    bc68:	f8 16       	cp	r15, r24
    bc6a:	19 f4       	brne	.+6      	; 0xbc72 <_Z17menuProcTemplatesh+0x50>
            clearMixes();
    bc6c:	0e 94 49 70 	call	0xe092	; 0xe092 <_Z10clearMixesv>
    bc70:	06 c0       	rjmp	.+12     	; 0xbc7e <_Z17menuProcTemplatesh+0x5c>
        else if((sub>=0) && (sub<(int8_t)NUM_TEMPLATES))
    bc72:	87 e0       	ldi	r24, 0x07	; 7
    bc74:	8f 15       	cp	r24, r15
    bc76:	18 f0       	brcs	.+6      	; 0xbc7e <_Z17menuProcTemplatesh+0x5c>
            applyTemplate(sub);
    bc78:	8f 2d       	mov	r24, r15
    bc7a:	0e 94 54 70 	call	0xe0a8	; 0xe0a8 <_Z13applyTemplateh>
        audioDefevent(AU_WARNING2);
    bc7e:	81 e0       	ldi	r24, 0x01	; 1
    bc80:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    bc84:	18 e0       	ldi	r17, 0x08	; 8
        k=i+t_pgOfs;
        if(k==NUM_TEMPLATES) break;

        //write mix names here
//        lcd_outdezNAtt(3*FW, y, (uint16_t)k+1, (sub==k ? INVERS : 0) + LEADING0,2);
				lcd_2_digits( 3*FW, y, k+1, (sub==k ? INVERS : 0) ) ;
    bc86:	cf 2c       	mov	r12, r15
    bc88:	dd 24       	eor	r13, r13
    bc8a:	c7 fc       	sbrc	r12, 7
    bc8c:	d0 94       	com	r13
    }

    y=1*FH;
    for(uint8_t i=0; i<7; i++){
        k=i+t_pgOfs;
        if(k==NUM_TEMPLATES) break;
    bc8e:	08 30       	cpi	r16, 0x08	; 8
    bc90:	19 f4       	brne	.+6      	; 0xbc98 <_Z17menuProcTemplatesh+0x76>
				lcd_putsAtt(  4*FW, y, n_Templates[k], (s_noHi ? 0 : (sub==k ? INVERS  : 0)));
#endif
        y+=FH;
    }

    if(y>7*FH) return;
    bc92:	19 33       	cpi	r17, 0x39	; 57
    bc94:	28 f1       	brcs	.+74     	; 0xbce0 <_Z17menuProcTemplatesh+0xbe>
    bc96:	35 c0       	rjmp	.+106    	; 0xbd02 <_Z17menuProcTemplatesh+0xe0>
    bc98:	e0 2e       	mov	r14, r16
    bc9a:	e3 94       	inc	r14
        k=i+t_pgOfs;
        if(k==NUM_TEMPLATES) break;

        //write mix names here
//        lcd_outdezNAtt(3*FW, y, (uint16_t)k+1, (sub==k ? INVERS : 0) + LEADING0,2);
				lcd_2_digits( 3*FW, y, k+1, (sub==k ? INVERS : 0) ) ;
    bc9c:	c0 2f       	mov	r28, r16
    bc9e:	d0 e0       	ldi	r29, 0x00	; 0
    bca0:	00 e0       	ldi	r16, 0x00	; 0
    bca2:	cc 16       	cp	r12, r28
    bca4:	dd 06       	cpc	r13, r29
    bca6:	09 f4       	brne	.+2      	; 0xbcaa <_Z17menuProcTemplatesh+0x88>
    bca8:	01 e0       	ldi	r16, 0x01	; 1
    bcaa:	82 e1       	ldi	r24, 0x12	; 18
    bcac:	61 2f       	mov	r22, r17
    bcae:	4e 2d       	mov	r20, r14
    bcb0:	20 2f       	mov	r18, r16
    bcb2:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <_Z12lcd_2_digitshhhh>

#ifndef SIMU
        lcd_putsAtt(  4*FW, y, (const prog_char*)pgm_read_word(&n_Templates[k]), (s_noHi ? 0 : (sub==k ? INVERS  : 0)));
    bcb6:	fe 01       	movw	r30, r28
    bcb8:	ee 0f       	add	r30, r30
    bcba:	ff 1f       	adc	r31, r31
    bcbc:	e4 53       	subi	r30, 0x34	; 52
    bcbe:	f7 4e       	sbci	r31, 0xE7	; 231
    bcc0:	45 91       	lpm	r20, Z+
    bcc2:	54 91       	lpm	r21, Z+
    bcc4:	80 91 e7 06 	lds	r24, 0x06E7
    bcc8:	81 11       	cpse	r24, r1
    bcca:	00 e0       	ldi	r16, 0x00	; 0
    bccc:	88 e1       	ldi	r24, 0x18	; 24
    bcce:	61 2f       	mov	r22, r17
    bcd0:	20 2f       	mov	r18, r16
    bcd2:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
#else
				lcd_putsAtt(  4*FW, y, n_Templates[k], (s_noHi ? 0 : (sub==k ? INVERS  : 0)));
#endif
        y+=FH;
    bcd6:	18 5f       	subi	r17, 0xF8	; 248
        audioDefevent(AU_WARNING2);
        break;
    }

    y=1*FH;
    for(uint8_t i=0; i<7; i++){
    bcd8:	10 34       	cpi	r17, 0x40	; 64
    bcda:	99 f0       	breq	.+38     	; 0xbd02 <_Z17menuProcTemplatesh+0xe0>
    bcdc:	0e 2d       	mov	r16, r14
    bcde:	d7 cf       	rjmp	.-82     	; 0xbc8e <_Z17menuProcTemplatesh+0x6c>
#endif
        y+=FH;
    }

    if(y>7*FH) return;
    uint8_t attr = s_noHi ? 0 : ((sub==NUM_TEMPLATES) ? INVERS : 0);
    bce0:	80 91 e7 06 	lds	r24, 0x06E7
    bce4:	88 23       	and	r24, r24
    bce6:	11 f0       	breq	.+4      	; 0xbcec <_Z17menuProcTemplatesh+0xca>
    bce8:	20 e0       	ldi	r18, 0x00	; 0
    bcea:	05 c0       	rjmp	.+10     	; 0xbcf6 <_Z17menuProcTemplatesh+0xd4>
    bcec:	20 e0       	ldi	r18, 0x00	; 0
    bcee:	88 e0       	ldi	r24, 0x08	; 8
    bcf0:	f8 16       	cp	r15, r24
    bcf2:	09 f4       	brne	.+2      	; 0xbcf6 <_Z17menuProcTemplatesh+0xd4>
    bcf4:	21 e0       	ldi	r18, 0x01	; 1
    lcd_putsAtt(  1*FW,y,PSTR(STR_CLEAR_MIXES),attr);
    bcf6:	86 e0       	ldi	r24, 0x06	; 6
    bcf8:	61 2f       	mov	r22, r17
    bcfa:	40 eb       	ldi	r20, 0xB0	; 176
    bcfc:	5f e0       	ldi	r21, 0x0F	; 15
    bcfe:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
    y+=FH;

}
    bd02:	df 91       	pop	r29
    bd04:	cf 91       	pop	r28
    bd06:	1f 91       	pop	r17
    bd08:	0f 91       	pop	r16
    bd0a:	ff 90       	pop	r15
    bd0c:	ef 90       	pop	r14
    bd0e:	df 90       	pop	r13
    bd10:	cf 90       	pop	r12
    bd12:	08 95       	ret

0000bd14 <_Z12menuScaleOneh>:
//	lcd_outdezAtt( 14*FW, y, val+1, attr) ;
  if (attr) val = checkIncDec_hmu0( val, 255 ) ;
	return val ;
}

void menuScaleOne(uint8_t event)
    bd14:	2f 92       	push	r2
    bd16:	3f 92       	push	r3
    bd18:	4f 92       	push	r4
    bd1a:	5f 92       	push	r5
    bd1c:	6f 92       	push	r6
    bd1e:	7f 92       	push	r7
    bd20:	8f 92       	push	r8
    bd22:	9f 92       	push	r9
    bd24:	af 92       	push	r10
    bd26:	bf 92       	push	r11
    bd28:	cf 92       	push	r12
    bd2a:	df 92       	push	r13
    bd2c:	ef 92       	push	r14
    bd2e:	ff 92       	push	r15
    bd30:	0f 93       	push	r16
    bd32:	1f 93       	push	r17
    bd34:	df 93       	push	r29
    bd36:	cf 93       	push	r28
    bd38:	00 d0       	rcall	.+0      	; 0xbd3a <_Z12menuScaleOneh+0x26>
    bd3a:	00 d0       	rcall	.+0      	; 0xbd3c <_Z12menuScaleOneh+0x28>
    bd3c:	00 d0       	rcall	.+0      	; 0xbd3e <_Z12menuScaleOneh+0x2a>
    bd3e:	cd b7       	in	r28, 0x3d	; 61
    bd40:	de b7       	in	r29, 0x3e	; 62
    bd42:	68 2f       	mov	r22, r24
{
	
//  SIMPLE_SUBMENU_NOTITLE( 9, { 0, 3, 0 /*, 0*/} ) ;
	static MState2 mstate2 ;
	mstate2.check_columns(event, 8 ) ;
    bd44:	80 ee       	ldi	r24, 0xE0	; 224
    bd46:	98 e0       	ldi	r25, 0x08	; 8
    bd48:	48 e0       	ldi	r20, 0x08	; 8
    bd4a:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>
	lcd_puts_Pleft( 0, PSTR("SC") ) ;
    bd4e:	80 e0       	ldi	r24, 0x00	; 0
    bd50:	6f e7       	ldi	r22, 0x7F	; 127
    bd52:	70 e1       	ldi	r23, 0x10	; 16
    bd54:	0e 94 94 6a 	call	0xd528	; 0xd528 <_Z14lcd_puts_PlefthPKc>
	uint8_t index = s_currIdx ;
    bd58:	c0 90 c8 08 	lds	r12, 0x08C8
  lcd_putc( 2*FW, 0, index+'1' ) ;
    bd5c:	4c 2d       	mov	r20, r12
    bd5e:	4f 5c       	subi	r20, 0xCF	; 207
    bd60:	8c e0       	ldi	r24, 0x0C	; 12
    bd62:	60 e0       	ldi	r22, 0x00	; 0
    bd64:	0e 94 2a 6a 	call	0xd454	; 0xd454 <_Z8lcd_putchhc>
  
	int8_t sub = mstate2.m_posVert;
    bd68:	b0 90 e0 08 	lds	r11, 0x08E0
	uint8_t t_pgOfs = evalOffset(sub, 6);
    bd6c:	8b 2d       	mov	r24, r11
    bd6e:	66 e0       	ldi	r22, 0x06	; 6
    bd70:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    bd74:	f8 2e       	mov	r15, r24
	
	putsTelemetryChannel( 8*FW, 0, index+TEL_ITEM_SC1, 0, 0, TELEM_UNIT ) ;
    bd76:	4c 2d       	mov	r20, r12
    bd78:	4b 5d       	subi	r20, 0xDB	; 219
    bd7a:	80 e3       	ldi	r24, 0x30	; 48
    bd7c:	60 e0       	ldi	r22, 0x00	; 0
    bd7e:	20 e0       	ldi	r18, 0x00	; 0
    bd80:	30 e0       	ldi	r19, 0x00	; 0
    bd82:	00 e0       	ldi	r16, 0x00	; 0
    bd84:	72 e0       	ldi	r23, 0x02	; 2
    bd86:	e7 2e       	mov	r14, r23
    bd88:	0e 94 50 28 	call	0x50a0	; 0x50a0 <_Z20putsTelemetryChannelhhaihh>

	lcd_puts_Pskip( FH, PSTR("Source\037\037"STR_OFFSET"\037Multiplier\037Divisor\037Unit\037Sign\037Decimals\037Offset At"), s_pgOfs ) ;
    bd8c:	88 e0       	ldi	r24, 0x08	; 8
    bd8e:	60 e4       	ldi	r22, 0x40	; 64
    bd90:	70 e1       	ldi	r23, 0x10	; 16
    bd92:	40 91 e4 06 	lds	r20, 0x06E4
    bd96:	0e 94 9c 6a 	call	0xd538	; 0xd538 <_Z14lcd_puts_PskiphPKch>
	{
    uint8_t y = (k+1) * FH ;
    uint8_t i = k + t_pgOfs;
		uint8_t attr = (sub==i ? InverseBlink : 0);
		ScaleData *pscaler ;
		pscaler = &g_model.Scalers[index] ;
    bd9a:	dd 24       	eor	r13, r13
			case 1 :	// name
				if ( attr )
				{
					Columns = &ProgColumns[COLUMNS_3] ;
				}
				editName( g_posHorz, y, pscaler->name, 4, attr ? EE_MODEL : 0 ) ;
    bd9c:	8b e0       	ldi	r24, 0x0B	; 11
    bd9e:	90 e0       	ldi	r25, 0x00	; 0
    bda0:	c8 9e       	mul	r12, r24
    bda2:	90 01       	movw	r18, r0
    bda4:	c9 9e       	mul	r12, r25
    bda6:	30 0d       	add	r19, r0
    bda8:	d8 9e       	mul	r13, r24
    bdaa:	30 0d       	add	r19, r0
    bdac:	11 24       	eor	r1, r1
    bdae:	a9 01       	movw	r20, r18
    bdb0:	4c 50       	subi	r20, 0x0C	; 12
    bdb2:	5b 4f       	sbci	r21, 0xFB	; 251
    bdb4:	5a 83       	std	Y+2, r21	; 0x02
    bdb6:	49 83       	std	Y+1, r20	; 0x01
    bdb8:	18 e0       	ldi	r17, 0x08	; 8

	for (uint8_t k = 0 ; k < 7 ; k += 1 )
	{
    uint8_t y = (k+1) * FH ;
    uint8_t i = k + t_pgOfs;
		uint8_t attr = (sub==i ? InverseBlink : 0);
    bdba:	8b 2d       	mov	r24, r11
    bdbc:	99 27       	eor	r25, r25
    bdbe:	87 fd       	sbrc	r24, 7
    bdc0:	90 95       	com	r25
    bdc2:	9c 83       	std	Y+4, r25	; 0x04
    bdc4:	8b 83       	std	Y+3, r24	; 0x03
      case 3 :	// mult
				pscaler->mult = scalerDecimal( y, pscaler->mult, attr ) ;
//				pscaler->mult = scalerDecimal( y, PSTR("Multiplier"), pscaler->mult, attr ) ;
			break ;
      case 4 :	// div
				pscaler->div = scalerDecimal( y, pscaler->div, attr ) ;
    bdc6:	c9 01       	movw	r24, r18
    bdc8:	86 55       	subi	r24, 0x56	; 86
    bdca:	9e 4f       	sbci	r25, 0xFE	; 254
    bdcc:	57 e4       	ldi	r21, 0x47	; 71
    bdce:	45 2e       	mov	r4, r21
    bdd0:	53 e0       	ldi	r21, 0x03	; 3
    bdd2:	55 2e       	mov	r5, r21
    bdd4:	48 0e       	add	r4, r24
    bdd6:	59 1e       	adc	r5, r25
				lcd_putsAttIdx( 12*FW, y, UnitsString, pscaler->unit, attr ) ;
			break ;
      case 6 :	// sign
//				lcd_puts_Pleft( y, PSTR("Sign") ) ;
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->neg, 1 ) ;
  			lcd_putcAtt( 12*FW, y, pscaler->neg ? '-' : '+', attr ) ;
    bdd8:	4d ee       	ldi	r20, 0xED	; 237
    bdda:	24 2e       	mov	r2, r20
    bddc:	44 e0       	ldi	r20, 0x04	; 4
    bdde:	34 2e       	mov	r3, r20
    bde0:	22 0e       	add	r2, r18
    bde2:	33 1e       	adc	r3, r19
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->unit, 7 ) ;
				lcd_putsAttIdx( 12*FW, y, UnitsString, pscaler->unit, attr ) ;
			break ;
      case 6 :	// sign
//				lcd_puts_Pleft( y, PSTR("Sign") ) ;
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->neg, 1 ) ;
    bde4:	f9 01       	movw	r30, r18
    bde6:	ed 50       	subi	r30, 0x0D	; 13
    bde8:	fb 4f       	sbci	r31, 0xFB	; 251
    bdea:	fe 83       	std	Y+6, r31	; 0x06
    bdec:	ed 83       	std	Y+5, r30	; 0x05
//				pscaler->div = scalerDecimal( y, PSTR("Divisor"), pscaler->div, attr ) ;
			break ;
      case 5 :	// unit
//				lcd_puts_Pleft( y, PSTR("Unit") ) ;
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->unit, 7 ) ;
				lcd_putsAttIdx( 12*FW, y, UnitsString, pscaler->unit, attr ) ;
    bdee:	38 e4       	ldi	r19, 0x48	; 72
    bdf0:	83 2e       	mov	r8, r19
    bdf2:	33 e0       	ldi	r19, 0x03	; 3
    bdf4:	93 2e       	mov	r9, r19
    bdf6:	88 0e       	add	r8, r24
    bdf8:	99 1e       	adc	r9, r25

		switch(i)
		{
      case 0 :	// Source
//				lcd_puts_Pleft( y, PSTR("Source") ) ;
				putsChnRaw( 11*FW, y, pscaler->source, attr ) ;
    bdfa:	23 e4       	ldi	r18, 0x43	; 67
    bdfc:	a2 2e       	mov	r10, r18
    bdfe:	23 e0       	ldi	r18, 0x03	; 3
    be00:	b2 2e       	mov	r11, r18
    be02:	a8 0e       	add	r10, r24
    be04:	b9 1e       	adc	r11, r25
//					}
//				} 
			break ;
      case 2 :	// offset
//				lcd_puts_Pleft( y, PSTR(STR_OFFSET) ) ;
				lcd_outdezAtt( 13*FW, y, pscaler->offset, attr) ;
    be06:	04 e4       	ldi	r16, 0x44	; 68
    be08:	c0 2e       	mov	r12, r16
    be0a:	03 e0       	ldi	r16, 0x03	; 3
    be0c:	d0 2e       	mov	r13, r16
    be0e:	c8 0e       	add	r12, r24
    be10:	d9 1e       	adc	r13, r25
				}
//  			if( attr ) pscaler->offset = checkIncDec16( pscaler->offset, -2048, 2048, EE_MODEL ) ;
//				lcd_label_decimal( y, PSTR(STR_OFFSET), pscaler->offset, attr ) ;
			break ;
      case 3 :	// mult
				pscaler->mult = scalerDecimal( y, pscaler->mult, attr ) ;
    be12:	b6 e4       	ldi	r27, 0x46	; 70
    be14:	6b 2e       	mov	r6, r27
    be16:	b3 e0       	ldi	r27, 0x03	; 3
    be18:	7b 2e       	mov	r7, r27
    be1a:	68 0e       	add	r6, r24
    be1c:	79 1e       	adc	r7, r25

	for (uint8_t k = 0 ; k < 7 ; k += 1 )
	{
    uint8_t y = (k+1) * FH ;
    uint8_t i = k + t_pgOfs;
		uint8_t attr = (sub==i ? InverseBlink : 0);
    be1e:	8f 2d       	mov	r24, r15
    be20:	90 e0       	ldi	r25, 0x00	; 0
    be22:	2b 81       	ldd	r18, Y+3	; 0x03
    be24:	3c 81       	ldd	r19, Y+4	; 0x04
    be26:	28 17       	cp	r18, r24
    be28:	39 07       	cpc	r19, r25
    be2a:	11 f0       	breq	.+4      	; 0xbe30 <_Z12menuScaleOneh+0x11c>
    be2c:	00 e0       	ldi	r16, 0x00	; 0
    be2e:	02 c0       	rjmp	.+4      	; 0xbe34 <_Z12menuScaleOneh+0x120>
    be30:	00 91 eb 06 	lds	r16, 0x06EB
		ScaleData *pscaler ;
		pscaler = &g_model.Scalers[index] ;

		switch(i)
    be34:	34 e0       	ldi	r19, 0x04	; 4
    be36:	f3 16       	cp	r15, r19
    be38:	09 f4       	brne	.+2      	; 0xbe3c <_Z12menuScaleOneh+0x128>
    be3a:	65 c0       	rjmp	.+202    	; 0xbf06 <_Z12menuScaleOneh+0x1f2>
    be3c:	3f 15       	cp	r19, r15
    be3e:	68 f0       	brcs	.+26     	; 0xbe5a <_Z12menuScaleOneh+0x146>
    be40:	41 e0       	ldi	r20, 0x01	; 1
    be42:	f4 16       	cp	r15, r20
    be44:	59 f1       	breq	.+86     	; 0xbe9c <_Z12menuScaleOneh+0x188>
    be46:	f4 16       	cp	r15, r20
    be48:	c0 f0       	brcs	.+48     	; 0xbe7a <_Z12menuScaleOneh+0x166>
    be4a:	52 e0       	ldi	r21, 0x02	; 2
    be4c:	f5 16       	cp	r15, r21
    be4e:	c9 f1       	breq	.+114    	; 0xbec2 <_Z12menuScaleOneh+0x1ae>
    be50:	83 e0       	ldi	r24, 0x03	; 3
    be52:	f8 16       	cp	r15, r24
    be54:	09 f0       	breq	.+2      	; 0xbe58 <_Z12menuScaleOneh+0x144>
    be56:	cd c0       	rjmp	.+410    	; 0xbff2 <_Z12menuScaleOneh+0x2de>
    be58:	4d c0       	rjmp	.+154    	; 0xbef4 <_Z12menuScaleOneh+0x1e0>
    be5a:	96 e0       	ldi	r25, 0x06	; 6
    be5c:	f9 16       	cp	r15, r25
    be5e:	09 f4       	brne	.+2      	; 0xbe62 <_Z12menuScaleOneh+0x14e>
    be60:	6a c0       	rjmp	.+212    	; 0xbf36 <_Z12menuScaleOneh+0x222>
    be62:	f9 16       	cp	r15, r25
    be64:	08 f4       	brcc	.+2      	; 0xbe68 <_Z12menuScaleOneh+0x154>
    be66:	57 c0       	rjmp	.+174    	; 0xbf16 <_Z12menuScaleOneh+0x202>
    be68:	e7 e0       	ldi	r30, 0x07	; 7
    be6a:	fe 16       	cp	r15, r30
    be6c:	09 f4       	brne	.+2      	; 0xbe70 <_Z12menuScaleOneh+0x15c>
    be6e:	80 c0       	rjmp	.+256    	; 0xbf70 <_Z12menuScaleOneh+0x25c>
    be70:	f8 e0       	ldi	r31, 0x08	; 8
    be72:	ff 16       	cp	r15, r31
    be74:	09 f0       	breq	.+2      	; 0xbe78 <_Z12menuScaleOneh+0x164>
    be76:	bd c0       	rjmp	.+378    	; 0xbff2 <_Z12menuScaleOneh+0x2de>
    be78:	99 c0       	rjmp	.+306    	; 0xbfac <_Z12menuScaleOneh+0x298>
		{
      case 0 :	// Source
//				lcd_puts_Pleft( y, PSTR("Source") ) ;
				putsChnRaw( 11*FW, y, pscaler->source, attr ) ;
    be7a:	82 e4       	ldi	r24, 0x42	; 66
    be7c:	61 2f       	mov	r22, r17
    be7e:	f5 01       	movw	r30, r10
    be80:	40 81       	ld	r20, Z
    be82:	20 2f       	mov	r18, r16
    be84:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_Z10putsChnRawhhhh>
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->source, NUM_XCHNRAW+NUM_TELEM_ITEMS ) ;
    be88:	00 23       	and	r16, r16
    be8a:	09 f4       	brne	.+2      	; 0xbe8e <_Z12menuScaleOneh+0x17a>
    be8c:	b2 c0       	rjmp	.+356    	; 0xbff2 <_Z12menuScaleOneh+0x2de>
    be8e:	f5 01       	movw	r30, r10
    be90:	80 81       	ld	r24, Z
    be92:	6e e2       	ldi	r22, 0x2E	; 46
    be94:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    be98:	f5 01       	movw	r30, r10
    be9a:	33 c0       	rjmp	.+102    	; 0xbf02 <_Z12menuScaleOneh+0x1ee>
			break ;
			case 1 :	// name
				if ( attr )
    be9c:	00 23       	and	r16, r16
    be9e:	31 f0       	breq	.+12     	; 0xbeac <_Z12menuScaleOneh+0x198>
				{
					Columns = &ProgColumns[COLUMNS_3] ;
    bea0:	2b e2       	ldi	r18, 0x2B	; 43
    bea2:	34 e0       	ldi	r19, 0x04	; 4
    bea4:	30 93 c1 08 	sts	0x08C1, r19
    bea8:	20 93 c0 08 	sts	0x08C0, r18
				}
				editName( g_posHorz, y, pscaler->name, 4, attr ? EE_MODEL : 0 ) ;
    beac:	80 91 0c 07 	lds	r24, 0x070C
    beb0:	01 11       	cpse	r16, r1
    beb2:	02 e0       	ldi	r16, 0x02	; 2
    beb4:	61 2f       	mov	r22, r17
    beb6:	49 81       	ldd	r20, Y+1	; 0x01
    beb8:	5a 81       	ldd	r21, Y+2	; 0x02
    beba:	24 e0       	ldi	r18, 0x04	; 4
    bebc:	0e 94 8f 23 	call	0x471e	; 0x471e <_Z8editNamehhPhhh>
    bec0:	98 c0       	rjmp	.+304    	; 0xbff2 <_Z12menuScaleOneh+0x2de>
//					}
//				} 
			break ;
      case 2 :	// offset
//				lcd_puts_Pleft( y, PSTR(STR_OFFSET) ) ;
				lcd_outdezAtt( 13*FW, y, pscaler->offset, attr) ;
    bec2:	f6 01       	movw	r30, r12
    bec4:	40 81       	ld	r20, Z
    bec6:	51 81       	ldd	r21, Z+1	; 0x01
    bec8:	8e e4       	ldi	r24, 0x4E	; 78
    beca:	61 2f       	mov	r22, r17
    becc:	20 2f       	mov	r18, r16
    bece:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
				if ( attr )
    bed2:	00 23       	and	r16, r16
    bed4:	09 f4       	brne	.+2      	; 0xbed8 <_Z12menuScaleOneh+0x1c4>
    bed6:	8d c0       	rjmp	.+282    	; 0xbff2 <_Z12menuScaleOneh+0x2de>
//							pscaler->offset += v ;
//						}
//					}
//					else
//					{
					pscaler->offset = checkIncDec16( pscaler->offset, -32000, 32000, EE_MODEL ) ;
    bed8:	f6 01       	movw	r30, r12
    beda:	80 81       	ld	r24, Z
    bedc:	91 81       	ldd	r25, Z+1	; 0x01
    bede:	60 e0       	ldi	r22, 0x00	; 0
    bee0:	73 e8       	ldi	r23, 0x83	; 131
    bee2:	40 e0       	ldi	r20, 0x00	; 0
    bee4:	5d e7       	ldi	r21, 0x7D	; 125
    bee6:	22 e0       	ldi	r18, 0x02	; 2
    bee8:	0e 94 b2 12 	call	0x2564	; 0x2564 <_Z13checkIncDec16iiih>
    beec:	f6 01       	movw	r30, r12
    beee:	91 83       	std	Z+1, r25	; 0x01
    bef0:	80 83       	st	Z, r24
    bef2:	7f c0       	rjmp	.+254    	; 0xbff2 <_Z12menuScaleOneh+0x2de>
				}
//  			if( attr ) pscaler->offset = checkIncDec16( pscaler->offset, -2048, 2048, EE_MODEL ) ;
//				lcd_label_decimal( y, PSTR(STR_OFFSET), pscaler->offset, attr ) ;
			break ;
      case 3 :	// mult
				pscaler->mult = scalerDecimal( y, pscaler->mult, attr ) ;
    bef4:	81 2f       	mov	r24, r17
    bef6:	f3 01       	movw	r30, r6
    bef8:	60 81       	ld	r22, Z
    befa:	40 2f       	mov	r20, r16
    befc:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <_Z13scalerDecimalhhh>
    bf00:	f3 01       	movw	r30, r6
    bf02:	80 83       	st	Z, r24
    bf04:	76 c0       	rjmp	.+236    	; 0xbff2 <_Z12menuScaleOneh+0x2de>
//				pscaler->mult = scalerDecimal( y, PSTR("Multiplier"), pscaler->mult, attr ) ;
			break ;
      case 4 :	// div
				pscaler->div = scalerDecimal( y, pscaler->div, attr ) ;
    bf06:	81 2f       	mov	r24, r17
    bf08:	f2 01       	movw	r30, r4
    bf0a:	60 81       	ld	r22, Z
    bf0c:	40 2f       	mov	r20, r16
    bf0e:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <_Z13scalerDecimalhhh>
    bf12:	f2 01       	movw	r30, r4
    bf14:	f6 cf       	rjmp	.-20     	; 0xbf02 <_Z12menuScaleOneh+0x1ee>
//				pscaler->div = scalerDecimal( y, PSTR("Divisor"), pscaler->div, attr ) ;
			break ;
      case 5 :	// unit
//				lcd_puts_Pleft( y, PSTR("Unit") ) ;
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->unit, 7 ) ;
    bf16:	00 23       	and	r16, r16
    bf18:	39 f0       	breq	.+14     	; 0xbf28 <_Z12menuScaleOneh+0x214>
    bf1a:	f4 01       	movw	r30, r8
    bf1c:	80 81       	ld	r24, Z
    bf1e:	67 e0       	ldi	r22, 0x07	; 7
    bf20:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    bf24:	f4 01       	movw	r30, r8
    bf26:	80 83       	st	Z, r24
				lcd_putsAttIdx( 12*FW, y, UnitsString, pscaler->unit, attr ) ;
    bf28:	88 e4       	ldi	r24, 0x48	; 72
    bf2a:	61 2f       	mov	r22, r17
    bf2c:	4a e0       	ldi	r20, 0x0A	; 10
    bf2e:	50 e1       	ldi	r21, 0x10	; 16
    bf30:	f4 01       	movw	r30, r8
    bf32:	20 81       	ld	r18, Z
    bf34:	5c c0       	rjmp	.+184    	; 0xbfee <_Z12menuScaleOneh+0x2da>
			break ;
      case 6 :	// sign
//				lcd_puts_Pleft( y, PSTR("Sign") ) ;
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->neg, 1 ) ;
    bf36:	00 23       	and	r16, r16
    bf38:	71 f0       	breq	.+28     	; 0xbf56 <_Z12menuScaleOneh+0x242>
    bf3a:	ed 81       	ldd	r30, Y+5	; 0x05
    bf3c:	fe 81       	ldd	r31, Y+6	; 0x06
    bf3e:	80 81       	ld	r24, Z
    bf40:	81 70       	andi	r24, 0x01	; 1
    bf42:	61 e0       	ldi	r22, 0x01	; 1
    bf44:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    bf48:	81 70       	andi	r24, 0x01	; 1
    bf4a:	ed 81       	ldd	r30, Y+5	; 0x05
    bf4c:	fe 81       	ldd	r31, Y+6	; 0x06
    bf4e:	90 81       	ld	r25, Z
    bf50:	9e 7f       	andi	r25, 0xFE	; 254
    bf52:	98 2b       	or	r25, r24
    bf54:	90 83       	st	Z, r25
  			lcd_putcAtt( 12*FW, y, pscaler->neg ? '-' : '+', attr ) ;
    bf56:	f1 01       	movw	r30, r2
    bf58:	86 81       	ldd	r24, Z+6	; 0x06
    bf5a:	80 fd       	sbrc	r24, 0
    bf5c:	02 c0       	rjmp	.+4      	; 0xbf62 <_Z12menuScaleOneh+0x24e>
    bf5e:	4b e2       	ldi	r20, 0x2B	; 43
    bf60:	01 c0       	rjmp	.+2      	; 0xbf64 <_Z12menuScaleOneh+0x250>
    bf62:	4d e2       	ldi	r20, 0x2D	; 45
    bf64:	88 e4       	ldi	r24, 0x48	; 72
    bf66:	61 2f       	mov	r22, r17
    bf68:	20 2f       	mov	r18, r16
    bf6a:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
    bf6e:	41 c0       	rjmp	.+130    	; 0xbff2 <_Z12menuScaleOneh+0x2de>
			break ;
      case 7 :	// precision
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->precision, 2 ) ;
    bf70:	00 23       	and	r16, r16
    bf72:	81 f0       	breq	.+32     	; 0xbf94 <_Z12menuScaleOneh+0x280>
    bf74:	ed 81       	ldd	r30, Y+5	; 0x05
    bf76:	fe 81       	ldd	r31, Y+6	; 0x06
    bf78:	80 81       	ld	r24, Z
    bf7a:	86 95       	lsr	r24
    bf7c:	83 70       	andi	r24, 0x03	; 3
    bf7e:	62 e0       	ldi	r22, 0x02	; 2
    bf80:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    bf84:	83 70       	andi	r24, 0x03	; 3
    bf86:	88 0f       	add	r24, r24
    bf88:	ed 81       	ldd	r30, Y+5	; 0x05
    bf8a:	fe 81       	ldd	r31, Y+6	; 0x06
    bf8c:	90 81       	ld	r25, Z
    bf8e:	99 7f       	andi	r25, 0xF9	; 249
    bf90:	98 2b       	or	r25, r24
    bf92:	90 83       	st	Z, r25
//				lcd_label_decimal( y, PSTR("Decimals"), pscaler->precision, attr ) ;
//				lcd_puts_Pleft( y, PSTR("Decimals") ) ;
				lcd_outdezAtt( 14*FW, y, pscaler->precision, attr) ;
    bf94:	ed 81       	ldd	r30, Y+5	; 0x05
    bf96:	fe 81       	ldd	r31, Y+6	; 0x06
    bf98:	40 81       	ld	r20, Z
    bf9a:	46 95       	lsr	r20
    bf9c:	43 70       	andi	r20, 0x03	; 3
    bf9e:	84 e5       	ldi	r24, 0x54	; 84
    bfa0:	61 2f       	mov	r22, r17
    bfa2:	50 e0       	ldi	r21, 0x00	; 0
    bfa4:	20 2f       	mov	r18, r16
    bfa6:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    bfaa:	23 c0       	rjmp	.+70     	; 0xbff2 <_Z12menuScaleOneh+0x2de>
			break ;
      case 8 :	// offsetLast
			{	
//				lcd_puts_Pleft( y, PSTR("Offset At") ) ;
  			if( attr ) CHECK_INCDEC_H_MODELVAR_0( pscaler->offsetLast, 1 ) ;
    bfac:	00 23       	and	r16, r16
    bfae:	a1 f0       	breq	.+40     	; 0xbfd8 <_Z12menuScaleOneh+0x2c4>
    bfb0:	ed 81       	ldd	r30, Y+5	; 0x05
    bfb2:	fe 81       	ldd	r31, Y+6	; 0x06
    bfb4:	80 81       	ld	r24, Z
    bfb6:	86 95       	lsr	r24
    bfb8:	86 95       	lsr	r24
    bfba:	86 95       	lsr	r24
    bfbc:	81 70       	andi	r24, 0x01	; 1
    bfbe:	61 e0       	ldi	r22, 0x01	; 1
    bfc0:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z15checkIncDec_hm0aa>
    bfc4:	81 70       	andi	r24, 0x01	; 1
    bfc6:	88 0f       	add	r24, r24
    bfc8:	88 0f       	add	r24, r24
    bfca:	88 0f       	add	r24, r24
    bfcc:	ed 81       	ldd	r30, Y+5	; 0x05
    bfce:	fe 81       	ldd	r31, Y+6	; 0x06
    bfd0:	90 81       	ld	r25, Z
    bfd2:	97 7f       	andi	r25, 0xF7	; 247
    bfd4:	98 2b       	or	r25, r24
    bfd6:	90 83       	st	Z, r25
				lcd_putsAttIdx( 12*FW, y, PSTR("\005FirstLast "), pscaler->offsetLast, attr ) ;
    bfd8:	ed 81       	ldd	r30, Y+5	; 0x05
    bfda:	fe 81       	ldd	r31, Y+6	; 0x06
    bfdc:	20 81       	ld	r18, Z
    bfde:	26 95       	lsr	r18
    bfe0:	26 95       	lsr	r18
    bfe2:	26 95       	lsr	r18
    bfe4:	21 70       	andi	r18, 0x01	; 1
    bfe6:	88 e4       	ldi	r24, 0x48	; 72
    bfe8:	61 2f       	mov	r22, r17
    bfea:	44 e3       	ldi	r20, 0x34	; 52
    bfec:	50 e1       	ldi	r21, 0x10	; 16
    bfee:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <_Z14lcd_putsAttIdxhhPKchh>
    bff2:	f3 94       	inc	r15
    bff4:	18 5f       	subi	r17, 0xF8	; 248
	
	putsTelemetryChannel( 8*FW, 0, index+TEL_ITEM_SC1, 0, 0, TELEM_UNIT ) ;

	lcd_puts_Pskip( FH, PSTR("Source\037\037"STR_OFFSET"\037Multiplier\037Divisor\037Unit\037Sign\037Decimals\037Offset At"), s_pgOfs ) ;

	for (uint8_t k = 0 ; k < 7 ; k += 1 )
    bff6:	10 34       	cpi	r17, 0x40	; 64
    bff8:	09 f0       	breq	.+2      	; 0xbffc <_Z12menuScaleOneh+0x2e8>
    bffa:	11 cf       	rjmp	.-478    	; 0xbe1e <_Z12menuScaleOneh+0x10a>
			}
			break ;
		}
	}

}
    bffc:	26 96       	adiw	r28, 0x06	; 6
    bffe:	0f b6       	in	r0, 0x3f	; 63
    c000:	f8 94       	cli
    c002:	de bf       	out	0x3e, r29	; 62
    c004:	0f be       	out	0x3f, r0	; 63
    c006:	cd bf       	out	0x3d, r28	; 61
    c008:	cf 91       	pop	r28
    c00a:	df 91       	pop	r29
    c00c:	1f 91       	pop	r17
    c00e:	0f 91       	pop	r16
    c010:	ff 90       	pop	r15
    c012:	ef 90       	pop	r14
    c014:	df 90       	pop	r13
    c016:	cf 90       	pop	r12
    c018:	bf 90       	pop	r11
    c01a:	af 90       	pop	r10
    c01c:	9f 90       	pop	r9
    c01e:	8f 90       	pop	r8
    c020:	7f 90       	pop	r7
    c022:	6f 90       	pop	r6
    c024:	5f 90       	pop	r5
    c026:	4f 90       	pop	r4
    c028:	3f 90       	pop	r3
    c02a:	2f 90       	pop	r2
    c02c:	08 95       	ret

0000c02e <_Z13menuProcCurveh>:
//lcd_vline(XD, Y0 - WCHART, WCHART * 2);
}



void menuProcCurve(uint8_t event)
    c02e:	cf 92       	push	r12
    c030:	df 92       	push	r13
    c032:	ef 92       	push	r14
    c034:	ff 92       	push	r15
    c036:	0f 93       	push	r16
    c038:	1f 93       	push	r17
    c03a:	cf 93       	push	r28
    c03c:	df 93       	push	r29
    c03e:	18 2f       	mov	r17, r24
{
	TITLEP(Str_Curves) ;
    c040:	8b ed       	ldi	r24, 0xDB	; 219
    c042:	96 e0       	ldi	r25, 0x06	; 6
    c044:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
	static MState2 mstate2 ;
//	if (SubMenuFromIndex)
//	{
		mstate2.check_columns(event,1+MAX_CURVE5+MAX_CURVE9-1-1) ;
    c048:	81 ee       	ldi	r24, 0xE1	; 225
    c04a:	98 e0       	ldi	r25, 0x08	; 8
    c04c:	61 2f       	mov	r22, r17
    c04e:	4f e0       	ldi	r20, 0x0F	; 15
    c050:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>
//	{
//		mstate2.check_simple(event,e_Curve,menuTabModel,DIM(menuTabModel),1+MAX_CURVE5+MAX_CURVE9-1) ;
//	}
//    SIMPLE_MENU(STR_CURVES, menuTabModel, e_Curve, 1+MAX_CURVE5+MAX_CURVE9);

    int8_t  sub    = mstate2.m_posVert ;
    c054:	f0 90 e1 08 	lds	r15, 0x08E1
//    int8_t  sub    = mstate2.m_posVert - 1;

    uint8_t t_pgOfs = evalOffset(sub, 6);
    c058:	8f 2d       	mov	r24, r15
    c05a:	66 e0       	ldi	r22, 0x06	; 6
    c05c:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z10evalOffsetah>
    c060:	e8 2e       	mov	r14, r24

    switch (event) {
    c062:	10 36       	cpi	r17, 0x60	; 96
    c064:	11 f0       	breq	.+4      	; 0xc06a <_Z13menuProcCurveh+0x3c>
    c066:	14 36       	cpi	r17, 0x64	; 100
    c068:	69 f4       	brne	.+26     	; 0xc084 <_Z13menuProcCurveh+0x56>
    case EVT_KEY_FIRST(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_MENU):
        if (sub >= 0) {
    c06a:	f7 fc       	sbrc	r15, 7
    c06c:	0b c0       	rjmp	.+22     	; 0xc084 <_Z13menuProcCurveh+0x56>
            s_curveChan = sub;
    c06e:	f0 92 dc 08 	sts	0x08DC, r15
        		killEvents(event);
    c072:	81 2f       	mov	r24, r17
    c074:	0e 94 18 6f 	call	0xde30	; 0xde30 <_Z10killEventsh>
						Tevent = 0 ;
    c078:	10 92 aa 05 	sts	0x05AA, r1
            pushMenu(menuProcCurveOne);
    c07c:	87 e7       	ldi	r24, 0x77	; 119
    c07e:	90 e6       	ldi	r25, 0x60	; 96
    c080:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_Z8pushMenuPFvhE>
    c084:	18 e0       	ldi	r17, 0x08	; 8
//    uint8_t yd   = 1;
//    uint8_t m    = 0;
    for (uint8_t i = 0; i < 7; i++)
		{
        uint8_t k = i + t_pgOfs;
        uint8_t attr = sub == k ? INVERS : 0;
    c086:	cf 2c       	mov	r12, r15
    c088:	dd 24       	eor	r13, r13
    c08a:	c7 fc       	sbrc	r12, 7
    c08c:	d0 94       	com	r13
    c08e:	ce 2d       	mov	r28, r14
    c090:	d0 e0       	ldi	r29, 0x00	; 0
    c092:	00 e0       	ldi	r16, 0x00	; 0
    c094:	cc 16       	cp	r12, r28
    c096:	dd 06       	cpc	r13, r29
    c098:	09 f4       	brne	.+2      	; 0xc09c <_Z13menuProcCurveh+0x6e>
    c09a:	01 e0       	ldi	r16, 0x01	; 1
//        bool    cv9 = k >= MAX_CURVE5;

//        if(cv9 && (y>6*FH)) break;
        if(y>7*FH) break;
//        if(!m) m = attr;
        lcd_putsAtt(   FW*0, y,PSTR(STR_CV),attr);
    c09c:	80 e0       	ldi	r24, 0x00	; 0
    c09e:	61 2f       	mov	r22, r17
    c0a0:	49 e8       	ldi	r20, 0x89	; 137
    c0a2:	50 e1       	ldi	r21, 0x10	; 16
    c0a4:	20 2f       	mov	r18, r16
    c0a6:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
        lcd_outdezAtt( (k<9) ? FW*3-1 : FW*4-2, y,k+1 ,attr);
    c0aa:	88 e0       	ldi	r24, 0x08	; 8
    c0ac:	8e 15       	cp	r24, r14
    c0ae:	10 f0       	brcs	.+4      	; 0xc0b4 <_Z13menuProcCurveh+0x86>
    c0b0:	81 e1       	ldi	r24, 0x11	; 17
    c0b2:	01 c0       	rjmp	.+2      	; 0xc0b6 <_Z13menuProcCurveh+0x88>
    c0b4:	86 e1       	ldi	r24, 0x16	; 22
    c0b6:	21 96       	adiw	r28, 0x01	; 1
    c0b8:	61 2f       	mov	r22, r17
    c0ba:	ae 01       	movw	r20, r28
    c0bc:	20 2f       	mov	r18, r16
    c0be:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    c0c2:	e3 94       	inc	r14
    }

    uint8_t y    = 1*FH;
//    uint8_t yd   = 1;
//    uint8_t m    = 0;
    for (uint8_t i = 0; i < 7; i++)
    c0c4:	18 33       	cpi	r17, 0x38	; 56
    c0c6:	19 f0       	breq	.+6      	; 0xc0ce <_Z13menuProcCurveh+0xa0>

//        int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
//        for (uint8_t j = 0; j < (5); j++) {
//            lcd_outdez( j*(3*FW+3) + 7*FW, y, crv[j] );
//        }
        y += FH; // yd++;
    c0c8:	18 5f       	subi	r17, 0xF8	; 248
        uint8_t k = i + t_pgOfs;
        uint8_t attr = sub == k ? INVERS : 0;
//        bool    cv9 = k >= MAX_CURVE5;

//        if(cv9 && (y>6*FH)) break;
        if(y>7*FH) break;
    c0ca:	19 33       	cpi	r17, 0x39	; 57
    c0cc:	00 f3       	brcs	.-64     	; 0xc08e <_Z13menuProcCurveh+0x60>
//            y += FH; // yd++;
//        }
    }

//    if(!m) s_pgOfs++;
		if ( sub >= 0 )
    c0ce:	f7 fc       	sbrc	r15, 7
    c0d0:	05 c0       	rjmp	.+10     	; 0xc0dc <_Z13menuProcCurveh+0xae>
		{
  		s_curveChan = sub ;
    c0d2:	f0 92 dc 08 	sts	0x08DC, r15
			drawCurve( 100 ) ;
    c0d6:	84 e6       	ldi	r24, 0x64	; 100
    c0d8:	0e 94 96 42 	call	0x852c	; 0x852c <_Z9drawCurveh>
		}
	asm("") ;
}
    c0dc:	df 91       	pop	r29
    c0de:	cf 91       	pop	r28
    c0e0:	1f 91       	pop	r17
    c0e2:	0f 91       	pop	r16
    c0e4:	ff 90       	pop	r15
    c0e6:	ef 90       	pop	r14
    c0e8:	df 90       	pop	r13
    c0ea:	cf 90       	pop	r12
    c0ec:	08 95       	ret

0000c0ee <_Z16menuProcCurveOneh>:
//	plotType = PLOT_XOR ;
}



void menuProcCurveOne(uint8_t event)
    c0ee:	5f 92       	push	r5
    c0f0:	6f 92       	push	r6
    c0f2:	7f 92       	push	r7
    c0f4:	8f 92       	push	r8
    c0f6:	9f 92       	push	r9
    c0f8:	af 92       	push	r10
    c0fa:	bf 92       	push	r11
    c0fc:	cf 92       	push	r12
    c0fe:	df 92       	push	r13
    c100:	ef 92       	push	r14
    c102:	ff 92       	push	r15
    c104:	0f 93       	push	r16
    c106:	1f 93       	push	r17
    c108:	cf 93       	push	r28
    c10a:	df 93       	push	r29
    c10c:	58 2e       	mov	r5, r24
{
  bool    cv9 = s_curveChan >= MAX_CURVE5;
    c10e:	88 24       	eor	r8, r8
    c110:	80 91 dc 08 	lds	r24, 0x08DC
    c114:	88 30       	cpi	r24, 0x08	; 8
    c116:	10 f0       	brcs	.+4      	; 0xc11c <_Z16menuProcCurveOneh+0x2e>
    c118:	88 24       	eor	r8, r8
    c11a:	83 94       	inc	r8
	static int8_t dfltCrv;

//    SUBMENU(STR_CURVE, 1+(cv9 ? 9 : 5), { 0/*repeated...*/});
	
	TITLE(STR_CURVE) ;
    c11c:	83 e9       	ldi	r24, 0x93	; 147
    c11e:	90 e1       	ldi	r25, 0x10	; 16
    c120:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <_Z6TITLEPPKc>
	static MState2 mstate2 ;
	mstate2.check_columns(event, (cv9 ? 9 : 5) ) ;
    c124:	88 20       	and	r8, r8
    c126:	11 f4       	brne	.+4      	; 0xc12c <_Z16menuProcCurveOneh+0x3e>
    c128:	45 e0       	ldi	r20, 0x05	; 5
    c12a:	01 c0       	rjmp	.+2      	; 0xc12e <_Z16menuProcCurveOneh+0x40>
    c12c:	49 e0       	ldi	r20, 0x09	; 9
    c12e:	82 ee       	ldi	r24, 0xE2	; 226
    c130:	98 e0       	ldi	r25, 0x08	; 8
    c132:	65 2d       	mov	r22, r5
    c134:	0e 94 34 57 	call	0xae68	; 0xae68 <_ZN7MState213check_columnsEhh>
    
	if ( event == EVT_ENTRY )
    c138:	8f eb       	ldi	r24, 0xBF	; 191
    c13a:	58 16       	cp	r5, r24
    c13c:	11 f4       	brne	.+4      	; 0xc142 <_Z16menuProcCurveOneh+0x54>
	{
		dfltCrv = 0 ;
    c13e:	10 92 e3 08 	sts	0x08E3, r1
	}
	lcd_outdezAtt(7*FW, 0, s_curveChan+1, INVERS);
    c142:	40 91 dc 08 	lds	r20, 0x08DC
    c146:	50 e0       	ldi	r21, 0x00	; 0
    c148:	4f 5f       	subi	r20, 0xFF	; 255
    c14a:	5f 4f       	sbci	r21, 0xFF	; 255
    c14c:	8a e2       	ldi	r24, 0x2A	; 42
    c14e:	60 e0       	ldi	r22, 0x00	; 0
    c150:	21 e0       	ldi	r18, 0x01	; 1
    c152:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>

	int8_t *crv = curveAddress( s_curveChan ) ;
    c156:	80 91 dc 08 	lds	r24, 0x08DC
    c15a:	0e 94 b8 20 	call	0x4170	; 0x4170 <_ZL12curveAddressh>
    c15e:	6c 01       	movw	r12, r24

	uint8_t  sub    = mstate2.m_posVert ;
    c160:	90 90 e2 08 	lds	r9, 0x08E2
	uint8_t blink = InverseBlink ;
    c164:	e0 90 eb 06 	lds	r14, 0x06EB
	uint8_t  preset = cv9 ? 9 : 5 ;
    c168:	88 20       	and	r8, r8
    c16a:	19 f4       	brne	.+6      	; 0xc172 <_Z16menuProcCurveOneh+0x84>
    c16c:	a5 e0       	ldi	r26, 0x05	; 5
    c16e:	aa 2e       	mov	r10, r26
    c170:	02 c0       	rjmp	.+4      	; 0xc176 <_Z16menuProcCurveOneh+0x88>
    c172:	f9 e0       	ldi	r31, 0x09	; 9
    c174:	af 2e       	mov	r10, r31
    c176:	86 01       	movw	r16, r12
    c178:	c0 e0       	ldi	r28, 0x00	; 0
    c17a:	d0 e0       	ldi	r29, 0x00	; 0
    c17c:	e0 e1       	ldi	r30, 0x10	; 16
    c17e:	fe 2e       	mov	r15, r30
    lcd_outdezAtt(4 * FW, y, crv[i], attr);
		if ( cv9 )
		{
			if ( i < 4 )
			{
    		attr = sub == i + 5 ? blink : 0;
    c180:	69 2c       	mov	r6, r9
    c182:	77 24       	eor	r7, r7

	int8_t *crv = curveAddress( s_curveChan ) ;

	uint8_t  sub    = mstate2.m_posVert ;
	uint8_t blink = InverseBlink ;
	uint8_t  preset = cv9 ? 9 : 5 ;
    c184:	bc 2e       	mov	r11, r28

	for (uint8_t i = 0; i < 5; i++)
	{
    uint8_t y = i * FH + 16;
    uint8_t attr = sub == (i) ? blink : 0;
    c186:	9c 16       	cp	r9, r28
    c188:	11 f0       	breq	.+4      	; 0xc18e <_Z16menuProcCurveOneh+0xa0>
    c18a:	20 e0       	ldi	r18, 0x00	; 0
    c18c:	01 c0       	rjmp	.+2      	; 0xc190 <_Z16menuProcCurveOneh+0xa2>
    c18e:	2e 2d       	mov	r18, r14
    lcd_outdezAtt(4 * FW, y, crv[i], attr);
    c190:	f8 01       	movw	r30, r16
    c192:	40 81       	ld	r20, Z
    c194:	55 27       	eor	r21, r21
    c196:	47 fd       	sbrc	r20, 7
    c198:	50 95       	com	r21
    c19a:	88 e1       	ldi	r24, 0x18	; 24
    c19c:	6f 2d       	mov	r22, r15
    c19e:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
		if ( cv9 )
    c1a2:	88 20       	and	r8, r8
    c1a4:	a1 f0       	breq	.+40     	; 0xc1ce <_Z16menuProcCurveOneh+0xe0>
		{
			if ( i < 4 )
    c1a6:	f4 e0       	ldi	r31, 0x04	; 4
    c1a8:	bf 16       	cp	r11, r31
    c1aa:	89 f0       	breq	.+34     	; 0xc1ce <_Z16menuProcCurveOneh+0xe0>
			{
    		attr = sub == i + 5 ? blink : 0;
    c1ac:	ce 01       	movw	r24, r28
    c1ae:	05 96       	adiw	r24, 0x05	; 5
    c1b0:	68 16       	cp	r6, r24
    c1b2:	79 06       	cpc	r7, r25
    c1b4:	11 f0       	breq	.+4      	; 0xc1ba <_Z16menuProcCurveOneh+0xcc>
    c1b6:	20 e0       	ldi	r18, 0x00	; 0
    c1b8:	01 c0       	rjmp	.+2      	; 0xc1bc <_Z16menuProcCurveOneh+0xce>
    c1ba:	2e 2d       	mov	r18, r14
		    lcd_outdezAtt(8 * FW, y, crv[i + 5], attr);
    c1bc:	f8 01       	movw	r30, r16
    c1be:	45 81       	ldd	r20, Z+5	; 0x05
    c1c0:	55 27       	eor	r21, r21
    c1c2:	47 fd       	sbrc	r20, 7
    c1c4:	50 95       	com	r21
    c1c6:	80 e3       	ldi	r24, 0x30	; 48
    c1c8:	6f 2d       	mov	r22, r15
    c1ca:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
    c1ce:	21 96       	adiw	r28, 0x01	; 1
    c1d0:	0f 5f       	subi	r16, 0xFF	; 255
    c1d2:	1f 4f       	sbci	r17, 0xFF	; 255
    c1d4:	f8 e0       	ldi	r31, 0x08	; 8
    c1d6:	ff 0e       	add	r15, r31

	uint8_t  sub    = mstate2.m_posVert ;
	uint8_t blink = InverseBlink ;
	uint8_t  preset = cv9 ? 9 : 5 ;

	for (uint8_t i = 0; i < 5; i++)
    c1d8:	88 e3       	ldi	r24, 0x38	; 56
    c1da:	f8 16       	cp	r15, r24
    c1dc:	99 f6       	brne	.-90     	; 0xc184 <_Z16menuProcCurveOneh+0x96>
    		attr = sub == i + 5 ? blink : 0;
		    lcd_outdezAtt(8 * FW, y, crv[i + 5], attr);
			}
		}
	}
	lcd_putsAtt( 2*FW, 7*FH,PSTR(STR_PRESET), (sub == preset) ? blink : 0);
    c1de:	9a 10       	cpse	r9, r10
    c1e0:	ee 24       	eor	r14, r14
    c1e2:	8c e0       	ldi	r24, 0x0C	; 12
    c1e4:	68 e3       	ldi	r22, 0x38	; 56
    c1e6:	4c e8       	ldi	r20, 0x8C	; 140
    c1e8:	50 e1       	ldi	r21, 0x10	; 16
    c1ea:	2e 2d       	mov	r18, r14
    c1ec:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>


if( sub==preset)
    c1f0:	9a 14       	cp	r9, r10
    c1f2:	09 f0       	breq	.+2      	; 0xc1f6 <_Z16menuProcCurveOneh+0x108>
    c1f4:	4a c0       	rjmp	.+148    	; 0xc28a <_Z16menuProcCurveOneh+0x19c>
{
	if ( s_editMode )
    c1f6:	80 91 e5 06 	lds	r24, 0x06E5
    c1fa:	88 23       	and	r24, r24
    c1fc:	09 f4       	brne	.+2      	; 0xc200 <_Z16menuProcCurveOneh+0x112>
    c1fe:	50 c0       	rjmp	.+160    	; 0xc2a0 <_Z16menuProcCurveOneh+0x1b2>
	{
		int8_t t ;
		Tevent = event ;
    c200:	50 92 aa 05 	sts	0x05AA, r5
		t = dfltCrv ;
    c204:	10 91 e3 08 	lds	r17, 0x08E3
    dfltCrv = checkIncDec( t, -4, 4, 0);
    c208:	81 2f       	mov	r24, r17
    c20a:	6c ef       	ldi	r22, 0xFC	; 252
    c20c:	44 e0       	ldi	r20, 0x04	; 4
    c20e:	20 e0       	ldi	r18, 0x00	; 0
    c210:	0e 94 82 13 	call	0x2704	; 0x2704 <_Z11checkIncDecaaah>
    c214:	98 2f       	mov	r25, r24
    c216:	80 93 e3 08 	sts	0x08E3, r24
    if (dfltCrv != t)
    c21a:	81 17       	cp	r24, r17
    c21c:	09 f4       	brne	.+2      	; 0xc220 <_Z16menuProcCurveOneh+0x132>
    c21e:	40 c0       	rjmp	.+128    	; 0xc2a0 <_Z16menuProcCurveOneh+0x1b2>
		{
			uint8_t offset = cv9 ? 4 : 2 ;
    c220:	88 20       	and	r8, r8
    c222:	11 f4       	brne	.+4      	; 0xc228 <_Z16menuProcCurveOneh+0x13a>
    c224:	62 e0       	ldi	r22, 0x02	; 2
    c226:	01 c0       	rjmp	.+2      	; 0xc22a <_Z16menuProcCurveOneh+0x13c>
    c228:	64 e0       	ldi	r22, 0x04	; 4

			for (int8_t i = -offset; i <= offset; i++) crv[i+offset] = i*dfltCrv* 25 / offset ;
    c22a:	86 2f       	mov	r24, r22
    c22c:	81 95       	neg	r24
    c22e:	29 e1       	ldi	r18, 0x19	; 25
    c230:	92 02       	muls	r25, r18
    c232:	70 01       	movw	r14, r0
    c234:	11 24       	eor	r1, r1
//	plotType = PLOT_XOR ;
}



void menuProcCurveOne(uint8_t event)
    c236:	99 27       	eor	r25, r25
    c238:	87 fd       	sbrc	r24, 7
    c23a:	90 95       	com	r25
    c23c:	8e 9d       	mul	r24, r14
    c23e:	e0 01       	movw	r28, r0
    c240:	8f 9d       	mul	r24, r15
    c242:	d0 0d       	add	r29, r0
    c244:	9e 9d       	mul	r25, r14
    c246:	d0 0d       	add	r29, r0
    c248:	11 24       	eor	r1, r1
    c24a:	06 2f       	mov	r16, r22
    c24c:	10 e0       	ldi	r17, 0x00	; 0
    c24e:	fc 01       	movw	r30, r24
    c250:	e0 0f       	add	r30, r16
    c252:	f1 1f       	adc	r31, r17
    c254:	ec 0d       	add	r30, r12
    c256:	fd 1d       	adc	r31, r13
    c258:	20 e0       	ldi	r18, 0x00	; 0
    c25a:	30 e0       	ldi	r19, 0x00	; 0
    dfltCrv = checkIncDec( t, -4, 4, 0);
    if (dfltCrv != t)
		{
			uint8_t offset = cv9 ? 4 : 2 ;

			for (int8_t i = -offset; i <= offset; i++) crv[i+offset] = i*dfltCrv* 25 / offset ;
    c25c:	6c 01       	movw	r12, r24
    c25e:	09 c0       	rjmp	.+18     	; 0xc272 <_Z16menuProcCurveOneh+0x184>
    c260:	ce 01       	movw	r24, r28
    c262:	8e 19       	sub	r24, r14
    c264:	9f 09       	sbc	r25, r15
    c266:	b8 01       	movw	r22, r16
    c268:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    c26c:	61 93       	st	Z+, r22
    c26e:	2f 5f       	subi	r18, 0xFF	; 255
    c270:	3f 4f       	sbci	r19, 0xFF	; 255
    c272:	ce 0d       	add	r28, r14
    c274:	df 1d       	adc	r29, r15
    c276:	c9 01       	movw	r24, r18
    c278:	8c 0d       	add	r24, r12
    c27a:	9d 1d       	adc	r25, r13
    c27c:	08 17       	cp	r16, r24
    c27e:	19 07       	cpc	r17, r25
    c280:	7c f7       	brge	.-34     	; 0xc260 <_Z16menuProcCurveOneh+0x172>
      STORE_MODELVARS;        
    c282:	82 e0       	ldi	r24, 0x02	; 2
    c284:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
    c288:	0b c0       	rjmp	.+22     	; 0xc2a0 <_Z16menuProcCurveOneh+0x1b2>
    }
	}
} 
else  /*if(sub>0)*/
{
 CHECK_INCDEC_H_MODELVAR( crv[sub], -100,100);
    c28a:	86 01       	movw	r16, r12
    c28c:	09 0d       	add	r16, r9
    c28e:	11 1d       	adc	r17, r1
    c290:	f8 01       	movw	r30, r16
    c292:	80 81       	ld	r24, Z
    c294:	6c e9       	ldi	r22, 0x9C	; 156
    c296:	44 e6       	ldi	r20, 0x64	; 100
    c298:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z14checkIncDec_hmaaa>
    c29c:	f8 01       	movw	r30, r16
    c29e:	80 83       	st	Z, r24
}

// Draw the curve
	drawCurve( sub ) ;
    c2a0:	89 2d       	mov	r24, r9
    c2a2:	0e 94 96 42 	call	0x852c	; 0x852c <_Z9drawCurveh>
//    if ((xv & 3) == 0) {
//        lcd_plot(XD + xv - WCHART, Y0 + 0);
//    }
//}
//lcd_vline(XD, Y0 - WCHART, WCHART * 2);
}
    c2a6:	df 91       	pop	r29
    c2a8:	cf 91       	pop	r28
    c2aa:	1f 91       	pop	r17
    c2ac:	0f 91       	pop	r16
    c2ae:	ff 90       	pop	r15
    c2b0:	ef 90       	pop	r14
    c2b2:	df 90       	pop	r13
    c2b4:	cf 90       	pop	r12
    c2b6:	bf 90       	pop	r11
    c2b8:	af 90       	pop	r10
    c2ba:	9f 90       	pop	r9
    c2bc:	8f 90       	pop	r8
    c2be:	7f 90       	pop	r7
    c2c0:	6f 90       	pop	r6
    c2c2:	5f 90       	pop	r5
    c2c4:	08 95       	ret

0000c2c6 <_Z8setNamePPcPKc>:
      memmove(pDst, pSrc, (sizeSrc));                     \
      memset (pDst+(sizeSrc), 0,  (sizeDst)-(sizeSrc));
#define fullCopy(size) partCopy(size,size)
*/

void setNameP( char *dest, const prog_char *pstr )
    c2c6:	dc 01       	movw	r26, r24
    c2c8:	80 e0       	ldi	r24, 0x00	; 0
    c2ca:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t i ;
	for ( i = 10 ; i ; i -= 1 )
	{
		*dest++ = pgm_read_byte(pstr++) ;		
    c2cc:	fb 01       	movw	r30, r22
    c2ce:	e8 0f       	add	r30, r24
    c2d0:	f9 1f       	adc	r31, r25
    c2d2:	e4 91       	lpm	r30, Z+
    c2d4:	ed 93       	st	X+, r30
    c2d6:	01 96       	adiw	r24, 0x01	; 1
*/

void setNameP( char *dest, const prog_char *pstr )
{
	uint8_t i ;
	for ( i = 10 ; i ; i -= 1 )
    c2d8:	8a 30       	cpi	r24, 0x0A	; 10
    c2da:	91 05       	cpc	r25, r1
    c2dc:	b9 f7       	brne	.-18     	; 0xc2cc <_Z8setNamePPcPKc+0x6>
	{
		*dest++ = pgm_read_byte(pstr++) ;		
	}
}
    c2de:	08 95       	ret

0000c2e0 <_Z10evalChkSumv>:

uint16_t evalChkSum()
{
  uint16_t sum=0;
	uint16_t *p ;
	p = ( uint16_t *)g_eeGeneral.calibMid ;
    c2e0:	e9 e3       	ldi	r30, 0x39	; 57
    c2e2:	f1 e0       	ldi	r31, 0x01	; 1
    c2e4:	20 e0       	ldi	r18, 0x00	; 0
    c2e6:	30 e0       	ldi	r19, 0x00	; 0
  for (int i=0; i<12;i++)
	{
    sum += *p++ ;
    c2e8:	81 91       	ld	r24, Z+
    c2ea:	91 91       	ld	r25, Z+
    c2ec:	28 0f       	add	r18, r24
    c2ee:	39 1f       	adc	r19, r25
uint16_t evalChkSum()
{
  uint16_t sum=0;
	uint16_t *p ;
	p = ( uint16_t *)g_eeGeneral.calibMid ;
  for (int i=0; i<12;i++)
    c2f0:	81 e0       	ldi	r24, 0x01	; 1
    c2f2:	e1 35       	cpi	r30, 0x51	; 81
    c2f4:	f8 07       	cpc	r31, r24
    c2f6:	c1 f7       	brne	.-16     	; 0xc2e8 <_Z10evalChkSumv+0x8>
	{
    sum += *p++ ;
	}
  return sum;
}
    c2f8:	c9 01       	movw	r24, r18
    c2fa:	08 95       	ret

0000c2fc <_Z7eeDirtyh>:


static uint8_t  s_eeLongTimer ;
static uint8_t  s_eeDirtyMsk;
static uint16_t s_eeDirtyTime10ms;
void eeDirty(uint8_t msk)
    c2fc:	1f 93       	push	r17
    c2fe:	18 2f       	mov	r17, r24
{
	uint8_t lmask = msk & 7 ;
    c300:	98 2f       	mov	r25, r24
    c302:	97 70       	andi	r25, 0x07	; 7
  if(!lmask) return;
    c304:	a1 f0       	breq	.+40     	; 0xc32e <_Z7eeDirtyh+0x32>
  s_eeDirtyMsk      |= lmask;
    c306:	80 91 01 09 	lds	r24, 0x0901
    c30a:	89 2b       	or	r24, r25
    c30c:	80 93 01 09 	sts	0x0901, r24
  s_eeDirtyTime10ms  = get_tmr10ms() ;
    c310:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    c314:	90 93 04 09 	sts	0x0904, r25
    c318:	80 93 03 09 	sts	0x0903, r24
	s_eeLongTimer = msk >> 4 ;
    c31c:	81 2f       	mov	r24, r17
    c31e:	90 e0       	ldi	r25, 0x00	; 0
    c320:	24 e0       	ldi	r18, 0x04	; 4
    c322:	95 95       	asr	r25
    c324:	87 95       	ror	r24
    c326:	2a 95       	dec	r18
    c328:	e1 f7       	brne	.-8      	; 0xc322 <_Z7eeDirtyh+0x26>
    c32a:	80 93 02 09 	sts	0x0902, r24
}
    c32e:	1f 91       	pop	r17
    c330:	08 95       	ret

0000c332 <_Z7eeCheckb>:
  }
}

extern uint8_t EepromActive ;

void eeCheck(bool immediately)
    c332:	ef 92       	push	r14
    c334:	0f 93       	push	r16
    c336:	1f 93       	push	r17
    c338:	cf 93       	push	r28
    c33a:	df 93       	push	r29
    c33c:	98 2f       	mov	r25, r24
{
	EepromActive = 0 ;
    c33e:	10 92 47 0d 	sts	0x0D47, r1
  uint8_t msk  = s_eeDirtyMsk;
    c342:	10 91 01 09 	lds	r17, 0x0901
  if(!msk) return;
    c346:	11 23       	and	r17, r17
    c348:	09 f4       	brne	.+2      	; 0xc34c <_Z7eeCheckb+0x1a>
    c34a:	b2 c0       	rjmp	.+356    	; 0xc4b0 <_Z7eeCheckb+0x17e>
	EepromActive = '1' + s_eeLongTimer ;
    c34c:	80 91 02 09 	lds	r24, 0x0902
    c350:	8f 5c       	subi	r24, 0xCF	; 207
    c352:	80 93 47 0d 	sts	0x0D47, r24
  if( !immediately )
    c356:	99 23       	and	r25, r25
    c358:	e1 f4       	brne	.+56     	; 0xc392 <_Z7eeCheckb+0x60>
	{
		if ( ( get_tmr10ms() - s_eeDirtyTime10ms) < WRITE_DELAY_10MS) return ;
    c35a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    c35e:	20 91 03 09 	lds	r18, 0x0903
    c362:	30 91 04 09 	lds	r19, 0x0904
    c366:	82 1b       	sub	r24, r18
    c368:	93 0b       	sbc	r25, r19
    c36a:	88 3c       	cpi	r24, 0xC8	; 200
    c36c:	91 05       	cpc	r25, r1
    c36e:	08 f4       	brcc	.+2      	; 0xc372 <_Z7eeCheckb+0x40>
    c370:	9f c0       	rjmp	.+318    	; 0xc4b0 <_Z7eeCheckb+0x17e>
		if ( s_eeLongTimer )
    c372:	80 91 02 09 	lds	r24, 0x0902
    c376:	88 23       	and	r24, r24
    c378:	61 f0       	breq	.+24     	; 0xc392 <_Z7eeCheckb+0x60>
		{
			if ( --s_eeLongTimer )
    c37a:	81 50       	subi	r24, 0x01	; 1
    c37c:	80 93 02 09 	sts	0x0902, r24
    c380:	88 23       	and	r24, r24
    c382:	39 f0       	breq	.+14     	; 0xc392 <_Z7eeCheckb+0x60>
			{
  			s_eeDirtyTime10ms  = get_tmr10ms() ;
    c384:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    c388:	90 93 04 09 	sts	0x0904, r25
    c38c:	80 93 03 09 	sts	0x0903, r24
    c390:	8f c0       	rjmp	.+286    	; 0xc4b0 <_Z7eeCheckb+0x17e>
				return ;
			}
		}
	}
	s_eeLongTimer = 0 ;
    c392:	10 92 02 09 	sts	0x0902, r1
  if ( Ee_lock ) return ;
    c396:	80 91 00 09 	lds	r24, 0x0900
    c39a:	88 23       	and	r24, r24
    c39c:	09 f0       	breq	.+2      	; 0xc3a0 <_Z7eeCheckb+0x6e>
    c39e:	88 c0       	rjmp	.+272    	; 0xc4b0 <_Z7eeCheckb+0x17e>
  Ee_lock = EE_LOCK ;      	// Lock eeprom writing from recursion
    c3a0:	81 e0       	ldi	r24, 0x01	; 1
    c3a2:	80 93 00 09 	sts	0x0900, r24
  if ( msk & EE_TRIM )
    c3a6:	21 2f       	mov	r18, r17
    c3a8:	30 e0       	ldi	r19, 0x00	; 0
    c3aa:	e9 01       	movw	r28, r18
    c3ac:	c4 70       	andi	r28, 0x04	; 4
    c3ae:	d0 70       	andi	r29, 0x00	; 0
    c3b0:	12 ff       	sbrs	r17, 2
    c3b2:	03 c0       	rjmp	.+6      	; 0xc3ba <_Z7eeCheckb+0x88>
  {
    Ee_lock |= EE_TRIM_LOCK ;    // So the lower levels know what is happening
    c3b4:	83 e0       	ldi	r24, 0x03	; 3
    c3b6:	80 93 00 09 	sts	0x0900, r24
  }
  

  if(msk & EE_GENERAL)
    c3ba:	20 ff       	sbrs	r18, 0
    c3bc:	32 c0       	rjmp	.+100    	; 0xc422 <_Z7eeCheckb+0xf0>
	{
		EepromActive = '2' ;
    c3be:	82 e3       	ldi	r24, 0x32	; 50
    c3c0:	80 93 47 0d 	sts	0x0D47, r24
		
  	s_eeDirtyMsk &= ~EE_GENERAL ;
    c3c4:	80 91 01 09 	lds	r24, 0x0901
    c3c8:	8e 7f       	andi	r24, 0xFE	; 254
    c3ca:	80 93 01 09 	sts	0x0901, r24
    if(theWriteFile.writeRlc(FILE_TMP, FILE_TYP_GENERAL, (uint8_t*)&g_eeGeneral,
    c3ce:	87 ef       	ldi	r24, 0xF7	; 247
    c3d0:	98 e0       	ldi	r25, 0x08	; 8
    c3d2:	61 e1       	ldi	r22, 0x11	; 17
    c3d4:	41 e0       	ldi	r20, 0x01	; 1
    c3d6:	28 e3       	ldi	r18, 0x38	; 56
    c3d8:	31 e0       	ldi	r19, 0x01	; 1
    c3da:	02 e7       	ldi	r16, 0x72	; 114
    c3dc:	10 e0       	ldi	r17, 0x00	; 0
    c3de:	74 e1       	ldi	r23, 0x14	; 20
    c3e0:	e7 2e       	mov	r14, r23
    c3e2:	0e 94 a3 67 	call	0xcf46	; 0xcf46 <_ZN5EFile8writeRlcEhhPhjh>
    c3e6:	82 37       	cpi	r24, 0x72	; 114
    c3e8:	91 05       	cpc	r25, r1
    c3ea:	11 f4       	brne	.+4      	; 0xc3f0 <_Z7eeCheckb+0xbe>
                        sizeof(EEGeneral),20) == sizeof(EEGeneral))
    {
      EFile::swap(FILE_GENERAL,FILE_TMP);
    c3ec:	80 e0       	ldi	r24, 0x00	; 0
    c3ee:	35 c0       	rjmp	.+106    	; 0xc45a <_Z7eeCheckb+0x128>
    }else{
      if(theWriteFile.write_errno()==ERR_TMO){
    c3f0:	80 91 fd 08 	lds	r24, 0x08FD
    c3f4:	82 30       	cpi	r24, 0x02	; 2
    c3f6:	09 f0       	breq	.+2      	; 0xc3fa <_Z7eeCheckb+0xc8>
    c3f8:	55 c0       	rjmp	.+170    	; 0xc4a4 <_Z7eeCheckb+0x172>
        s_eeDirtyMsk |= EE_GENERAL; //try again
    c3fa:	80 91 01 09 	lds	r24, 0x0901
    c3fe:	81 60       	ori	r24, 0x01	; 1
    c400:	80 93 01 09 	sts	0x0901, r24
        s_eeDirtyTime10ms = get_tmr10ms() - WRITE_DELAY_10MS;
    c404:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    c408:	88 5c       	subi	r24, 0xC8	; 200
    c40a:	90 40       	sbci	r25, 0x00	; 0
    c40c:	90 93 04 09 	sts	0x0904, r25
    c410:	80 93 03 09 	sts	0x0903, r24
    		if(heartbeat == 0x3)
    c414:	80 91 0b 0e 	lds	r24, 0x0E0B
    c418:	83 30       	cpi	r24, 0x03	; 3
    c41a:	09 f0       	breq	.+2      	; 0xc41e <_Z7eeCheckb+0xec>
    c41c:	47 c0       	rjmp	.+142    	; 0xc4ac <_Z7eeCheckb+0x17a>
    		{
    		    wdt_reset();
    c41e:	a8 95       	wdr
    c420:	3c c0       	rjmp	.+120    	; 0xc49a <_Z7eeCheckb+0x168>
        alert(Str_EEPROM_Overflow);
      }
    }
    //first finish GENERAL, then MODEL !!avoid Toggle effect
  }
  else if(msk & EE_MODEL)
    c422:	21 ff       	sbrs	r18, 1
    c424:	43 c0       	rjmp	.+134    	; 0xc4ac <_Z7eeCheckb+0x17a>
	{
		EepromActive = '3' ;
    c426:	83 e3       	ldi	r24, 0x33	; 51
    c428:	80 93 47 0d 	sts	0x0D47, r24
  	s_eeDirtyMsk &= ~(EE_MODEL | EE_TRIM) ;
    c42c:	80 91 01 09 	lds	r24, 0x0901
    c430:	89 7f       	andi	r24, 0xF9	; 249
    c432:	80 93 01 09 	sts	0x0901, r24
    if(theWriteFile.writeRlc(FILE_TMP, FILE_TYP_MODEL, (uint8_t*)&g_model,
    c436:	87 ef       	ldi	r24, 0xF7	; 247
    c438:	98 e0       	ldi	r25, 0x08	; 8
    c43a:	61 e1       	ldi	r22, 0x11	; 17
    c43c:	42 e0       	ldi	r20, 0x02	; 2
    c43e:	2a ea       	ldi	r18, 0xAA	; 170
    c440:	31 e0       	ldi	r19, 0x01	; 1
    c442:	01 ec       	ldi	r16, 0xC1	; 193
    c444:	13 e0       	ldi	r17, 0x03	; 3
    c446:	54 e1       	ldi	r21, 0x14	; 20
    c448:	e5 2e       	mov	r14, r21
    c44a:	0e 94 a3 67 	call	0xcf46	; 0xcf46 <_ZN5EFile8writeRlcEhhPhjh>
    c44e:	81 5c       	subi	r24, 0xC1	; 193
    c450:	93 40       	sbci	r25, 0x03	; 3
    c452:	39 f4       	brne	.+14     	; 0xc462 <_Z7eeCheckb+0x130>
                        sizeof(g_model),20) == sizeof(g_model))
    {
      EFile::swap(FILE_MODEL(g_eeGeneral.currModel),FILE_TMP);
    c454:	80 91 65 01 	lds	r24, 0x0165
    c458:	8f 5f       	subi	r24, 0xFF	; 255
    c45a:	61 e1       	ldi	r22, 0x11	; 17
    c45c:	0e 94 41 66 	call	0xcc82	; 0xcc82 <_ZN5EFile4swapEhh>
    c460:	25 c0       	rjmp	.+74     	; 0xc4ac <_Z7eeCheckb+0x17a>
    }else{
      if(theWriteFile.write_errno()==ERR_TMO){
    c462:	80 91 fd 08 	lds	r24, 0x08FD
    c466:	82 30       	cpi	r24, 0x02	; 2
    c468:	d9 f4       	brne	.+54     	; 0xc4a0 <_Z7eeCheckb+0x16e>
        s_eeDirtyMsk |= EE_MODEL; //try again
    c46a:	90 91 01 09 	lds	r25, 0x0901
    c46e:	89 2f       	mov	r24, r25
    c470:	82 60       	ori	r24, 0x02	; 2
    c472:	80 93 01 09 	sts	0x0901, r24
        if ( msk & EE_TRIM )
    c476:	cd 2b       	or	r28, r29
    c478:	19 f0       	breq	.+6      	; 0xc480 <_Z7eeCheckb+0x14e>
        {
          s_eeDirtyMsk |= EE_TRIM; //try again
    c47a:	96 60       	ori	r25, 0x06	; 6
    c47c:	90 93 01 09 	sts	0x0901, r25
        }
        s_eeDirtyTime10ms = get_tmr10ms() - WRITE_DELAY_10MS;
    c480:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    c484:	88 5c       	subi	r24, 0xC8	; 200
    c486:	90 40       	sbci	r25, 0x00	; 0
    c488:	90 93 04 09 	sts	0x0904, r25
    c48c:	80 93 03 09 	sts	0x0903, r24
    		if(heartbeat == 0x3)
    c490:	80 91 0b 0e 	lds	r24, 0x0E0B
    c494:	83 30       	cpi	r24, 0x03	; 3
    c496:	51 f4       	brne	.+20     	; 0xc4ac <_Z7eeCheckb+0x17a>
    		{
    		    wdt_reset();
    c498:	a8 95       	wdr
    		    heartbeat = 0;
    c49a:	10 92 0b 0e 	sts	0x0E0B, r1
    c49e:	06 c0       	rjmp	.+12     	; 0xc4ac <_Z7eeCheckb+0x17a>
    		}
      }else{
        if ( ( msk & EE_TRIM ) == 0 )		// Don't stop if trim adjust
    c4a0:	cd 2b       	or	r28, r29
    c4a2:	21 f4       	brne	.+8      	; 0xc4ac <_Z7eeCheckb+0x17a>
        {
          alert(Str_EEPROM_Overflow);
    c4a4:	8f ee       	ldi	r24, 0xEF	; 239
    c4a6:	90 e1       	ldi	r25, 0x10	; 16
    c4a8:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>
        }
      }
    }
  }
  Ee_lock = 0 ;				// UnLock eeprom writing
    c4ac:	10 92 00 09 	sts	0x0900, r1


}
    c4b0:	df 91       	pop	r29
    c4b2:	cf 91       	pop	r28
    c4b4:	1f 91       	pop	r17
    c4b6:	0f 91       	pop	r16
    c4b8:	ef 90       	pop	r14
    c4ba:	08 95       	ret

0000c4bc <_Z14eeWaitCompletev>:

uint8_t Ee_lock = 0 ;
extern uint8_t heartbeat;


void eeWaitComplete()
    c4bc:	0a c0       	rjmp	.+20     	; 0xc4d2 <_Z14eeWaitCompletev+0x16>
{
  while(s_eeDirtyMsk)
  {
		eeCheck(true) ;
    c4be:	81 e0       	ldi	r24, 0x01	; 1
    c4c0:	0e 94 99 61 	call	0xc332	; 0xc332 <_Z7eeCheckb>
    if(heartbeat == 0x3)
    c4c4:	80 91 0b 0e 	lds	r24, 0x0E0B
    c4c8:	83 30       	cpi	r24, 0x03	; 3
    c4ca:	19 f4       	brne	.+6      	; 0xc4d2 <_Z14eeWaitCompletev+0x16>
    {
      wdt_reset();
    c4cc:	a8 95       	wdr
      heartbeat = 0;
    c4ce:	10 92 0b 0e 	sts	0x0E0B, r1
extern uint8_t heartbeat;


void eeWaitComplete()
{
  while(s_eeDirtyMsk)
    c4d2:	80 91 01 09 	lds	r24, 0x0901
    c4d6:	88 23       	and	r24, r24
    c4d8:	91 f7       	brne	.-28     	; 0xc4be <_Z14eeWaitCompletev+0x2>
    {
      wdt_reset();
      heartbeat = 0;
    }
  }
}
    c4da:	08 95       	ret

0000c4dc <_Z16eeGeneralDefaultv>:
	}
}

void eeGeneralDefault()
{
  memset(&g_eeGeneral,0,sizeof(g_eeGeneral));
    c4dc:	e8 e3       	ldi	r30, 0x38	; 56
    c4de:	f1 e0       	ldi	r31, 0x01	; 1
    c4e0:	82 e7       	ldi	r24, 0x72	; 114
    c4e2:	df 01       	movw	r26, r30
    c4e4:	1d 92       	st	X+, r1
    c4e6:	8a 95       	dec	r24
    c4e8:	e9 f7       	brne	.-6      	; 0xc4e4 <_Z16eeGeneralDefaultv+0x8>
  g_eeGeneral.myVers   =  MDVERS;
    c4ea:	8b e0       	ldi	r24, 0x0B	; 11
    c4ec:	80 93 38 01 	sts	0x0138, r24
//  g_eeGeneral.currModel=  0;
  g_eeGeneral.contrast = LCD_NOMCONTRAST;
    c4f0:	81 e2       	ldi	r24, 0x21	; 33
    c4f2:	80 93 66 01 	sts	0x0166, r24
  g_eeGeneral.vBatWarn = 90;
    c4f6:	8a e5       	ldi	r24, 0x5A	; 90
    c4f8:	80 93 67 01 	sts	0x0167, r24
  g_eeGeneral.stickMode=  1;
    c4fc:	81 e0       	ldi	r24, 0x01	; 1
    c4fe:	80 93 7c 01 	sts	0x017C, r24
    c502:	31 96       	adiw	r30, 0x01	; 1
  for (uint8_t i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
    c504:	20 e0       	ldi	r18, 0x00	; 0
    c506:	32 e0       	ldi	r19, 0x02	; 2
    g_eeGeneral.calibSpanNeg[i] = 0x300;
    c508:	80 e0       	ldi	r24, 0x00	; 0
    c50a:	93 e0       	ldi	r25, 0x03	; 3
//  g_eeGeneral.currModel=  0;
  g_eeGeneral.contrast = LCD_NOMCONTRAST;
  g_eeGeneral.vBatWarn = 90;
  g_eeGeneral.stickMode=  1;
  for (uint8_t i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
    c50c:	31 83       	std	Z+1, r19	; 0x01
    c50e:	20 83       	st	Z, r18
    g_eeGeneral.calibSpanNeg[i] = 0x300;
    c510:	97 87       	std	Z+15, r25	; 0x0f
    c512:	86 87       	std	Z+14, r24	; 0x0e
    g_eeGeneral.calibSpanPos[i] = 0x300;
    c514:	95 8f       	std	Z+29, r25	; 0x1d
    c516:	84 8f       	std	Z+28, r24	; 0x1c
    c518:	32 96       	adiw	r30, 0x02	; 2
  g_eeGeneral.myVers   =  MDVERS;
//  g_eeGeneral.currModel=  0;
  g_eeGeneral.contrast = LCD_NOMCONTRAST;
  g_eeGeneral.vBatWarn = 90;
  g_eeGeneral.stickMode=  1;
  for (uint8_t i = 0; i < 7; ++i) {
    c51a:	b1 e0       	ldi	r27, 0x01	; 1
    c51c:	e7 34       	cpi	r30, 0x47	; 71
    c51e:	fb 07       	cpc	r31, r27
    c520:	a9 f7       	brne	.-22     	; 0xc50c <_Z16eeGeneralDefaultv+0x30>
    g_eeGeneral.calibMid[i]     = 0x200;
    g_eeGeneral.calibSpanNeg[i] = 0x300;
    g_eeGeneral.calibSpanPos[i] = 0x300;
  }
	setNameP(g_eeGeneral.ownerName,PSTR(STR_ME));
    c522:	83 e6       	ldi	r24, 0x63	; 99
    c524:	91 e1       	ldi	r25, 0x11	; 17
    c526:	a9 e8       	ldi	r26, 0x89	; 137
    c528:	b1 e0       	ldi	r27, 0x01	; 1
    c52a:	fc 01       	movw	r30, r24
void setNameP( char *dest, const prog_char *pstr )
{
	uint8_t i ;
	for ( i = 10 ; i ; i -= 1 )
	{
		*dest++ = pgm_read_byte(pstr++) ;		
    c52c:	01 96       	adiw	r24, 0x01	; 1
    c52e:	e4 91       	lpm	r30, Z+
    c530:	ed 93       	st	X+, r30
*/

void setNameP( char *dest, const prog_char *pstr )
{
	uint8_t i ;
	for ( i = 10 ; i ; i -= 1 )
    c532:	21 e0       	ldi	r18, 0x01	; 1
    c534:	a3 39       	cpi	r26, 0x93	; 147
    c536:	b2 07       	cpc	r27, r18
    c538:	c1 f7       	brne	.-16     	; 0xc52a <_Z16eeGeneralDefaultv+0x4e>

uint16_t evalChkSum()
{
  uint16_t sum=0;
	uint16_t *p ;
	p = ( uint16_t *)g_eeGeneral.calibMid ;
    c53a:	e9 e3       	ldi	r30, 0x39	; 57
    c53c:	f1 e0       	ldi	r31, 0x01	; 1
    c53e:	20 e0       	ldi	r18, 0x00	; 0
    c540:	30 e0       	ldi	r19, 0x00	; 0
  for (int i=0; i<12;i++)
	{
    sum += *p++ ;
    c542:	81 91       	ld	r24, Z+
    c544:	91 91       	ld	r25, Z+
    c546:	28 0f       	add	r18, r24
    c548:	39 1f       	adc	r19, r25
uint16_t evalChkSum()
{
  uint16_t sum=0;
	uint16_t *p ;
	p = ( uint16_t *)g_eeGeneral.calibMid ;
  for (int i=0; i<12;i++)
    c54a:	41 e0       	ldi	r20, 0x01	; 1
    c54c:	e1 35       	cpi	r30, 0x51	; 81
    c54e:	f4 07       	cpc	r31, r20
    c550:	c1 f7       	brne	.-16     	; 0xc542 <_Z16eeGeneralDefaultv+0x66>
    g_eeGeneral.calibSpanNeg[i] = 0x300;
    g_eeGeneral.calibSpanPos[i] = 0x300;
  }
	setNameP(g_eeGeneral.ownerName,PSTR(STR_ME));
//	strncpy_P(g_eeGeneral.ownerName,PSTR(STR_ME),10);
  g_eeGeneral.chkSum = evalChkSum() ;
    c552:	33 8b       	std	Z+19, r19	; 0x13
    c554:	22 8b       	std	Z+18, r18	; 0x12
}
    c556:	08 95       	ret

0000c558 <_ZL12validateNamePch>:
//{
//    theFile.openRd(FILE_MODEL(id));
//    return theFile.size();
//}

static void validateName( char *name, uint8_t size )
    c558:	0f 93       	push	r16
    c55a:	1f 93       	push	r17
    c55c:	cf 93       	push	r28
    c55e:	df 93       	push	r29
    c560:	06 2f       	mov	r16, r22
    c562:	ec 01       	movw	r28, r24
    c564:	10 e0       	ldi	r17, 0x00	; 0
    c566:	07 c0       	rjmp	.+14     	; 0xc576 <_ZL12validateNamePch+0x1e>
{
	for(uint8_t i=0; i<size;i++) // makes sure name is valid
  {
//		uint8_t idx = char2idx(name[i]);
		name[i] = idx2char(char2idx(name[i])) ;
    c568:	88 81       	ld	r24, Y
    c56a:	0e 94 4f 21 	call	0x429e	; 0x429e <_Z8char2idxc>
    c56e:	0e 94 5e 21 	call	0x42bc	; 0x42bc <_Z8idx2charh>
    c572:	89 93       	st	Y+, r24
//    return theFile.size();
//}

static void validateName( char *name, uint8_t size )
{
	for(uint8_t i=0; i<size;i++) // makes sure name is valid
    c574:	1f 5f       	subi	r17, 0xFF	; 255
    c576:	10 17       	cp	r17, r16
    c578:	b8 f3       	brcs	.-18     	; 0xc568 <_ZL12validateNamePch+0x10>
  {
//		uint8_t idx = char2idx(name[i]);
		name[i] = idx2char(char2idx(name[i])) ;
	}
}
    c57a:	df 91       	pop	r29
    c57c:	cf 91       	pop	r28
    c57e:	1f 91       	pop	r17
    c580:	0f 91       	pop	r16
    c582:	08 95       	ret

0000c584 <_Z13eeReadGeneralv>:
  return true;
}

bool eeReadGeneral()
{
  return (EeFsOpen() && EeFsck() >= 0 && eeLoadGeneral()) ;
    c584:	0e 94 04 66 	call	0xcc08	; 0xcc08 <_Z8EeFsOpenv>
    c588:	88 23       	and	r24, r24
    c58a:	09 f4       	brne	.+2      	; 0xc58e <_Z13eeReadGeneralv+0xa>
    c58c:	41 c0       	rjmp	.+130    	; 0xc610 <_Z13eeReadGeneralv+0x8c>
    c58e:	0e 94 d4 68 	call	0xd1a8	; 0xd1a8 <_Z6EeFsckv>
    c592:	87 fd       	sbrc	r24, 7
    c594:	3d c0       	rjmp	.+122    	; 0xc610 <_Z13eeReadGeneralv+0x8c>
}


static bool eeLoadGeneral()
{
  theFile.openRd(FILE_GENERAL);
    c596:	85 ee       	ldi	r24, 0xE5	; 229
    c598:	98 e0       	ldi	r25, 0x08	; 8
    c59a:	60 e0       	ldi	r22, 0x00	; 0
    c59c:	0e 94 49 65 	call	0xca92	; 0xca92 <_ZN5EFile6openRdEh>
  memset(&g_eeGeneral, 0, sizeof(EEGeneral));
    c5a0:	e8 e3       	ldi	r30, 0x38	; 56
    c5a2:	f1 e0       	ldi	r31, 0x01	; 1
    c5a4:	82 e7       	ldi	r24, 0x72	; 114
    c5a6:	df 01       	movw	r26, r30
    c5a8:	1d 92       	st	X+, r1
    c5aa:	8a 95       	dec	r24
    c5ac:	e9 f7       	brne	.-6      	; 0xc5a8 <_Z13eeReadGeneralv+0x24>
//  uint8_t sz = theFile.readRlc((uint8_t*)&g_eeGeneral, sizeof(EEGeneral));
  theFile.readRlc((uint8_t*)&g_eeGeneral, sizeof(EEGeneral));
    c5ae:	85 ee       	ldi	r24, 0xE5	; 229
    c5b0:	98 e0       	ldi	r25, 0x08	; 8
    c5b2:	bf 01       	movw	r22, r30
    c5b4:	42 e7       	ldi	r20, 0x72	; 114
    c5b6:	50 e0       	ldi	r21, 0x00	; 0
    c5b8:	0e 94 32 68 	call	0xd064	; 0xd064 <_ZN5EFile7readRlcEPhj>

	validateName( g_eeGeneral.ownerName, sizeof(g_eeGeneral.ownerName) ) ;
    c5bc:	89 e8       	ldi	r24, 0x89	; 137
    c5be:	91 e0       	ldi	r25, 0x01	; 1
    c5c0:	6a e0       	ldi	r22, 0x0A	; 10
    c5c2:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZL12validateNamePch>
//  {
//      uint8_t idx = char2idx(g_eeGeneral.ownerName[i]);
//      g_eeGeneral.ownerName[i] = idx2char(idx);
//  }

  if(g_eeGeneral.myVers<MDVERS)
    c5c6:	80 91 38 01 	lds	r24, 0x0138
    c5ca:	8b 30       	cpi	r24, 0x0B	; 11
    c5cc:	58 f4       	brcc	.+22     	; 0xc5e4 <_Z13eeReadGeneralv+0x60>
	{
    sysFlags |= sysFLAG_OLD_EEPROM; // if old EEPROM - Raise flag
    c5ce:	80 91 ed 05 	lds	r24, 0x05ED
    c5d2:	81 60       	ori	r24, 0x01	; 1
    c5d4:	80 93 ed 05 	sts	0x05ED, r24

  	g_eeGeneral.myVers   =  MDVERS; // update myvers
    c5d8:	8b e0       	ldi	r24, 0x0B	; 11
    c5da:	80 93 38 01 	sts	0x0138, r24
		STORE_GENERALVARS;
    c5de:	81 e0       	ldi	r24, 0x01	; 1
    c5e0:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
	}
//  if(sz>(sizeof(EEGeneral)-20)) for(uint8_t i=0; i<12;i++) sum+=g_eeGeneral.calibMid[i];
  return g_eeGeneral.chkSum == evalChkSum() ;
    c5e4:	40 91 63 01 	lds	r20, 0x0163
    c5e8:	50 91 64 01 	lds	r21, 0x0164

uint16_t evalChkSum()
{
  uint16_t sum=0;
	uint16_t *p ;
	p = ( uint16_t *)g_eeGeneral.calibMid ;
    c5ec:	e9 e3       	ldi	r30, 0x39	; 57
    c5ee:	f1 e0       	ldi	r31, 0x01	; 1
    c5f0:	20 e0       	ldi	r18, 0x00	; 0
    c5f2:	30 e0       	ldi	r19, 0x00	; 0
  for (int i=0; i<12;i++)
	{
    sum += *p++ ;
    c5f4:	81 91       	ld	r24, Z+
    c5f6:	91 91       	ld	r25, Z+
    c5f8:	28 0f       	add	r18, r24
    c5fa:	39 1f       	adc	r19, r25
uint16_t evalChkSum()
{
  uint16_t sum=0;
	uint16_t *p ;
	p = ( uint16_t *)g_eeGeneral.calibMid ;
  for (int i=0; i<12;i++)
    c5fc:	b1 e0       	ldi	r27, 0x01	; 1
    c5fe:	e1 35       	cpi	r30, 0x51	; 81
    c600:	fb 07       	cpc	r31, r27
    c602:	c1 f7       	brne	.-16     	; 0xc5f4 <_Z13eeReadGeneralv+0x70>
    c604:	80 e0       	ldi	r24, 0x00	; 0
    c606:	42 17       	cp	r20, r18
    c608:	53 07       	cpc	r21, r19
    c60a:	19 f4       	brne	.+6      	; 0xc612 <_Z13eeReadGeneralv+0x8e>
    c60c:	81 e0       	ldi	r24, 0x01	; 1
    c60e:	08 95       	ret
  return true;
}

bool eeReadGeneral()
{
  return (EeFsOpen() && EeFsck() >= 0 && eeLoadGeneral()) ;
    c610:	80 e0       	ldi	r24, 0x00	; 0
}
    c612:	08 95       	ret

0000c614 <_Z13eeModelExistsh>:
}


bool eeModelExists(uint8_t id)
{
    return EFile::exists(FILE_MODEL(id));
    c614:	8f 5f       	subi	r24, 0xFF	; 255
    c616:	0e 94 2f 65 	call	0xca5e	; 0xca5e <_ZN5EFile6existsEh>
}
    c61a:	08 95       	ret

0000c61c <_Z16eeDuplicateModelh>:
  resetTimer2() ;

	asm("") ;
}

bool eeDuplicateModel(uint8_t id)
    c61c:	ff 92       	push	r15
    c61e:	0f 93       	push	r16
    c620:	1f 93       	push	r17
    c622:	df 93       	push	r29
    c624:	cf 93       	push	r28
    c626:	cd b7       	in	r28, 0x3d	; 61
    c628:	de b7       	in	r29, 0x3e	; 62
    c62a:	2f 97       	sbiw	r28, 0x0f	; 15
    c62c:	0f b6       	in	r0, 0x3f	; 63
    c62e:	f8 94       	cli
    c630:	de bf       	out	0x3e, r29	; 62
    c632:	0f be       	out	0x3f, r0	; 63
    c634:	cd bf       	out	0x3d, r28	; 61
{
  uint8_t i;
  for( i=id+1; i<MAX_MODELS; i++)
    c636:	f8 2e       	mov	r15, r24
    c638:	f3 94       	inc	r15
    c63a:	1f 2d       	mov	r17, r15
    c63c:	08 c0       	rjmp	.+16     	; 0xc64e <_Z16eeDuplicateModelh+0x32>
  {
    if(! EFile::exists(FILE_MODEL(i))) break;
    c63e:	01 2f       	mov	r16, r17
    c640:	0f 5f       	subi	r16, 0xFF	; 255
    c642:	80 2f       	mov	r24, r16
    c644:	0e 94 2f 65 	call	0xca5e	; 0xca5e <_ZN5EFile6existsEh>
    c648:	88 23       	and	r24, r24
    c64a:	39 f0       	breq	.+14     	; 0xc65a <_Z16eeDuplicateModelh+0x3e>
    c64c:	10 2f       	mov	r17, r16
}

bool eeDuplicateModel(uint8_t id)
{
  uint8_t i;
  for( i=id+1; i<MAX_MODELS; i++)
    c64e:	10 31       	cpi	r17, 0x10	; 16
    c650:	b0 f3       	brcs	.-20     	; 0xc63e <_Z16eeDuplicateModelh+0x22>
  {
    if(! EFile::exists(FILE_MODEL(i))) break;
  }
  if(i==MAX_MODELS) return false; //no free space in directory left
    c652:	10 31       	cpi	r17, 0x10	; 16
    c654:	11 f4       	brne	.+4      	; 0xc65a <_Z16eeDuplicateModelh+0x3e>
    c656:	80 e0       	ldi	r24, 0x00	; 0
    c658:	27 c0       	rjmp	.+78     	; 0xc6a8 <_Z16eeDuplicateModelh+0x8c>

  theFile.openRd(FILE_MODEL(id));
    c65a:	85 ee       	ldi	r24, 0xE5	; 229
    c65c:	98 e0       	ldi	r25, 0x08	; 8
    c65e:	6f 2d       	mov	r22, r15
    c660:	0e 94 49 65 	call	0xca92	; 0xca92 <_ZN5EFile6openRdEh>
  theFile2.create(FILE_MODEL(i),FILE_TYP_MODEL,600);
    c664:	1f 5f       	subi	r17, 0xFF	; 255
    c666:	8e ee       	ldi	r24, 0xEE	; 238
    c668:	98 e0       	ldi	r25, 0x08	; 8
    c66a:	61 2f       	mov	r22, r17
    c66c:	42 e0       	ldi	r20, 0x02	; 2
    c66e:	28 e5       	ldi	r18, 0x58	; 88
    c670:	32 e0       	ldi	r19, 0x02	; 2
    c672:	0e 94 e4 66 	call	0xcdc8	; 0xcdc8 <_ZN5EFile6createEhhj>
  uint8_t buf[15];
  uint8_t l;
  while((l=theFile.read(buf,15)))
    c676:	8e 01       	movw	r16, r28
    c678:	0f 5f       	subi	r16, 0xFF	; 255
    c67a:	1f 4f       	sbci	r17, 0xFF	; 255
    c67c:	06 c0       	rjmp	.+12     	; 0xc68a <_Z16eeDuplicateModelh+0x6e>
  {
    theFile2.write(buf,l);
    c67e:	8e ee       	ldi	r24, 0xEE	; 238
    c680:	98 e0       	ldi	r25, 0x08	; 8
    c682:	b8 01       	movw	r22, r16
    c684:	0e 94 1f 67 	call	0xce3e	; 0xce3e <_ZN5EFile5writeEPhh>
//        //wait for 10ms and try again
//        uint16_t tgtime = get_tmr10ms() + 100;
//        while (!=tgtime);
//        theFile2.write(buf,l);
//    }
    wdt_reset();
    c688:	a8 95       	wdr

  theFile.openRd(FILE_MODEL(id));
  theFile2.create(FILE_MODEL(i),FILE_TYP_MODEL,600);
  uint8_t buf[15];
  uint8_t l;
  while((l=theFile.read(buf,15)))
    c68a:	85 ee       	ldi	r24, 0xE5	; 229
    c68c:	98 e0       	ldi	r25, 0x08	; 8
    c68e:	b8 01       	movw	r22, r16
    c690:	4f e0       	ldi	r20, 0x0F	; 15
    c692:	50 e0       	ldi	r21, 0x00	; 0
    c694:	0e 94 91 65 	call	0xcb22	; 0xcb22 <_ZN5EFile4readEPhj>
    c698:	48 2f       	mov	r20, r24
    c69a:	88 23       	and	r24, r24
    c69c:	81 f7       	brne	.-32     	; 0xc67e <_Z16eeDuplicateModelh+0x62>
//        while (!=tgtime);
//        theFile2.write(buf,l);
//    }
    wdt_reset();
  }
  theFile2.closeTrunc();
    c69e:	8e ee       	ldi	r24, 0xEE	; 238
    c6a0:	98 e0       	ldi	r25, 0x08	; 8
    c6a2:	0e 94 a3 66 	call	0xcd46	; 0xcd46 <_ZN5EFile10closeTruncEv>
    c6a6:	81 e0       	ldi	r24, 0x01	; 1
  //todo error handling
  return true;
}
    c6a8:	2f 96       	adiw	r28, 0x0f	; 15
    c6aa:	0f b6       	in	r0, 0x3f	; 63
    c6ac:	f8 94       	cli
    c6ae:	de bf       	out	0x3e, r29	; 62
    c6b0:	0f be       	out	0x3f, r0	; 63
    c6b2:	cd bf       	out	0x3d, r28	; 61
    c6b4:	cf 91       	pop	r28
    c6b6:	df 91       	pop	r29
    c6b8:	1f 91       	pop	r17
    c6ba:	0f 91       	pop	r16
    c6bc:	ff 90       	pop	r15
    c6be:	08 95       	ret

0000c6c0 <_Z15eeLoadModelNamehPch>:
  applyTemplate(0); //default 4 channel template
#endif
  theFile.writeRlc(FILE_MODEL(id),FILE_TYP_MODEL,(uint8_t*)&g_model,sizeof(g_model),200);
}

void eeLoadModelName(uint8_t id,char*buf,uint8_t len)
    c6c0:	0f 93       	push	r16
    c6c2:	1f 93       	push	r17
    c6c4:	cf 93       	push	r28
    c6c6:	df 93       	push	r29
    c6c8:	28 2f       	mov	r18, r24
    c6ca:	eb 01       	movw	r28, r22
    c6cc:	14 2f       	mov	r17, r20
{
  if(id<MAX_MODELS)
    c6ce:	80 31       	cpi	r24, 0x10	; 16
    c6d0:	48 f5       	brcc	.+82     	; 0xc724 <_Z15eeLoadModelNamehPch+0x64>
  {
    //eeprom_read_block(buf,(void*)modelEeOfs(id),sizeof(g_model.name));
    theFile.openRd(FILE_MODEL(id));
    c6d2:	2f 5f       	subi	r18, 0xFF	; 255
    c6d4:	85 ee       	ldi	r24, 0xE5	; 229
    c6d6:	98 e0       	ldi	r25, 0x08	; 8
    c6d8:	62 2f       	mov	r22, r18
    c6da:	0e 94 49 65 	call	0xca92	; 0xca92 <_ZN5EFile6openRdEh>
    memset(buf,' ',len);
    c6de:	01 2f       	mov	r16, r17
    c6e0:	10 e0       	ldi	r17, 0x00	; 0
    c6e2:	ce 01       	movw	r24, r28
    c6e4:	60 e2       	ldi	r22, 0x20	; 32
    c6e6:	70 e0       	ldi	r23, 0x00	; 0
    c6e8:	a8 01       	movw	r20, r16
    c6ea:	0e 94 00 7f 	call	0xfe00	; 0xfe00 <memset>
    if(theFile.readRlc((uint8_t*)buf,sizeof(g_model.name)) == sizeof(g_model.name) )
    c6ee:	85 ee       	ldi	r24, 0xE5	; 229
    c6f0:	98 e0       	ldi	r25, 0x08	; 8
    c6f2:	be 01       	movw	r22, r28
    c6f4:	4a e0       	ldi	r20, 0x0A	; 10
    c6f6:	50 e0       	ldi	r21, 0x00	; 0
    c6f8:	0e 94 32 68 	call	0xd064	; 0xd064 <_ZN5EFile7readRlcEPhj>
    c6fc:	0a 97       	sbiw	r24, 0x0a	; 10
    c6fe:	91 f4       	brne	.+36     	; 0xc724 <_Z15eeLoadModelNamehPch+0x64>
    {
      uint16_t sz=theFile.size();
    c700:	85 ee       	ldi	r24, 0xE5	; 229
    c702:	98 e0       	ldi	r25, 0x08	; 8
    c704:	0e 94 3b 65 	call	0xca76	; 0xca76 <_ZN5EFile4sizeEv>
      buf+=len;
    c708:	c0 0f       	add	r28, r16
    c70a:	d1 1f       	adc	r29, r17
    c70c:	09 c0       	rjmp	.+18     	; 0xc720 <_Z15eeLoadModelNamehPch+0x60>
      while(sz)
			{
				div_t qr ;
				qr = div( sz, 10 ) ;
    c70e:	6a e0       	ldi	r22, 0x0A	; 10
    c710:	70 e0       	ldi	r23, 0x00	; 0
    c712:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
				--buf;
				*buf='0'+qr.rem;
    c716:	80 5d       	subi	r24, 0xD0	; 208
    c718:	8a 93       	st	-Y, r24
				sz = qr.quot;
    c71a:	26 2f       	mov	r18, r22
    c71c:	37 2f       	mov	r19, r23
    c71e:	c9 01       	movw	r24, r18
    memset(buf,' ',len);
    if(theFile.readRlc((uint8_t*)buf,sizeof(g_model.name)) == sizeof(g_model.name) )
    {
      uint16_t sz=theFile.size();
      buf+=len;
      while(sz)
    c720:	00 97       	sbiw	r24, 0x00	; 0
    c722:	a9 f7       	brne	.-22     	; 0xc70e <_Z15eeLoadModelNamehPch+0x4e>
				*buf='0'+qr.rem;
				sz = qr.quot;
			}
    }
  }
}
    c724:	df 91       	pop	r29
    c726:	cf 91       	pop	r28
    c728:	1f 91       	pop	r17
    c72a:	0f 91       	pop	r16
    c72c:	08 95       	ret

0000c72e <_Z17modelDefaultWriteh>:
	}
//  if(sz>(sizeof(EEGeneral)-20)) for(uint8_t i=0; i<12;i++) sum+=g_eeGeneral.calibMid[i];
  return g_eeGeneral.chkSum == evalChkSum() ;
}

void modelDefaultWrite(uint8_t id)
    c72e:	ef 92       	push	r14
    c730:	0f 93       	push	r16
    c732:	1f 93       	push	r17
    c734:	cf 93       	push	r28
    c736:	df 93       	push	r29
    c738:	18 2f       	mov	r17, r24
{
  memset(&g_model, 0, sizeof(ModelData));
    c73a:	ea ea       	ldi	r30, 0xAA	; 170
    c73c:	f1 e0       	ldi	r31, 0x01	; 1
    c73e:	81 ec       	ldi	r24, 0xC1	; 193
    c740:	93 e0       	ldi	r25, 0x03	; 3
    c742:	df 01       	movw	r26, r30
    c744:	9c 01       	movw	r18, r24
    c746:	1d 92       	st	X+, r1
    c748:	21 50       	subi	r18, 0x01	; 1
    c74a:	30 40       	sbci	r19, 0x00	; 0
    c74c:	e1 f7       	brne	.-8      	; 0xc746 <_Z17modelDefaultWriteh+0x18>
	setNameP(g_model.name,PSTR(STR_MODEL));
    c74e:	88 e5       	ldi	r24, 0x58	; 88
    c750:	91 e1       	ldi	r25, 0x11	; 17
    c752:	ef 01       	movw	r28, r30
    c754:	fc 01       	movw	r30, r24
void setNameP( char *dest, const prog_char *pstr )
{
	uint8_t i ;
	for ( i = 10 ; i ; i -= 1 )
	{
		*dest++ = pgm_read_byte(pstr++) ;		
    c756:	01 96       	adiw	r24, 0x01	; 1
    c758:	e4 91       	lpm	r30, Z+
    c75a:	e9 93       	st	Y+, r30
*/

void setNameP( char *dest, const prog_char *pstr )
{
	uint8_t i ;
	for ( i = 10 ; i ; i -= 1 )
    c75c:	31 e0       	ldi	r19, 0x01	; 1
    c75e:	c4 3b       	cpi	r28, 0xB4	; 180
    c760:	d3 07       	cpc	r29, r19
    c762:	c1 f7       	brne	.-16     	; 0xc754 <_Z17modelDefaultWriteh+0x26>
{
  memset(&g_model, 0, sizeof(ModelData));
	setNameP(g_model.name,PSTR(STR_MODEL));
//  strncpy_P(g_model.name,PSTR(STR_MODEL), 10);
	div_t qr ;
	qr = div( id+1, 10 ) ;
    c764:	81 2f       	mov	r24, r17
    c766:	90 e0       	ldi	r25, 0x00	; 0
    c768:	01 96       	adiw	r24, 0x01	; 1
    c76a:	6a e0       	ldi	r22, 0x0A	; 10
    c76c:	70 e0       	ldi	r23, 0x00	; 0
    c76e:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    c772:	9c 01       	movw	r18, r24
  g_model.name[5]='0'+qr.quot;
    c774:	60 5d       	subi	r22, 0xD0	; 208
    c776:	60 93 af 01 	sts	0x01AF, r22
  g_model.name[6]='0'+qr.rem;
    c77a:	20 5d       	subi	r18, 0xD0	; 208
    c77c:	20 93 b0 01 	sts	0x01B0, r18
#ifdef VERSION3
  g_model.modelVersion = 3 ;
    c780:	83 e0       	ldi	r24, 0x03	; 3
    c782:	80 93 9a 04 	sts	0x049A, r24
#else
  g_model.modelVersion = 2 ;
#endif
	g_model.trimInc = 2 ;
    c786:	82 e0       	ldi	r24, 0x02	; 2
    c788:	88 87       	std	Y+8, r24	; 0x08

#ifdef NO_TEMPLATES
  applyTemplate(); //default 4 channel template
#else
  applyTemplate(0); //default 4 channel template
    c78a:	80 e0       	ldi	r24, 0x00	; 0
    c78c:	0e 94 54 70 	call	0xe0a8	; 0xe0a8 <_Z13applyTemplateh>
#endif
  theFile.writeRlc(FILE_MODEL(id),FILE_TYP_MODEL,(uint8_t*)&g_model,sizeof(g_model),200);
    c790:	1f 5f       	subi	r17, 0xFF	; 255
    c792:	2a 97       	sbiw	r28, 0x0a	; 10
    c794:	85 ee       	ldi	r24, 0xE5	; 229
    c796:	98 e0       	ldi	r25, 0x08	; 8
    c798:	61 2f       	mov	r22, r17
    c79a:	42 e0       	ldi	r20, 0x02	; 2
    c79c:	9e 01       	movw	r18, r28
    c79e:	01 ec       	ldi	r16, 0xC1	; 193
    c7a0:	13 e0       	ldi	r17, 0x03	; 3
    c7a2:	e8 ec       	ldi	r30, 0xC8	; 200
    c7a4:	ee 2e       	mov	r14, r30
    c7a6:	0e 94 a3 67 	call	0xcf46	; 0xcf46 <_ZN5EFile8writeRlcEhhPhjh>
}
    c7aa:	df 91       	pop	r29
    c7ac:	cf 91       	pop	r28
    c7ae:	1f 91       	pop	r17
    c7b0:	0f 91       	pop	r16
    c7b2:	ef 90       	pop	r14
    c7b4:	08 95       	ret

0000c7b6 <_Z14eeWriteGeneralv>:

//  }
//  eeLoadModel(g_eeGeneral.currModel);
//}

void eeWriteGeneral()
    c7b6:	ef 92       	push	r14
    c7b8:	0f 93       	push	r16
    c7ba:	1f 93       	push	r17
{
  alertx(PSTR(STR_BAD_EEPROM), true);
    c7bc:	80 e2       	ldi	r24, 0x20	; 32
    c7be:	91 e1       	ldi	r25, 0x11	; 17
    c7c0:	61 e0       	ldi	r22, 0x01	; 1
    c7c2:	0e 94 91 19 	call	0x3322	; 0x3322 <_Z6alertxPKcb>
  message(PSTR(STR_EE_FORMAT));
    c7c6:	8e e0       	ldi	r24, 0x0E	; 14
    c7c8:	91 e1       	ldi	r25, 0x11	; 17
    c7ca:	0e 94 e6 13 	call	0x27cc	; 0x27cc <_Z7messagePKc>
  EeFsFormat();
    c7ce:	0e 94 ae 68 	call	0xd15c	; 0xd15c <_Z10EeFsFormatv>
  //alert(PSTR("format ok"));
  // alert(PSTR("default ok"));

  uint16_t sz = theFile.writeRlc(FILE_GENERAL,FILE_TYP_GENERAL,(uint8_t*)&g_eeGeneral,sizeof(EEGeneral),200);
    c7d2:	85 ee       	ldi	r24, 0xE5	; 229
    c7d4:	98 e0       	ldi	r25, 0x08	; 8
    c7d6:	60 e0       	ldi	r22, 0x00	; 0
    c7d8:	41 e0       	ldi	r20, 0x01	; 1
    c7da:	28 e3       	ldi	r18, 0x38	; 56
    c7dc:	31 e0       	ldi	r19, 0x01	; 1
    c7de:	02 e7       	ldi	r16, 0x72	; 114
    c7e0:	10 e0       	ldi	r17, 0x00	; 0
    c7e2:	f8 ec       	ldi	r31, 0xC8	; 200
    c7e4:	ef 2e       	mov	r14, r31
    c7e6:	0e 94 a3 67 	call	0xcf46	; 0xcf46 <_ZN5EFile8writeRlcEhhPhjh>
  if(sz!=sizeof(EEGeneral)) alert(PSTR(STR_GENWR_ERROR));
    c7ea:	82 37       	cpi	r24, 0x72	; 114
    c7ec:	91 05       	cpc	r25, r1
    c7ee:	21 f0       	breq	.+8      	; 0xc7f8 <_Z14eeWriteGeneralv+0x42>
    c7f0:	8f ef       	ldi	r24, 0xFF	; 255
    c7f2:	90 e1       	ldi	r25, 0x10	; 16
    c7f4:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>

  modelDefaultWrite(0);
    c7f8:	80 e0       	ldi	r24, 0x00	; 0
    c7fa:	0e 94 97 63 	call	0xc72e	; 0xc72e <_Z17modelDefaultWriteh>
  //alert(PSTR("modef ok"));
  //alert(PSTR("modwrite ok"));
}
    c7fe:	1f 91       	pop	r17
    c800:	0f 91       	pop	r16
    c802:	ef 90       	pop	r14
    c804:	08 95       	ret

0000c806 <_Z11eeLoadModelh>:

#ifdef FIX_MODE
extern MixData *mixaddress( uint8_t idx ) ;
#endif

void eeLoadModel(uint8_t id)
    c806:	0f 93       	push	r16
    c808:	1f 93       	push	r17
    c80a:	cf 93       	push	r28
    c80c:	df 93       	push	r29
    c80e:	18 2f       	mov	r17, r24
{
  if(id<MAX_MODELS)
    c810:	80 31       	cpi	r24, 0x10	; 16
    c812:	08 f0       	brcs	.+2      	; 0xc816 <_Z11eeLoadModelh+0x10>
    c814:	f0 c0       	rjmp	.+480    	; 0xc9f6 <_Z11eeLoadModelh+0x1f0>
  {
        theFile.openRd(FILE_MODEL(id));
    c816:	68 2f       	mov	r22, r24
    c818:	6f 5f       	subi	r22, 0xFF	; 255
    c81a:	85 ee       	ldi	r24, 0xE5	; 229
    c81c:	98 e0       	ldi	r25, 0x08	; 8
    c81e:	0e 94 49 65 	call	0xca92	; 0xca92 <_ZN5EFile6openRdEh>
        memset(&g_model, 0, sizeof(ModelData));
    c822:	ea ea       	ldi	r30, 0xAA	; 170
    c824:	f1 e0       	ldi	r31, 0x01	; 1
    c826:	81 ec       	ldi	r24, 0xC1	; 193
    c828:	93 e0       	ldi	r25, 0x03	; 3
    c82a:	df 01       	movw	r26, r30
    c82c:	9c 01       	movw	r18, r24
    c82e:	1d 92       	st	X+, r1
    c830:	21 50       	subi	r18, 0x01	; 1
    c832:	30 40       	sbci	r19, 0x00	; 0
    c834:	e1 f7       	brne	.-8      	; 0xc82e <_Z11eeLoadModelh+0x28>
        uint16_t sz = theFile.readRlc((uint8_t*)&g_model, sizeof(g_model));
    c836:	85 ee       	ldi	r24, 0xE5	; 229
    c838:	98 e0       	ldi	r25, 0x08	; 8
    c83a:	bf 01       	movw	r22, r30
    c83c:	41 ec       	ldi	r20, 0xC1	; 193
    c83e:	53 e0       	ldi	r21, 0x03	; 3
    c840:	0e 94 32 68 	call	0xd064	; 0xd064 <_ZN5EFile7readRlcEPhj>

        if(sz<256) // if not loaded a fair amount
    c844:	8f 3f       	cpi	r24, 0xFF	; 255
    c846:	91 05       	cpc	r25, r1
    c848:	09 f0       	breq	.+2      	; 0xc84c <_Z11eeLoadModelh+0x46>
    c84a:	18 f4       	brcc	.+6      	; 0xc852 <_Z11eeLoadModelh+0x4c>
        {
            modelDefaultWrite(id);
    c84c:	81 2f       	mov	r24, r17
    c84e:	0e 94 97 63 	call	0xc72e	; 0xc72e <_Z17modelDefaultWriteh>
        }
				validateName( g_model.name, sizeof(g_model.name) ) ;
    c852:	8a ea       	ldi	r24, 0xAA	; 170
    c854:	91 e0       	ldi	r25, 0x01	; 1
    c856:	6a e0       	ldi	r22, 0x0A	; 10
    c858:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZL12validateNamePch>
//        for(uint8_t i=0; i<sizeof(g_model.name);i++) // makes sure name is valid
//        {
//            uint8_t idx = char2idx(g_model.name[i]);
//            g_model.name[i] = idx2char(idx);
//        }
		if ( g_model.numBlades == 0 )
    c85c:	80 91 52 04 	lds	r24, 0x0452
    c860:	88 23       	and	r24, r24
    c862:	39 f4       	brne	.+14     	; 0xc872 <_Z11eeLoadModelh+0x6c>
		{
			g_model.numBlades = g_model.xnumBlades + 2 ;				
    c864:	80 91 bb 01 	lds	r24, 0x01BB
    c868:	86 95       	lsr	r24
    c86a:	83 70       	andi	r24, 0x03	; 3
    c86c:	8e 5f       	subi	r24, 0xFE	; 254
    c86e:	80 93 52 04 	sts	0x0452, r24
        FRSKY_setModelAlarms();
#endif
#ifdef FIX_MODE

// check for updating mix sources
		if ( g_model.modelVersion < 2 )
    c872:	80 91 9a 04 	lds	r24, 0x049A
    c876:	82 30       	cpi	r24, 0x02	; 2
    c878:	08 f0       	brcs	.+2      	; 0xc87c <_Z11eeLoadModelh+0x76>
    c87a:	70 c0       	rjmp	.+224    	; 0xc95c <_Z11eeLoadModelh+0x156>
    c87c:	10 e0       	ldi	r17, 0x00	; 0
		{
    	for(uint8_t i=0;i<MAX_MIXERS;i++)
			{
        MixData *md = mixaddress( i ) ;
    c87e:	81 2f       	mov	r24, r17
    c880:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z10mixaddressh>
    c884:	ec 01       	movw	r28, r24
        if (md->srcRaw)
    c886:	89 81       	ldd	r24, Y+1	; 0x01
    c888:	88 23       	and	r24, r24
    c88a:	31 f0       	breq	.+12     	; 0xc898 <_Z11eeLoadModelh+0x92>
				{
        	if (md->srcRaw <= 4)		// Stick
    c88c:	85 30       	cpi	r24, 0x05	; 5
    c88e:	20 f4       	brcc	.+8      	; 0xc898 <_Z11eeLoadModelh+0x92>
					{
						md->srcRaw = modeFixValue( md->srcRaw-1 ) ;
    c890:	81 50       	subi	r24, 0x01	; 1
    c892:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_Z12modeFixValueh>
    c896:	89 83       	std	Y+1, r24	; 0x01
#ifdef FIX_MODE

// check for updating mix sources
		if ( g_model.modelVersion < 2 )
		{
    	for(uint8_t i=0;i<MAX_MIXERS;i++)
    c898:	1f 5f       	subi	r17, 0xFF	; 255
    c89a:	10 32       	cpi	r17, 0x20	; 32
    c89c:	81 f7       	brne	.-32     	; 0xc87e <_Z11eeLoadModelh+0x78>
    c89e:	c0 e0       	ldi	r28, 0x00	; 0
    c8a0:	d4 e0       	ldi	r29, 0x04	; 4
    c8a2:	00 e0       	ldi	r16, 0x00	; 0
    c8a4:	10 e0       	ldi	r17, 0x00	; 0


			for (uint8_t i = 0 ; i < NUM_CSW ; i += 1 )
			{
    		CSwData *cs = &g_model.customSw[i];
    		uint8_t cstate = CS_STATE(cs->func);
    c8a6:	f8 01       	movw	r30, r16
    c8a8:	ee 0f       	add	r30, r30
    c8aa:	ff 1f       	adc	r31, r31
    c8ac:	e0 0f       	add	r30, r16
    c8ae:	f1 1f       	adc	r31, r17
    c8b0:	ee 5f       	subi	r30, 0xFE	; 254
    c8b2:	fb 4f       	sbci	r31, 0xFB	; 251
    c8b4:	80 81       	ld	r24, Z
    c8b6:	8f 70       	andi	r24, 0x0F	; 15
    c8b8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_Z8CS_STATEh>
				uint8_t t = 0 ;
    		if(cstate == CS_VOFS)
    c8bc:	88 23       	and	r24, r24
    c8be:	59 f0       	breq	.+22     	; 0xc8d6 <_Z11eeLoadModelh+0xd0>
				{
					t = 1 ;
				}
				else if(cstate == CS_VCOMP)
    c8c0:	82 30       	cpi	r24, 0x02	; 2
    c8c2:	91 f4       	brne	.+36     	; 0xc8e8 <_Z11eeLoadModelh+0xe2>
				{
					t = 1 ;
      		if (cs->v2)
    c8c4:	89 81       	ldd	r24, Y+1	; 0x01
    c8c6:	88 23       	and	r24, r24
    c8c8:	31 f0       	breq	.+12     	; 0xc8d6 <_Z11eeLoadModelh+0xd0>
					{
    		    if (cs->v2 <= 4)		// Stick
    c8ca:	85 30       	cpi	r24, 0x05	; 5
    c8cc:	24 f4       	brge	.+8      	; 0xc8d6 <_Z11eeLoadModelh+0xd0>
						{
    	    		cs->v2 = modeFixValue( cs->v2-1 ) ;
    c8ce:	81 50       	subi	r24, 0x01	; 1
    c8d0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_Z12modeFixValueh>
    c8d4:	89 83       	std	Y+1, r24	; 0x01
						}
					}
				}
				if ( t )
				{
      		if (cs->v1)
    c8d6:	88 81       	ld	r24, Y
    c8d8:	88 23       	and	r24, r24
    c8da:	31 f0       	breq	.+12     	; 0xc8e8 <_Z11eeLoadModelh+0xe2>
					{
    		    if (cs->v1 <= 4)		// Stick
    c8dc:	85 30       	cpi	r24, 0x05	; 5
    c8de:	24 f4       	brge	.+8      	; 0xc8e8 <_Z11eeLoadModelh+0xe2>
						{
    	    		cs->v1 = modeFixValue( cs->v1-1 ) ;
    c8e0:	81 50       	subi	r24, 0x01	; 1
    c8e2:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_Z12modeFixValueh>
    c8e6:	88 83       	st	Y, r24
    c8e8:	0f 5f       	subi	r16, 0xFF	; 255
    c8ea:	1f 4f       	sbci	r17, 0xFF	; 255
    c8ec:	23 96       	adiw	r28, 0x03	; 3
					}
				}
			}


			for (uint8_t i = 0 ; i < NUM_CSW ; i += 1 )
    c8ee:	0c 30       	cpi	r16, 0x0C	; 12
    c8f0:	11 05       	cpc	r17, r1
    c8f2:	c9 f6       	brne	.-78     	; 0xc8a6 <_Z11eeLoadModelh+0xa0>
						}
					}
				}
			}
#endif	// CPUs
	    memmove( &Xmem.texpoData, &g_model.expoData, sizeof(Xmem.texpoData) ) ;
    c8f4:	83 e5       	ldi	r24, 0x53	; 83
    c8f6:	96 e0       	ldi	r25, 0x06	; 6
    c8f8:	64 e5       	ldi	r22, 0x54	; 84
    c8fa:	73 e0       	ldi	r23, 0x03	; 3
    c8fc:	48 e3       	ldi	r20, 0x38	; 56
    c8fe:	50 e0       	ldi	r21, 0x00	; 0
    c900:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <memmove>
    c904:	c0 e0       	ldi	r28, 0x00	; 0
    c906:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t i = 0 ; i < 4 ; i += 1 )
			{
				uint8_t dest = modeFixValue( i ) - 1 ;
	    	memmove( &g_model.expoData[dest], &Xmem.texpoData[i], sizeof(Xmem.texpoData[0]) ) ;
    c908:	1e e0       	ldi	r17, 0x0E	; 14
			}
#endif	// CPUs
	    memmove( &Xmem.texpoData, &g_model.expoData, sizeof(Xmem.texpoData) ) ;
			for (uint8_t i = 0 ; i < 4 ; i += 1 )
			{
				uint8_t dest = modeFixValue( i ) - 1 ;
    c90a:	8c 2f       	mov	r24, r28
    c90c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_Z12modeFixValueh>
	    	memmove( &g_model.expoData[dest], &Xmem.texpoData[i], sizeof(Xmem.texpoData[0]) ) ;
    c910:	81 50       	subi	r24, 0x01	; 1
    c912:	81 9f       	mul	r24, r17
    c914:	c0 01       	movw	r24, r0
    c916:	11 24       	eor	r1, r1
    c918:	9e 01       	movw	r18, r28
    c91a:	22 0f       	add	r18, r18
    c91c:	33 1f       	adc	r19, r19
    c91e:	b9 01       	movw	r22, r18
    c920:	03 e0       	ldi	r16, 0x03	; 3
    c922:	66 0f       	add	r22, r22
    c924:	77 1f       	adc	r23, r23
    c926:	0a 95       	dec	r16
    c928:	e1 f7       	brne	.-8      	; 0xc922 <_Z11eeLoadModelh+0x11c>
    c92a:	62 1b       	sub	r22, r18
    c92c:	73 0b       	sbc	r23, r19
    c92e:	6d 5a       	subi	r22, 0xAD	; 173
    c930:	79 4f       	sbci	r23, 0xF9	; 249
    c932:	8c 5a       	subi	r24, 0xAC	; 172
    c934:	9c 4f       	sbci	r25, 0xFC	; 252
    c936:	4e e0       	ldi	r20, 0x0E	; 14
    c938:	50 e0       	ldi	r21, 0x00	; 0
    c93a:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <memmove>
    c93e:	21 96       	adiw	r28, 0x01	; 1
					}
				}
			}
#endif	// CPUs
	    memmove( &Xmem.texpoData, &g_model.expoData, sizeof(Xmem.texpoData) ) ;
			for (uint8_t i = 0 ; i < 4 ; i += 1 )
    c940:	c4 30       	cpi	r28, 0x04	; 4
    c942:	d1 05       	cpc	r29, r1
    c944:	11 f7       	brne	.-60     	; 0xc90a <_Z11eeLoadModelh+0x104>
	    	memmove( &g_model.expoData[dest], &Xmem.texpoData[i], sizeof(Xmem.texpoData[0]) ) ;
			}

// sort expo/dr here

			alert(PSTR("CHECK MIX/DR SOURCES"));
    c946:	83 e4       	ldi	r24, 0x43	; 67
    c948:	91 e1       	ldi	r25, 0x11	; 17
    c94a:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>
			g_model.modelVersion = 2 ;
    c94e:	82 e0       	ldi	r24, 0x02	; 2
    c950:	80 93 9a 04 	sts	0x049A, r24
      eeDirty( EE_MODEL ) ;
    c954:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
			eeWaitComplete() ;
    c958:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>
		}
#endif	// FIX_MODE

#ifdef VERSION3
		if ( g_model.modelVersion < 3 )
    c95c:	80 91 9a 04 	lds	r24, 0x049A
    c960:	83 30       	cpi	r24, 0x03	; 3
    c962:	a8 f5       	brcc	.+106    	; 0xc9ce <_Z11eeLoadModelh+0x1c8>
    c964:	40 e0       	ldi	r20, 0x00	; 0
    c966:	50 e0       	ldi	r21, 0x00	; 0
		{
			for (uint8_t i = 0 ; i < NUM_CSW ; i += 1 )
			{
    		CSwData *cs = &g_model.customSw[i];
				if ( cs->func == CS_LATCH )
    c968:	9a 01       	movw	r18, r20
    c96a:	22 0f       	add	r18, r18
    c96c:	33 1f       	adc	r19, r19
    c96e:	24 0f       	add	r18, r20
    c970:	35 1f       	adc	r19, r21
    c972:	f9 01       	movw	r30, r18
    c974:	e0 50       	subi	r30, 0x00	; 0
    c976:	fc 4f       	sbci	r31, 0xFC	; 252
    c978:	82 81       	ldd	r24, Z+2	; 0x02
    c97a:	8f 70       	andi	r24, 0x0F	; 15
    c97c:	8c 30       	cpi	r24, 0x0C	; 12
    c97e:	39 f4       	brne	.+14     	; 0xc98e <_Z11eeLoadModelh+0x188>
				{
					cs->func = CS_GREATER ;
    c980:	f9 01       	movw	r30, r18
    c982:	ee 5f       	subi	r30, 0xFE	; 254
    c984:	fb 4f       	sbci	r31, 0xFB	; 251
    c986:	80 81       	ld	r24, Z
    c988:	80 7f       	andi	r24, 0xF0	; 240
    c98a:	8a 60       	ori	r24, 0x0A	; 10
    c98c:	80 83       	st	Z, r24
				}
				if ( cs->func == CS_FLIP )
    c98e:	9a 01       	movw	r18, r20
    c990:	22 0f       	add	r18, r18
    c992:	33 1f       	adc	r19, r19
    c994:	24 0f       	add	r18, r20
    c996:	35 1f       	adc	r19, r21
    c998:	f9 01       	movw	r30, r18
    c99a:	e0 50       	subi	r30, 0x00	; 0
    c99c:	fc 4f       	sbci	r31, 0xFC	; 252
    c99e:	82 81       	ldd	r24, Z+2	; 0x02
    c9a0:	8f 70       	andi	r24, 0x0F	; 15
    c9a2:	8d 30       	cpi	r24, 0x0D	; 13
    c9a4:	39 f4       	brne	.+14     	; 0xc9b4 <_Z11eeLoadModelh+0x1ae>
				{
					cs->func = CS_LESS ;
    c9a6:	f9 01       	movw	r30, r18
    c9a8:	ee 5f       	subi	r30, 0xFE	; 254
    c9aa:	fb 4f       	sbci	r31, 0xFB	; 251
    c9ac:	80 81       	ld	r24, Z
    c9ae:	80 7f       	andi	r24, 0xF0	; 240
    c9b0:	8b 60       	ori	r24, 0x0B	; 11
    c9b2:	80 83       	st	Z, r24
    c9b4:	4f 5f       	subi	r20, 0xFF	; 255
    c9b6:	5f 4f       	sbci	r21, 0xFF	; 255
#endif	// FIX_MODE

#ifdef VERSION3
		if ( g_model.modelVersion < 3 )
		{
			for (uint8_t i = 0 ; i < NUM_CSW ; i += 1 )
    c9b8:	4c 30       	cpi	r20, 0x0C	; 12
    c9ba:	51 05       	cpc	r21, r1
    c9bc:	a9 f6       	brne	.-86     	; 0xc968 <_Z11eeLoadModelh+0x162>
				{
					cs->func = CS_LESS ;
				}
			}
#endif	// CPUs
			g_model.modelVersion = 3 ;
    c9be:	83 e0       	ldi	r24, 0x03	; 3
    c9c0:	80 93 9a 04 	sts	0x049A, r24
      eeDirty( EE_MODEL ) ;
    c9c4:	82 e0       	ldi	r24, 0x02	; 2
    c9c6:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
			eeWaitComplete() ;
    c9ca:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>
		}
#endif
#ifdef VERSION4
		if ( g_model.modelVersion < 4 )
    c9ce:	80 91 9a 04 	lds	r24, 0x049A
    c9d2:	84 30       	cpi	r24, 0x04	; 4
    c9d4:	80 f4       	brcc	.+32     	; 0xc9f6 <_Z11eeLoadModelh+0x1f0>
		{
			g_model.switchWarningStates = g_eeGeneral.switchWarningStates ;
    c9d6:	80 91 93 01 	lds	r24, 0x0193
    c9da:	80 93 59 04 	sts	0x0459, r24
			alert(PSTR("CHECK MODEL TIMERS"));
    c9de:	80 e3       	ldi	r24, 0x30	; 48
    c9e0:	91 e1       	ldi	r25, 0x11	; 17
    c9e2:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z5alertPKc>
			g_model.modelVersion = 4 ;
    c9e6:	84 e0       	ldi	r24, 0x04	; 4
    c9e8:	80 93 9a 04 	sts	0x049A, r24
      eeDirty( EE_MODEL ) ;
    c9ec:	82 e0       	ldi	r24, 0x02	; 2
    c9ee:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
			eeWaitComplete() ;
    c9f2:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>
		}
#endif	// VERSION4
  }

	TimerMode *ptConfig = TimerConfig ;
	FORCE_INDIRECT(ptConfig) ;
    c9f6:	eb ea       	ldi	r30, 0xAB	; 171
    c9f8:	f5 e0       	ldi	r31, 0x05	; 5

	ptConfig->tmrModeA = g_model.tmrMode ;
    c9fa:	80 91 b5 01 	lds	r24, 0x01B5
    c9fe:	82 83       	std	Z+2, r24	; 0x02
	ptConfig->tmrModeB = g_model.tmrModeB ;
    ca00:	80 91 25 04 	lds	r24, 0x0425
    ca04:	83 83       	std	Z+3, r24	; 0x03
	ptConfig->tmrVal = g_model.tmrVal ;
    ca06:	80 91 b7 01 	lds	r24, 0x01B7
    ca0a:	90 91 b8 01 	lds	r25, 0x01B8
    ca0e:	91 83       	std	Z+1, r25	; 0x01
    ca10:	80 83       	st	Z, r24
	ptConfig->tmrDir = g_model.tmrDir ;
    ca12:	80 91 b6 01 	lds	r24, 0x01B6
    ca16:	81 70       	andi	r24, 0x01	; 1
    ca18:	84 83       	std	Z+4, r24	; 0x04
	ptConfig += 1 ;
    ca1a:	df 01       	movw	r26, r30
    ca1c:	15 96       	adiw	r26, 0x05	; 5
	ptConfig->tmrModeA = g_model.tmr2Mode ;
    ca1e:	80 91 57 04 	lds	r24, 0x0457
    ca22:	12 96       	adiw	r26, 0x02	; 2
    ca24:	8c 93       	st	X, r24
    ca26:	12 97       	sbiw	r26, 0x02	; 2
	ptConfig->tmrModeB = g_model.tmr2ModeB ;
    ca28:	80 91 58 04 	lds	r24, 0x0458
    ca2c:	13 96       	adiw	r26, 0x03	; 3
    ca2e:	8c 93       	st	X, r24
    ca30:	13 97       	sbiw	r26, 0x03	; 3
	ptConfig->tmrVal = g_model.tmr2Val ;
    ca32:	80 91 55 04 	lds	r24, 0x0455
    ca36:	90 91 56 04 	lds	r25, 0x0456
    ca3a:	96 83       	std	Z+6, r25	; 0x06
    ca3c:	85 83       	std	Z+5, r24	; 0x05
	ptConfig->tmrDir = g_model.tmr2Dir ;
    ca3e:	80 91 1b 05 	lds	r24, 0x051B
    ca42:	88 1f       	adc	r24, r24
    ca44:	88 27       	eor	r24, r24
    ca46:	88 1f       	adc	r24, r24
    ca48:	14 96       	adiw	r26, 0x04	; 4
    ca4a:	8c 93       	st	X, r24

  resetTimer1() ;
    ca4c:	0e 94 9c 21 	call	0x4338	; 0x4338 <_Z11resetTimer1v>
  resetTimer2() ;
    ca50:	0e 94 a4 21 	call	0x4348	; 0x4348 <_Z11resetTimer2v>

	asm("") ;
}
    ca54:	df 91       	pop	r29
    ca56:	cf 91       	pop	r28
    ca58:	1f 91       	pop	r17
    ca5a:	0f 91       	pop	r16
    ca5c:	08 95       	ret

0000ca5e <_ZN5EFile6existsEh>:
#else
  return eeFs.version == EEFS_VERS && eeFs.mySize  == sizeof(eeFs);
#endif
}

bool EFile::exists(uint8_t i_fileId)
    ca5e:	90 e0       	ldi	r25, 0x00	; 0
    ca60:	fc 01       	movw	r30, r24
    ca62:	ee 0f       	add	r30, r30
    ca64:	ff 1f       	adc	r31, r31
    ca66:	e8 0f       	add	r30, r24
    ca68:	f9 1f       	adc	r31, r25
    ca6a:	eb 5f       	subi	r30, 0xFB	; 251
    ca6c:	f6 4f       	sbci	r31, 0xF6	; 246
    ca6e:	84 81       	ldd	r24, Z+4	; 0x04
    ca70:	81 11       	cpse	r24, r1
    ca72:	81 e0       	ldi	r24, 0x01	; 1
{
  return eeFs.files[i_fileId].startBlk;
}
    ca74:	08 95       	ret

0000ca76 <_ZN5EFile4sizeEv>:
  EeFsFlush(); //chained out

  if(i) EeFsFree( i ); //chain in
}

uint16_t EFile::size(){
    ca76:	fc 01       	movw	r30, r24
    ca78:	80 81       	ld	r24, Z
    ca7a:	90 e0       	ldi	r25, 0x00	; 0
    ca7c:	fc 01       	movw	r30, r24
    ca7e:	ee 0f       	add	r30, r30
    ca80:	ff 1f       	adc	r31, r31
    ca82:	e8 0f       	add	r30, r24
    ca84:	f9 1f       	adc	r31, r25
    ca86:	e6 5f       	subi	r30, 0xF6	; 246
    ca88:	f6 4f       	sbci	r31, 0xF6	; 246
    ca8a:	91 81       	ldd	r25, Z+1	; 0x01
  return eeFs.files[m_fileId].size;
}
    ca8c:	80 81       	ld	r24, Z
    ca8e:	9f 70       	andi	r25, 0x0F	; 15
    ca90:	08 95       	ret

0000ca92 <_ZN5EFile6openRdEh>:


uint8_t EFile::openRd(uint8_t i_fileId){
    ca92:	dc 01       	movw	r26, r24
  m_fileId = i_fileId;
    ca94:	6c 93       	st	X, r22
  m_pos      = 0;
    ca96:	12 96       	adiw	r26, 0x02	; 2
    ca98:	1c 92       	st	X, r1
    ca9a:	1e 92       	st	-X, r1
    ca9c:	11 97       	sbiw	r26, 0x01	; 1
  m_currBlk  = eeFs.files[m_fileId].startBlk;
    ca9e:	70 e0       	ldi	r23, 0x00	; 0
    caa0:	25 e0       	ldi	r18, 0x05	; 5
    caa2:	39 e0       	ldi	r19, 0x09	; 9
    caa4:	cb 01       	movw	r24, r22
    caa6:	88 0f       	add	r24, r24
    caa8:	99 1f       	adc	r25, r25
    caaa:	86 0f       	add	r24, r22
    caac:	97 1f       	adc	r25, r23
    caae:	f9 01       	movw	r30, r18
    cab0:	e8 0f       	add	r30, r24
    cab2:	f9 1f       	adc	r31, r25
    cab4:	44 81       	ldd	r20, Z+4	; 0x04
    cab6:	13 96       	adiw	r26, 0x03	; 3
    cab8:	4c 93       	st	X, r20
    caba:	13 97       	sbiw	r26, 0x03	; 3
  m_ofs      = 0;
    cabc:	14 96       	adiw	r26, 0x04	; 4
    cabe:	1c 92       	st	X, r1
    cac0:	14 97       	sbiw	r26, 0x04	; 4
  m_bRlc     = 0;
    cac2:	15 96       	adiw	r26, 0x05	; 5
    cac4:	1c 92       	st	X, r1
    cac6:	15 97       	sbiw	r26, 0x05	; 5
  m_err      = ERR_NONE;       //error reasons
    cac8:	16 96       	adiw	r26, 0x06	; 6
    caca:	1c 92       	st	X, r1
    cacc:	86 81       	ldd	r24, Z+6	; 0x06
  return  eeFs.files[m_fileId].typ;
}
    cace:	82 95       	swap	r24
    cad0:	8f 70       	andi	r24, 0x0F	; 15
    cad2:	08 95       	ret

0000cad4 <_ZL11EeFsGetLinkh>:
}
static void EeFsWrite(uint8_t blk,uint8_t ofs,uint8_t val){
  eeWriteBlockCmp(&val, (uint16_t)(blk*BS+ofs), 1);
}

static uint8_t EeFsGetLink(uint8_t blk){
    cad4:	df 93       	push	r29
    cad6:	cf 93       	push	r28
    cad8:	0f 92       	push	r0
    cada:	cd b7       	in	r28, 0x3d	; 61
    cadc:	de b7       	in	r29, 0x3e	; 62
}) eeFs;


static uint8_t EeFsRead(uint8_t blk,uint8_t ofs){
  uint8_t ret;
  eeprom_read_block(&ret,(const void*)(blk*BS+ofs),1);
    cade:	68 2f       	mov	r22, r24
    cae0:	70 e0       	ldi	r23, 0x00	; 0
    cae2:	54 e0       	ldi	r21, 0x04	; 4
    cae4:	66 0f       	add	r22, r22
    cae6:	77 1f       	adc	r23, r23
    cae8:	5a 95       	dec	r21
    caea:	e1 f7       	brne	.-8      	; 0xcae4 <_ZL11EeFsGetLinkh+0x10>
    caec:	ce 01       	movw	r24, r28
    caee:	01 96       	adiw	r24, 0x01	; 1
    caf0:	41 e0       	ldi	r20, 0x01	; 1
    caf2:	50 e0       	ldi	r21, 0x00	; 0
    caf4:	0e 94 07 7f 	call	0xfe0e	; 0xfe0e <__eerd_block_m64>
  eeWriteBlockCmp(&val, (uint16_t)(blk*BS+ofs), 1);
}

static uint8_t EeFsGetLink(uint8_t blk){
  return EeFsRead( blk,0);
}
    caf8:	89 81       	ldd	r24, Y+1	; 0x01
    cafa:	0f 90       	pop	r0
    cafc:	cf 91       	pop	r28
    cafe:	df 91       	pop	r29
    cb00:	08 95       	ret

0000cb02 <_Z11EeFsGetFreev>:
static void EeFsFlush()
{
  eeWriteBlockCmp(&eeFs, 0,sizeof(eeFs));
}

uint16_t EeFsGetFree()
    cb02:	cf 93       	push	r28
    cb04:	df 93       	push	r29
{
  uint16_t  ret = 0;
  uint8_t i = eeFs.freeList;
    cb06:	80 91 07 09 	lds	r24, 0x0907
    cb0a:	c0 e0       	ldi	r28, 0x00	; 0
    cb0c:	d0 e0       	ldi	r29, 0x00	; 0
    cb0e:	03 c0       	rjmp	.+6      	; 0xcb16 <_Z11EeFsGetFreev+0x14>
  while( i ){
    ret += BS-1;
    cb10:	2f 96       	adiw	r28, 0x0f	; 15
    i = EeFsGetLink(i);
    cb12:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>

uint16_t EeFsGetFree()
{
  uint16_t  ret = 0;
  uint8_t i = eeFs.freeList;
  while( i ){
    cb16:	88 23       	and	r24, r24
    cb18:	d9 f7       	brne	.-10     	; 0xcb10 <_Z11EeFsGetFreev+0xe>
    ret += BS-1;
    i = EeFsGetLink(i);
  }
  return ret;
}
    cb1a:	ce 01       	movw	r24, r28
    cb1c:	df 91       	pop	r29
    cb1e:	cf 91       	pop	r28
    cb20:	08 95       	ret

0000cb22 <_ZN5EFile4readEPhj>:
  m_ofs      = 0;
  m_bRlc     = 0;
  m_err      = ERR_NONE;       //error reasons
  return  eeFs.files[m_fileId].typ;
}
uint8_t EFile::read(uint8_t*buf,uint16_t i_len){
    cb22:	8f 92       	push	r8
    cb24:	9f 92       	push	r9
    cb26:	af 92       	push	r10
    cb28:	bf 92       	push	r11
    cb2a:	cf 92       	push	r12
    cb2c:	df 92       	push	r13
    cb2e:	ef 92       	push	r14
    cb30:	ff 92       	push	r15
    cb32:	0f 93       	push	r16
    cb34:	1f 93       	push	r17
    cb36:	df 93       	push	r29
    cb38:	cf 93       	push	r28
    cb3a:	0f 92       	push	r0
    cb3c:	cd b7       	in	r28, 0x3d	; 61
    cb3e:	de b7       	in	r29, 0x3e	; 62
    cb40:	8c 01       	movw	r16, r24
    cb42:	5b 01       	movw	r10, r22
    cb44:	fc 01       	movw	r30, r24
    cb46:	80 81       	ld	r24, Z
    cb48:	90 e0       	ldi	r25, 0x00	; 0
    cb4a:	fc 01       	movw	r30, r24
    cb4c:	ee 0f       	add	r30, r30
    cb4e:	ff 1f       	adc	r31, r31
    cb50:	e8 0f       	add	r30, r24
    cb52:	f9 1f       	adc	r31, r25
    cb54:	e6 5f       	subi	r30, 0xF6	; 246
    cb56:	f6 4f       	sbci	r31, 0xF6	; 246
    cb58:	80 81       	ld	r24, Z
    cb5a:	21 81       	ldd	r18, Z+1	; 0x01
    cb5c:	92 2f       	mov	r25, r18
    cb5e:	9f 70       	andi	r25, 0x0F	; 15
    cb60:	f8 01       	movw	r30, r16
    cb62:	21 81       	ldd	r18, Z+1	; 0x01
    cb64:	32 81       	ldd	r19, Z+2	; 0x02
    cb66:	bc 01       	movw	r22, r24
    cb68:	62 1b       	sub	r22, r18
    cb6a:	73 0b       	sbc	r23, r19
    cb6c:	6a 01       	movw	r12, r20
    cb6e:	64 17       	cp	r22, r20
    cb70:	75 07       	cpc	r23, r21
    cb72:	08 f4       	brcc	.+2      	; 0xcb76 <_ZN5EFile4readEPhj+0x54>
    cb74:	6b 01       	movw	r12, r22
    cb76:	76 01       	movw	r14, r12
}) eeFs;


static uint8_t EeFsRead(uint8_t blk,uint8_t ofs){
  uint8_t ret;
  eeprom_read_block(&ret,(const void*)(blk*BS+ofs),1);
    cb78:	4e 01       	movw	r8, r28
    cb7a:	08 94       	sec
    cb7c:	81 1c       	adc	r8, r1
    cb7e:	91 1c       	adc	r9, r1
    cb80:	27 c0       	rjmp	.+78     	; 0xcbd0 <_ZN5EFile4readEPhj+0xae>
  uint16_t len = eeFs.files[m_fileId].size - m_pos;
  if(len < i_len) i_len = len;
  len = i_len;
  while(len)
  {
    if(!m_currBlk) break;
    cb82:	f8 01       	movw	r30, r16
    cb84:	63 81       	ldd	r22, Z+3	; 0x03
    cb86:	66 23       	and	r22, r22
    cb88:	31 f1       	breq	.+76     	; 0xcbd6 <_ZN5EFile4readEPhj+0xb4>
    *buf++ = EeFsGetDat(m_currBlk, m_ofs++);
    cb8a:	84 81       	ldd	r24, Z+4	; 0x04
    cb8c:	8f 5f       	subi	r24, 0xFF	; 255
    cb8e:	84 83       	std	Z+4, r24	; 0x04
}) eeFs;


static uint8_t EeFsRead(uint8_t blk,uint8_t ofs){
  uint8_t ret;
  eeprom_read_block(&ret,(const void*)(blk*BS+ofs),1);
    cb90:	70 e0       	ldi	r23, 0x00	; 0
    cb92:	e4 e0       	ldi	r30, 0x04	; 4
    cb94:	66 0f       	add	r22, r22
    cb96:	77 1f       	adc	r23, r23
    cb98:	ea 95       	dec	r30
    cb9a:	e1 f7       	brne	.-8      	; 0xcb94 <_ZN5EFile4readEPhj+0x72>
    cb9c:	68 0f       	add	r22, r24
    cb9e:	71 1d       	adc	r23, r1
    cba0:	c4 01       	movw	r24, r8
    cba2:	41 e0       	ldi	r20, 0x01	; 1
    cba4:	50 e0       	ldi	r21, 0x00	; 0
    cba6:	0e 94 07 7f 	call	0xfe0e	; 0xfe0e <__eerd_block_m64>
  if(len < i_len) i_len = len;
  len = i_len;
  while(len)
  {
    if(!m_currBlk) break;
    *buf++ = EeFsGetDat(m_currBlk, m_ofs++);
    cbaa:	89 81       	ldd	r24, Y+1	; 0x01
    cbac:	f5 01       	movw	r30, r10
    cbae:	80 83       	st	Z, r24
    if(m_ofs>=(BS-1)){
    cbb0:	f8 01       	movw	r30, r16
    cbb2:	84 81       	ldd	r24, Z+4	; 0x04
    cbb4:	8f 30       	cpi	r24, 0x0F	; 15
    cbb6:	30 f0       	brcs	.+12     	; 0xcbc4 <_ZN5EFile4readEPhj+0xa2>
      m_ofs=0;
    cbb8:	14 82       	std	Z+4, r1	; 0x04
      m_currBlk=EeFsGetLink(m_currBlk);
    cbba:	83 81       	ldd	r24, Z+3	; 0x03
    cbbc:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>
    cbc0:	f8 01       	movw	r30, r16
    cbc2:	83 83       	std	Z+3, r24	; 0x03
  if(len < i_len) i_len = len;
  len = i_len;
  while(len)
  {
    if(!m_currBlk) break;
    *buf++ = EeFsGetDat(m_currBlk, m_ofs++);
    cbc4:	08 94       	sec
    cbc6:	a1 1c       	adc	r10, r1
    cbc8:	b1 1c       	adc	r11, r1
    if(m_ofs>=(BS-1)){
      m_ofs=0;
      m_currBlk=EeFsGetLink(m_currBlk);
    }
    len--;
    cbca:	08 94       	sec
    cbcc:	e1 08       	sbc	r14, r1
    cbce:	f1 08       	sbc	r15, r1
}
uint8_t EFile::read(uint8_t*buf,uint16_t i_len){
  uint16_t len = eeFs.files[m_fileId].size - m_pos;
  if(len < i_len) i_len = len;
  len = i_len;
  while(len)
    cbd0:	e1 14       	cp	r14, r1
    cbd2:	f1 04       	cpc	r15, r1
    cbd4:	b1 f6       	brne	.-84     	; 0xcb82 <_ZN5EFile4readEPhj+0x60>
      m_ofs=0;
      m_currBlk=EeFsGetLink(m_currBlk);
    }
    len--;
  }
  m_pos += i_len - len;
    cbd6:	f8 01       	movw	r30, r16
    cbd8:	81 81       	ldd	r24, Z+1	; 0x01
    cbda:	92 81       	ldd	r25, Z+2	; 0x02
    cbdc:	8c 0d       	add	r24, r12
    cbde:	9d 1d       	adc	r25, r13
    cbe0:	8e 19       	sub	r24, r14
    cbe2:	9f 09       	sbc	r25, r15
    cbe4:	92 83       	std	Z+2, r25	; 0x02
    cbe6:	81 83       	std	Z+1, r24	; 0x01
  return i_len - len;
}
    cbe8:	8c 2d       	mov	r24, r12
    cbea:	8e 19       	sub	r24, r14
    cbec:	0f 90       	pop	r0
    cbee:	cf 91       	pop	r28
    cbf0:	df 91       	pop	r29
    cbf2:	1f 91       	pop	r17
    cbf4:	0f 91       	pop	r16
    cbf6:	ff 90       	pop	r15
    cbf8:	ef 90       	pop	r14
    cbfa:	df 90       	pop	r13
    cbfc:	cf 90       	pop	r12
    cbfe:	bf 90       	pop	r11
    cc00:	af 90       	pop	r10
    cc02:	9f 90       	pop	r9
    cc04:	8f 90       	pop	r8
    cc06:	08 95       	ret

0000cc08 <_Z8EeFsOpenv>:
  EeFsFlush();
}

bool EeFsOpen()
{
  eeprom_read_block(&eeFs,0,sizeof(eeFs));
    cc08:	85 e0       	ldi	r24, 0x05	; 5
    cc0a:	99 e0       	ldi	r25, 0x09	; 9
    cc0c:	60 e0       	ldi	r22, 0x00	; 0
    cc0e:	70 e0       	ldi	r23, 0x00	; 0
    cc10:	40 e4       	ldi	r20, 0x40	; 64
    cc12:	50 e0       	ldi	r21, 0x00	; 0
    cc14:	0e 94 07 7f 	call	0xfe0e	; 0xfe0e <__eerd_block_m64>

	if ( eeFs.mySize == 0 )
    cc18:	80 91 06 09 	lds	r24, 0x0906
    cc1c:	88 23       	and	r24, r24
    cc1e:	19 f4       	brne	.+6      	; 0xcc26 <_Z8EeFsOpenv+0x1e>
	{
		eeFs.mySize = sizeof(eeFs) ;
    cc20:	80 e4       	ldi	r24, 0x40	; 64
    cc22:	80 93 06 09 	sts	0x0906, r24
  return eeFs.version == EEFS_VERS && eeFs.mySize  == sizeof(eeFs);
  
//	return eeFs.version == EEFS_VERS64 && eeFs.mySize  == sizeof(eeFs);

#else
  return eeFs.version == EEFS_VERS && eeFs.mySize  == sizeof(eeFs);
    cc26:	80 91 05 09 	lds	r24, 0x0905
    cc2a:	84 30       	cpi	r24, 0x04	; 4
    cc2c:	11 f0       	breq	.+4      	; 0xcc32 <_Z8EeFsOpenv+0x2a>
    cc2e:	90 e0       	ldi	r25, 0x00	; 0
    cc30:	06 c0       	rjmp	.+12     	; 0xcc3e <_Z8EeFsOpenv+0x36>
    cc32:	90 e0       	ldi	r25, 0x00	; 0
    cc34:	80 91 06 09 	lds	r24, 0x0906
    cc38:	80 34       	cpi	r24, 0x40	; 64
    cc3a:	09 f4       	brne	.+2      	; 0xcc3e <_Z8EeFsOpenv+0x36>
    cc3c:	91 e0       	ldi	r25, 0x01	; 1
#endif
}
    cc3e:	89 2f       	mov	r24, r25
    cc40:	08 95       	ret

0000cc42 <_ZL11EeFsSetLinkhh>:
}

static uint8_t EeFsGetLink(uint8_t blk){
  return EeFsRead( blk,0);
}
static void EeFsSetLink(uint8_t blk,uint8_t val){
    cc42:	df 93       	push	r29
    cc44:	cf 93       	push	r28
    cc46:	0f 92       	push	r0
    cc48:	cd b7       	in	r28, 0x3d	; 61
    cc4a:	de b7       	in	r29, 0x3e	; 62
  EeFsWrite( blk,0,val);
    cc4c:	69 83       	std	Y+1, r22	; 0x01
  uint8_t ret;
  eeprom_read_block(&ret,(const void*)(blk*BS+ofs),1);
  return ret;
}
static void EeFsWrite(uint8_t blk,uint8_t ofs,uint8_t val){
  eeWriteBlockCmp(&val, (uint16_t)(blk*BS+ofs), 1);
    cc4e:	68 2f       	mov	r22, r24
    cc50:	70 e0       	ldi	r23, 0x00	; 0
    cc52:	b4 e0       	ldi	r27, 0x04	; 4
    cc54:	66 0f       	add	r22, r22
    cc56:	77 1f       	adc	r23, r23
    cc58:	ba 95       	dec	r27
    cc5a:	e1 f7       	brne	.-8      	; 0xcc54 <_ZL11EeFsSetLinkhh+0x12>
    cc5c:	ce 01       	movw	r24, r28
    cc5e:	01 96       	adiw	r24, 0x01	; 1
    cc60:	41 e0       	ldi	r20, 0x01	; 1
    cc62:	50 e0       	ldi	r21, 0x00	; 0
    cc64:	0e 94 b0 6f 	call	0xdf60	; 0xdf60 <_Z15eeWriteBlockCmpPKvjj>
static uint8_t EeFsGetLink(uint8_t blk){
  return EeFsRead( blk,0);
}
static void EeFsSetLink(uint8_t blk,uint8_t val){
  EeFsWrite( blk,0,val);
}
    cc68:	0f 90       	pop	r0
    cc6a:	cf 91       	pop	r28
    cc6c:	df 91       	pop	r29
    cc6e:	08 95       	ret

0000cc70 <_ZL9EeFsFlushv>:
//  eeWriteBlockCmp(&eeFs.freeList,&((EeFs*)0)->freeList ,sizeof(eeFs.freeList));
  eeWriteBlockCmp(&eeFs.freeList, offsetof(EeFs, freeList), sizeof(eeFs.freeList));
}
static void EeFsFlush()
{
  eeWriteBlockCmp(&eeFs, 0,sizeof(eeFs));
    cc70:	85 e0       	ldi	r24, 0x05	; 5
    cc72:	99 e0       	ldi	r25, 0x09	; 9
    cc74:	60 e0       	ldi	r22, 0x00	; 0
    cc76:	70 e0       	ldi	r23, 0x00	; 0
    cc78:	40 e4       	ldi	r20, 0x40	; 64
    cc7a:	50 e0       	ldi	r21, 0x00	; 0
    cc7c:	0e 94 b0 6f 	call	0xdf60	; 0xdf60 <_Z15eeWriteBlockCmpPKvjj>
}
    cc80:	08 95       	ret

0000cc82 <_ZN5EFile4swapEhh>:
bool EFile::exists(uint8_t i_fileId)
{
  return eeFs.files[i_fileId].startBlk;
}

void EFile::swap(uint8_t i_fileId1,uint8_t i_fileId2)
    cc82:	df 93       	push	r29
    cc84:	cf 93       	push	r28
    cc86:	00 d0       	rcall	.+0      	; 0xcc88 <_ZN5EFile4swapEhh+0x6>
    cc88:	0f 92       	push	r0
    cc8a:	cd b7       	in	r28, 0x3d	; 61
    cc8c:	de b7       	in	r29, 0x3e	; 62
{
  DirEnt            tmp = eeFs.files[i_fileId1];
    cc8e:	90 e0       	ldi	r25, 0x00	; 0
    cc90:	fc 01       	movw	r30, r24
    cc92:	ee 0f       	add	r30, r30
    cc94:	ff 1f       	adc	r31, r31
    cc96:	e8 0f       	add	r30, r24
    cc98:	f9 1f       	adc	r31, r25
    cc9a:	de 01       	movw	r26, r28
    cc9c:	11 96       	adiw	r26, 0x01	; 1
    cc9e:	e7 5f       	subi	r30, 0xF7	; 247
    cca0:	f6 4f       	sbci	r31, 0xF6	; 246
    cca2:	23 e0       	ldi	r18, 0x03	; 3
    cca4:	01 90       	ld	r0, Z+
    cca6:	0d 92       	st	X+, r0
    cca8:	21 50       	subi	r18, 0x01	; 1
    ccaa:	e1 f7       	brne	.-8      	; 0xcca4 <_ZN5EFile4swapEhh+0x22>
  eeFs.files[i_fileId1] = eeFs.files[i_fileId2];
    ccac:	70 e0       	ldi	r23, 0x00	; 0
    ccae:	dc 01       	movw	r26, r24
    ccb0:	aa 0f       	add	r26, r26
    ccb2:	bb 1f       	adc	r27, r27
    ccb4:	a8 0f       	add	r26, r24
    ccb6:	b9 1f       	adc	r27, r25
    ccb8:	fb 01       	movw	r30, r22
    ccba:	ee 0f       	add	r30, r30
    ccbc:	ff 1f       	adc	r31, r31
    ccbe:	e6 0f       	add	r30, r22
    ccc0:	f7 1f       	adc	r31, r23
    ccc2:	a7 5f       	subi	r26, 0xF7	; 247
    ccc4:	b6 4f       	sbci	r27, 0xF6	; 246
    ccc6:	e7 5f       	subi	r30, 0xF7	; 247
    ccc8:	f6 4f       	sbci	r31, 0xF6	; 246
    ccca:	83 e0       	ldi	r24, 0x03	; 3
    cccc:	01 90       	ld	r0, Z+
    ccce:	0d 92       	st	X+, r0
    ccd0:	81 50       	subi	r24, 0x01	; 1
    ccd2:	e1 f7       	brne	.-8      	; 0xcccc <_ZN5EFile4swapEhh+0x4a>
  eeFs.files[i_fileId2] = tmp;;
    ccd4:	fb 01       	movw	r30, r22
    ccd6:	ee 0f       	add	r30, r30
    ccd8:	ff 1f       	adc	r31, r31
    ccda:	e6 0f       	add	r30, r22
    ccdc:	f7 1f       	adc	r31, r23
    ccde:	e7 5f       	subi	r30, 0xF7	; 247
    cce0:	f6 4f       	sbci	r31, 0xF6	; 246
    cce2:	de 01       	movw	r26, r28
    cce4:	11 96       	adiw	r26, 0x01	; 1
    cce6:	83 e0       	ldi	r24, 0x03	; 3
    cce8:	0d 90       	ld	r0, X+
    ccea:	01 92       	st	Z+, r0
    ccec:	81 50       	subi	r24, 0x01	; 1
    ccee:	e1 f7       	brne	.-8      	; 0xcce8 <_ZN5EFile4swapEhh+0x66>
  EeFsFlush();
    ccf0:	0e 94 38 66 	call	0xcc70	; 0xcc70 <_ZL9EeFsFlushv>
}
    ccf4:	0f 90       	pop	r0
    ccf6:	0f 90       	pop	r0
    ccf8:	0f 90       	pop	r0
    ccfa:	cf 91       	pop	r28
    ccfc:	df 91       	pop	r29
    ccfe:	08 95       	ret

0000cd00 <_ZL17EeFsFlushFreelistv>:
  eeWriteBlockCmp(buf, (uint16_t)(blk*BS+ofs+1), len);
}
static void EeFsFlushFreelist()
{
//  eeWriteBlockCmp(&eeFs.freeList,&((EeFs*)0)->freeList ,sizeof(eeFs.freeList));
  eeWriteBlockCmp(&eeFs.freeList, offsetof(EeFs, freeList), sizeof(eeFs.freeList));
    cd00:	87 e0       	ldi	r24, 0x07	; 7
    cd02:	99 e0       	ldi	r25, 0x09	; 9
    cd04:	62 e0       	ldi	r22, 0x02	; 2
    cd06:	70 e0       	ldi	r23, 0x00	; 0
    cd08:	41 e0       	ldi	r20, 0x01	; 1
    cd0a:	50 e0       	ldi	r21, 0x00	; 0
    cd0c:	0e 94 b0 6f 	call	0xdf60	; 0xdf60 <_Z15eeWriteBlockCmpPKvjj>
}
    cd10:	08 95       	ret

0000cd12 <_ZL8EeFsFreeh>:
    ret += BS-1;
    i = EeFsGetLink(i);
  }
  return ret;
}
static void EeFsFree(uint8_t blk){///free one or more blocks
    cd12:	0f 93       	push	r16
    cd14:	1f 93       	push	r17
    cd16:	08 2f       	mov	r16, r24
    cd18:	18 2f       	mov	r17, r24
    cd1a:	04 c0       	rjmp	.+8      	; 0xcd24 <_ZL8EeFsFreeh+0x12>
  uint8_t i = blk;
  while( EeFsGetLink(i)) i = EeFsGetLink(i);
    cd1c:	81 2f       	mov	r24, r17
    cd1e:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>
    cd22:	18 2f       	mov	r17, r24
    cd24:	81 2f       	mov	r24, r17
    cd26:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>
    cd2a:	88 23       	and	r24, r24
    cd2c:	b9 f7       	brne	.-18     	; 0xcd1c <_ZL8EeFsFreeh+0xa>
  EeFsSetLink(i,eeFs.freeList);
    cd2e:	81 2f       	mov	r24, r17
    cd30:	60 91 07 09 	lds	r22, 0x0907
    cd34:	0e 94 21 66 	call	0xcc42	; 0xcc42 <_ZL11EeFsSetLinkhh>
  eeFs.freeList = blk; //chain in front
    cd38:	00 93 07 09 	sts	0x0907, r16
  EeFsFlushFreelist();
    cd3c:	0e 94 80 66 	call	0xcd00	; 0xcd00 <_ZL17EeFsFlushFreelistv>
}
    cd40:	1f 91       	pop	r17
    cd42:	0f 91       	pop	r16
    cd44:	08 95       	ret

0000cd46 <_ZN5EFile10closeTruncEv>:
  openRd(i_fileId); //internal use
  eeFs.files[i_fileId].typ      = typ;
  eeFs.files[i_fileId].size     = 0;
  m_stopTime10ms = get_tmr10ms() + maxTme10ms;
}
void EFile::closeTrunc()
    cd46:	1f 93       	push	r17
    cd48:	cf 93       	push	r28
    cd4a:	df 93       	push	r29
    cd4c:	ec 01       	movw	r28, r24
{
  uint8_t fri=0;
  eeFs.files[m_fileId].size     = m_pos;
    cd4e:	88 81       	ld	r24, Y
    cd50:	90 e0       	ldi	r25, 0x00	; 0
    cd52:	fc 01       	movw	r30, r24
    cd54:	ee 0f       	add	r30, r30
    cd56:	ff 1f       	adc	r31, r31
    cd58:	e8 0f       	add	r30, r24
    cd5a:	f9 1f       	adc	r31, r25
    cd5c:	e6 5f       	subi	r30, 0xF6	; 246
    cd5e:	f6 4f       	sbci	r31, 0xF6	; 246
    cd60:	89 81       	ldd	r24, Y+1	; 0x01
    cd62:	80 83       	st	Z, r24
    cd64:	9a 81       	ldd	r25, Y+2	; 0x02
    cd66:	9f 70       	andi	r25, 0x0F	; 15
    cd68:	81 81       	ldd	r24, Z+1	; 0x01
    cd6a:	80 7f       	andi	r24, 0xF0	; 240
    cd6c:	89 2b       	or	r24, r25
    cd6e:	81 83       	std	Z+1, r24	; 0x01
  if(m_currBlk && ( fri = EeFsGetLink(m_currBlk)))    EeFsSetLink(m_currBlk, 0);
    cd70:	8b 81       	ldd	r24, Y+3	; 0x03
    cd72:	88 23       	and	r24, r24
    cd74:	a1 f0       	breq	.+40     	; 0xcd9e <_ZN5EFile10closeTruncEv+0x58>
    cd76:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>
    cd7a:	18 2f       	mov	r17, r24
    cd7c:	88 23       	and	r24, r24
    cd7e:	21 f0       	breq	.+8      	; 0xcd88 <_ZN5EFile10closeTruncEv+0x42>
    cd80:	8b 81       	ldd	r24, Y+3	; 0x03
    cd82:	60 e0       	ldi	r22, 0x00	; 0
    cd84:	0e 94 21 66 	call	0xcc42	; 0xcc42 <_ZL11EeFsSetLinkhh>
  EeFsFlush(); //chained out
    cd88:	0e 94 38 66 	call	0xcc70	; 0xcc70 <_ZL9EeFsFlushv>

  if(fri) EeFsFree( fri );  //chain in
    cd8c:	11 23       	and	r17, r17
    cd8e:	19 f0       	breq	.+6      	; 0xcd96 <_ZN5EFile10closeTruncEv+0x50>
    cd90:	81 2f       	mov	r24, r17
    cd92:	0e 94 89 66 	call	0xcd12	; 0xcd12 <_ZL8EeFsFreeh>
	asm("") ;
}
    cd96:	df 91       	pop	r29
    cd98:	cf 91       	pop	r28
    cd9a:	1f 91       	pop	r17
    cd9c:	08 95       	ret
    cd9e:	10 e0       	ldi	r17, 0x00	; 0
    cda0:	f3 cf       	rjmp	.-26     	; 0xcd88 <_ZN5EFile10closeTruncEv+0x42>

0000cda2 <_ZL9EeFsAllocv>:
  while( EeFsGetLink(i)) i = EeFsGetLink(i);
  EeFsSetLink(i,eeFs.freeList);
  eeFs.freeList = blk; //chain in front
  EeFsFlushFreelist();
}
static uint8_t EeFsAlloc(){ ///alloc one block from freelist
    cda2:	1f 93       	push	r17
  uint8_t ret=eeFs.freeList;
    cda4:	10 91 07 09 	lds	r17, 0x0907
  if(ret){
    cda8:	11 23       	and	r17, r17
    cdaa:	59 f0       	breq	.+22     	; 0xcdc2 <_ZL9EeFsAllocv+0x20>
    eeFs.freeList = EeFsGetLink(ret);
    cdac:	81 2f       	mov	r24, r17
    cdae:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>
    cdb2:	80 93 07 09 	sts	0x0907, r24
    EeFsFlushFreelist();
    cdb6:	0e 94 80 66 	call	0xcd00	; 0xcd00 <_ZL17EeFsFlushFreelistv>
    EeFsSetLink(ret,0);
    cdba:	81 2f       	mov	r24, r17
    cdbc:	60 e0       	ldi	r22, 0x00	; 0
    cdbe:	0e 94 21 66 	call	0xcc42	; 0xcc42 <_ZL11EeFsSetLinkhh>
  }
  return ret;
}
    cdc2:	81 2f       	mov	r24, r17
    cdc4:	1f 91       	pop	r17
    cdc6:	08 95       	ret

0000cdc8 <_ZN5EFile6createEhhj>:
    len   -=l;
  }
  m_pos += i_len - len;
  return   i_len - len;
}
void EFile::create(uint8_t i_fileId, uint8_t typ, uint16_t maxTme10ms){
    cdc8:	ef 92       	push	r14
    cdca:	ff 92       	push	r15
    cdcc:	0f 93       	push	r16
    cdce:	1f 93       	push	r17
    cdd0:	8c 01       	movw	r16, r24
    cdd2:	79 01       	movw	r14, r18
  return eeFs.files[m_fileId].size;
}


uint8_t EFile::openRd(uint8_t i_fileId){
  m_fileId = i_fileId;
    cdd4:	fc 01       	movw	r30, r24
    cdd6:	60 83       	st	Z, r22
  m_pos      = 0;
    cdd8:	12 82       	std	Z+2, r1	; 0x02
    cdda:	11 82       	std	Z+1, r1	; 0x01
  m_currBlk  = eeFs.files[m_fileId].startBlk;
    cddc:	70 e0       	ldi	r23, 0x00	; 0
    cdde:	a5 e0       	ldi	r26, 0x05	; 5
    cde0:	b9 e0       	ldi	r27, 0x09	; 9
    cde2:	9b 01       	movw	r18, r22
    cde4:	22 0f       	add	r18, r18
    cde6:	33 1f       	adc	r19, r19
    cde8:	26 0f       	add	r18, r22
    cdea:	37 1f       	adc	r19, r23
    cdec:	fd 01       	movw	r30, r26
    cdee:	e2 0f       	add	r30, r18
    cdf0:	f3 1f       	adc	r31, r19
    cdf2:	84 81       	ldd	r24, Z+4	; 0x04
    cdf4:	f8 01       	movw	r30, r16
    cdf6:	83 83       	std	Z+3, r24	; 0x03
  m_ofs      = 0;
    cdf8:	14 82       	std	Z+4, r1	; 0x04
  m_bRlc     = 0;
    cdfa:	15 82       	std	Z+5, r1	; 0x05
  m_err      = ERR_NONE;       //error reasons
    cdfc:	16 82       	std	Z+6, r1	; 0x06
  m_pos += i_len - len;
  return   i_len - len;
}
void EFile::create(uint8_t i_fileId, uint8_t typ, uint16_t maxTme10ms){
  openRd(i_fileId); //internal use
  eeFs.files[i_fileId].typ      = typ;
    cdfe:	16 96       	adiw	r26, 0x06	; 6
    ce00:	fd 01       	movw	r30, r26
    ce02:	e2 0f       	add	r30, r18
    ce04:	f3 1f       	adc	r31, r19
    ce06:	42 95       	swap	r20
    ce08:	40 7f       	andi	r20, 0xF0	; 240
    ce0a:	80 81       	ld	r24, Z
    ce0c:	8f 70       	andi	r24, 0x0F	; 15
    ce0e:	84 2b       	or	r24, r20
    ce10:	80 83       	st	Z, r24
  eeFs.files[i_fileId].size     = 0;
    ce12:	11 97       	sbiw	r26, 0x01	; 1
    ce14:	a2 0f       	add	r26, r18
    ce16:	b3 1f       	adc	r27, r19
    ce18:	1c 92       	st	X, r1
    ce1a:	11 96       	adiw	r26, 0x01	; 1
    ce1c:	8c 91       	ld	r24, X
    ce1e:	11 97       	sbiw	r26, 0x01	; 1
    ce20:	80 7f       	andi	r24, 0xF0	; 240
    ce22:	11 96       	adiw	r26, 0x01	; 1
    ce24:	8c 93       	st	X, r24
  m_stopTime10ms = get_tmr10ms() + maxTme10ms;
    ce26:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    ce2a:	e8 0e       	add	r14, r24
    ce2c:	f9 1e       	adc	r15, r25
    ce2e:	f8 01       	movw	r30, r16
    ce30:	f0 86       	std	Z+8, r15	; 0x08
    ce32:	e7 82       	std	Z+7, r14	; 0x07
}
    ce34:	1f 91       	pop	r17
    ce36:	0f 91       	pop	r16
    ce38:	ff 90       	pop	r15
    ce3a:	ef 90       	pop	r14
    ce3c:	08 95       	ret

0000ce3e <_ZN5EFile5writeEPhh>:
    i    += l;
    m_bRlc -= l;
  }
  return i;
}
uint8_t EFile::write(uint8_t*buf,uint8_t i_len){
    ce3e:	af 92       	push	r10
    ce40:	bf 92       	push	r11
    ce42:	cf 92       	push	r12
    ce44:	df 92       	push	r13
    ce46:	ef 92       	push	r14
    ce48:	ff 92       	push	r15
    ce4a:	0f 93       	push	r16
    ce4c:	1f 93       	push	r17
    ce4e:	cf 93       	push	r28
    ce50:	df 93       	push	r29
    ce52:	ec 01       	movw	r28, r24
    ce54:	6b 01       	movw	r12, r22
    ce56:	b4 2e       	mov	r11, r20
  uint8_t len=i_len;
  if(!m_currBlk && m_pos==0)
    ce58:	8b 81       	ldd	r24, Y+3	; 0x03
    ce5a:	88 23       	and	r24, r24
    ce5c:	89 f4       	brne	.+34     	; 0xce80 <_ZN5EFile5writeEPhh+0x42>
    ce5e:	89 81       	ldd	r24, Y+1	; 0x01
    ce60:	9a 81       	ldd	r25, Y+2	; 0x02
    ce62:	89 2b       	or	r24, r25
    ce64:	69 f4       	brne	.+26     	; 0xce80 <_ZN5EFile5writeEPhh+0x42>
  {
    eeFs.files[m_fileId].startBlk = m_currBlk = EeFsAlloc();
    ce66:	08 81       	ld	r16, Y
    ce68:	10 e0       	ldi	r17, 0x00	; 0
    ce6a:	0e 94 d1 66 	call	0xcda2	; 0xcda2 <_ZL9EeFsAllocv>
    ce6e:	8b 83       	std	Y+3, r24	; 0x03
    ce70:	f8 01       	movw	r30, r16
    ce72:	ee 0f       	add	r30, r30
    ce74:	ff 1f       	adc	r31, r31
    ce76:	e0 0f       	add	r30, r16
    ce78:	f1 1f       	adc	r31, r17
    ce7a:	eb 5f       	subi	r30, 0xFB	; 251
    ce7c:	f6 4f       	sbci	r31, 0xF6	; 246
    ce7e:	84 83       	std	Z+4, r24	; 0x04
    ce80:	eb 2c       	mov	r14, r11
    }
    if(!m_currBlk) {
      m_err = ERR_FULL;
      break;
    }
    uint8_t l = BS-1-m_ofs; if(l>len) l=len;
    ce82:	ff e0       	ldi	r31, 0x0F	; 15
    ce84:	af 2e       	mov	r10, r31
    ce86:	45 c0       	rjmp	.+138    	; 0xcf12 <_ZN5EFile5writeEPhh+0xd4>
  {
    eeFs.files[m_fileId].startBlk = m_currBlk = EeFsAlloc();
  }
  while(len)
  {
    if( (int16_t)(m_stopTime10ms - get_tmr10ms()) < 0)
    ce88:	0f 81       	ldd	r16, Y+7	; 0x07
    ce8a:	18 85       	ldd	r17, Y+8	; 0x08
    ce8c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_Z11get_tmr10msv>
    ce90:	08 1b       	sub	r16, r24
    ce92:	19 0b       	sbc	r17, r25
    ce94:	17 ff       	sbrs	r17, 7
    ce96:	02 c0       	rjmp	.+4      	; 0xce9c <_ZN5EFile5writeEPhh+0x5e>
    {
      m_err = ERR_TMO;
    ce98:	82 e0       	ldi	r24, 0x02	; 2
    ce9a:	04 c0       	rjmp	.+8      	; 0xcea4 <_ZN5EFile5writeEPhh+0x66>
      break;
    }
    if(!m_currBlk) {
    ce9c:	9b 81       	ldd	r25, Y+3	; 0x03
    ce9e:	99 23       	and	r25, r25
    cea0:	19 f4       	brne	.+6      	; 0xcea8 <_ZN5EFile5writeEPhh+0x6a>
      m_err = ERR_FULL;
    cea2:	81 e0       	ldi	r24, 0x01	; 1
    cea4:	8e 83       	std	Y+6, r24	; 0x06
    cea6:	38 c0       	rjmp	.+112    	; 0xcf18 <_ZN5EFile5writeEPhh+0xda>
      break;
    }
    if(m_ofs>=(BS-1)){
    cea8:	8c 81       	ldd	r24, Y+4	; 0x04
    ceaa:	8f 30       	cpi	r24, 0x0F	; 15
    ceac:	88 f0       	brcs	.+34     	; 0xced0 <_ZN5EFile5writeEPhh+0x92>
      m_ofs=0;
    ceae:	1c 82       	std	Y+4, r1	; 0x04
      if( ! EeFsGetLink(m_currBlk) ){
    ceb0:	89 2f       	mov	r24, r25
    ceb2:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>
    ceb6:	88 23       	and	r24, r24
    ceb8:	39 f4       	brne	.+14     	; 0xcec8 <_ZN5EFile5writeEPhh+0x8a>
        EeFsSetLink(m_currBlk, EeFsAlloc());
    ceba:	1b 81       	ldd	r17, Y+3	; 0x03
    cebc:	0e 94 d1 66 	call	0xcda2	; 0xcda2 <_ZL9EeFsAllocv>
    cec0:	68 2f       	mov	r22, r24
    cec2:	81 2f       	mov	r24, r17
    cec4:	0e 94 21 66 	call	0xcc42	; 0xcc42 <_ZL11EeFsSetLinkhh>
      }
      m_currBlk = EeFsGetLink(m_currBlk);
    cec8:	8b 81       	ldd	r24, Y+3	; 0x03
    ceca:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>
    cece:	8b 83       	std	Y+3, r24	; 0x03
    }
    if(!m_currBlk) {
    ced0:	8b 81       	ldd	r24, Y+3	; 0x03
    ced2:	88 23       	and	r24, r24
    ced4:	31 f3       	breq	.-52     	; 0xcea2 <_ZN5EFile5writeEPhh+0x64>
      m_err = ERR_FULL;
      break;
    }
    uint8_t l = BS-1-m_ofs; if(l>len) l=len;
    ced6:	6c 81       	ldd	r22, Y+4	; 0x04
    ced8:	2a 2d       	mov	r18, r10
    ceda:	26 1b       	sub	r18, r22
    cedc:	fe 2c       	mov	r15, r14
    cede:	2e 15       	cp	r18, r14
    cee0:	08 f4       	brcc	.+2      	; 0xcee4 <_ZN5EFile5writeEPhh+0xa6>
    cee2:	f2 2e       	mov	r15, r18
static uint8_t EeFsGetDat(uint8_t blk,uint8_t ofs){
  return EeFsRead( blk,ofs+1);
}
static void EeFsSetDat(uint8_t blk,uint8_t ofs,uint8_t*buf,uint8_t len){
  //EeFsWrite( blk,ofs+1,val);
  eeWriteBlockCmp(buf, (uint16_t)(blk*BS+ofs+1), len);
    cee4:	0f 2d       	mov	r16, r15
    cee6:	10 e0       	ldi	r17, 0x00	; 0
    cee8:	70 e0       	ldi	r23, 0x00	; 0
    ceea:	6f 5f       	subi	r22, 0xFF	; 255
    ceec:	7f 4f       	sbci	r23, 0xFF	; 255
    ceee:	90 e0       	ldi	r25, 0x00	; 0
    cef0:	e4 e0       	ldi	r30, 0x04	; 4
    cef2:	88 0f       	add	r24, r24
    cef4:	99 1f       	adc	r25, r25
    cef6:	ea 95       	dec	r30
    cef8:	e1 f7       	brne	.-8      	; 0xcef2 <_ZN5EFile5writeEPhh+0xb4>
    cefa:	68 0f       	add	r22, r24
    cefc:	79 1f       	adc	r23, r25
    cefe:	c6 01       	movw	r24, r12
    cf00:	a8 01       	movw	r20, r16
    cf02:	0e 94 b0 6f 	call	0xdf60	; 0xdf60 <_Z15eeWriteBlockCmpPKvjj>
      m_err = ERR_FULL;
      break;
    }
    uint8_t l = BS-1-m_ofs; if(l>len) l=len;
    EeFsSetDat(m_currBlk, m_ofs, buf, l);
    buf   +=l;
    cf06:	c0 0e       	add	r12, r16
    cf08:	d1 1e       	adc	r13, r17
    m_ofs +=l;
    cf0a:	8c 81       	ldd	r24, Y+4	; 0x04
    cf0c:	8f 0d       	add	r24, r15
    cf0e:	8c 83       	std	Y+4, r24	; 0x04
    len   -=l;
    cf10:	ef 18       	sub	r14, r15
  uint8_t len=i_len;
  if(!m_currBlk && m_pos==0)
  {
    eeFs.files[m_fileId].startBlk = m_currBlk = EeFsAlloc();
  }
  while(len)
    cf12:	ee 20       	and	r14, r14
    cf14:	09 f0       	breq	.+2      	; 0xcf18 <_ZN5EFile5writeEPhh+0xda>
    cf16:	b8 cf       	rjmp	.-144    	; 0xce88 <_ZN5EFile5writeEPhh+0x4a>
    EeFsSetDat(m_currBlk, m_ofs, buf, l);
    buf   +=l;
    m_ofs +=l;
    len   -=l;
  }
  m_pos += i_len - len;
    cf18:	2b 2d       	mov	r18, r11
    cf1a:	30 e0       	ldi	r19, 0x00	; 0
    cf1c:	2e 19       	sub	r18, r14
    cf1e:	31 09       	sbc	r19, r1
    cf20:	89 81       	ldd	r24, Y+1	; 0x01
    cf22:	9a 81       	ldd	r25, Y+2	; 0x02
    cf24:	82 0f       	add	r24, r18
    cf26:	93 1f       	adc	r25, r19
    cf28:	9a 83       	std	Y+2, r25	; 0x02
    cf2a:	89 83       	std	Y+1, r24	; 0x01
  return   i_len - len;
}
    cf2c:	8b 2d       	mov	r24, r11
    cf2e:	8e 19       	sub	r24, r14
    cf30:	df 91       	pop	r29
    cf32:	cf 91       	pop	r28
    cf34:	1f 91       	pop	r17
    cf36:	0f 91       	pop	r16
    cf38:	ff 90       	pop	r15
    cf3a:	ef 90       	pop	r14
    cf3c:	df 90       	pop	r13
    cf3e:	cf 90       	pop	r12
    cf40:	bf 90       	pop	r11
    cf42:	af 90       	pop	r10
    cf44:	08 95       	ret

0000cf46 <_ZN5EFile8writeRlcEhhPhjh>:

  if(fri) EeFsFree( fri );  //chain in
	asm("") ;
}

uint16_t EFile::writeRlc(uint8_t i_fileId, uint8_t typ,uint8_t*buf,uint16_t i_len, uint8_t maxTme10ms){
    cf46:	4f 92       	push	r4
    cf48:	5f 92       	push	r5
    cf4a:	6f 92       	push	r6
    cf4c:	7f 92       	push	r7
    cf4e:	8f 92       	push	r8
    cf50:	9f 92       	push	r9
    cf52:	af 92       	push	r10
    cf54:	bf 92       	push	r11
    cf56:	cf 92       	push	r12
    cf58:	df 92       	push	r13
    cf5a:	ef 92       	push	r14
    cf5c:	0f 93       	push	r16
    cf5e:	1f 93       	push	r17
    cf60:	df 93       	push	r29
    cf62:	cf 93       	push	r28
    cf64:	0f 92       	push	r0
    cf66:	cd b7       	in	r28, 0x3d	; 61
    cf68:	de b7       	in	r29, 0x3e	; 62
    cf6a:	4c 01       	movw	r8, r24
    cf6c:	39 01       	movw	r6, r18
    cf6e:	68 01       	movw	r12, r16
    cf70:	2e 2d       	mov	r18, r14
  create(i_fileId,typ,maxTme10ms);
    cf72:	30 e0       	ldi	r19, 0x00	; 0
    cf74:	0e 94 e4 66 	call	0xcdc8	; 0xcdc8 <_ZN5EFile6createEhhj>
  bool    state0 = true;
  uint8_t cnt    = 0;
    cf78:	19 82       	std	Y+1, r1	; 0x01
    cf7a:	53 01       	movw	r10, r6
    cf7c:	91 e0       	ldi	r25, 0x01	; 1
    cf7e:	00 e0       	ldi	r16, 0x00	; 0
    cf80:	10 e0       	ldi	r17, 0x00	; 0
          if( write(&cnt,1)!=1)           goto error;
          cnt=0;
        }
      }else{
        if(cnt>0) {
          if( write(&cnt,1) !=1)            goto error;
    cf82:	2e 01       	movw	r4, r28
    cf84:	08 94       	sec
    cf86:	41 1c       	adc	r4, r1
    cf88:	51 1c       	adc	r5, r1
  //if (rb | 0x80) write rb & 0x7F zeros
  //else write rb bytes
  for( i=0; i<=i_len; i++)
  {
    bool nst0 = buf[i] == 0;                   
    if( nst0 && !state0 && buf[i+1]!=0) nst0 = false ;
    cf8a:	f5 01       	movw	r30, r10
    cf8c:	80 81       	ld	r24, Z
    cf8e:	88 23       	and	r24, r24
    cf90:	51 f4       	brne	.+20     	; 0xcfa6 <_ZN5EFile8writeRlcEhhPhjh+0x60>
    cf92:	99 23       	and	r25, r25
    cf94:	19 f0       	breq	.+6      	; 0xcf9c <_ZN5EFile8writeRlcEhhPhjh+0x56>
    cf96:	ee 24       	eor	r14, r14
    cf98:	e3 94       	inc	r14
    cf9a:	0a c0       	rjmp	.+20     	; 0xcfb0 <_ZN5EFile8writeRlcEhhPhjh+0x6a>
    cf9c:	f5 01       	movw	r30, r10
    cf9e:	81 81       	ldd	r24, Z+1	; 0x01
    cfa0:	88 23       	and	r24, r24
    cfa2:	29 f4       	brne	.+10     	; 0xcfae <_ZN5EFile8writeRlcEhhPhjh+0x68>
    cfa4:	1a c0       	rjmp	.+52     	; 0xcfda <_ZN5EFile8writeRlcEhhPhjh+0x94>
    if(nst0 != state0 || cnt>=0x7f || i==i_len){
    cfa6:	99 23       	and	r25, r25
    cfa8:	11 f0       	breq	.+4      	; 0xcfae <_ZN5EFile8writeRlcEhhPhjh+0x68>
    cfaa:	ee 24       	eor	r14, r14
    cfac:	09 c0       	rjmp	.+18     	; 0xcfc0 <_ZN5EFile8writeRlcEhhPhjh+0x7a>
    cfae:	ee 24       	eor	r14, r14
    cfb0:	89 81       	ldd	r24, Y+1	; 0x01
    cfb2:	8f 37       	cpi	r24, 0x7F	; 127
    cfb4:	18 f4       	brcc	.+6      	; 0xcfbc <_ZN5EFile8writeRlcEhhPhjh+0x76>
    cfb6:	0c 15       	cp	r16, r12
    cfb8:	1d 05       	cpc	r17, r13
    cfba:	61 f5       	brne	.+88     	; 0xd014 <_ZN5EFile8writeRlcEhhPhjh+0xce>
      if(state0){  
    cfbc:	99 23       	and	r25, r25
    cfbe:	79 f0       	breq	.+30     	; 0xcfde <_ZN5EFile8writeRlcEhhPhjh+0x98>
        if(cnt>0){
    cfc0:	89 81       	ldd	r24, Y+1	; 0x01
    cfc2:	88 23       	and	r24, r24
    cfc4:	31 f1       	breq	.+76     	; 0xd012 <_ZN5EFile8writeRlcEhhPhjh+0xcc>
          cnt|=0x80;
    cfc6:	80 68       	ori	r24, 0x80	; 128
    cfc8:	89 83       	std	Y+1, r24	; 0x01
          if( write(&cnt,1)!=1)           goto error;
    cfca:	c4 01       	movw	r24, r8
    cfcc:	b2 01       	movw	r22, r4
    cfce:	41 e0       	ldi	r20, 0x01	; 1
    cfd0:	0e 94 1f 67 	call	0xce3e	; 0xce3e <_ZN5EFile5writeEPhh>
    cfd4:	81 30       	cpi	r24, 0x01	; 1
    cfd6:	e1 f0       	breq	.+56     	; 0xd010 <_ZN5EFile8writeRlcEhhPhjh+0xca>
    cfd8:	2b c0       	rjmp	.+86     	; 0xd030 <_ZN5EFile8writeRlcEhhPhjh+0xea>
          cnt=0;
    cfda:	ee 24       	eor	r14, r14
    cfdc:	e3 94       	inc	r14
        }
      }else{
        if(cnt>0) {
    cfde:	89 81       	ldd	r24, Y+1	; 0x01
    cfe0:	88 23       	and	r24, r24
    cfe2:	b9 f0       	breq	.+46     	; 0xd012 <_ZN5EFile8writeRlcEhhPhjh+0xcc>
          if( write(&cnt,1) !=1)            goto error;
    cfe4:	c4 01       	movw	r24, r8
    cfe6:	b2 01       	movw	r22, r4
    cfe8:	41 e0       	ldi	r20, 0x01	; 1
    cfea:	0e 94 1f 67 	call	0xce3e	; 0xce3e <_ZN5EFile5writeEPhh>
    cfee:	81 30       	cpi	r24, 0x01	; 1
    cff0:	f9 f4       	brne	.+62     	; 0xd030 <_ZN5EFile8writeRlcEhhPhjh+0xea>
          uint8_t ret=write(&buf[i-cnt],cnt);
    cff2:	49 81       	ldd	r20, Y+1	; 0x01
    cff4:	b8 01       	movw	r22, r16
    cff6:	64 1b       	sub	r22, r20
    cff8:	71 09       	sbc	r23, r1
    cffa:	66 0d       	add	r22, r6
    cffc:	77 1d       	adc	r23, r7
    cffe:	c4 01       	movw	r24, r8
    d000:	0e 94 1f 67 	call	0xce3e	; 0xce3e <_ZN5EFile5writeEPhh>
          if( ret !=cnt) { cnt-=ret;        goto error;}
    d004:	99 81       	ldd	r25, Y+1	; 0x01
    d006:	89 17       	cp	r24, r25
    d008:	19 f0       	breq	.+6      	; 0xd010 <_ZN5EFile8writeRlcEhhPhjh+0xca>
    d00a:	98 1b       	sub	r25, r24
    d00c:	99 83       	std	Y+1, r25	; 0x01
    d00e:	10 c0       	rjmp	.+32     	; 0xd030 <_ZN5EFile8writeRlcEhhPhjh+0xea>
          cnt=0;
    d010:	19 82       	std	Y+1, r1	; 0x01
    d012:	9e 2d       	mov	r25, r14
        }
      }
      state0 = nst0;
    }
    cnt++;
    d014:	89 81       	ldd	r24, Y+1	; 0x01
    d016:	8f 5f       	subi	r24, 0xFF	; 255
    d018:	89 83       	std	Y+1, r24	; 0x01
    wdt_reset() ;		// Can take too long for the WD timeout.
    d01a:	a8 95       	wdr

  //RLE compression:
  //rb = read byte
  //if (rb | 0x80) write rb & 0x7F zeros
  //else write rb bytes
  for( i=0; i<=i_len; i++)
    d01c:	0f 5f       	subi	r16, 0xFF	; 255
    d01e:	1f 4f       	sbci	r17, 0xFF	; 255
    d020:	08 94       	sec
    d022:	a1 1c       	adc	r10, r1
    d024:	b1 1c       	adc	r11, r1
    d026:	c0 16       	cp	r12, r16
    d028:	d1 06       	cpc	r13, r17
    d02a:	08 f0       	brcs	.+2      	; 0xd02e <_ZN5EFile8writeRlcEhhPhjh+0xe8>
    d02c:	ae cf       	rjmp	.-164    	; 0xcf8a <_ZN5EFile8writeRlcEhhPhjh+0x44>
    d02e:	05 c0       	rjmp	.+10     	; 0xd03a <_ZN5EFile8writeRlcEhhPhjh+0xf4>
    cnt++;
    wdt_reset() ;		// Can take too long for the WD timeout.
  }
  if(0){
    error:
    i_len = i - (cnt & 0x7f);
    d030:	89 81       	ldd	r24, Y+1	; 0x01
    d032:	8f 77       	andi	r24, 0x7F	; 127
    d034:	68 01       	movw	r12, r16
    d036:	c8 1a       	sub	r12, r24
    d038:	d1 08       	sbc	r13, r1
  }
  closeTrunc();
    d03a:	c4 01       	movw	r24, r8
    d03c:	0e 94 a3 66 	call	0xcd46	; 0xcd46 <_ZN5EFile10closeTruncEv>
  return i_len;
}
    d040:	c6 01       	movw	r24, r12
    d042:	0f 90       	pop	r0
    d044:	cf 91       	pop	r28
    d046:	df 91       	pop	r29
    d048:	1f 91       	pop	r17
    d04a:	0f 91       	pop	r16
    d04c:	ef 90       	pop	r14
    d04e:	df 90       	pop	r13
    d050:	cf 90       	pop	r12
    d052:	bf 90       	pop	r11
    d054:	af 90       	pop	r10
    d056:	9f 90       	pop	r9
    d058:	8f 90       	pop	r8
    d05a:	7f 90       	pop	r7
    d05c:	6f 90       	pop	r6
    d05e:	5f 90       	pop	r5
    d060:	4f 90       	pop	r4
    d062:	08 95       	ret

0000d064 <_ZN5EFile7readRlcEPhj>:
    len--;
  }
  m_pos += i_len - len;
  return i_len - len;
}
uint16_t EFile::readRlc(uint8_t*buf,uint16_t i_len){
    d064:	8f 92       	push	r8
    d066:	9f 92       	push	r9
    d068:	af 92       	push	r10
    d06a:	bf 92       	push	r11
    d06c:	cf 92       	push	r12
    d06e:	df 92       	push	r13
    d070:	ff 92       	push	r15
    d072:	0f 93       	push	r16
    d074:	1f 93       	push	r17
    d076:	cf 93       	push	r28
    d078:	df 93       	push	r29
    d07a:	8c 01       	movw	r16, r24
    d07c:	4b 01       	movw	r8, r22
    d07e:	6a 01       	movw	r12, r20
  uint16_t i;
  for( i=0; i<i_len; ){
    if((m_bRlc&0x7f) == 0) {
      if(read(&m_bRlc,1)!=1) break; //read how many bytes to read
    d080:	85 e0       	ldi	r24, 0x05	; 5
    d082:	a8 2e       	mov	r10, r24
    d084:	b1 2c       	mov	r11, r1
    d086:	a0 0e       	add	r10, r16
    d088:	b1 1e       	adc	r11, r17
    d08a:	c0 e0       	ldi	r28, 0x00	; 0
    d08c:	d0 e0       	ldi	r29, 0x00	; 0
    d08e:	3b c0       	rjmp	.+118    	; 0xd106 <_ZN5EFile7readRlcEPhj+0xa2>
  return i_len - len;
}
uint16_t EFile::readRlc(uint8_t*buf,uint16_t i_len){
  uint16_t i;
  for( i=0; i<i_len; ){
    if((m_bRlc&0x7f) == 0) {
    d090:	f8 01       	movw	r30, r16
    d092:	85 81       	ldd	r24, Z+5	; 0x05
    d094:	90 e0       	ldi	r25, 0x00	; 0
    d096:	8f 77       	andi	r24, 0x7F	; 127
    d098:	90 70       	andi	r25, 0x00	; 0
    d09a:	89 2b       	or	r24, r25
    d09c:	41 f4       	brne	.+16     	; 0xd0ae <_ZN5EFile7readRlcEPhj+0x4a>
      if(read(&m_bRlc,1)!=1) break; //read how many bytes to read
    d09e:	c8 01       	movw	r24, r16
    d0a0:	b5 01       	movw	r22, r10
    d0a2:	41 e0       	ldi	r20, 0x01	; 1
    d0a4:	50 e0       	ldi	r21, 0x00	; 0
    d0a6:	0e 94 91 65 	call	0xcb22	; 0xcb22 <_ZN5EFile4readEPhj>
    d0aa:	81 30       	cpi	r24, 0x01	; 1
    d0ac:	79 f5       	brne	.+94     	; 0xd10c <_ZN5EFile7readRlcEPhj+0xa8>
    }
    assert(m_bRlc & 0x7f);
    uint8_t l=m_bRlc&0x7f;
    d0ae:	f8 01       	movw	r30, r16
    d0b0:	45 81       	ldd	r20, Z+5	; 0x05
    d0b2:	bf e7       	ldi	r27, 0x7F	; 127
    d0b4:	fb 2e       	mov	r15, r27
    d0b6:	f4 22       	and	r15, r20
    if((uint16_t)l>(i_len-i)) l = (uint8_t)(i_len-i);
    d0b8:	2f 2d       	mov	r18, r15
    d0ba:	30 e0       	ldi	r19, 0x00	; 0
    d0bc:	c6 01       	movw	r24, r12
    d0be:	8c 1b       	sub	r24, r28
    d0c0:	9d 0b       	sbc	r25, r29
    d0c2:	82 17       	cp	r24, r18
    d0c4:	93 07       	cpc	r25, r19
    d0c6:	10 f4       	brcc	.+4      	; 0xd0cc <_ZN5EFile7readRlcEPhj+0x68>
    d0c8:	fc 2c       	mov	r15, r12
    d0ca:	fc 1a       	sub	r15, r28
    d0cc:	b4 01       	movw	r22, r8
    d0ce:	6c 0f       	add	r22, r28
    d0d0:	7d 1f       	adc	r23, r29
    if(m_bRlc&0x80){       // if contains high byte
    d0d2:	47 ff       	sbrs	r20, 7
    d0d4:	08 c0       	rjmp	.+16     	; 0xd0e6 <_ZN5EFile7readRlcEPhj+0x82>
      memset(&buf[i],0,l); // write l zeros
    d0d6:	cb 01       	movw	r24, r22
    d0d8:	60 e0       	ldi	r22, 0x00	; 0
    d0da:	70 e0       	ldi	r23, 0x00	; 0
    d0dc:	4f 2d       	mov	r20, r15
    d0de:	50 e0       	ldi	r21, 0x00	; 0
    d0e0:	0e 94 00 7f 	call	0xfe00	; 0xfe00 <memset>
    d0e4:	0a c0       	rjmp	.+20     	; 0xd0fa <_ZN5EFile7readRlcEPhj+0x96>
    }else{
      uint8_t lr = read(&buf[i],l); // read and write l bytes
    d0e6:	c8 01       	movw	r24, r16
    d0e8:	4f 2d       	mov	r20, r15
    d0ea:	50 e0       	ldi	r21, 0x00	; 0
    d0ec:	0e 94 91 65 	call	0xcb22	; 0xcb22 <_ZN5EFile4readEPhj>
      if(lr!=l) return i+lr;
    d0f0:	8f 15       	cp	r24, r15
    d0f2:	19 f0       	breq	.+6      	; 0xd0fa <_ZN5EFile7readRlcEPhj+0x96>
    d0f4:	c8 0f       	add	r28, r24
    d0f6:	d1 1d       	adc	r29, r1
    d0f8:	09 c0       	rjmp	.+18     	; 0xd10c <_ZN5EFile7readRlcEPhj+0xa8>
    }
    i    += l;
    d0fa:	cf 0d       	add	r28, r15
    d0fc:	d1 1d       	adc	r29, r1
    m_bRlc -= l;
    d0fe:	f8 01       	movw	r30, r16
    d100:	85 81       	ldd	r24, Z+5	; 0x05
    d102:	8f 19       	sub	r24, r15
    d104:	85 83       	std	Z+5, r24	; 0x05
  m_pos += i_len - len;
  return i_len - len;
}
uint16_t EFile::readRlc(uint8_t*buf,uint16_t i_len){
  uint16_t i;
  for( i=0; i<i_len; ){
    d106:	cc 15       	cp	r28, r12
    d108:	dd 05       	cpc	r29, r13
    d10a:	10 f2       	brcs	.-124    	; 0xd090 <_ZN5EFile7readRlcEPhj+0x2c>
    }
    i    += l;
    m_bRlc -= l;
  }
  return i;
}
    d10c:	ce 01       	movw	r24, r28
    d10e:	df 91       	pop	r29
    d110:	cf 91       	pop	r28
    d112:	1f 91       	pop	r17
    d114:	0f 91       	pop	r16
    d116:	ff 90       	pop	r15
    d118:	df 90       	pop	r13
    d11a:	cf 90       	pop	r12
    d11c:	bf 90       	pop	r11
    d11e:	af 90       	pop	r10
    d120:	9f 90       	pop	r9
    d122:	8f 90       	pop	r8
    d124:	08 95       	ret

0000d126 <_ZN5EFile2rmEh>:
  eeFs.files[i_fileId1] = eeFs.files[i_fileId2];
  eeFs.files[i_fileId2] = tmp;;
  EeFsFlush();
}

void EFile::rm(uint8_t i_fileId){
    d126:	1f 93       	push	r17
  uint8_t i = eeFs.files[i_fileId].startBlk;
    d128:	90 e0       	ldi	r25, 0x00	; 0
    d12a:	9c 01       	movw	r18, r24
    d12c:	22 0f       	add	r18, r18
    d12e:	33 1f       	adc	r19, r19
    d130:	28 0f       	add	r18, r24
    d132:	39 1f       	adc	r19, r25
    d134:	f9 01       	movw	r30, r18
    d136:	eb 5f       	subi	r30, 0xFB	; 251
    d138:	f6 4f       	sbci	r31, 0xF6	; 246
    d13a:	14 81       	ldd	r17, Z+4	; 0x04
  memset(&eeFs.files[i_fileId], 0, sizeof(eeFs.files[i_fileId]));
    d13c:	27 5f       	subi	r18, 0xF7	; 247
    d13e:	36 4f       	sbci	r19, 0xF6	; 246
    d140:	83 e0       	ldi	r24, 0x03	; 3
    d142:	d9 01       	movw	r26, r18
    d144:	1d 92       	st	X+, r1
    d146:	8a 95       	dec	r24
    d148:	e9 f7       	brne	.-6      	; 0xd144 <_ZN5EFile2rmEh+0x1e>
  EeFsFlush(); //chained out
    d14a:	0e 94 38 66 	call	0xcc70	; 0xcc70 <_ZL9EeFsFlushv>

  if(i) EeFsFree( i ); //chain in
    d14e:	11 23       	and	r17, r17
    d150:	19 f0       	breq	.+6      	; 0xd158 <_ZN5EFile2rmEh+0x32>
    d152:	81 2f       	mov	r24, r17
    d154:	0e 94 89 66 	call	0xcd12	; 0xcd12 <_ZL8EeFsFreeh>
}
    d158:	1f 91       	pop	r17
    d15a:	08 95       	ret

0000d15c <_Z10EeFsFormatv>:
    //    err_2: ret--;
    //    err_1: ret--;
  //  }
  return ret;
}
void EeFsFormat()
    d15c:	1f 93       	push	r17
{
//  if(sizeof(eeFs) != RESV){
//    extern void eeprom_RESV_mismatch();
//    eeprom_RESV_mismatch();
//  }
  memset(&eeFs,0, sizeof(eeFs));
    d15e:	90 e4       	ldi	r25, 0x40	; 64
    d160:	e5 e0       	ldi	r30, 0x05	; 5
    d162:	f9 e0       	ldi	r31, 0x09	; 9
    d164:	df 01       	movw	r26, r30
    d166:	89 2f       	mov	r24, r25
    d168:	1d 92       	st	X+, r1
    d16a:	8a 95       	dec	r24
    d16c:	e9 f7       	brne	.-6      	; 0xd168 <_Z10EeFsFormatv+0xc>
  eeFs.version  = EEFS_VERS;
    d16e:	84 e0       	ldi	r24, 0x04	; 4
    d170:	80 93 05 09 	sts	0x0905, r24
  eeFs.mySize   = sizeof(eeFs);
    d174:	90 93 06 09 	sts	0x0906, r25
  eeFs.freeList = 0;
    d178:	10 92 07 09 	sts	0x0907, r1
  eeFs.bs       = BS;
    d17c:	80 e1       	ldi	r24, 0x10	; 16
    d17e:	80 93 08 09 	sts	0x0908, r24
    d182:	84 e0       	ldi	r24, 0x04	; 4
  for(uint8_t i = FIRSTBLK; i < BLOCKS-1; i++) EeFsSetLink(i,i+1);
    d184:	18 2f       	mov	r17, r24
    d186:	1f 5f       	subi	r17, 0xFF	; 255
    d188:	61 2f       	mov	r22, r17
    d18a:	0e 94 21 66 	call	0xcc42	; 0xcc42 <_ZL11EeFsSetLinkhh>
    d18e:	81 2f       	mov	r24, r17
    d190:	1f 37       	cpi	r17, 0x7F	; 127
    d192:	c1 f7       	brne	.-16     	; 0xd184 <_Z10EeFsFormatv+0x28>
  EeFsSetLink(BLOCKS-1, 0);
    d194:	60 e0       	ldi	r22, 0x00	; 0
    d196:	0e 94 21 66 	call	0xcc42	; 0xcc42 <_ZL11EeFsSetLinkhh>
  eeFs.freeList = FIRSTBLK;
    d19a:	84 e0       	ldi	r24, 0x04	; 4
    d19c:	80 93 07 09 	sts	0x0907, r24
  EeFsFlush();
    d1a0:	0e 94 38 66 	call	0xcc70	; 0xcc70 <_ZL9EeFsFlushv>
}
    d1a4:	1f 91       	pop	r17
    d1a6:	08 95       	ret

0000d1a8 <_Z6EeFsckv>:
}

// This is only called from eeReadAll() (in pers.cpp)
// BEFORE g_model is loaded so re-use g_model for bufp
// g_model is always set to zeroes before it is loaded
int8_t EeFsck()
    d1a8:	cf 92       	push	r12
    d1aa:	df 92       	push	r13
    d1ac:	ef 92       	push	r14
    d1ae:	ff 92       	push	r15
    d1b0:	0f 93       	push	r16
    d1b2:	1f 93       	push	r17
    d1b4:	cf 93       	push	r28
    d1b6:	df 93       	push	r29
{
  uint8_t *bufp;
//  static uint8_t buffer[BLOCKS];
  bufp = (uint8_t *)&g_model ;
//  bufp = Xmem.file_buffer;
  memset(bufp,0,BLOCKS);
    d1b8:	80 e8       	ldi	r24, 0x80	; 128
    d1ba:	ea ea       	ldi	r30, 0xAA	; 170
    d1bc:	f1 e0       	ldi	r31, 0x01	; 1
    d1be:	df 01       	movw	r26, r30
    d1c0:	1d 92       	st	X+, r1
    d1c2:	8a 95       	dec	r24
    d1c4:	e9 f7       	brne	.-6      	; 0xd1c0 <_Z6EeFsckv+0x18>
    d1c6:	69 e0       	ldi	r22, 0x09	; 9
    d1c8:	c6 2e       	mov	r12, r22
    d1ca:	69 e0       	ldi	r22, 0x09	; 9
    d1cc:	d6 2e       	mov	r13, r22
    d1ce:	00 e0       	ldi	r16, 0x00	; 0
    d1d0:	10 e0       	ldi	r17, 0x00	; 0
    d1d2:	90 2f       	mov	r25, r16
  uint16_t blk ;
  int8_t ret=0;
  for(uint8_t i = 0; i <= MAXFILES; i++){
    uint8_t *startP = i==MAXFILES ? &eeFs.freeList : &eeFs.files[i].startBlk;
    d1d4:	04 31       	cpi	r16, 0x14	; 20
    d1d6:	29 f4       	brne	.+10     	; 0xd1e2 <_Z6EeFsckv+0x3a>
    d1d8:	80 91 07 09 	lds	r24, 0x0907
    d1dc:	c7 e0       	ldi	r28, 0x07	; 7
    d1de:	d9 e0       	ldi	r29, 0x09	; 9
    d1e0:	09 c0       	rjmp	.+18     	; 0xd1f4 <_Z6EeFsckv+0x4c>
    d1e2:	e8 01       	movw	r28, r16
    d1e4:	cc 0f       	add	r28, r28
    d1e6:	dd 1f       	adc	r29, r29
    d1e8:	c0 0f       	add	r28, r16
    d1ea:	d1 1f       	adc	r29, r17
    d1ec:	c7 5f       	subi	r28, 0xF7	; 247
    d1ee:	d6 4f       	sbci	r29, 0xF6	; 246
    d1f0:	f6 01       	movw	r30, r12
    d1f2:	80 81       	ld	r24, Z
    uint8_t lastBlk = 0;
    blk = *startP;
    d1f4:	28 2f       	mov	r18, r24
    d1f6:	30 e0       	ldi	r19, 0x00	; 0
    d1f8:	ff 24       	eor	r15, r15
          *startP = 0; //interrupt chain at startpos
          EeFsFlush();
        }
        blk=0; //abort
      }else{
        bufp[blk] = i+1;
    d1fa:	e9 2e       	mov	r14, r25
    d1fc:	e3 94       	inc	r14
    d1fe:	1d c0       	rjmp	.+58     	; 0xd23a <_Z6EeFsckv+0x92>
      //    else              blk = eeFs.files[i].startBlk;
    while(blk){
      //      if(blk <  FIRSTBLK ) goto err_1; //bad blk index
      //      if(blk >= BLOCKS   ) goto err_2; //bad blk index
      //      if(bufp[blk])        goto err_3; //blk double usage
      if( (   blk <  FIRSTBLK ) //goto err_1; //bad blk index
    d200:	c9 01       	movw	r24, r18
    d202:	04 97       	sbiw	r24, 0x04	; 4
    d204:	8c 37       	cpi	r24, 0x7C	; 124
    d206:	91 05       	cpc	r25, r1
    d208:	30 f4       	brcc	.+12     	; 0xd216 <_Z6EeFsckv+0x6e>
    d20a:	f9 01       	movw	r30, r18
    d20c:	e6 55       	subi	r30, 0x56	; 86
    d20e:	fe 4f       	sbci	r31, 0xFE	; 254
    d210:	80 81       	ld	r24, Z
    d212:	88 23       	and	r24, r24
    d214:	59 f0       	breq	.+22     	; 0xd22c <_Z6EeFsckv+0x84>
          || (blk >= BLOCKS   ) //goto err_2; //bad blk index
          || (bufp[blk]       ))//goto err_3; //blk double usage
      {
        if(lastBlk){
    d216:	ff 20       	and	r15, r15
    d218:	29 f0       	breq	.+10     	; 0xd224 <_Z6EeFsckv+0x7c>
          EeFsSetLink(lastBlk,0);
    d21a:	8f 2d       	mov	r24, r15
    d21c:	60 e0       	ldi	r22, 0x00	; 0
    d21e:	0e 94 21 66 	call	0xcc42	; 0xcc42 <_ZL11EeFsSetLinkhh>
    d222:	0e c0       	rjmp	.+28     	; 0xd240 <_Z6EeFsckv+0x98>
        }else{
          *startP = 0; //interrupt chain at startpos
    d224:	18 82       	st	Y, r1
          EeFsFlush();
    d226:	0e 94 38 66 	call	0xcc70	; 0xcc70 <_ZL9EeFsFlushv>
    d22a:	0a c0       	rjmp	.+20     	; 0xd240 <_Z6EeFsckv+0x98>
        }
        blk=0; //abort
      }else{
        bufp[blk] = i+1;
    d22c:	e0 82       	st	Z, r14
        lastBlk   = blk;
    d22e:	f2 2e       	mov	r15, r18
        blk       = EeFsGetLink(blk);
    d230:	82 2f       	mov	r24, r18
    d232:	0e 94 6a 65 	call	0xcad4	; 0xcad4 <_ZL11EeFsGetLinkh>
    d236:	28 2f       	mov	r18, r24
    d238:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t *startP = i==MAXFILES ? &eeFs.freeList : &eeFs.files[i].startBlk;
    uint8_t lastBlk = 0;
    blk = *startP;
      //if(i == MAXFILES) blk = eeFs.freeList;
      //    else              blk = eeFs.files[i].startBlk;
    while(blk){
    d23a:	21 15       	cp	r18, r1
    d23c:	31 05       	cpc	r19, r1
    d23e:	01 f7       	brne	.-64     	; 0xd200 <_Z6EeFsckv+0x58>
    d240:	0f 5f       	subi	r16, 0xFF	; 255
    d242:	1f 4f       	sbci	r17, 0xFF	; 255
    d244:	83 e0       	ldi	r24, 0x03	; 3
    d246:	90 e0       	ldi	r25, 0x00	; 0
    d248:	c8 0e       	add	r12, r24
    d24a:	d9 1e       	adc	r13, r25
  bufp = (uint8_t *)&g_model ;
//  bufp = Xmem.file_buffer;
  memset(bufp,0,BLOCKS);
  uint16_t blk ;
  int8_t ret=0;
  for(uint8_t i = 0; i <= MAXFILES; i++){
    d24c:	05 31       	cpi	r16, 0x15	; 21
    d24e:	11 05       	cpc	r17, r1
    d250:	09 f0       	breq	.+2      	; 0xd254 <_Z6EeFsckv+0xac>
    d252:	bf cf       	rjmp	.-130    	; 0xd1d2 <_Z6EeFsckv+0x2a>
    d254:	c4 e0       	ldi	r28, 0x04	; 4
    d256:	d0 e0       	ldi	r29, 0x00	; 0
        blk       = EeFsGetLink(blk);
      }
    }
  }
  for(blk = FIRSTBLK; blk < BLOCKS; blk++){
    if(bufp[blk]==0) {       //goto err_4; //unused block
    d258:	fe 01       	movw	r30, r28
    d25a:	e6 55       	subi	r30, 0x56	; 86
    d25c:	fe 4f       	sbci	r31, 0xFE	; 254
    d25e:	80 81       	ld	r24, Z
    d260:	88 23       	and	r24, r24
    d262:	49 f4       	brne	.+18     	; 0xd276 <_Z6EeFsckv+0xce>
      EeFsSetLink(blk,eeFs.freeList);
    d264:	8c 2f       	mov	r24, r28
    d266:	60 91 07 09 	lds	r22, 0x0907
    d26a:	0e 94 21 66 	call	0xcc42	; 0xcc42 <_ZL11EeFsSetLinkhh>
      eeFs.freeList = blk; //chain in front
    d26e:	c0 93 07 09 	sts	0x0907, r28
      EeFsFlushFreelist();
    d272:	0e 94 80 66 	call	0xcd00	; 0xcd00 <_ZL17EeFsFlushFreelistv>
        lastBlk   = blk;
        blk       = EeFsGetLink(blk);
      }
    }
  }
  for(blk = FIRSTBLK; blk < BLOCKS; blk++){
    d276:	21 96       	adiw	r28, 0x01	; 1
    d278:	c0 38       	cpi	r28, 0x80	; 128
    d27a:	d1 05       	cpc	r29, r1
    d27c:	69 f7       	brne	.-38     	; 0xd258 <_Z6EeFsckv+0xb0>
    //err_3: ret--;
    //    err_2: ret--;
    //    err_1: ret--;
  //  }
  return ret;
}
    d27e:	80 e0       	ldi	r24, 0x00	; 0
    d280:	df 91       	pop	r29
    d282:	cf 91       	pop	r28
    d284:	1f 91       	pop	r17
    d286:	0f 91       	pop	r16
    d288:	ff 90       	pop	r15
    d28a:	ef 90       	pop	r14
    d28c:	df 90       	pop	r13
    d28e:	cf 90       	pop	r12
    d290:	08 95       	ret

0000d292 <_Z7lcd_imghhPKhh>:
    //att |= g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0;
	putsVolts(x, y, g_vbat100mV, att);
}


void lcd_img(uint8_t i_x,uint8_t i_y,const prog_uchar * imgdat,uint8_t idx/*,uint8_t mode*/)
    d292:	0f 93       	push	r16
    d294:	1f 93       	push	r17
    d296:	cf 93       	push	r28
    d298:	df 93       	push	r29
    d29a:	fa 01       	movw	r30, r20
{
  const prog_uchar  *q = imgdat;

  uint8_t w    = pgm_read_byte(q++);
    d29c:	4f 5f       	subi	r20, 0xFF	; 255
    d29e:	5f 4f       	sbci	r21, 0xFF	; 255
    d2a0:	04 91       	lpm	r16, Z+
  uint8_t hb   = pgm_read_byte(q++) ;
    d2a2:	da 01       	movw	r26, r20
    d2a4:	11 96       	adiw	r26, 0x01	; 1
    d2a6:	fa 01       	movw	r30, r20
    d2a8:	14 91       	lpm	r17, Z+
	hb += 7 ;
    d2aa:	19 5f       	subi	r17, 0xF9	; 249
	hb /= 8 ;
    d2ac:	16 95       	lsr	r17
    d2ae:	16 95       	lsr	r17
    d2b0:	16 95       	lsr	r17
  uint8_t sze1 = pgm_read_byte(q++);
    d2b2:	fd 01       	movw	r30, r26
    d2b4:	94 91       	lpm	r25, Z+
  q += idx*sze1;
    d2b6:	92 9f       	mul	r25, r18
    d2b8:	a0 01       	movw	r20, r0
    d2ba:	11 24       	eor	r1, r1

  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = pgm_read_byte(q++) ;
	hb += 7 ;
	hb /= 8 ;
  uint8_t sze1 = pgm_read_byte(q++);
    d2bc:	11 96       	adiw	r26, 0x01	; 1
  q += idx*sze1;
    d2be:	4a 0f       	add	r20, r26
    d2c0:	5b 1f       	adc	r21, r27
    d2c2:	66 95       	lsr	r22
    d2c4:	66 95       	lsr	r22
    d2c6:	66 95       	lsr	r22
    d2c8:	70 e0       	ldi	r23, 0x00	; 0
    d2ca:	76 95       	lsr	r23
    d2cc:	76 2f       	mov	r23, r22
    d2ce:	66 27       	eor	r22, r22
    d2d0:	77 95       	ror	r23
    d2d2:	67 95       	ror	r22
    d2d4:	68 0f       	add	r22, r24
    d2d6:	71 1d       	adc	r23, r1
    d2d8:	90 e0       	ldi	r25, 0x00	; 0
    //att |= g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0;
	putsVolts(x, y, g_vbat100mV, att);
}


void lcd_img(uint8_t i_x,uint8_t i_y,const prog_uchar * imgdat,uint8_t idx/*,uint8_t mode*/)
    d2da:	c0 2f       	mov	r28, r16
    d2dc:	d0 e0       	ldi	r29, 0x00	; 0
    d2de:	13 c0       	rjmp	.+38     	; 0xd306 <_Z7lcd_imghhPKhh+0x74>
	hb /= 8 ;
  uint8_t sze1 = pgm_read_byte(q++);
  q += idx*sze1;
//  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  for(uint8_t yb = 0; yb < hb; yb++){
    uint8_t   *p = &displayBuf[ (i_y / 8 + yb) * DISPLAY_W + i_x ];
    d2e0:	db 01       	movw	r26, r22
    d2e2:	aa 5b       	subi	r26, 0xBA	; 186
    d2e4:	b6 4f       	sbci	r27, 0xF6	; 246
    d2e6:	9a 01       	movw	r18, r20
    d2e8:	05 c0       	rjmp	.+10     	; 0xd2f4 <_Z7lcd_imghhPKhh+0x62>
    for(uint8_t x=0; x < w; x++){
    d2ea:	f9 01       	movw	r30, r18
      uint8_t b = pgm_read_byte(q++);
    d2ec:	2f 5f       	subi	r18, 0xFF	; 255
    d2ee:	3f 4f       	sbci	r19, 0xFF	; 255
    d2f0:	e4 91       	lpm	r30, Z+
      *p++ = b;
    d2f2:	ed 93       	st	X+, r30
  uint8_t sze1 = pgm_read_byte(q++);
  q += idx*sze1;
//  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  for(uint8_t yb = 0; yb < hb; yb++){
    uint8_t   *p = &displayBuf[ (i_y / 8 + yb) * DISPLAY_W + i_x ];
    for(uint8_t x=0; x < w; x++){
    d2f4:	82 2f       	mov	r24, r18
    d2f6:	84 1b       	sub	r24, r20
    d2f8:	80 17       	cp	r24, r16
    d2fa:	b8 f3       	brcs	.-18     	; 0xd2ea <_Z7lcd_imghhPKhh+0x58>
    //att |= g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0;
	putsVolts(x, y, g_vbat100mV, att);
}


void lcd_img(uint8_t i_x,uint8_t i_y,const prog_uchar * imgdat,uint8_t idx/*,uint8_t mode*/)
    d2fc:	4c 0f       	add	r20, r28
    d2fe:	5d 1f       	adc	r21, r29
	hb += 7 ;
	hb /= 8 ;
  uint8_t sze1 = pgm_read_byte(q++);
  q += idx*sze1;
//  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  for(uint8_t yb = 0; yb < hb; yb++){
    d300:	9f 5f       	subi	r25, 0xFF	; 255
    d302:	60 58       	subi	r22, 0x80	; 128
    d304:	7f 4f       	sbci	r23, 0xFF	; 255
    d306:	91 17       	cp	r25, r17
    d308:	58 f3       	brcs	.-42     	; 0xd2e0 <_Z7lcd_imghhPKhh+0x4e>
      uint8_t b = pgm_read_byte(q++);
      *p++ = b;
      //*p++ = inv ? ~b : b;
    }
  }
}
    d30a:	df 91       	pop	r29
    d30c:	cf 91       	pop	r28
    d30e:	1f 91       	pop	r17
    d310:	0f 91       	pop	r16
    d312:	08 95       	ret

0000d314 <_Z11lcd_putcAtthhch>:
{
  return lcd_putcAtt(x,y,c,0);
}

// invers: 0 no 1=yes 2=blink
uint8_t lcd_putcAtt(uint8_t x,uint8_t y,const char c,uint8_t mode)
    d314:	cf 93       	push	r28
    d316:	df 93       	push	r29
    d318:	58 2f       	mov	r21, r24
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
    //uint8_t *pmax = &displayBuf[ DISPLAY_H/8 * DISPLAY_W ];
		if ( c < 22 )		// Move to specific x position (c)*FW
    d31a:	46 31       	cpi	r20, 0x16	; 22
    d31c:	2c f4       	brge	.+10     	; 0xd328 <_Z11lcd_putcAtthhch+0x14>
		{
			x = c * FW ;
    d31e:	86 e0       	ldi	r24, 0x06	; 6
    d320:	48 9f       	mul	r20, r24
    d322:	70 2d       	mov	r23, r0
    d324:	11 24       	eor	r1, r1
    d326:	92 c0       	rjmp	.+292    	; 0xd44c <_Z11lcd_putcAtthhch+0x138>
//			{
//				x += x ;
//			}
			return x ;
		}
		x += FW ;
    d328:	78 2f       	mov	r23, r24
    d32a:	7a 5f       	subi	r23, 0xFA	; 250
    const prog_uchar    *q = &font_5x8_x20_x7f[(c-0x20)*5];
    bool         inv = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
    d32c:	20 ff       	sbrs	r18, 0
    d32e:	02 c0       	rjmp	.+4      	; 0xd334 <_Z11lcd_putcAtthhch+0x20>
    d330:	31 e0       	ldi	r19, 0x01	; 1
    d332:	0e c0       	rjmp	.+28     	; 0xd350 <_Z11lcd_putcAtthhch+0x3c>
    d334:	21 fd       	sbrc	r18, 1
    d336:	02 c0       	rjmp	.+4      	; 0xd33c <_Z11lcd_putcAtthhch+0x28>
    d338:	30 e0       	ldi	r19, 0x00	; 0
    d33a:	0a c0       	rjmp	.+20     	; 0xd350 <_Z11lcd_putcAtthhch+0x3c>
    d33c:	80 91 79 0d 	lds	r24, 0x0D79
    d340:	90 e0       	ldi	r25, 0x00	; 0
    d342:	e6 e0       	ldi	r30, 0x06	; 6
    d344:	96 95       	lsr	r25
    d346:	87 95       	ror	r24
    d348:	ea 95       	dec	r30
    d34a:	e1 f7       	brne	.-8      	; 0xd344 <_Z11lcd_putcAtthhch+0x30>
    d34c:	38 2f       	mov	r19, r24
    d34e:	31 70       	andi	r19, 0x01	; 1

// invers: 0 no 1=yes 2=blink
uint8_t lcd_putcAtt(uint8_t x,uint8_t y,const char c,uint8_t mode)
{
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    d350:	a6 2f       	mov	r26, r22
    d352:	b0 e0       	ldi	r27, 0x00	; 0
    d354:	a8 7f       	andi	r26, 0xF8	; 248
    d356:	b0 70       	andi	r27, 0x00	; 0
    d358:	64 e0       	ldi	r22, 0x04	; 4
    d35a:	aa 0f       	add	r26, r26
    d35c:	bb 1f       	adc	r27, r27
    d35e:	6a 95       	dec	r22
    d360:	e1 f7       	brne	.-8      	; 0xd35a <_Z11lcd_putcAtthhch+0x46>
    d362:	a5 0f       	add	r26, r21
    d364:	b1 1d       	adc	r27, r1
    d366:	ed 01       	movw	r28, r26
    d368:	ca 5b       	subi	r28, 0xBA	; 186
    d36a:	d6 4f       	sbci	r29, 0xF6	; 246
			return x ;
		}
		x += FW ;
    const prog_uchar    *q = &font_5x8_x20_x7f[(c-0x20)*5];
    bool         inv = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
	if(mode&DBLSIZE)
    d36c:	22 ff       	sbrs	r18, 2
    d36e:	3d c0       	rjmp	.+122    	; 0xd3ea <_Z11lcd_putcAtthhch+0xd6>
  {
		if ( (c!=0x2E)) x+=FW; //check for decimal point
    d370:	4e 32       	cpi	r20, 0x2E	; 46
    d372:	09 f0       	breq	.+2      	; 0xd376 <_Z11lcd_putcAtthhch+0x62>
    d374:	7a 5f       	subi	r23, 0xFA	; 250
	 * five bottom by ten bottom bytes (20 bytes per 
	 * char) */
		  unsigned char c_mapped ;

#ifdef DBL_FONT_SMALL
			if ( c >= ',' && c <= ':' )
    d376:	84 2f       	mov	r24, r20
    d378:	8c 52       	subi	r24, 0x2C	; 44
    d37a:	8f 30       	cpi	r24, 0x0F	; 15
    d37c:	10 f4       	brcc	.+4      	; 0xd382 <_Z11lcd_putcAtthhch+0x6e>
			{
				c_mapped = c - ',' + 1 ;		
    d37e:	4b 52       	subi	r20, 0x2B	; 43
    d380:	11 c0       	rjmp	.+34     	; 0xd3a4 <_Z11lcd_putcAtthhch+0x90>
			}
  		else if (c>='A' && c<='Z')
    d382:	84 2f       	mov	r24, r20
    d384:	81 54       	subi	r24, 0x41	; 65
    d386:	8a 31       	cpi	r24, 0x1A	; 26
    d388:	10 f4       	brcc	.+4      	; 0xd38e <_Z11lcd_putcAtthhch+0x7a>
			{
				c_mapped = c - 'A' + 0x10 ;
    d38a:	41 53       	subi	r20, 0x31	; 49
    d38c:	0b c0       	rjmp	.+22     	; 0xd3a4 <_Z11lcd_putcAtthhch+0x90>
			}
  		else if (c>='a' && c<='z')
    d38e:	84 2f       	mov	r24, r20
    d390:	81 56       	subi	r24, 0x61	; 97
    d392:	8a 31       	cpi	r24, 0x1A	; 26
    d394:	10 f4       	brcc	.+4      	; 0xd39a <_Z11lcd_putcAtthhch+0x86>
			{
				c_mapped = c - 'a' + 0x2B ;
    d396:	46 53       	subi	r20, 0x36	; 54
    d398:	05 c0       	rjmp	.+10     	; 0xd3a4 <_Z11lcd_putcAtthhch+0x90>
			}
  		else if (c=='_' )
    d39a:	4f 35       	cpi	r20, 0x5F	; 95
    d39c:	11 f0       	breq	.+4      	; 0xd3a2 <_Z11lcd_putcAtthhch+0x8e>
    d39e:	40 e0       	ldi	r20, 0x00	; 0
    d3a0:	01 c0       	rjmp	.+2      	; 0xd3a4 <_Z11lcd_putcAtthhch+0x90>
    d3a2:	4a e2       	ldi	r20, 0x2A	; 42
				c_mapped = 0 ;
			}
#else
			c_mapped = c - 0x20 ;
#endif
        q = &font_10x16_x20_x7f[(c_mapped)*20] ;// + ((c-0x20)/16)*160];
    d3a4:	84 e1       	ldi	r24, 0x14	; 20
    d3a6:	48 9f       	mul	r20, r24
    d3a8:	f0 01       	movw	r30, r0
    d3aa:	11 24       	eor	r1, r1
    d3ac:	e0 5a       	subi	r30, 0xA0	; 160
    d3ae:	fc 4e       	sbci	r31, 0xEC	; 236
    d3b0:	2b e0       	ldi	r18, 0x0B	; 11
        for(char i=11; i>=0; i--){
	    /*top byte*/
            uint8_t b1 = i>1 ? pgm_read_byte(q) : 0;
    d3b2:	22 30       	cpi	r18, 0x02	; 2
    d3b4:	1c f4       	brge	.+6      	; 0xd3bc <_Z11lcd_putcAtthhch+0xa8>
    d3b6:	90 e0       	ldi	r25, 0x00	; 0
    d3b8:	80 e0       	ldi	r24, 0x00	; 0
    d3ba:	04 c0       	rjmp	.+8      	; 0xd3c4 <_Z11lcd_putcAtthhch+0xb0>
    d3bc:	84 91       	lpm	r24, Z+
	    /*bottom byte*/
            uint8_t b3 = i>1 ? pgm_read_byte(10+q) : 0;
    d3be:	3a 96       	adiw	r30, 0x0a	; 10
    d3c0:	94 91       	lpm	r25, Z+
    d3c2:	3a 97       	sbiw	r30, 0x0a	; 10
	    /*top byte*/
//            uint8_t b2 = i>0 ? pgm_read_byte(++q) : 0;
	    /*bottom byte*/
//            uint8_t b4 = i>0 ? pgm_read_byte(10+q) : 0;
            q++;
            if(inv) {
    d3c4:	33 23       	and	r19, r19
    d3c6:	11 f0       	breq	.+4      	; 0xd3cc <_Z11lcd_putcAtthhch+0xb8>
                b1=~b1;
    d3c8:	80 95       	com	r24
//                b2=~b2;
                b3=~b3;
    d3ca:	90 95       	com	r25
//                b4=~b4;
            }

            if(p < DISPLAY_END-(DISPLAY_W+1)){
    d3cc:	4c e0       	ldi	r20, 0x0C	; 12
    d3ce:	c5 3c       	cpi	r28, 0xC5	; 197
    d3d0:	d4 07       	cpc	r29, r20
    d3d2:	30 f4       	brcc	.+12     	; 0xd3e0 <_Z11lcd_putcAtthhch+0xcc>
                p[0]=b1;
    d3d4:	88 83       	st	Y, r24
//                p[1]=b2;
                p[DISPLAY_W] = b3;
    d3d6:	c0 58       	subi	r28, 0x80	; 128
    d3d8:	df 4f       	sbci	r29, 0xFF	; 255
    d3da:	98 83       	st	Y, r25
//                p[DISPLAY_W+1] = b4;
                p+=1;
    d3dc:	cf 57       	subi	r28, 0x7F	; 127
    d3de:	d0 40       	sbci	r29, 0x00	; 0
			}
#else
			c_mapped = c - 0x20 ;
#endif
        q = &font_10x16_x20_x7f[(c_mapped)*20] ;// + ((c-0x20)/16)*160];
        for(char i=11; i>=0; i--){
    d3e0:	21 50       	subi	r18, 0x01	; 1
    d3e2:	2f 3f       	cpi	r18, 0xFF	; 255
    d3e4:	99 f1       	breq	.+102    	; 0xd44c <_Z11lcd_putcAtthhch+0x138>
            uint8_t b3 = i>1 ? pgm_read_byte(10+q) : 0;
	    /*top byte*/
//            uint8_t b2 = i>0 ? pgm_read_byte(++q) : 0;
	    /*bottom byte*/
//            uint8_t b4 = i>0 ? pgm_read_byte(10+q) : 0;
            q++;
    d3e6:	31 96       	adiw	r30, 0x01	; 1
    d3e8:	e4 cf       	rjmp	.-56     	; 0xd3b2 <_Z11lcd_putcAtthhch+0x9e>
  }
  else
  {
		uint8_t condense=0;

		if (mode & CONDENSED)
    d3ea:	23 fd       	sbrc	r18, 3
    d3ec:	02 c0       	rjmp	.+4      	; 0xd3f2 <_Z11lcd_putcAtthhch+0xde>
    d3ee:	20 e0       	ldi	r18, 0x00	; 0
    d3f0:	0b c0       	rjmp	.+22     	; 0xd408 <_Z11lcd_putcAtthhch+0xf4>
		{
			*p = inv ? ~0 : 0;
    d3f2:	33 23       	and	r19, r19
    d3f4:	11 f4       	brne	.+4      	; 0xd3fa <_Z11lcd_putcAtthhch+0xe6>
    d3f6:	80 e0       	ldi	r24, 0x00	; 0
    d3f8:	01 c0       	rjmp	.+2      	; 0xd3fc <_Z11lcd_putcAtthhch+0xe8>
    d3fa:	8f ef       	ldi	r24, 0xFF	; 255
    d3fc:	aa 5b       	subi	r26, 0xBA	; 186
    d3fe:	b6 4f       	sbci	r27, 0xF6	; 246
    d400:	8c 93       	st	X, r24
			p += 1 ;
    d402:	21 96       	adiw	r28, 0x01	; 1
			condense=1;
			x += FWNUM-FW ;
    d404:	71 50       	subi	r23, 0x01	; 1
    d406:	21 e0       	ldi	r18, 0x01	; 1
//				x += x ;
//			}
			return x ;
		}
		x += FW ;
    const prog_uchar    *q = &font_5x8_x20_x7f[(c-0x20)*5];
    d408:	85 e0       	ldi	r24, 0x05	; 5
    d40a:	48 02       	muls	r20, r24
    d40c:	a0 01       	movw	r20, r0
    d40e:	11 24       	eor	r1, r1
    d410:	40 52       	subi	r20, 0x20	; 32
    d412:	5f 4e       	sbci	r21, 0xEF	; 239
    d414:	95 e0       	ldi	r25, 0x05	; 5
    d416:	fa 01       	movw	r30, r20
			condense=1;
			x += FWNUM-FW ;
		}

        for(char i=5; i!=0; i--){
            uint8_t b = pgm_read_byte(q++);
    d418:	4f 5f       	subi	r20, 0xFF	; 255
    d41a:	5f 4f       	sbci	r21, 0xFF	; 255
    d41c:	84 91       	lpm	r24, Z+
    	    if (condense && i==4) {
    d41e:	22 23       	and	r18, r18
    d420:	11 f0       	breq	.+4      	; 0xd426 <_Z11lcd_putcAtthhch+0x112>
    d422:	94 30       	cpi	r25, 0x04	; 4
    d424:	39 f0       	breq	.+14     	; 0xd434 <_Z11lcd_putcAtthhch+0x120>
                /*condense the letter by skipping column 4 */
                continue;
            }
            if(p<DISPLAY_END) {*p = inv ? ~b : b; p += 1 ; }
    d426:	6d e0       	ldi	r22, 0x0D	; 13
    d428:	c6 34       	cpi	r28, 0x46	; 70
    d42a:	d6 07       	cpc	r29, r22
    d42c:	18 f4       	brcc	.+6      	; 0xd434 <_Z11lcd_putcAtthhch+0x120>
    d42e:	31 11       	cpse	r19, r1
    d430:	80 95       	com	r24
    d432:	89 93       	st	Y+, r24
			p += 1 ;
			condense=1;
			x += FWNUM-FW ;
		}

        for(char i=5; i!=0; i--){
    d434:	91 50       	subi	r25, 0x01	; 1
    d436:	79 f7       	brne	.-34     	; 0xd416 <_Z11lcd_putcAtthhch+0x102>
                /*condense the letter by skipping column 4 */
                continue;
            }
            if(p<DISPLAY_END) {*p = inv ? ~b : b; p += 1 ; }
        }
        if(p<DISPLAY_END) *p++ = inv ? ~0 : 0;
    d438:	8d e0       	ldi	r24, 0x0D	; 13
    d43a:	c6 34       	cpi	r28, 0x46	; 70
    d43c:	d8 07       	cpc	r29, r24
    d43e:	30 f4       	brcc	.+12     	; 0xd44c <_Z11lcd_putcAtthhch+0x138>
    d440:	33 23       	and	r19, r19
    d442:	11 f4       	brne	.+4      	; 0xd448 <_Z11lcd_putcAtthhch+0x134>
    d444:	80 e0       	ldi	r24, 0x00	; 0
    d446:	01 c0       	rjmp	.+2      	; 0xd44a <_Z11lcd_putcAtthhch+0x136>
    d448:	8f ef       	ldi	r24, 0xFF	; 255
    d44a:	88 83       	st	Y, r24
    }
		return x ;
}
    d44c:	87 2f       	mov	r24, r23
    d44e:	df 91       	pop	r29
    d450:	cf 91       	pop	r28
    d452:	08 95       	ret

0000d454 <_Z8lcd_putchhc>:
  }
}

uint8_t lcd_putc(uint8_t x,uint8_t y,const char c )
{
  return lcd_putcAtt(x,y,c,0);
    d454:	20 e0       	ldi	r18, 0x00	; 0
    d456:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
}
    d45a:	08 95       	ret

0000d45c <_Z12lcd_putsnAtthhPKchh>:
//	uint8_t x = 20 - pgm_read_byte(s) ;
//	lcd_putsAttIdx( x, y, s, idx, att ) ;
//}

//uint8_t lcd_putsnAtt(uint8_t x,uint8_t y,const prog_char * s,uint8_t len,uint8_t mode)
void lcd_putsnAtt(uint8_t x,uint8_t y,const prog_char * s,uint8_t len,uint8_t mode)
    d45c:	ef 92       	push	r14
    d45e:	ff 92       	push	r15
    d460:	0f 93       	push	r16
    d462:	1f 93       	push	r17
    d464:	cf 93       	push	r28
    d466:	df 93       	push	r29
    d468:	38 2f       	mov	r19, r24
    d46a:	e6 2e       	mov	r14, r22
    d46c:	12 2f       	mov	r17, r18
{
	uint8_t source ;
	source = mode & BSS ;
    d46e:	f0 e1       	ldi	r31, 0x10	; 16
    d470:	ff 2e       	mov	r15, r31
    d472:	f0 22       	and	r15, r16
    d474:	ea 01       	movw	r28, r20
    d476:	10 c0       	rjmp	.+32     	; 0xd498 <_Z12lcd_putsnAtthhPKchh+0x3c>
//	size = mode & DBLSIZE ;
  while(len!=0) {
    char c = (source) ? *s++ : pgm_read_byte(s++);
    d478:	ff 20       	and	r15, r15
    d47a:	11 f0       	breq	.+4      	; 0xd480 <_Z12lcd_putsnAtthhPKchh+0x24>
    d47c:	48 81       	ld	r20, Y
    d47e:	02 c0       	rjmp	.+4      	; 0xd484 <_Z12lcd_putsnAtthhPKchh+0x28>
    d480:	fe 01       	movw	r30, r28
    d482:	44 91       	lpm	r20, Z+
    d484:	21 96       	adiw	r28, 0x01	; 1
		if ( c == 0 )
    d486:	44 23       	and	r20, r20
    d488:	49 f0       	breq	.+18     	; 0xd49c <_Z12lcd_putsnAtthhPKchh+0x40>
		{
			return ;
		}
    x = lcd_putcAtt(x,y,c,mode);
    d48a:	83 2f       	mov	r24, r19
    d48c:	6e 2d       	mov	r22, r14
    d48e:	20 2f       	mov	r18, r16
    d490:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
    d494:	38 2f       	mov	r19, r24
//    x+=FW;
//		if ((size)&& (c!=0x2E)) x+=FW; //check for decimal point
    len--;
    d496:	11 50       	subi	r17, 0x01	; 1
void lcd_putsnAtt(uint8_t x,uint8_t y,const prog_char * s,uint8_t len,uint8_t mode)
{
	uint8_t source ;
	source = mode & BSS ;
//	size = mode & DBLSIZE ;
  while(len!=0) {
    d498:	11 23       	and	r17, r17
    d49a:	71 f7       	brne	.-36     	; 0xd478 <_Z12lcd_putsnAtthhPKchh+0x1c>
    x = lcd_putcAtt(x,y,c,mode);
//    x+=FW;
//		if ((size)&& (c!=0x2E)) x+=FW; //check for decimal point
    len--;
  }
}
    d49c:	df 91       	pop	r29
    d49e:	cf 91       	pop	r28
    d4a0:	1f 91       	pop	r17
    d4a2:	0f 91       	pop	r16
    d4a4:	ff 90       	pop	r15
    d4a6:	ef 90       	pop	r14
    d4a8:	08 95       	ret

0000d4aa <_Z14lcd_putsAttIdxhhPKchh>:

// Puts sub-string from string options
// First byte of string is sub-string length
// idx is index into string (in length units)
// Output length characters
void lcd_putsAttIdx(uint8_t x,uint8_t y,const prog_char * s,uint8_t idx,uint8_t att)
    d4aa:	0f 93       	push	r16
    d4ac:	fa 01       	movw	r30, r20
    d4ae:	42 2f       	mov	r20, r18
{
	uint8_t length ;
	length = pgm_read_byte(s++) ;
    d4b0:	24 91       	lpm	r18, Z+

  lcd_putsnAtt(x,y,s+length*idx,length,att) ;
    d4b2:	31 96       	adiw	r30, 0x01	; 1
    d4b4:	24 9f       	mul	r18, r20
    d4b6:	a0 01       	movw	r20, r0
    d4b8:	11 24       	eor	r1, r1
    d4ba:	4e 0f       	add	r20, r30
    d4bc:	5f 1f       	adc	r21, r31
    d4be:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
}
    d4c2:	0f 91       	pop	r16
    d4c4:	08 95       	ret

0000d4c6 <_Z11lcd_putsn_PhhPKch>:
//    x+=FW;
//		if ((size)&& (c!=0x2E)) x+=FW; //check for decimal point
    len--;
  }
}
void lcd_putsn_P(uint8_t x,uint8_t y,const prog_char * s,uint8_t len)
    d4c6:	0f 93       	push	r16
{
  lcd_putsnAtt( x,y,s,len,0);
    d4c8:	00 e0       	ldi	r16, 0x00	; 0
    d4ca:	0e 94 2e 6a 	call	0xd45c	; 0xd45c <_Z12lcd_putsnAtthhPKchh>
}
    d4ce:	0f 91       	pop	r16
    d4d0:	08 95       	ret

0000d4d2 <_Z11lcd_putsAtthhPKch>:


uint8_t lcd_putsAtt(uint8_t x,uint8_t y,const prog_char * s,uint8_t mode)
    d4d2:	ff 92       	push	r15
    d4d4:	0f 93       	push	r16
    d4d6:	1f 93       	push	r17
    d4d8:	cf 93       	push	r28
    d4da:	df 93       	push	r29
    d4dc:	38 2f       	mov	r19, r24
    d4de:	16 2f       	mov	r17, r22
    d4e0:	02 2f       	mov	r16, r18
{
	uint8_t source ;
	source = mode & BSS ;
    d4e2:	a0 e1       	ldi	r26, 0x10	; 16
    d4e4:	fa 2e       	mov	r15, r26
    d4e6:	f2 22       	and	r15, r18
    d4e8:	ea 01       	movw	r28, r20
    d4ea:	02 c0       	rjmp	.+4      	; 0xd4f0 <_Z11lcd_putsAtthhPKch+0x1e>
    d4ec:	30 e0       	ldi	r19, 0x00	; 0
    d4ee:	21 96       	adiw	r28, 0x01	; 1
  while(1)
	{
    char c = (source) ? *s++ : pgm_read_byte(s++);
    d4f0:	ff 20       	and	r15, r15
    d4f2:	11 f0       	breq	.+4      	; 0xd4f8 <_Z11lcd_putsAtthhPKch+0x26>
    d4f4:	48 81       	ld	r20, Y
    d4f6:	02 c0       	rjmp	.+4      	; 0xd4fc <_Z11lcd_putsAtthhPKch+0x2a>
    d4f8:	fe 01       	movw	r30, r28
    d4fa:	44 91       	lpm	r20, Z+
    if(!c) break;
    d4fc:	44 23       	and	r20, r20
    d4fe:	69 f0       	breq	.+26     	; 0xd51a <_Z11lcd_putsAtthhPKch+0x48>
		if ( c == 31 )
    d500:	4f 31       	cpi	r20, 0x1F	; 31
    d502:	21 f4       	brne	.+8      	; 0xd50c <_Z11lcd_putsAtthhPKch+0x3a>
		{
			if ( (y += FH) >= DISPLAY_H )	// Screen height
    d504:	18 5f       	subi	r17, 0xF8	; 248
    d506:	10 34       	cpi	r17, 0x40	; 64
    d508:	88 f3       	brcs	.-30     	; 0xd4ec <_Z11lcd_putsAtthhPKch+0x1a>
    d50a:	07 c0       	rjmp	.+14     	; 0xd51a <_Z11lcd_putsAtthhPKch+0x48>
			}	
			x = 0 ;
		}
		else
		{
    	x = lcd_putcAtt(x,y,c,mode) ;
    d50c:	83 2f       	mov	r24, r19
    d50e:	61 2f       	mov	r22, r17
    d510:	20 2f       	mov	r18, r16
    d512:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
    d516:	38 2f       	mov	r19, r24
    d518:	ea cf       	rjmp	.-44     	; 0xd4ee <_Z11lcd_putsAtthhPKch+0x1c>
		}
//    x+=FW;
//		if ((size)&& (c!=0x2E)) x+=FW; //check for decimal point
  }
  return x;
}
    d51a:	83 2f       	mov	r24, r19
    d51c:	df 91       	pop	r29
    d51e:	cf 91       	pop	r28
    d520:	1f 91       	pop	r17
    d522:	0f 91       	pop	r16
    d524:	ff 90       	pop	r15
    d526:	08 95       	ret

0000d528 <_Z14lcd_puts_PlefthPKc>:

void lcd_puts_Pleft(uint8_t y,const prog_char * s)
    d528:	98 2f       	mov	r25, r24
    d52a:	ab 01       	movw	r20, r22
{
  lcd_putsAtt( 0, y, s, 0);
    d52c:	80 e0       	ldi	r24, 0x00	; 0
    d52e:	69 2f       	mov	r22, r25
    d530:	20 e0       	ldi	r18, 0x00	; 0
    d532:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
}
    d536:	08 95       	ret

0000d538 <_Z14lcd_puts_PskiphPKch>:

// This routine skips 'skip' strings, then displays the rest
void lcd_puts_Pskip(uint8_t y,const prog_char * s, uint8_t skip)
    d538:	98 2f       	mov	r25, r24
    d53a:	fb 01       	movw	r30, r22
    d53c:	07 c0       	rjmp	.+14     	; 0xd54c <_Z14lcd_puts_PskiphPKch+0x14>
{
	while ( skip )
	{
    char c = pgm_read_byte(s++);
    d53e:	84 91       	lpm	r24, Z+
    if(!c) return ;
    d540:	88 23       	and	r24, r24
    d542:	61 f0       	breq	.+24     	; 0xd55c <_Z14lcd_puts_PskiphPKch+0x24>
		if ( c == 31 )
    d544:	8f 31       	cpi	r24, 0x1F	; 31
    d546:	09 f4       	brne	.+2      	; 0xd54a <_Z14lcd_puts_PskiphPKch+0x12>
		{
			skip -= 1 ;
    d548:	41 50       	subi	r20, 0x01	; 1
// This routine skips 'skip' strings, then displays the rest
void lcd_puts_Pskip(uint8_t y,const prog_char * s, uint8_t skip)
{
	while ( skip )
	{
    char c = pgm_read_byte(s++);
    d54a:	31 96       	adiw	r30, 0x01	; 1
}

// This routine skips 'skip' strings, then displays the rest
void lcd_puts_Pskip(uint8_t y,const prog_char * s, uint8_t skip)
{
	while ( skip )
    d54c:	44 23       	and	r20, r20
    d54e:	b9 f7       	brne	.-18     	; 0xd53e <_Z14lcd_puts_PskiphPKch+0x6>
		if ( c == 31 )
		{
			skip -= 1 ;
		}
	}
  lcd_putsAtt( 0, y, s, 0);
    d550:	80 e0       	ldi	r24, 0x00	; 0
    d552:	69 2f       	mov	r22, r25
    d554:	af 01       	movw	r20, r30
    d556:	20 e0       	ldi	r18, 0x00	; 0
    d558:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
    d55c:	08 95       	ret

0000d55e <_Z10lcd_puts_PhhPKc>:
}

void lcd_puts_P(uint8_t x,uint8_t y,const prog_char * s)
{
  lcd_putsAtt( x, y, s, 0);
    d55e:	20 e0       	ldi	r18, 0x00	; 0
    d560:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <_Z11lcd_putsAtthhPKch>
}
    d564:	08 95       	ret

0000d566 <_Z11lcd_outhex4hhj>:


void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
    d566:	ff 92       	push	r15
    d568:	0f 93       	push	r16
    d56a:	1f 93       	push	r17
    d56c:	cf 93       	push	r28
    d56e:	df 93       	push	r29
    d570:	08 2f       	mov	r16, r24
    d572:	f6 2e       	mov	r15, r22
    d574:	ea 01       	movw	r28, r20
{
	uint8_t i ;
  x+=FWNUM*4;
    d576:	18 2f       	mov	r17, r24
    d578:	1c 5e       	subi	r17, 0xEC	; 236
  for(i=0; i<4; i++)
  {
    x-=FWNUM;
    d57a:	15 50       	subi	r17, 0x05	; 5
    char c = val & 0xf;
    d57c:	ce 01       	movw	r24, r28
    d57e:	8f 70       	andi	r24, 0x0F	; 15
    d580:	48 2f       	mov	r20, r24
    c = c>9 ? c+'A'-10 : c+'0';
    d582:	8a 30       	cpi	r24, 0x0A	; 10
    d584:	1c f0       	brlt	.+6      	; 0xd58c <_Z11lcd_outhex4hhj+0x26>
    d586:	49 5c       	subi	r20, 0xC9	; 201
    d588:	28 e0       	ldi	r18, 0x08	; 8
    d58a:	02 c0       	rjmp	.+4      	; 0xd590 <_Z11lcd_outhex4hhj+0x2a>
    d58c:	40 5d       	subi	r20, 0xD0	; 208
    d58e:	20 e0       	ldi	r18, 0x00	; 0
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    d590:	81 2f       	mov	r24, r17
    d592:	6f 2d       	mov	r22, r15
    d594:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>

void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
	uint8_t i ;
  x+=FWNUM*4;
  for(i=0; i<4; i++)
    d598:	10 17       	cp	r17, r16
    d59a:	31 f0       	breq	.+12     	; 0xd5a8 <_Z11lcd_outhex4hhj+0x42>
  {
    x-=FWNUM;
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    val>>=4;
    d59c:	b4 e0       	ldi	r27, 0x04	; 4
    d59e:	d6 95       	lsr	r29
    d5a0:	c7 95       	ror	r28
    d5a2:	ba 95       	dec	r27
    d5a4:	e1 f7       	brne	.-8      	; 0xd59e <_Z11lcd_outhex4hhj+0x38>
    d5a6:	e9 cf       	rjmp	.-46     	; 0xd57a <_Z11lcd_outhex4hhj+0x14>
  }
}
    d5a8:	df 91       	pop	r29
    d5aa:	cf 91       	pop	r28
    d5ac:	1f 91       	pop	r17
    d5ae:	0f 91       	pop	r16
    d5b0:	ff 90       	pop	r15
    d5b2:	08 95       	ret

0000d5b4 <_Z16lcd_char_inversehhhh>:
	}
}

// Reverse video 8 pixels high, w pixels wide
// Vertically on an 8 pixel high boundary
void lcd_char_inverse( uint8_t x, uint8_t y, uint8_t w, uint8_t blink )
    d5b4:	98 2f       	mov	r25, r24
{
	if ( blink && BLINK_ON_PHASE )
    d5b6:	22 23       	and	r18, r18
    d5b8:	61 f0       	breq	.+24     	; 0xd5d2 <_Z16lcd_char_inversehhhh+0x1e>
    d5ba:	80 91 79 0d 	lds	r24, 0x0D79
    d5be:	86 ff       	sbrs	r24, 6
    d5c0:	08 c0       	rjmp	.+16     	; 0xd5d2 <_Z16lcd_char_inversehhhh+0x1e>
    d5c2:	08 95       	ret
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif

	while ( x < end )
	{
		*p++ ^= 0xFF ;
    d5c4:	80 81       	ld	r24, Z
    d5c6:	80 95       	com	r24
    d5c8:	81 93       	st	Z+, r24
		x += 1 ;
    d5ca:	9f 5f       	subi	r25, 0xFF	; 255
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif

	while ( x < end )
    d5cc:	94 17       	cp	r25, r20
    d5ce:	d0 f3       	brcs	.-12     	; 0xd5c4 <_Z16lcd_char_inversehhhh+0x10>
    d5d0:	08 95       	ret
{
	if ( blink && BLINK_ON_PHASE )
	{
		return ;
	}
	uint8_t end = x + w ;
    d5d2:	49 0f       	add	r20, r25
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    d5d4:	e6 2f       	mov	r30, r22
    d5d6:	f0 e0       	ldi	r31, 0x00	; 0
    d5d8:	e8 7f       	andi	r30, 0xF8	; 248
    d5da:	f0 70       	andi	r31, 0x00	; 0
    d5dc:	84 e0       	ldi	r24, 0x04	; 4
    d5de:	ee 0f       	add	r30, r30
    d5e0:	ff 1f       	adc	r31, r31
    d5e2:	8a 95       	dec	r24
    d5e4:	e1 f7       	brne	.-8      	; 0xd5de <_Z16lcd_char_inversehhhh+0x2a>
    d5e6:	e9 0f       	add	r30, r25
    d5e8:	f1 1d       	adc	r31, r1
    d5ea:	ea 5b       	subi	r30, 0xBA	; 186
    d5ec:	f6 4f       	sbci	r31, 0xF6	; 246
    d5ee:	ee cf       	rjmp	.-36     	; 0xd5cc <_Z16lcd_char_inversehhhh+0x18>

0000d5f0 <_Z14lcd_write_bitsPhh>:
 	lcd_hline(x+1, y, w-2 ) ;
	plotType = oldPlotType ;
}


void lcd_write_bits( uint8_t *p, uint8_t mask )
    d5f0:	fc 01       	movw	r30, r24
{
  if(p<DISPLAY_END)
    d5f2:	8d e0       	ldi	r24, 0x0D	; 13
    d5f4:	e6 34       	cpi	r30, 0x46	; 70
    d5f6:	f8 07       	cpc	r31, r24
    d5f8:	50 f4       	brcc	.+20     	; 0xd60e <_Z14lcd_write_bitsPhh+0x1e>
	{
		uint8_t temp = *p ;
    d5fa:	80 81       	ld	r24, Z
		if ( plotType != PLOT_XOR )
    d5fc:	90 91 46 0d 	lds	r25, 0x0D46
    d600:	99 23       	and	r25, r25
    d602:	19 f0       	breq	.+6      	; 0xd60a <_Z14lcd_write_bitsPhh+0x1a>
		{
			temp |= mask ;
    d604:	86 2b       	or	r24, r22
		}
		if ( plotType != PLOT_BLACK )
    d606:	91 30       	cpi	r25, 0x01	; 1
    d608:	09 f0       	breq	.+2      	; 0xd60c <_Z14lcd_write_bitsPhh+0x1c>
		{
			temp ^= mask ;
    d60a:	86 27       	eor	r24, r22
		}
		*p = temp ;
    d60c:	80 83       	st	Z, r24
    d60e:	08 95       	ret

0000d610 <_Z8lcd_plothh>:
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
	lcd_write_bits( p, XBITMASK(y%8) ) ;
    d610:	70 e0       	ldi	r23, 0x00	; 0
    d612:	fb 01       	movw	r30, r22
    d614:	e7 70       	andi	r30, 0x07	; 7
    d616:	f0 70       	andi	r31, 0x00	; 0
    d618:	e8 58       	subi	r30, 0x88	; 136
    d61a:	fe 4e       	sbci	r31, 0xEE	; 238
    d61c:	e4 91       	lpm	r30, Z+
    d61e:	68 7f       	andi	r22, 0xF8	; 248
    d620:	70 70       	andi	r23, 0x00	; 0
    d622:	94 e0       	ldi	r25, 0x04	; 4
    d624:	66 0f       	add	r22, r22
    d626:	77 1f       	adc	r23, r23
    d628:	9a 95       	dec	r25
    d62a:	e1 f7       	brne	.-8      	; 0xd624 <_Z8lcd_plothh+0x14>
    d62c:	68 0f       	add	r22, r24
    d62e:	71 1d       	adc	r23, r1
    d630:	cb 01       	movw	r24, r22
    d632:	8a 5b       	subi	r24, 0xBA	; 186
    d634:	96 4f       	sbci	r25, 0xF6	; 246
    d636:	6e 2f       	mov	r22, r30
    d638:	0e 94 f8 6a 	call	0xd5f0	; 0xd5f0 <_Z14lcd_write_bitsPhh>
}
    d63c:	08 95       	ret

0000d63e <_Z13lcd_hlineStiphhah>:

void lcd_hlineStip(unsigned char x,unsigned char y, signed char w,uint8_t pat)
    d63e:	ef 92       	push	r14
    d640:	ff 92       	push	r15
    d642:	0f 93       	push	r16
    d644:	1f 93       	push	r17
    d646:	cf 93       	push	r28
    d648:	df 93       	push	r29
    d64a:	f4 2e       	mov	r15, r20
{
  if(w<0) {x+=w; w=-w;}
    d64c:	47 ff       	sbrs	r20, 7
    d64e:	02 c0       	rjmp	.+4      	; 0xd654 <_Z13lcd_hlineStiphhah+0x16>
    d650:	84 0f       	add	r24, r20
    d652:	f1 94       	neg	r15
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    d654:	e6 2f       	mov	r30, r22
    d656:	f0 e0       	ldi	r31, 0x00	; 0
    d658:	ef 01       	movw	r28, r30
    d65a:	c8 7f       	andi	r28, 0xF8	; 248
    d65c:	d0 70       	andi	r29, 0x00	; 0
    d65e:	34 e0       	ldi	r19, 0x04	; 4
    d660:	cc 0f       	add	r28, r28
    d662:	dd 1f       	adc	r29, r29
    d664:	3a 95       	dec	r19
    d666:	e1 f7       	brne	.-8      	; 0xd660 <_Z13lcd_hlineStiphhah+0x22>
    d668:	c8 0f       	add	r28, r24
    d66a:	d1 1d       	adc	r29, r1
    d66c:	ca 5b       	subi	r28, 0xBA	; 186
    d66e:	d6 4f       	sbci	r29, 0xF6	; 246
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
  uint8_t msk = XBITMASK(y%8);
    d670:	e7 70       	andi	r30, 0x07	; 7
    d672:	f0 70       	andi	r31, 0x00	; 0
    d674:	e8 58       	subi	r30, 0x88	; 136
    d676:	fe 4e       	sbci	r31, 0xEE	; 238
    d678:	e4 90       	lpm	r14, Z+
    d67a:	15 c0       	rjmp	.+42     	; 0xd6a6 <_Z13lcd_hlineStiphhah+0x68>
  while(w){
    if ( p>=DISPLAY_END)
    d67c:	8d e0       	ldi	r24, 0x0D	; 13
    d67e:	c6 34       	cpi	r28, 0x46	; 70
    d680:	d8 07       	cpc	r29, r24
    d682:	98 f4       	brcc	.+38     	; 0xd6aa <_Z13lcd_hlineStiphhah+0x6c>
    {
      break ;			
    }
    if(pat&1) {
    d684:	82 2f       	mov	r24, r18
    d686:	90 e0       	ldi	r25, 0x00	; 0
    d688:	8c 01       	movw	r16, r24
    d68a:	15 95       	asr	r17
    d68c:	07 95       	ror	r16
    d68e:	80 ff       	sbrs	r24, 0
    d690:	07 c0       	rjmp	.+14     	; 0xd6a0 <_Z13lcd_hlineStiphhah+0x62>
			lcd_write_bits( p, msk ) ;
    d692:	ce 01       	movw	r24, r28
    d694:	6e 2d       	mov	r22, r14
    d696:	0e 94 f8 6a 	call	0xd5f0	; 0xd5f0 <_Z14lcd_write_bitsPhh>
      pat = (pat >> 1) | 0x80;
    d69a:	20 2f       	mov	r18, r16
    d69c:	20 68       	ori	r18, 0x80	; 128
    d69e:	01 c0       	rjmp	.+2      	; 0xd6a2 <_Z13lcd_hlineStiphhah+0x64>
    }else{
      pat = pat >> 1;
    d6a0:	20 2f       	mov	r18, r16
    }
    w--;
    d6a2:	fa 94       	dec	r15
    p++;
    d6a4:	21 96       	adiw	r28, 0x01	; 1
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
  uint8_t msk = XBITMASK(y%8);
  while(w){
    d6a6:	ff 20       	and	r15, r15
    d6a8:	49 f7       	brne	.-46     	; 0xd67c <_Z13lcd_hlineStiphhah+0x3e>
      pat = pat >> 1;
    }
    w--;
    p++;
  }
}
    d6aa:	df 91       	pop	r29
    d6ac:	cf 91       	pop	r28
    d6ae:	1f 91       	pop	r17
    d6b0:	0f 91       	pop	r16
    d6b2:	ff 90       	pop	r15
    d6b4:	ef 90       	pop	r14
    d6b6:	08 95       	ret

0000d6b8 <_Z9lcd_hlinehha>:

void lcd_hline(uint8_t x,uint8_t y, int8_t w)
{
  lcd_hlineStip(x,y,w,0xff);
    d6b8:	2f ef       	ldi	r18, 0xFF	; 255
    d6ba:	0e 94 1f 6b 	call	0xd63e	; 0xd63e <_Z13lcd_hlineStiphhah>
}
    d6be:	08 95       	ret

0000d6c0 <_Z9lcd_vlinehha>:

void lcd_vline(uint8_t x,uint8_t y, int8_t h)
    d6c0:	1f 93       	push	r17
    d6c2:	cf 93       	push	r28
    d6c4:	df 93       	push	r29
    d6c6:	14 2f       	mov	r17, r20
{
//    while ((y+h)>=DISPLAY_H) h--;
  if (h<0) { y+=h; h=-h; }
    d6c8:	47 ff       	sbrs	r20, 7
    d6ca:	02 c0       	rjmp	.+4      	; 0xd6d0 <_Z9lcd_vlinehha+0x10>
    d6cc:	64 0f       	add	r22, r20
    d6ce:	11 95       	neg	r17
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    d6d0:	c6 2f       	mov	r28, r22
    d6d2:	d0 e0       	ldi	r29, 0x00	; 0
    d6d4:	c8 7f       	andi	r28, 0xF8	; 248
    d6d6:	d0 70       	andi	r29, 0x00	; 0
    d6d8:	44 e0       	ldi	r20, 0x04	; 4
    d6da:	cc 0f       	add	r28, r28
    d6dc:	dd 1f       	adc	r29, r29
    d6de:	4a 95       	dec	r20
    d6e0:	e1 f7       	brne	.-8      	; 0xd6da <_Z9lcd_vlinehha+0x1a>
    d6e2:	c8 0f       	add	r28, r24
    d6e4:	d1 1d       	adc	r29, r1
    d6e6:	ca 5b       	subi	r28, 0xBA	; 186
    d6e8:	d6 4f       	sbci	r29, 0xF6	; 246
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
  y &= 0x07 ;
    d6ea:	67 70       	andi	r22, 0x07	; 7
	if ( y )
    d6ec:	e1 f0       	breq	.+56     	; 0xd726 <_Z9lcd_vlinehha+0x66>
	{
    uint8_t msk = ~(XBITMASK(y)-1) ;
    d6ee:	e6 2f       	mov	r30, r22
    d6f0:	f0 e0       	ldi	r31, 0x00	; 0
    d6f2:	e8 58       	subi	r30, 0x88	; 136
    d6f4:	fe 4e       	sbci	r31, 0xEE	; 238
    d6f6:	24 91       	lpm	r18, Z+
    d6f8:	21 95       	neg	r18
    h -= 8-y ;
    d6fa:	16 0f       	add	r17, r22
    d6fc:	18 50       	subi	r17, 0x08	; 8
    if (h < 0)
    d6fe:	17 ff       	sbrs	r17, 7
    d700:	08 c0       	rjmp	.+16     	; 0xd712 <_Z9lcd_vlinehha+0x52>
      msk -= ~(XBITMASK(8+h)-1) ;
    d702:	e1 2f       	mov	r30, r17
    d704:	ff 27       	eor	r31, r31
    d706:	e7 fd       	sbrc	r30, 7
    d708:	f0 95       	com	r31
    d70a:	e0 58       	subi	r30, 0x80	; 128
    d70c:	fe 4e       	sbci	r31, 0xEE	; 238
    d70e:	e4 91       	lpm	r30, Z+
    d710:	2e 0f       	add	r18, r30
		lcd_write_bits( p, msk ) ;
    d712:	ce 01       	movw	r24, r28
    d714:	62 2f       	mov	r22, r18
    d716:	03 c0       	rjmp	.+6      	; 0xd71e <_Z9lcd_vlinehha+0x5e>
void lcd_hline(uint8_t x,uint8_t y, int8_t w)
{
  lcd_hlineStip(x,y,w,0xff);
}

void lcd_vline(uint8_t x,uint8_t y, int8_t h)
    d718:	18 50       	subi	r17, 0x08	; 8
	}
    
  while( h >= 8 )
	{
		h -= 8 ;
		lcd_write_bits( p, 0xFF ) ;
    d71a:	ce 01       	movw	r24, r28
    d71c:	6f ef       	ldi	r22, 0xFF	; 255
    d71e:	0e 94 f8 6a 	call	0xd5f0	; 0xd5f0 <_Z14lcd_write_bitsPhh>
    p += DISPLAY_W ;
    d722:	c0 58       	subi	r28, 0x80	; 128
    d724:	df 4f       	sbci	r29, 0xFF	; 255
      msk -= ~(XBITMASK(8+h)-1) ;
		lcd_write_bits( p, msk ) ;
    p += DISPLAY_W ;
	}
    
  while( h >= 8 )
    d726:	18 30       	cpi	r17, 0x08	; 8
    d728:	bc f7       	brge	.-18     	; 0xd718 <_Z9lcd_vlinehha+0x58>
		h -= 8 ;
		lcd_write_bits( p, 0xFF ) ;
    p += DISPLAY_W ;
  }
    
	if ( h > 0 )
    d72a:	11 16       	cp	r1, r17
    d72c:	64 f4       	brge	.+24     	; 0xd746 <_Z9lcd_vlinehha+0x86>
	{
  	lcd_write_bits( p, (XBITMASK(h)-1) ) ;
    d72e:	e1 2f       	mov	r30, r17
    d730:	ff 27       	eor	r31, r31
    d732:	e7 fd       	sbrc	r30, 7
    d734:	f0 95       	com	r31
    d736:	e8 58       	subi	r30, 0x88	; 136
    d738:	fe 4e       	sbci	r31, 0xEE	; 238
    d73a:	e4 91       	lpm	r30, Z+
    d73c:	e1 50       	subi	r30, 0x01	; 1
    d73e:	ce 01       	movw	r24, r28
    d740:	6e 2f       	mov	r22, r30
    d742:	0e 94 f8 6a 	call	0xd5f0	; 0xd5f0 <_Z14lcd_write_bitsPhh>
	}
	asm("") ;
}
    d746:	df 91       	pop	r29
    d748:	cf 91       	pop	r28
    d74a:	1f 91       	pop	r17
    d74c:	08 95       	ret

0000d74e <_Z8lcd_recthhhh>:
	}
}

uint8_t plotType = PLOT_XOR ;

void lcd_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h )
    d74e:	df 92       	push	r13
    d750:	ef 92       	push	r14
    d752:	ff 92       	push	r15
    d754:	0f 93       	push	r16
    d756:	1f 93       	push	r17
    d758:	18 2f       	mov	r17, r24
    d75a:	e6 2e       	mov	r14, r22
    d75c:	04 2f       	mov	r16, r20
    d75e:	f2 2e       	mov	r15, r18
{
	uint8_t oldPlotType = plotType ;
    d760:	d0 90 46 0d 	lds	r13, 0x0D46
	plotType = PLOT_BLACK ;
    d764:	81 e0       	ldi	r24, 0x01	; 1
    d766:	80 93 46 0d 	sts	0x0D46, r24
  lcd_vline(x, y, h ) ;
    d76a:	81 2f       	mov	r24, r17
    d76c:	42 2f       	mov	r20, r18
    d76e:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
	if ( w > 1 )
    d772:	02 30       	cpi	r16, 0x02	; 2
    d774:	38 f0       	brcs	.+14     	; 0xd784 <_Z8lcd_recthhhh+0x36>
	{
  	lcd_vline(x+w-1, y, h ) ;
    d776:	81 2f       	mov	r24, r17
    d778:	81 50       	subi	r24, 0x01	; 1
    d77a:	80 0f       	add	r24, r16
    d77c:	6e 2d       	mov	r22, r14
    d77e:	4f 2d       	mov	r20, r15
    d780:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
	}
 	lcd_hline(x+1, y+h-1, w-2 ) ;
    d784:	1f 5f       	subi	r17, 0xFF	; 255
    d786:	02 50       	subi	r16, 0x02	; 2
    d788:	6e 2d       	mov	r22, r14
    d78a:	61 50       	subi	r22, 0x01	; 1
    d78c:	6f 0d       	add	r22, r15
    d78e:	81 2f       	mov	r24, r17
    d790:	40 2f       	mov	r20, r16
    d792:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
 	lcd_hline(x+1, y, w-2 ) ;
    d796:	81 2f       	mov	r24, r17
    d798:	6e 2d       	mov	r22, r14
    d79a:	40 2f       	mov	r20, r16
    d79c:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
	plotType = oldPlotType ;
    d7a0:	d0 92 46 0d 	sts	0x0D46, r13
}
    d7a4:	1f 91       	pop	r17
    d7a6:	0f 91       	pop	r16
    d7a8:	ff 90       	pop	r15
    d7aa:	ef 90       	pop	r14
    d7ac:	df 90       	pop	r13
    d7ae:	08 95       	ret

0000d7b0 <_Z8lcd_hbarhhhhh>:
  if(negative) lcd_putcAtt(x-fw,y,'-',mode);
	asm("") ;
	return 0 ;		// Stops compiler creating two sets of POPS, saves flash
}

void lcd_hbar( uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t percent )
    d7b0:	df 92       	push	r13
    d7b2:	ef 92       	push	r14
    d7b4:	ff 92       	push	r15
    d7b6:	0f 93       	push	r16
    d7b8:	1f 93       	push	r17
    d7ba:	d8 2e       	mov	r13, r24
    d7bc:	16 2f       	mov	r17, r22
    d7be:	f2 2e       	mov	r15, r18
	uint8_t solid ;
	if ( percent > 100 )
	{
		percent = 100 ;
	}
	solid = (w-2) * percent / 100 ;
    d7c0:	05 36       	cpi	r16, 0x65	; 101
    d7c2:	08 f0       	brcs	.+2      	; 0xd7c6 <_Z8lcd_hbarhhhhh+0x16>
    d7c4:	04 e6       	ldi	r16, 0x64	; 100
    d7c6:	20 2f       	mov	r18, r16
    d7c8:	30 e0       	ldi	r19, 0x00	; 0
    d7ca:	84 2f       	mov	r24, r20
    d7cc:	90 e0       	ldi	r25, 0x00	; 0
    d7ce:	02 97       	sbiw	r24, 0x02	; 2
    d7d0:	bc 01       	movw	r22, r24
    d7d2:	26 9f       	mul	r18, r22
    d7d4:	c0 01       	movw	r24, r0
    d7d6:	27 9f       	mul	r18, r23
    d7d8:	90 0d       	add	r25, r0
    d7da:	36 9f       	mul	r19, r22
    d7dc:	90 0d       	add	r25, r0
    d7de:	11 24       	eor	r1, r1
    d7e0:	64 e6       	ldi	r22, 0x64	; 100
    d7e2:	70 e0       	ldi	r23, 0x00	; 0
    d7e4:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    d7e8:	e6 2e       	mov	r14, r22
	lcd_rect( x, y, w, h ) ;
    d7ea:	8d 2d       	mov	r24, r13
    d7ec:	61 2f       	mov	r22, r17
    d7ee:	2f 2d       	mov	r18, r15
    d7f0:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <_Z8lcd_recthhhh>

	if ( solid )
    d7f4:	ee 20       	and	r14, r14
    d7f6:	79 f0       	breq	.+30     	; 0xd816 <_Z8lcd_hbarhhhhh+0x66>
	{
		w = y + h - 1 ;
    d7f8:	11 50       	subi	r17, 0x01	; 1
    d7fa:	f1 0e       	add	r15, r17
		y += 1 ;
    d7fc:	01 2f       	mov	r16, r17
    d7fe:	0e 5f       	subi	r16, 0xFE	; 254
		x += 1 ;
    d800:	1d 2d       	mov	r17, r13
    d802:	1f 5f       	subi	r17, 0xFF	; 255
    d804:	06 c0       	rjmp	.+12     	; 0xd812 <_Z8lcd_hbarhhhhh+0x62>
		while ( y < w )
		{
 			lcd_hline(x, y, solid ) ;
    d806:	81 2f       	mov	r24, r17
    d808:	60 2f       	mov	r22, r16
    d80a:	4e 2d       	mov	r20, r14
    d80c:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
			y += 1 ;			
    d810:	0f 5f       	subi	r16, 0xFF	; 255
	if ( solid )
	{
		w = y + h - 1 ;
		y += 1 ;
		x += 1 ;
		while ( y < w )
    d812:	0f 15       	cp	r16, r15
    d814:	c0 f3       	brcs	.-16     	; 0xd806 <_Z8lcd_hbarhhhhh+0x56>
		{
 			lcd_hline(x, y, solid ) ;
			y += 1 ;			
		}
	}
}
    d816:	1f 91       	pop	r17
    d818:	0f 91       	pop	r16
    d81a:	ff 90       	pop	r15
    d81c:	ef 90       	pop	r14
    d81e:	df 90       	pop	r13
    d820:	08 95       	ret

0000d822 <_Z10lcdSendCtlh>:


#ifndef LCD_2_CS
void lcdSendCtl(uint8_t val)
{
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_CS1);
    d822:	a9 98       	cbi	0x15, 1	; 21
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_A0);
    d824:	ab 98       	cbi	0x15, 3	; 21
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
    d826:	ac 98       	cbi	0x15, 4	; 21
  PORTA_LCD_DAT = val;
    d828:	8b bb       	out	0x1b, r24	; 27
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    d82a:	ad 9a       	sbi	0x15, 5	; 21
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    d82c:	ad 98       	cbi	0x15, 5	; 21
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    d82e:	ab 9a       	sbi	0x15, 3	; 21
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
    d830:	a9 9a       	sbi	0x15, 1	; 21
}
    d832:	08 95       	ret

0000d834 <_Z13lcdSetRefVolth>:
//	LcdLock = 0 ;						// Free LCD data lines

}


void lcdSetRefVolt(uint8_t val)
    d834:	1f 93       	push	r17
    d836:	18 2f       	mov	r17, r24
{
	LcdLock = 1 ;						// Lock LCD data lines
    d838:	81 e0       	ldi	r24, 0x01	; 1
    d83a:	80 93 48 0d 	sts	0x0D48, r24
  lcdSendCtl(0x81);
    d83e:	81 e8       	ldi	r24, 0x81	; 129
    d840:	0e 94 11 6c 	call	0xd822	; 0xd822 <_Z10lcdSendCtlh>
  lcdSendCtl(val);
    d844:	81 2f       	mov	r24, r17
    d846:	0e 94 11 6c 	call	0xd822	; 0xd822 <_Z10lcdSendCtlh>
	LcdLock = 0 ;						// Free LCD data lines
    d84a:	10 92 48 0d 	sts	0x0D48, r1
}
    d84e:	1f 91       	pop	r17
    d850:	08 95       	ret

0000d852 <_Z14lcdSetContrastv>:

uint8_t EepromActive ;

void lcdSetContrast()
{
	lcdSetRefVolt(g_eeGeneral.contrast);
    d852:	80 91 66 01 	lds	r24, 0x0166
    d856:	0e 94 1a 6c 	call	0xd834	; 0xd834 <_Z13lcdSetRefVolth>
}
    d85a:	08 95       	ret

0000d85c <_Z8lcd_initv>:
  0xE2, 0xAE, 0xA1, 0xA6, 0xA4, 0xA2, 0xC0, 0x2F, 0x25, 0xAF
#endif
} ;	


void lcd_init()
    d85c:	cf 93       	push	r28
    d85e:	df 93       	push	r29
{
  // /home/thus/txt/datasheets/lcd/KS0713.pdf
  // ~/txt/flieger/ST7565RV17.pdf  from http://www.glyn.de/content.asp?wdid=132&sid=
	uint8_t i ;

	LcdLock = 1 ;						// Lock LCD data lines
    d860:	81 e0       	ldi	r24, 0x01	; 1
    d862:	80 93 48 0d 	sts	0x0D48, r24
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RES);  //LCD_RES
    d866:	aa 98       	cbi	0x15, 2	; 21
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    d868:	8a e0       	ldi	r24, 0x0A	; 10
    d86a:	8a 95       	dec	r24
    d86c:	f1 f7       	brne	.-4      	; 0xd86a <_Z8lcd_initv+0xe>
  delay_2us();
  PORTC_LCD_CTRL |= (1<<OUT_C_LCD_RES); //  f524  sbi 0x15, 2 IOADR-PORTC_LCD_CTRL; 21           1
    d86e:	aa 9a       	sbi	0x15, 2	; 21
    d870:	80 e0       	ldi	r24, 0x00	; 0
    d872:	90 e0       	ldi	r25, 0x00	; 0
    d874:	35 e0       	ldi	r19, 0x05	; 5
    d876:	23 2f       	mov	r18, r19
    d878:	2a 95       	dec	r18
    d87a:	f1 f7       	brne	.-4      	; 0xd878 <_Z8lcd_initv+0x1c>

#define delay_1us() _delay_us(1)
#define delay_2us() _delay_us(2)
static void delay_1_5us( uint16_t ms)
{
  for( uint16_t i=0; i<ms; i++) delay_1us();
    d87c:	01 96       	adiw	r24, 0x01	; 1
    d87e:	25 e0       	ldi	r18, 0x05	; 5
    d880:	8c 3d       	cpi	r24, 0xDC	; 220
    d882:	92 07       	cpc	r25, r18
    d884:	c1 f7       	brne	.-16     	; 0xd876 <_Z8lcd_initv+0x1a>
    d886:	c0 e0       	ldi	r28, 0x00	; 0
    d888:	d0 e0       	ldi	r29, 0x00	; 0
  delay_2us();
  PORTC_LCD_CTRL |= (1<<OUT_C_LCD_RES); //  f524  sbi 0x15, 2 IOADR-PORTC_LCD_CTRL; 21           1
  delay_1_5us(1500);
	for ( i = 0 ; i < sizeof(Lcdinit) ; i += 1 )
	{
	  lcdSendCtl(pgm_read_byte(&Lcdinit[i]) ) ;
    d88a:	fe 01       	movw	r30, r28
    d88c:	e2 59       	subi	r30, 0x92	; 146
    d88e:	fe 4e       	sbci	r31, 0xEE	; 238
    d890:	e4 91       	lpm	r30, Z+
    d892:	8e 2f       	mov	r24, r30
    d894:	0e 94 11 6c 	call	0xd822	; 0xd822 <_Z10lcdSendCtlh>
    d898:	21 96       	adiw	r28, 0x01	; 1
	LcdLock = 1 ;						// Lock LCD data lines
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RES);  //LCD_RES
  delay_2us();
  PORTC_LCD_CTRL |= (1<<OUT_C_LCD_RES); //  f524  sbi 0x15, 2 IOADR-PORTC_LCD_CTRL; 21           1
  delay_1_5us(1500);
	for ( i = 0 ; i < sizeof(Lcdinit) ; i += 1 )
    d89a:	ca 30       	cpi	r28, 0x0A	; 10
    d89c:	d1 05       	cpc	r29, r1
    d89e:	a9 f7       	brne	.-22     	; 0xd88a <_Z8lcd_initv+0x2e>
    lcdSendCtl(0xA1);     // ADC = 1: rev direction(SEG132/SEG128->SEG1)
    lcdSendCtl(0xC0);     // SHL = 0: norm direction(COM1->COM64)
  }
  lcdSendCtl(0xAF);       // turn-on display
#endif
	lcdSetContrast() ;
    d8a0:	0e 94 29 6c 	call	0xd852	; 0xd852 <_Z14lcdSetContrastv>
//	LcdLock = 0 ;						// Free LCD data lines

}
    d8a4:	df 91       	pop	r29
    d8a6:	cf 91       	pop	r28
    d8a8:	08 95       	ret

0000d8aa <_Z13refreshDiplayv>:
volatile uint8_t LcdLock ;
//volatile uint8_t LcdTrims ;
//uint8_t LcdTrimSwapped ;


void refreshDiplay()
    d8aa:	1f 93       	push	r17
    d8ac:	cf 93       	push	r28
    d8ae:	df 93       	push	r29
{
//	lcd_putc( 20*FW, 0, RotaryState + 'A' ) ;
//	lcd_putc( 19*FW, 0, s_editMode + '0' ) ;
	if ( EepromActive && BLINK_ON_PHASE )
    d8b0:	40 91 47 0d 	lds	r20, 0x0D47
    d8b4:	44 23       	and	r20, r20
    d8b6:	49 f0       	breq	.+18     	; 0xd8ca <_Z13refreshDiplayv+0x20>
    d8b8:	80 91 79 0d 	lds	r24, 0x0D79
    d8bc:	86 ff       	sbrs	r24, 6
    d8be:	05 c0       	rjmp	.+10     	; 0xd8ca <_Z13refreshDiplayv+0x20>
	{
		lcd_hline( 0, 0, EepromActive - '0' + 6 ) ;
    d8c0:	4a 52       	subi	r20, 0x2A	; 42
    d8c2:	80 e0       	ldi	r24, 0x00	; 0
    d8c4:	60 e0       	ldi	r22, 0x00	; 0
    d8c6:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
#ifdef SIMU
  memcpy(lcd_buf, displayBuf, sizeof(displayBuf));
  lcd_refresh = true;
#else

	LcdLock = 1 ;						// Lock LCD data lines
    d8ca:	81 e0       	ldi	r24, 0x01	; 1
    d8cc:	80 93 48 0d 	sts	0x0D48, r24
    d8d0:	c6 e4       	ldi	r28, 0x46	; 70
    d8d2:	d9 e0       	ldi	r29, 0x09	; 9
    d8d4:	10 eb       	ldi	r17, 0xB0	; 176
  if (g_eeGeneral.rotateScreen)
    column_start_lo = 0x00;       // don't skip if screen is rotated
#endif
  uint8_t *p=displayBuf;
  for(uint8_t y=0xB0; y < 0xB8; y++) {
    lcdSendCtl(column_start_lo);
    d8d6:	84 e0       	ldi	r24, 0x04	; 4
    d8d8:	0e 94 11 6c 	call	0xd822	; 0xd822 <_Z10lcdSendCtlh>
    lcdSendCtl(0x10); //column addr 0
    d8dc:	80 e1       	ldi	r24, 0x10	; 16
    d8de:	0e 94 11 6c 	call	0xd822	; 0xd822 <_Z10lcdSendCtlh>
    lcdSendCtl( y ); //page addr y
    d8e2:	81 2f       	mov	r24, r17
    d8e4:	0e 94 11 6c 	call	0xd822	; 0xd822 <_Z10lcdSendCtlh>
    
		PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_CS1);
    d8e8:	a9 98       	cbi	0x15, 1	; 21
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    d8ea:	ab 9a       	sbi	0x15, 3	; 21
    PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
    d8ec:	ac 98       	cbi	0x15, 4	; 21
    d8ee:	fe 01       	movw	r30, r28
    d8f0:	90 e2       	ldi	r25, 0x20	; 32
		
    for(uint8_t x=32; x>0; x--){
//      lcdSendDat(*p);
      PORTA_LCD_DAT = *p++;
    d8f2:	80 81       	ld	r24, Z
    d8f4:	8b bb       	out	0x1b, r24	; 27
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    d8f6:	ad 9a       	sbi	0x15, 5	; 21
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    d8f8:	ad 98       	cbi	0x15, 5	; 21
      PORTA_LCD_DAT = *p++;
    d8fa:	81 81       	ldd	r24, Z+1	; 0x01
    d8fc:	8b bb       	out	0x1b, r24	; 27
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    d8fe:	ad 9a       	sbi	0x15, 5	; 21
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    d900:	ad 98       	cbi	0x15, 5	; 21
      PORTA_LCD_DAT = *p++;
    d902:	82 81       	ldd	r24, Z+2	; 0x02
    d904:	8b bb       	out	0x1b, r24	; 27
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    d906:	ad 9a       	sbi	0x15, 5	; 21
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    d908:	ad 98       	cbi	0x15, 5	; 21
      PORTA_LCD_DAT = *p++;
    d90a:	83 81       	ldd	r24, Z+3	; 0x03
    d90c:	8b bb       	out	0x1b, r24	; 27
volatile uint8_t LcdLock ;
//volatile uint8_t LcdTrims ;
//uint8_t LcdTrimSwapped ;


void refreshDiplay()
    d90e:	34 96       	adiw	r30, 0x04	; 4
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
      PORTA_LCD_DAT = *p++;
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
      PORTA_LCD_DAT = *p++;
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    d910:	ad 9a       	sbi	0x15, 5	; 21
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    d912:	ad 98       	cbi	0x15, 5	; 21
    
		PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_CS1);
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
		
    for(uint8_t x=32; x>0; x--){
    d914:	91 50       	subi	r25, 0x01	; 1
    d916:	69 f7       	brne	.-38     	; 0xd8f2 <_Z13refreshDiplayv+0x48>
    d918:	c0 58       	subi	r28, 0x80	; 128
    d91a:	df 4f       	sbci	r29, 0xFF	; 255
      PORTA_LCD_DAT = *p++;
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
//      p++;
    }
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    d91c:	ab 9a       	sbi	0x15, 3	; 21
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
    d91e:	a9 9a       	sbi	0x15, 1	; 21
#if defined(CPUM128) || defined(CPUM2561)
  if (g_eeGeneral.rotateScreen)
    column_start_lo = 0x00;       // don't skip if screen is rotated
#endif
  uint8_t *p=displayBuf;
  for(uint8_t y=0xB0; y < 0xB8; y++) {
    d920:	1f 5f       	subi	r17, 0xFF	; 255
    d922:	18 3b       	cpi	r17, 0xB8	; 184
    d924:	c1 f6       	brne	.-80     	; 0xd8d6 <_Z13refreshDiplayv+0x2c>
//      p++;
    }
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
  }
	LcdLock = 0 ;						// Free LCD data lines
    d926:	10 92 48 0d 	sts	0x0D48, r1
#endif
}
    d92a:	df 91       	pop	r29
    d92c:	cf 91       	pop	r28
    d92e:	1f 91       	pop	r17
    d930:	08 95       	ret

0000d932 <_Z14lcd_outdezNAtthhlha>:
{
	lcd_outdezNAtt( x, y, value, attr + LEADING0, 2 ) ;
}

#define PREC(n) ((n&0x20) ? ((n&0x10) ? 2 : 1) : 0)
uint8_t lcd_outdezNAtt( uint8_t x, uint8_t y, int32_t val, uint8_t mode, int8_t len )
    d932:	3f 92       	push	r3
    d934:	4f 92       	push	r4
    d936:	5f 92       	push	r5
    d938:	6f 92       	push	r6
    d93a:	7f 92       	push	r7
    d93c:	8f 92       	push	r8
    d93e:	9f 92       	push	r9
    d940:	af 92       	push	r10
    d942:	bf 92       	push	r11
    d944:	cf 92       	push	r12
    d946:	df 92       	push	r13
    d948:	ef 92       	push	r14
    d94a:	ff 92       	push	r15
    d94c:	0f 93       	push	r16
    d94e:	1f 93       	push	r17
    d950:	cf 93       	push	r28
    d952:	df 93       	push	r29
    d954:	18 2f       	mov	r17, r24
    d956:	86 2e       	mov	r8, r22
    d958:	6e 2d       	mov	r22, r14
{
  uint8_t fw = FWNUM;
  uint8_t prec = PREC(mode);
    d95a:	05 fd       	sbrc	r16, 5
    d95c:	02 c0       	rjmp	.+4      	; 0xd962 <_Z14lcd_outdezNAtthhlha+0x30>
    d95e:	ff 24       	eor	r15, r15
    d960:	07 c0       	rjmp	.+14     	; 0xd970 <_Z14lcd_outdezNAtthhlha+0x3e>
    d962:	04 fd       	sbrc	r16, 4
    d964:	03 c0       	rjmp	.+6      	; 0xd96c <_Z14lcd_outdezNAtthhlha+0x3a>
    d966:	ff 24       	eor	r15, r15
    d968:	f3 94       	inc	r15
    d96a:	02 c0       	rjmp	.+4      	; 0xd970 <_Z14lcd_outdezNAtthhlha+0x3e>
    d96c:	b2 e0       	ldi	r27, 0x02	; 2
    d96e:	fb 2e       	mov	r15, r27
  uint8_t ln = 2;
  char c;
  uint8_t xinc ;
	uint8_t fullwidth = 0 ;

	mode &= ~NO_UNIT ;
    d970:	af e7       	ldi	r26, 0x7F	; 127
    d972:	da 2e       	mov	r13, r26
    d974:	d0 22       	and	r13, r16
	if ( len < 0 )
    d976:	67 fd       	sbrc	r22, 7
    d978:	02 c0       	rjmp	.+4      	; 0xd97e <_Z14lcd_outdezNAtthhlha+0x4c>
    d97a:	33 24       	eor	r3, r3
    d97c:	03 c0       	rjmp	.+6      	; 0xd984 <_Z14lcd_outdezNAtthhlha+0x52>
	{
		fullwidth = 1 ;
		len = -len ;		
    d97e:	61 95       	neg	r22
    d980:	33 24       	eor	r3, r3
    d982:	33 94       	inc	r3
	}

  if ( val < 0 )
    d984:	57 fd       	sbrc	r21, 7
    d986:	02 c0       	rjmp	.+4      	; 0xd98c <_Z14lcd_outdezNAtthhlha+0x5a>
    d988:	77 24       	eor	r7, r7
    d98a:	09 c0       	rjmp	.+18     	; 0xd99e <_Z14lcd_outdezNAtthhlha+0x6c>
	{
		val = -val ;
    d98c:	50 95       	com	r21
    d98e:	40 95       	com	r20
    d990:	30 95       	com	r19
    d992:	21 95       	neg	r18
    d994:	3f 4f       	sbci	r19, 0xFF	; 255
    d996:	4f 4f       	sbci	r20, 0xFF	; 255
    d998:	5f 4f       	sbci	r21, 0xFF	; 255
    d99a:	77 24       	eor	r7, r7
    d99c:	73 94       	inc	r7
		negative = 1 ;
	}

  if (mode & DBLSIZE)
    d99e:	9d 2d       	mov	r25, r13
    d9a0:	d2 fe       	sbrs	r13, 2
    d9a2:	07 c0       	rjmp	.+14     	; 0xd9b2 <_Z14lcd_outdezNAtthhlha+0x80>
  {
    fw += FWNUM ;
    xinc = 2*FWNUM;
    lcd_lastPos = 2*FW;
    d9a4:	8c e0       	ldi	r24, 0x0C	; 12
    d9a6:	80 93 45 09 	sts	0x0945, r24
    d9aa:	fa e0       	ldi	r31, 0x0A	; 10
    d9ac:	ef 2e       	mov	r14, r31
    d9ae:	8a e0       	ldi	r24, 0x0A	; 10
    d9b0:	06 c0       	rjmp	.+12     	; 0xd9be <_Z14lcd_outdezNAtthhlha+0x8c>
  }
  else
  {
    xinc = FWNUM ;
    lcd_lastPos = FW;
    d9b2:	86 e0       	ldi	r24, 0x06	; 6
    d9b4:	80 93 45 09 	sts	0x0945, r24
    d9b8:	e5 e0       	ldi	r30, 0x05	; 5
    d9ba:	ee 2e       	mov	r14, r30
    d9bc:	85 e0       	ldi	r24, 0x05	; 5
  }

  if (mode & LEFT) {
    d9be:	96 ff       	sbrs	r25, 6
    d9c0:	29 c0       	rjmp	.+82     	; 0xda14 <_Z14lcd_outdezNAtthhlha+0xe2>
//    if (val >= 10000)
//      x += fw;
    if(negative)
    d9c2:	71 10       	cpse	r7, r1
    {
      x += fw;
    d9c4:	1e 0d       	add	r17, r14
    }
    if (val >= 1000)
    d9c6:	28 3e       	cpi	r18, 0xE8	; 232
    d9c8:	83 e0       	ldi	r24, 0x03	; 3
    d9ca:	38 07       	cpc	r19, r24
    d9cc:	80 e0       	ldi	r24, 0x00	; 0
    d9ce:	48 07       	cpc	r20, r24
    d9d0:	80 e0       	ldi	r24, 0x00	; 0
    d9d2:	58 07       	cpc	r21, r24
    d9d4:	0c f0       	brlt	.+2      	; 0xd9d8 <_Z14lcd_outdezNAtthhlha+0xa6>
      x += fw;
    d9d6:	1e 0d       	add	r17, r14
    if (val >= 100)
    d9d8:	24 36       	cpi	r18, 0x64	; 100
    d9da:	31 05       	cpc	r19, r1
    d9dc:	41 05       	cpc	r20, r1
    d9de:	51 05       	cpc	r21, r1
    d9e0:	0c f0       	brlt	.+2      	; 0xd9e4 <_Z14lcd_outdezNAtthhlha+0xb2>
      x += fw;
    d9e2:	1e 0d       	add	r17, r14
    if (val >= 10)
    d9e4:	2a 30       	cpi	r18, 0x0A	; 10
    d9e6:	31 05       	cpc	r19, r1
    d9e8:	41 05       	cpc	r20, r1
    d9ea:	51 05       	cpc	r21, r1
    d9ec:	0c f0       	brlt	.+2      	; 0xd9f0 <_Z14lcd_outdezNAtthhlha+0xbe>
      x += fw;
    d9ee:	1e 0d       	add	r17, r14
    if ( prec )
    d9f0:	ff 20       	and	r15, r15
    d9f2:	89 f0       	breq	.+34     	; 0xda16 <_Z14lcd_outdezNAtthhlha+0xe4>
    {
      if ( prec == 2 )
    d9f4:	82 e0       	ldi	r24, 0x02	; 2
    d9f6:	f8 16       	cp	r15, r24
    d9f8:	31 f4       	brne	.+12     	; 0xda06 <_Z14lcd_outdezNAtthhlha+0xd4>
      {
        if ( val < 100 )
    d9fa:	24 36       	cpi	r18, 0x64	; 100
    d9fc:	31 05       	cpc	r19, r1
    d9fe:	41 05       	cpc	r20, r1
    da00:	51 05       	cpc	r21, r1
    da02:	4c f4       	brge	.+18     	; 0xda16 <_Z14lcd_outdezNAtthhlha+0xe4>
        {
          x += fw;
    da04:	1e 0d       	add	r17, r14
        }
      }
      if ( val < 10 )
    da06:	2a 30       	cpi	r18, 0x0A	; 10
    da08:	31 05       	cpc	r19, r1
    da0a:	41 05       	cpc	r20, r1
    da0c:	51 05       	cpc	r21, r1
    da0e:	1c f4       	brge	.+6      	; 0xda16 <_Z14lcd_outdezNAtthhlha+0xe4>
      {
        x+= fw;
    da10:	1e 0d       	add	r17, r14
    da12:	01 c0       	rjmp	.+2      	; 0xda16 <_Z14lcd_outdezNAtthhlha+0xe4>
      }
    }
  }
  else
  {
    x -= xinc;
    da14:	18 1b       	sub	r17, r24
  }
  lcd_lastPos += x ;
    da16:	80 91 45 09 	lds	r24, 0x0945
    da1a:	81 0f       	add	r24, r17
    da1c:	80 93 45 09 	sts	0x0945, r24

  if ( prec == 2 )
    da20:	82 e0       	ldi	r24, 0x02	; 2
    da22:	f8 16       	cp	r15, r24
    da24:	11 f4       	brne	.+4      	; 0xda2a <_Z14lcd_outdezNAtthhlha+0xf8>
  {
    mode -= LEADING0;  // Can't have PREC2 and LEADING0
    da26:	80 ef       	ldi	r24, 0xF0	; 240
    da28:	d8 0e       	add	r13, r24
    da2a:	cc 24       	eor	r12, r12
    da2c:	72 e0       	ldi	r23, 0x02	; 2
    da2e:	b7 2e       	mov	r11, r23
    da30:	aa 24       	eor	r10, r10
    da32:	a3 94       	inc	r10
  }

  for (uint8_t i=1; i<=len; i++)
    da34:	46 2e       	mov	r4, r22
    da36:	55 24       	eor	r5, r5
    da38:	47 fc       	sbrc	r4, 7
    da3a:	50 94       	com	r5
      else {
        x -= 2;
        if (mode & INVERS)
          lcd_vline(x+1, y, 7);
        else
          lcd_plot(x+1, y+6);
    da3c:	66 e0       	ldi	r22, 0x06	; 6
    da3e:	66 2e       	mov	r6, r22
    da40:	68 0c       	add	r6, r8
    da42:	5a c0       	rjmp	.+180    	; 0xdaf8 <_Z14lcd_outdezNAtthhlha+0x1c6>
  }

  for (uint8_t i=1; i<=len; i++)
	{
		div_t qr ;
		qr = div( val, 10 ) ;
    da44:	c9 01       	movw	r24, r18
    da46:	6a e0       	ldi	r22, 0x0A	; 10
    da48:	70 e0       	ldi	r23, 0x00	; 0
    da4a:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    da4e:	08 2f       	mov	r16, r24
    da50:	eb 01       	movw	r28, r22
    c = (qr.rem) + '0';
    da52:	50 e3       	ldi	r21, 0x30	; 48
    da54:	95 2e       	mov	r9, r21
    da56:	98 0e       	add	r9, r24
    lcd_putcAtt(x, y, c, mode);
    da58:	81 2f       	mov	r24, r17
    da5a:	68 2d       	mov	r22, r8
    da5c:	49 2d       	mov	r20, r9
    da5e:	2d 2d       	mov	r18, r13
    da60:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
    if (prec==i) {
    da64:	fa 14       	cp	r15, r10
    da66:	59 f5       	brne	.+86     	; 0xdabe <_Z14lcd_outdezNAtthhlha+0x18c>
      if (mode & DBLSIZE) {
    da68:	d2 fe       	sbrs	r13, 2
    da6a:	19 c0       	rjmp	.+50     	; 0xda9e <_Z14lcd_outdezNAtthhlha+0x16c>
        xn = x;
        if( c<='3' && c>='1') ln++;
    da6c:	01 50       	subi	r16, 0x01	; 1
    da6e:	03 30       	cpi	r16, 0x03	; 3
    da70:	08 f4       	brcc	.+2      	; 0xda74 <_Z14lcd_outdezNAtthhlha+0x142>
    da72:	b3 94       	inc	r11
        uint8_t tn = (qr.quot) % 10;
    da74:	ce 01       	movw	r24, r28
    da76:	6a e0       	ldi	r22, 0x0A	; 10
    da78:	70 e0       	ldi	r23, 0x00	; 0
    da7a:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
        if(tn==2 || tn==4) {
    da7e:	82 30       	cpi	r24, 0x02	; 2
    da80:	21 f0       	breq	.+8      	; 0xda8a <_Z14lcd_outdezNAtthhlha+0x158>
    da82:	84 30       	cpi	r24, 0x04	; 4
    da84:	11 f0       	breq	.+4      	; 0xda8a <_Z14lcd_outdezNAtthhlha+0x158>
    da86:	c1 2e       	mov	r12, r17
    da88:	17 c0       	rjmp	.+46     	; 0xdab8 <_Z14lcd_outdezNAtthhlha+0x186>
          if (c=='4') {
    da8a:	84 e3       	ldi	r24, 0x34	; 52
    da8c:	98 16       	cp	r9, r24
    da8e:	19 f4       	brne	.+6      	; 0xda96 <_Z14lcd_outdezNAtthhlha+0x164>
            xn++;
    da90:	c1 2e       	mov	r12, r17
    da92:	c3 94       	inc	r12
    da94:	11 c0       	rjmp	.+34     	; 0xdab8 <_Z14lcd_outdezNAtthhlha+0x186>
          }
          else {
            xn--; ln++;
    da96:	c1 2e       	mov	r12, r17
    da98:	ca 94       	dec	r12
    da9a:	b3 94       	inc	r11
    da9c:	0d c0       	rjmp	.+26     	; 0xdab8 <_Z14lcd_outdezNAtthhlha+0x186>
          }
        }
      }
      else {
        x -= 2;
    da9e:	12 50       	subi	r17, 0x02	; 2
    daa0:	81 2f       	mov	r24, r17
    daa2:	8f 5f       	subi	r24, 0xFF	; 255
        if (mode & INVERS)
    daa4:	d0 fe       	sbrs	r13, 0
    daa6:	05 c0       	rjmp	.+10     	; 0xdab2 <_Z14lcd_outdezNAtthhlha+0x180>
          lcd_vline(x+1, y, 7);
    daa8:	68 2d       	mov	r22, r8
    daaa:	47 e0       	ldi	r20, 0x07	; 7
    daac:	0e 94 60 6b 	call	0xd6c0	; 0xd6c0 <_Z9lcd_vlinehha>
    dab0:	03 c0       	rjmp	.+6      	; 0xdab8 <_Z14lcd_outdezNAtthhlha+0x186>
        else
          lcd_plot(x+1, y+6);
    dab2:	66 2d       	mov	r22, r6
    dab4:	0e 94 08 6b 	call	0xd610	; 0xd610 <_Z8lcd_plothh>
      }
      if (qr.quot)
    dab8:	20 97       	sbiw	r28, 0x00	; 0
    daba:	09 f0       	breq	.+2      	; 0xdabe <_Z14lcd_outdezNAtthhlha+0x18c>
    dabc:	ff 24       	eor	r15, r15
        prec = 0;
    }
    val = qr.quot ;
    dabe:	9e 01       	movw	r18, r28
    dac0:	44 27       	eor	r20, r20
    dac2:	37 fd       	sbrc	r19, 7
    dac4:	40 95       	com	r20
    dac6:	54 2f       	mov	r21, r20
    if (!val)
    dac8:	21 15       	cp	r18, r1
    daca:	31 05       	cpc	r19, r1
    dacc:	41 05       	cpc	r20, r1
    dace:	51 05       	cpc	r21, r1
    dad0:	89 f4       	brne	.+34     	; 0xdaf4 <_Z14lcd_outdezNAtthhlha+0x1c2>
    {
      if (prec)
    dad2:	ff 20       	and	r15, r15
    dad4:	39 f0       	breq	.+14     	; 0xdae4 <_Z14lcd_outdezNAtthhlha+0x1b2>
      {
        if ( prec == 2 )
    dad6:	82 e0       	ldi	r24, 0x02	; 2
    dad8:	f8 16       	cp	r15, r24
    dada:	59 f4       	brne	.+22     	; 0xdaf2 <_Z14lcd_outdezNAtthhlha+0x1c0>
        {
          if ( i > 1 )
    dadc:	81 e0       	ldi	r24, 0x01	; 1
    dade:	8a 15       	cp	r24, r10
    dae0:	40 f0       	brcs	.+16     	; 0xdaf2 <_Z14lcd_outdezNAtthhlha+0x1c0>
    dae2:	08 c0       	rjmp	.+16     	; 0xdaf4 <_Z14lcd_outdezNAtthhlha+0x1c2>
        else
        {
          prec = 0 ;
        }
      }
      else if (mode & LEADING0)
    dae4:	d4 fe       	sbrs	r13, 4
    dae6:	0e c0       	rjmp	.+28     	; 0xdb04 <_Z14lcd_outdezNAtthhlha+0x1d2>
			{
				if ( fullwidth == 0 )
    dae8:	33 20       	and	r3, r3
    daea:	21 f4       	brne	.+8      	; 0xdaf4 <_Z14lcd_outdezNAtthhlha+0x1c2>
				{
        	mode -= LEADING0;
    daec:	80 ef       	ldi	r24, 0xF0	; 240
    daee:	d8 0e       	add	r13, r24
    daf0:	01 c0       	rjmp	.+2      	; 0xdaf4 <_Z14lcd_outdezNAtthhlha+0x1c2>
    daf2:	ff 24       	eor	r15, r15
				}
			}
      else
        break;
    }
    x-=fw;
    daf4:	1e 19       	sub	r17, r14
  if ( prec == 2 )
  {
    mode -= LEADING0;  // Can't have PREC2 and LEADING0
  }

  for (uint8_t i=1; i<=len; i++)
    daf6:	a3 94       	inc	r10
    daf8:	8a 2d       	mov	r24, r10
    dafa:	90 e0       	ldi	r25, 0x00	; 0
    dafc:	48 16       	cp	r4, r24
    dafe:	59 06       	cpc	r5, r25
    db00:	0c f0       	brlt	.+2      	; 0xdb04 <_Z14lcd_outdezNAtthhlha+0x1d2>
    db02:	a0 cf       	rjmp	.-192    	; 0xda44 <_Z14lcd_outdezNAtthhlha+0x112>
      else
        break;
    }
    x-=fw;
  }
  if (xn) {
    db04:	cc 20       	and	r12, r12
    db06:	61 f0       	breq	.+24     	; 0xdb20 <_Z14lcd_outdezNAtthhlha+0x1ee>
    lcd_hline(xn, y+2*FH-4, ln);
    db08:	68 2d       	mov	r22, r8
    db0a:	64 5f       	subi	r22, 0xF4	; 244
    db0c:	8c 2d       	mov	r24, r12
    db0e:	4b 2d       	mov	r20, r11
    db10:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
    lcd_hline(xn, y+2*FH-3, ln);
    db14:	68 2d       	mov	r22, r8
    db16:	63 5f       	subi	r22, 0xF3	; 243
    db18:	8c 2d       	mov	r24, r12
    db1a:	4b 2d       	mov	r20, r11
    db1c:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <_Z9lcd_hlinehha>
  }
  if(negative) lcd_putcAtt(x-fw,y,'-',mode);
    db20:	77 20       	and	r7, r7
    db22:	39 f0       	breq	.+14     	; 0xdb32 <_Z14lcd_outdezNAtthhlha+0x200>
    db24:	81 2f       	mov	r24, r17
    db26:	8e 19       	sub	r24, r14
    db28:	68 2d       	mov	r22, r8
    db2a:	4d e2       	ldi	r20, 0x2D	; 45
    db2c:	2d 2d       	mov	r18, r13
    db2e:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
	asm("") ;
	return 0 ;		// Stops compiler creating two sets of POPS, saves flash
}
    db32:	80 e0       	ldi	r24, 0x00	; 0
    db34:	df 91       	pop	r29
    db36:	cf 91       	pop	r28
    db38:	1f 91       	pop	r17
    db3a:	0f 91       	pop	r16
    db3c:	ff 90       	pop	r15
    db3e:	ef 90       	pop	r14
    db40:	df 90       	pop	r13
    db42:	cf 90       	pop	r12
    db44:	bf 90       	pop	r11
    db46:	af 90       	pop	r10
    db48:	9f 90       	pop	r9
    db4a:	8f 90       	pop	r8
    db4c:	7f 90       	pop	r7
    db4e:	6f 90       	pop	r6
    db50:	5f 90       	pop	r5
    db52:	4f 90       	pop	r4
    db54:	3f 90       	pop	r3
    db56:	08 95       	ret

0000db58 <_Z12lcd_2_digitshhhh>:
void lcd_outdezAtt( uint8_t x, uint8_t y, int16_t val, uint8_t mode )
{
  lcd_outdezNAtt( x,y,val,mode,5);
}

void lcd_2_digits( uint8_t x, uint8_t y, uint8_t value, uint8_t attr )
    db58:	cf 92       	push	r12
    db5a:	df 92       	push	r13
    db5c:	ef 92       	push	r14
    db5e:	ff 92       	push	r15
    db60:	0f 93       	push	r16
    db62:	c4 2e       	mov	r12, r20
    db64:	02 2f       	mov	r16, r18
{
	lcd_outdezNAtt( x, y, value, attr + LEADING0, 2 ) ;
    db66:	dd 24       	eor	r13, r13
    db68:	ee 24       	eor	r14, r14
    db6a:	ff 24       	eor	r15, r15
    db6c:	00 5f       	subi	r16, 0xF0	; 240
    db6e:	a7 01       	movw	r20, r14
    db70:	96 01       	movw	r18, r12
    db72:	92 e0       	ldi	r25, 0x02	; 2
    db74:	e9 2e       	mov	r14, r25
    db76:	0e 94 99 6c 	call	0xd932	; 0xd932 <_Z14lcd_outdezNAtthhlha>
}
    db7a:	0f 91       	pop	r16
    db7c:	ff 90       	pop	r15
    db7e:	ef 90       	pop	r14
    db80:	df 90       	pop	r13
    db82:	cf 90       	pop	r12
    db84:	08 95       	ret

0000db86 <_Z13lcd_outdezAtthhih>:
void lcd_outdez( uint8_t x, uint8_t y, int16_t val)
{
  lcd_outdezAtt(x,y,val,0);
}

void lcd_outdezAtt( uint8_t x, uint8_t y, int16_t val, uint8_t mode )
    db86:	cf 92       	push	r12
    db88:	df 92       	push	r13
    db8a:	ef 92       	push	r14
    db8c:	ff 92       	push	r15
    db8e:	0f 93       	push	r16
    db90:	6a 01       	movw	r12, r20
    db92:	02 2f       	mov	r16, r18
{
  lcd_outdezNAtt( x,y,val,mode,5);
    db94:	ee 24       	eor	r14, r14
    db96:	d7 fc       	sbrc	r13, 7
    db98:	e0 94       	com	r14
    db9a:	fe 2c       	mov	r15, r14
    db9c:	a7 01       	movw	r20, r14
    db9e:	96 01       	movw	r18, r12
    dba0:	75 e0       	ldi	r23, 0x05	; 5
    dba2:	e7 2e       	mov	r14, r23
    dba4:	0e 94 99 6c 	call	0xd932	; 0xd932 <_Z14lcd_outdezNAtthhlha>
}
    dba8:	0f 91       	pop	r16
    dbaa:	ff 90       	pop	r15
    dbac:	ef 90       	pop	r14
    dbae:	df 90       	pop	r13
    dbb0:	cf 90       	pop	r12
    dbb2:	08 95       	ret

0000dbb4 <_Z10lcd_outdezhhi>:
    val>>=4;
  }
}
void lcd_outdez( uint8_t x, uint8_t y, int16_t val)
{
  lcd_outdezAtt(x,y,val,0);
    dbb4:	20 e0       	ldi	r18, 0x00	; 0
    dbb6:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
}
    dbba:	08 95       	ret

0000dbbc <_Z9putsVoltshhhh>:
	x += (att&DBLSIZE) ? FWNUM*6-4 : FW*3-3;
	lcd_2_digits( x, y, (uint16_t)qr.rem, att2 ) ;
//	lcd_outdezNAtt(x, y, (uint16_t)qr.rem, LEADING0|att2,2);
}

void putsVolts(uint8_t x,uint8_t y, uint8_t volts, uint8_t att)
    dbbc:	0f 93       	push	r16
    dbbe:	1f 93       	push	r17
    dbc0:	06 2f       	mov	r16, r22
    dbc2:	12 2f       	mov	r17, r18
{
	lcd_outdezAtt(x, y, volts, att|PREC1);
    dbc4:	20 62       	ori	r18, 0x20	; 32
    dbc6:	50 e0       	ldi	r21, 0x00	; 0
    dbc8:	0e 94 c3 6d 	call	0xdb86	; 0xdb86 <_Z13lcd_outdezAtthhih>
	if(!(att&NO_UNIT)) lcd_putcAtt(lcd_lastPos, y, 'v', att);
    dbcc:	17 fd       	sbrc	r17, 7
    dbce:	07 c0       	rjmp	.+14     	; 0xdbde <_Z9putsVoltshhhh+0x22>
    dbd0:	80 91 45 09 	lds	r24, 0x0945
    dbd4:	60 2f       	mov	r22, r16
    dbd6:	46 e7       	ldi	r20, 0x76	; 118
    dbd8:	21 2f       	mov	r18, r17
    dbda:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
}
    dbde:	1f 91       	pop	r17
    dbe0:	0f 91       	pop	r16
    dbe2:	08 95       	ret

0000dbe4 <_Z8putsVBathhh>:


void putsVBat(uint8_t x,uint8_t y,uint8_t att)
    dbe4:	24 2f       	mov	r18, r20
{
    //att |= g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0;
	putsVolts(x, y, g_vbat100mV, att);
    dbe6:	40 91 1f 06 	lds	r20, 0x061F
    dbea:	0e 94 de 6d 	call	0xdbbc	; 0xdbbc <_Z9putsVoltshhhh>
}
    dbee:	08 95       	ret

0000dbf0 <_Z8putsTimehhihh>:
  //for(unsigned i=0; i<sizeof(displayBuf); i++) displayBuf[i]=0;
  memset(displayBuf, 0, sizeof(displayBuf));
}


void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
    dbf0:	df 92       	push	r13
    dbf2:	ef 92       	push	r14
    dbf4:	ff 92       	push	r15
    dbf6:	0f 93       	push	r16
    dbf8:	1f 93       	push	r17
    dbfa:	cf 93       	push	r28
    dbfc:	df 93       	push	r29
    dbfe:	f8 2e       	mov	r15, r24
    dc00:	e6 2e       	mov	r14, r22
    dc02:	ea 01       	movw	r28, r20
    dc04:	12 2f       	mov	r17, r18
    dc06:	d0 2e       	mov	r13, r16
{
	div_t qr ;

	if ( tme<0 )
    dc08:	57 ff       	sbrs	r21, 7
    dc0a:	10 c0       	rjmp	.+32     	; 0xdc2c <_Z8putsTimehhihh+0x3c>
	{
		lcd_putcAtt( x - ((att&DBLSIZE) ? FWNUM*6-2 : FWNUM*3),    y, '-',att);
    dc0c:	22 fd       	sbrc	r18, 2
    dc0e:	02 c0       	rjmp	.+4      	; 0xdc14 <_Z8putsTimehhihh+0x24>
    dc10:	8f e0       	ldi	r24, 0x0F	; 15
    dc12:	01 c0       	rjmp	.+2      	; 0xdc16 <_Z8putsTimehhihh+0x26>
    dc14:	8c e1       	ldi	r24, 0x1C	; 28
    dc16:	9f 2d       	mov	r25, r15
    dc18:	98 1b       	sub	r25, r24
    dc1a:	89 2f       	mov	r24, r25
    dc1c:	6e 2d       	mov	r22, r14
    dc1e:	4d e2       	ldi	r20, 0x2D	; 45
    dc20:	21 2f       	mov	r18, r17
    dc22:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
		tme = -tme;
    dc26:	d0 95       	com	r29
    dc28:	c1 95       	neg	r28
    dc2a:	df 4f       	sbci	r29, 0xFF	; 255
	}

	lcd_putcAtt(x, y, ':',att&att2);
    dc2c:	2d 2d       	mov	r18, r13
    dc2e:	21 23       	and	r18, r17
    dc30:	8f 2d       	mov	r24, r15
    dc32:	6e 2d       	mov	r22, r14
    dc34:	4a e3       	ldi	r20, 0x3A	; 58
    dc36:	0e 94 8a 69 	call	0xd314	; 0xd314 <_Z11lcd_putcAtthhch>
	qr = div( tme, 60 ) ;
    dc3a:	ce 01       	movw	r24, r28
    dc3c:	6c e3       	ldi	r22, 0x3C	; 60
    dc3e:	70 e0       	ldi	r23, 0x00	; 0
    dc40:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    dc44:	46 2f       	mov	r20, r22
    dc46:	08 2f       	mov	r16, r24
	lcd_2_digits( x, y, (uint16_t)qr.quot, att ) ;
    dc48:	8f 2d       	mov	r24, r15
    dc4a:	6e 2d       	mov	r22, r14
    dc4c:	21 2f       	mov	r18, r17
    dc4e:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <_Z12lcd_2_digitshhhh>
//	lcd_outdezNAtt(x/*+ ((att&DBLSIZE) ? 2 : 0)*/, y, (uint16_t)qr.quot, LEADING0|att,2);
	x += (att&DBLSIZE) ? FWNUM*6-4 : FW*3-3;
    dc52:	12 fd       	sbrc	r17, 2
    dc54:	02 c0       	rjmp	.+4      	; 0xdc5a <_Z8putsTimehhihh+0x6a>
    dc56:	8f e0       	ldi	r24, 0x0F	; 15
    dc58:	01 c0       	rjmp	.+2      	; 0xdc5c <_Z8putsTimehhihh+0x6c>
    dc5a:	8a e1       	ldi	r24, 0x1A	; 26
	lcd_2_digits( x, y, (uint16_t)qr.rem, att2 ) ;
    dc5c:	8f 0d       	add	r24, r15
    dc5e:	6e 2d       	mov	r22, r14
    dc60:	40 2f       	mov	r20, r16
    dc62:	2d 2d       	mov	r18, r13
    dc64:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <_Z12lcd_2_digitshhhh>
//	lcd_outdezNAtt(x, y, (uint16_t)qr.rem, LEADING0|att2,2);
}
    dc68:	df 91       	pop	r29
    dc6a:	cf 91       	pop	r28
    dc6c:	1f 91       	pop	r17
    dc6e:	0f 91       	pop	r16
    dc70:	ff 90       	pop	r15
    dc72:	ef 90       	pop	r14
    dc74:	df 90       	pop	r13
    dc76:	08 95       	ret

0000dc78 <_Z9lcd_clearv>:


void lcd_clear()
{
  //for(unsigned i=0; i<sizeof(displayBuf); i++) displayBuf[i]=0;
  memset(displayBuf, 0, sizeof(displayBuf));
    dc78:	80 e0       	ldi	r24, 0x00	; 0
    dc7a:	94 e0       	ldi	r25, 0x04	; 4
    dc7c:	e6 e4       	ldi	r30, 0x46	; 70
    dc7e:	f9 e0       	ldi	r31, 0x09	; 9
    dc80:	df 01       	movw	r26, r30
    dc82:	9c 01       	movw	r18, r24
    dc84:	1d 92       	st	X+, r1
    dc86:	21 50       	subi	r18, 0x01	; 1
    dc88:	30 40       	sbci	r19, 0x00	; 0
    dc8a:	e1 f7       	brne	.-8      	; 0xdc84 <_Z9lcd_clearv+0xc>
}
    dc8c:	08 95       	ret

0000dc8e <_Z8getEventv>:

uint8_t s_evt;

uint8_t getEvent()
{
  uint8_t evt = s_evt;
    dc8e:	80 91 49 0d 	lds	r24, 0x0D49
  s_evt=0;
    dc92:	10 92 49 0d 	sts	0x0D49, r1
  return evt;
}
    dc96:	08 95       	ret

0000dc98 <_ZN3Key5inputEb8EnumKeys>:
//  uint8_t getDbl()   { return m_dblcnt;                     }
};


Key keys[NUM_KEYS];
void Key::input(bool val, EnumKeys enuk)
    dc98:	fc 01       	movw	r30, r24
{
  //  uint8_t old=m_vals;
	uint8_t t_vals ;
//  m_vals <<= 1;  if(val) m_vals |= 1; //portbit einschieben
	t_vals = m_vals ;
    dc9a:	80 81       	ld	r24, Z
    dc9c:	8f 70       	andi	r24, 0x0F	; 15
	t_vals <<= 1 ;
    dc9e:	88 0f       	add	r24, r24
  if(val) t_vals |= 1; //portbit einschieben
    dca0:	61 11       	cpse	r22, r1
    dca2:	81 60       	ori	r24, 0x01	; 1
	m_vals = t_vals ;
    dca4:	8f 70       	andi	r24, 0x0F	; 15
    dca6:	90 81       	ld	r25, Z
    dca8:	90 7f       	andi	r25, 0xF0	; 240
    dcaa:	98 2b       	or	r25, r24
    dcac:	90 83       	st	Z, r25
  m_cnt++;
    dcae:	81 81       	ldd	r24, Z+1	; 0x01
    dcb0:	8f 5f       	subi	r24, 0xFF	; 255
    dcb2:	81 83       	std	Z+1, r24	; 0x01

  if(m_state && m_vals==0){  //gerade eben sprung auf 0
    dcb4:	82 81       	ldd	r24, Z+2	; 0x02
    dcb6:	88 23       	and	r24, r24
    dcb8:	51 f0       	breq	.+20     	; 0xdcce <_ZN3Key5inputEb8EnumKeys+0x36>
    dcba:	9f 70       	andi	r25, 0x0F	; 15
    dcbc:	41 f4       	brne	.+16     	; 0xdcce <_ZN3Key5inputEb8EnumKeys+0x36>
    if(m_state!=KSTATE_KILLED) {
    dcbe:	83 36       	cpi	r24, 0x63	; 99
    dcc0:	21 f0       	breq	.+8      	; 0xdcca <_ZN3Key5inputEb8EnumKeys+0x32>
      putEvent(EVT_KEY_BREAK(enuk));
    dcc2:	84 2f       	mov	r24, r20
    dcc4:	80 62       	ori	r24, 0x20	; 32
    dcc6:	80 93 49 0d 	sts	0x0D49, r24
//      if(!( m_state == 16 && m_cnt<16)){
//        m_dblcnt=0;
//      }
        //      }
    }
    m_cnt   = 0;
    dcca:	11 82       	std	Z+1, r1	; 0x01
    m_state = KSTATE_OFF;
    dccc:	12 82       	std	Z+2, r1	; 0x02
  }
  switch(m_state){
    dcce:	92 81       	ldd	r25, Z+2	; 0x02
    dcd0:	98 30       	cpi	r25, 0x08	; 8
    dcd2:	91 f1       	breq	.+100    	; 0xdd38 <_ZN3Key5inputEb8EnumKeys+0xa0>
    dcd4:	99 30       	cpi	r25, 0x09	; 9
    dcd6:	50 f4       	brcc	.+20     	; 0xdcec <_ZN3Key5inputEb8EnumKeys+0x54>
    dcd8:	91 30       	cpi	r25, 0x01	; 1
    dcda:	b9 f1       	breq	.+110    	; 0xdd4a <_ZN3Key5inputEb8EnumKeys+0xb2>
    dcdc:	91 30       	cpi	r25, 0x01	; 1
    dcde:	90 f0       	brcs	.+36     	; 0xdd04 <_ZN3Key5inputEb8EnumKeys+0x6c>
    dce0:	92 30       	cpi	r25, 0x02	; 2
    dce2:	51 f1       	breq	.+84     	; 0xdd38 <_ZN3Key5inputEb8EnumKeys+0xa0>
    dce4:	94 30       	cpi	r25, 0x04	; 4
    dce6:	09 f0       	breq	.+2      	; 0xdcea <_ZN3Key5inputEb8EnumKeys+0x52>
    dce8:	43 c0       	rjmp	.+134    	; 0xdd70 <_ZN3Key5inputEb8EnumKeys+0xd8>
    dcea:	26 c0       	rjmp	.+76     	; 0xdd38 <_ZN3Key5inputEb8EnumKeys+0xa0>
    dcec:	9f 35       	cpi	r25, 0x5F	; 95
    dcee:	c9 f0       	breq	.+50     	; 0xdd22 <_ZN3Key5inputEb8EnumKeys+0x8a>
    dcf0:	90 36       	cpi	r25, 0x60	; 96
    dcf2:	18 f4       	brcc	.+6      	; 0xdcfa <_ZN3Key5inputEb8EnumKeys+0x62>
    dcf4:	90 31       	cpi	r25, 0x10	; 16
    dcf6:	e1 f5       	brne	.+120    	; 0xdd70 <_ZN3Key5inputEb8EnumKeys+0xd8>
    dcf8:	1f c0       	rjmp	.+62     	; 0xdd38 <_ZN3Key5inputEb8EnumKeys+0xa0>
    dcfa:	91 36       	cpi	r25, 0x61	; 97
    dcfc:	49 f0       	breq	.+18     	; 0xdd10 <_ZN3Key5inputEb8EnumKeys+0x78>
    dcfe:	92 36       	cpi	r25, 0x62	; 98
    dd00:	b9 f5       	brne	.+110    	; 0xdd70 <_ZN3Key5inputEb8EnumKeys+0xd8>
    dd02:	30 c0       	rjmp	.+96     	; 0xdd64 <_ZN3Key5inputEb8EnumKeys+0xcc>
    case KSTATE_OFF:
      if(m_vals==FFVAL){ //gerade eben sprung auf ff
    dd04:	80 81       	ld	r24, Z
    dd06:	8f 70       	andi	r24, 0x0F	; 15
    dd08:	8f 30       	cpi	r24, 0x0F	; 15
    dd0a:	91 f5       	brne	.+100    	; 0xdd70 <_ZN3Key5inputEb8EnumKeys+0xd8>
        m_state = KSTATE_START;
    dd0c:	81 e6       	ldi	r24, 0x61	; 97
    dd0e:	11 c0       	rjmp	.+34     	; 0xdd32 <_ZN3Key5inputEb8EnumKeys+0x9a>
        m_cnt   = 0;
      }
      break;
      //fallthrough
    case KSTATE_START:
      putEvent(EVT_KEY_FIRST(enuk));
    dd10:	40 66       	ori	r20, 0x60	; 96
    dd12:	40 93 49 0d 	sts	0x0D49, r20
      Inactivity.inacCounter = 0;
    dd16:	10 92 5c 07 	sts	0x075C, r1
    dd1a:	10 92 5b 07 	sts	0x075B, r1
//      m_dblcnt++;
#ifdef KSTATE_RPTDELAY
      m_state   = KSTATE_RPTDELAY;
    dd1e:	8f e5       	ldi	r24, 0x5F	; 95
    dd20:	08 c0       	rjmp	.+16     	; 0xdd32 <_ZN3Key5inputEb8EnumKeys+0x9a>
#endif
      m_cnt     = 0;
      break;
#ifdef KSTATE_RPTDELAY
    case KSTATE_RPTDELAY: // gruvin: longer delay before first key repeat
      if(m_cnt == 32) putEvent(EVT_KEY_LONG(enuk)); // need to catch this inside RPTDELAY time
    dd22:	81 81       	ldd	r24, Z+1	; 0x01
    dd24:	80 32       	cpi	r24, 0x20	; 32
    dd26:	11 f4       	brne	.+4      	; 0xdd2c <_ZN3Key5inputEb8EnumKeys+0x94>
    dd28:	40 68       	ori	r20, 0x80	; 128
    dd2a:	19 c0       	rjmp	.+50     	; 0xdd5e <_ZN3Key5inputEb8EnumKeys+0xc6>
      if (m_cnt == 40) {
    dd2c:	88 32       	cpi	r24, 0x28	; 40
    dd2e:	01 f5       	brne	.+64     	; 0xdd70 <_ZN3Key5inputEb8EnumKeys+0xd8>
        m_state = 16;
    dd30:	80 e1       	ldi	r24, 0x10	; 16
    dd32:	82 83       	std	Z+2, r24	; 0x02
        m_cnt = 0;
    dd34:	11 82       	std	Z+1, r1	; 0x01
    dd36:	08 95       	ret
      //fallthrough
#endif
    case 8:
    case 4:
    case 2:
      if(m_cnt >= 48)  { //3 6 12 24 48 pulses in every 480ms
    dd38:	81 81       	ldd	r24, Z+1	; 0x01
    dd3a:	80 33       	cpi	r24, 0x30	; 48
    dd3c:	30 f0       	brcs	.+12     	; 0xdd4a <_ZN3Key5inputEb8EnumKeys+0xb2>
        m_state >>= 1;
    dd3e:	89 2f       	mov	r24, r25
    dd40:	90 e0       	ldi	r25, 0x00	; 0
    dd42:	95 95       	asr	r25
    dd44:	87 95       	ror	r24
    dd46:	82 83       	std	Z+2, r24	; 0x02
        m_cnt     = 0;
    dd48:	11 82       	std	Z+1, r1	; 0x01
      }
      //fallthrough
    case 1:
      if( (m_cnt & (m_state-1)) == 0)  putEvent(EVT_KEY_REPT(enuk));
    dd4a:	82 81       	ldd	r24, Z+2	; 0x02
    dd4c:	90 e0       	ldi	r25, 0x00	; 0
    dd4e:	01 97       	sbiw	r24, 0x01	; 1
    dd50:	21 81       	ldd	r18, Z+1	; 0x01
    dd52:	30 e0       	ldi	r19, 0x00	; 0
    dd54:	82 23       	and	r24, r18
    dd56:	93 23       	and	r25, r19
    dd58:	89 2b       	or	r24, r25
    dd5a:	51 f4       	brne	.+20     	; 0xdd70 <_ZN3Key5inputEb8EnumKeys+0xd8>
    dd5c:	40 64       	ori	r20, 0x40	; 64
    dd5e:	40 93 49 0d 	sts	0x0D49, r20
    dd62:	08 95       	ret
      break;

    case KSTATE_PAUSE: //pause
      if(m_cnt >= 64)      {
    dd64:	81 81       	ldd	r24, Z+1	; 0x01
    dd66:	80 34       	cpi	r24, 0x40	; 64
    dd68:	18 f0       	brcs	.+6      	; 0xdd70 <_ZN3Key5inputEb8EnumKeys+0xd8>
        m_state = 8;
    dd6a:	88 e0       	ldi	r24, 0x08	; 8
    dd6c:	82 83       	std	Z+2, r24	; 0x02
        m_cnt   = 0;
    dd6e:	11 82       	std	Z+1, r1	; 0x01
    dd70:	08 95       	ret

0000dd72 <_Z8keyState8EnumKeys>:
}

bool keyState(EnumKeys enuk)
{
  uint8_t xxx = 0 ;
	uint8_t ping = PING ;
    dd72:	40 91 63 00 	lds	r20, 0x0063
  if(enuk < (int)DIM(keys))  return keys[enuk].state() ? 1 : 0;
    dd76:	9c 01       	movw	r18, r24
    dd78:	8f 30       	cpi	r24, 0x0F	; 15
    dd7a:	91 05       	cpc	r25, r1
    dd7c:	74 f4       	brge	.+28     	; 0xdd9a <_Z8keyState8EnumKeys+0x28>
  uint8_t unused_m_dblcnt:2;
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
    dd7e:	90 e0       	ldi	r25, 0x00	; 0
    dd80:	f9 01       	movw	r30, r18
    dd82:	ee 0f       	add	r30, r30
    dd84:	ff 1f       	adc	r31, r31
    dd86:	e2 0f       	add	r30, r18
    dd88:	f3 1f       	adc	r31, r19
    dd8a:	e6 5b       	subi	r30, 0xB6	; 182
    dd8c:	f2 4f       	sbci	r31, 0xF2	; 242
    dd8e:	80 81       	ld	r24, Z
    dd90:	8f 70       	andi	r24, 0x0F	; 15
    dd92:	8f 30       	cpi	r24, 0x0F	; 15
    dd94:	e1 f5       	brne	.+120    	; 0xde0e <_Z8keyState8EnumKeys+0x9c>
    dd96:	91 e0       	ldi	r25, 0x01	; 1
    dd98:	3a c0       	rjmp	.+116    	; 0xde0e <_Z8keyState8EnumKeys+0x9c>
{
  uint8_t xxx = 0 ;
	uint8_t ping = PING ;
  if(enuk < (int)DIM(keys))  return keys[enuk].state() ? 1 : 0;

  switch((uint8_t)enuk){
    dd9a:	83 31       	cpi	r24, 0x13	; 19
    dd9c:	19 f1       	breq	.+70     	; 0xdde4 <_Z8keyState8EnumKeys+0x72>
    dd9e:	84 31       	cpi	r24, 0x14	; 20
    dda0:	60 f4       	brcc	.+24     	; 0xddba <_Z8keyState8EnumKeys+0x48>
    dda2:	80 31       	cpi	r24, 0x10	; 16
    dda4:	c9 f0       	breq	.+50     	; 0xddd8 <_Z8keyState8EnumKeys+0x66>
    dda6:	81 31       	cpi	r24, 0x11	; 17
    dda8:	18 f4       	brcc	.+6      	; 0xddb0 <_Z8keyState8EnumKeys+0x3e>
    ddaa:	8f 30       	cpi	r24, 0x0F	; 15
    ddac:	79 f5       	brne	.+94     	; 0xde0c <_Z8keyState8EnumKeys+0x9a>
    ddae:	25 c0       	rjmp	.+74     	; 0xddfa <_Z8keyState8EnumKeys+0x88>
    ddb0:	81 31       	cpi	r24, 0x11	; 17
    ddb2:	61 f0       	breq	.+24     	; 0xddcc <_Z8keyState8EnumKeys+0x5a>
    ddb4:	82 31       	cpi	r24, 0x12	; 18
    ddb6:	51 f5       	brne	.+84     	; 0xde0c <_Z8keyState8EnumKeys+0x9a>
    ddb8:	11 c0       	rjmp	.+34     	; 0xdddc <_Z8keyState8EnumKeys+0x6a>
    ddba:	85 31       	cpi	r24, 0x15	; 21
    ddbc:	51 f0       	breq	.+20     	; 0xddd2 <_Z8keyState8EnumKeys+0x60>
    ddbe:	85 31       	cpi	r24, 0x15	; 21
    ddc0:	a8 f0       	brcs	.+42     	; 0xddec <_Z8keyState8EnumKeys+0x7a>
    ddc2:	86 31       	cpi	r24, 0x16	; 22
    ddc4:	b9 f0       	breq	.+46     	; 0xddf4 <_Z8keyState8EnumKeys+0x82>
    ddc6:	87 31       	cpi	r24, 0x17	; 23
    ddc8:	09 f5       	brne	.+66     	; 0xde0c <_Z8keyState8EnumKeys+0x9a>
    ddca:	1a c0       	rjmp	.+52     	; 0xde00 <_Z8keyState8EnumKeys+0x8e>
    case SW_ElevDR : xxx = PINE & (1<<INP_E_ElevDR);
    ddcc:	81 b1       	in	r24, 0x01	; 1
    ddce:	84 70       	andi	r24, 0x04	; 4
    ddd0:	19 c0       	rjmp	.+50     	; 0xde04 <_Z8keyState8EnumKeys+0x92>
				xxx = PINE & (1<<INP_E_AileDR) ;
			}
#else
    //case SW_AileDR : return PINE & (1<<INP_E_AileDR);
 #if (!(defined(JETI) || defined(FRSKY) || defined(ARDUPILOT) || defined(NMEA)))
    case SW_AileDR : xxx = PINE & (1<<INP_E_AileDR);
    ddd2:	81 b1       	in	r24, 0x01	; 1
    ddd4:	82 70       	andi	r24, 0x02	; 2
    ddd6:	16 c0       	rjmp	.+44     	; 0xde04 <_Z8keyState8EnumKeys+0x92>
 #endif
#endif
    break ;


    case SW_RuddDR : xxx = ping & (1<<INP_G_RuddDR);
    ddd8:	84 2f       	mov	r24, r20
    ddda:	10 c0       	rjmp	.+32     	; 0xddfc <_Z8keyState8EnumKeys+0x8a>
    break ;
      //     INP_G_ID1 INP_E_ID2
      // id0    0        1
      // id1    1        1
      // id2    1        0
    case SW_ID0    : xxx = ~ping & (1<<INP_G_ID1);
    dddc:	84 2f       	mov	r24, r20
    ddde:	80 95       	com	r24
    dde0:	88 70       	andi	r24, 0x08	; 8
    dde2:	10 c0       	rjmp	.+32     	; 0xde04 <_Z8keyState8EnumKeys+0x92>
    break ;
    case SW_ID1    : xxx = (ping & (1<<INP_G_ID1)) ; if ( xxx ) xxx = (PINE & (1<<INP_E_ID2));
    dde4:	43 ff       	sbrs	r20, 3
    dde6:	12 c0       	rjmp	.+36     	; 0xde0c <_Z8keyState8EnumKeys+0x9a>
    dde8:	81 b1       	in	r24, 0x01	; 1
    ddea:	02 c0       	rjmp	.+4      	; 0xddf0 <_Z8keyState8EnumKeys+0x7e>
    break ;
    case SW_ID2    : xxx = ~PINE & (1<<INP_E_ID2);
    ddec:	81 b1       	in	r24, 0x01	; 1
    ddee:	80 95       	com	r24
    ddf0:	80 74       	andi	r24, 0x40	; 64
    ddf2:	08 c0       	rjmp	.+16     	; 0xde04 <_Z8keyState8EnumKeys+0x92>
    break ;
    case SW_Gear   : xxx = PINE & (1<<INP_E_Gear);
    ddf4:	81 b1       	in	r24, 0x01	; 1
    ddf6:	80 71       	andi	r24, 0x10	; 16
    ddf8:	05 c0       	rjmp	.+10     	; 0xde04 <_Z8keyState8EnumKeys+0x92>
			{
				xxx = PINE & (1<<INP_E_ThrCt) ;
			}
#else
 #if (!(defined(JETI) || defined(FRSKY) || defined(ARDUPILOT) || defined(NMEA)))
     case SW_ThrCt  : xxx = PINE & (1<<INP_E_ThrCt);
    ddfa:	81 b1       	in	r24, 0x01	; 1
    ddfc:	81 70       	andi	r24, 0x01	; 1
    ddfe:	02 c0       	rjmp	.+4      	; 0xde04 <_Z8keyState8EnumKeys+0x92>
    case SW_ThrCt  : xxx = PINC & (1<<INP_C_ThrCt); //shad974: rerouted inputs to free up UART0
 #endif
#endif
		break ;

    case SW_Trainer: xxx = PINE & (1<<INP_E_Trainer);
    de00:	81 b1       	in	r24, 0x01	; 1
    de02:	80 72       	andi	r24, 0x20	; 32
    de04:	81 11       	cpse	r24, r1
    de06:	81 e0       	ldi	r24, 0x01	; 1
    de08:	98 2f       	mov	r25, r24
    de0a:	01 c0       	rjmp	.+2      	; 0xde0e <_Z8keyState8EnumKeys+0x9c>
    de0c:	90 e0       	ldi	r25, 0x00	; 0
  if ( xxx )
  {
    return 1 ;
  }
  return 0;
}
    de0e:	89 2f       	mov	r24, r25
    de10:	08 95       	ret

0000de12 <_Z11pauseEventsh>:

void pauseEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
    de12:	8f 70       	andi	r24, 0x0F	; 15
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
    de14:	8f 30       	cpi	r24, 0x0F	; 15
    de16:	59 f0       	breq	.+22     	; 0xde2e <_Z11pauseEventsh+0x1c>
    de18:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
    de1a:	fc 01       	movw	r30, r24
    de1c:	ee 0f       	add	r30, r30
    de1e:	ff 1f       	adc	r31, r31
    de20:	e8 0f       	add	r30, r24
    de22:	f9 1f       	adc	r31, r25
    de24:	e6 5b       	subi	r30, 0xB6	; 182
    de26:	f2 4f       	sbci	r31, 0xF2	; 242
    de28:	82 e6       	ldi	r24, 0x62	; 98
    de2a:	82 83       	std	Z+2, r24	; 0x02
    de2c:	11 82       	std	Z+1, r1	; 0x01
    de2e:	08 95       	ret

0000de30 <_Z10killEventsh>:
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
    de30:	8f 70       	andi	r24, 0x0F	; 15
  if(event < (int)DIM(keys))  keys[event].killEvents();
    de32:	8f 30       	cpi	r24, 0x0F	; 15
    de34:	51 f0       	breq	.+20     	; 0xde4a <_Z10killEventsh+0x1a>
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; /*m_dblcnt=0;*/ }
    de36:	90 e0       	ldi	r25, 0x00	; 0
    de38:	fc 01       	movw	r30, r24
    de3a:	ee 0f       	add	r30, r30
    de3c:	ff 1f       	adc	r31, r31
    de3e:	e8 0f       	add	r30, r24
    de40:	f9 1f       	adc	r31, r25
    de42:	e6 5b       	subi	r30, 0xB6	; 182
    de44:	f2 4f       	sbci	r31, 0xF2	; 242
    de46:	83 e6       	ldi	r24, 0x63	; 99
    de48:	82 83       	std	Z+2, r24	; 0x02
    de4a:	08 95       	ret

0000de4c <_Z7per10msv>:
//volatile uint8_t g8_tmr10ms ;
volatile uint8_t  g_blinkTmr10ms;
extern uint8_t StickScrollTimer ;


void per10ms()
    de4c:	0f 93       	push	r16
    de4e:	1f 93       	push	r17
    de50:	cf 93       	push	r28
    de52:	df 93       	push	r29
{
	uint16_t tmr ;
//  g_tmr10ms++;				// 16 bit sized
//	g8_tmr10ms += 1 ;		// byte sized
//  g_blinkTmr10ms++;
  tmr = g_tmr10ms + 1 ;
    de54:	80 91 77 0d 	lds	r24, 0x0D77
    de58:	90 91 78 0d 	lds	r25, 0x0D78
    de5c:	01 96       	adiw	r24, 0x01	; 1
	g_tmr10ms = tmr ;
    de5e:	90 93 78 0d 	sts	0x0D78, r25
    de62:	80 93 77 0d 	sts	0x0D77, r24
	g_blinkTmr10ms = tmr ;
    de66:	80 93 79 0d 	sts	0x0D79, r24
  uint8_t enuk = KEY_MENU;
  uint8_t    in = ~PINB;
    de6a:	56 b3       	in	r21, 0x16	; 22
    de6c:	50 95       	com	r21
	
	static uint8_t current ;
	uint8_t dir_keys ;
	uint8_t lcurrent ;

	dir_keys = in & 0x78 ;		// Mask to direction keys
    de6e:	65 2f       	mov	r22, r21
    de70:	68 77       	andi	r22, 0x78	; 120
	if ( ( lcurrent = current ) )
    de72:	40 91 7a 0d 	lds	r20, 0x0D7A
    de76:	44 23       	and	r20, r20
    de78:	41 f0       	breq	.+16     	; 0xde8a <_Z7per10msv+0x3e>
	{ // Something already pressed
		if ( ( lcurrent & dir_keys ) == 0 )
    de7a:	86 2f       	mov	r24, r22
    de7c:	90 e0       	ldi	r25, 0x00	; 0
    de7e:	24 2f       	mov	r18, r20
    de80:	30 e0       	ldi	r19, 0x00	; 0
    de82:	82 23       	and	r24, r18
    de84:	93 23       	and	r25, r19
    de86:	89 2b       	or	r24, r25
    de88:	91 f4       	brne	.+36     	; 0xdeae <_Z7per10msv+0x62>
			in &= lcurrent | 0x06 ;	// current or MENU or EXIT allowed
		}
	}
	if ( lcurrent == 0 )
	{ // look for a key
		if ( dir_keys & 0x20 )	// right
    de8a:	26 2f       	mov	r18, r22
    de8c:	30 e0       	ldi	r19, 0x00	; 0
		{
			lcurrent = 0x60 ;		// Allow L and R for 9X
		}
		else if ( dir_keys & 0x40 )	// left
    de8e:	c9 01       	movw	r24, r18
    de90:	80 76       	andi	r24, 0x60	; 96
    de92:	90 70       	andi	r25, 0x00	; 0
    de94:	89 2b       	or	r24, r25
    de96:	11 f0       	breq	.+4      	; 0xde9c <_Z7per10msv+0x50>
    de98:	40 e6       	ldi	r20, 0x60	; 96
    de9a:	09 c0       	rjmp	.+18     	; 0xdeae <_Z7per10msv+0x62>
		{
			lcurrent = 0x60 ;		// Allow L and R for 9X
		}
		else if ( dir_keys & 0x08 )	// down
    de9c:	63 ff       	sbrs	r22, 3
    de9e:	02 c0       	rjmp	.+4      	; 0xdea4 <_Z7per10msv+0x58>
    dea0:	48 e0       	ldi	r20, 0x08	; 8
    dea2:	05 c0       	rjmp	.+10     	; 0xdeae <_Z7per10msv+0x62>
		{
			lcurrent = 0x08 ;
		}
		else if ( dir_keys & 0x10 )	// up
    dea4:	64 fd       	sbrc	r22, 4
    dea6:	02 c0       	rjmp	.+4      	; 0xdeac <_Z7per10msv+0x60>
    dea8:	40 e0       	ldi	r20, 0x00	; 0
    deaa:	01 c0       	rjmp	.+2      	; 0xdeae <_Z7per10msv+0x62>
    deac:	40 e1       	ldi	r20, 0x10	; 16
		{
			lcurrent = 0x10 ;
		}
		in &= lcurrent | 0x06 ;	// current or MENU or EXIT allowed
    deae:	04 2f       	mov	r16, r20
    deb0:	06 60       	ori	r16, 0x06	; 6
    deb2:	05 23       	and	r16, r21
	}
	current = lcurrent ;
    deb4:	40 93 7a 0d 	sts	0x0D7A, r20
    deb8:	c0 e0       	ldi	r28, 0x00	; 0
    deba:	d0 e0       	ldi	r29, 0x00	; 0

  for(uint8_t i=1; i<7; i++)
  {
    //INP_B_KEY_MEN 1  .. INP_B_KEY_LFT 6
    keys[enuk].input(in & 2,(EnumKeys)enuk);
    debc:	10 e0       	ldi	r17, 0x00	; 0
    debe:	ce 01       	movw	r24, r28
    dec0:	88 0f       	add	r24, r24
    dec2:	99 1f       	adc	r25, r25
    dec4:	8c 0f       	add	r24, r28
    dec6:	9d 1f       	adc	r25, r29
    dec8:	b8 01       	movw	r22, r16
    deca:	76 95       	lsr	r23
    decc:	67 95       	ror	r22
    dece:	61 70       	andi	r22, 0x01	; 1
    ded0:	86 5b       	subi	r24, 0xB6	; 182
    ded2:	92 4f       	sbci	r25, 0xF2	; 242
    ded4:	4c 2f       	mov	r20, r28
    ded6:	50 e0       	ldi	r21, 0x00	; 0
    ded8:	0e 94 4c 6e 	call	0xdc98	; 0xdc98 <_ZN3Key5inputEb8EnumKeys>
    ++enuk;
		in >>= 1 ;
    dedc:	15 95       	asr	r17
    dede:	07 95       	ror	r16
    dee0:	21 96       	adiw	r28, 0x01	; 1
		}
		in &= lcurrent | 0x06 ;	// current or MENU or EXIT allowed
	}
	current = lcurrent ;

  for(uint8_t i=1; i<7; i++)
    dee2:	c6 30       	cpi	r28, 0x06	; 6
    dee4:	d1 05       	cpc	r29, r1
    dee6:	51 f7       	brne	.-44     	; 0xdebc <_Z7per10msv+0x70>
    1<<INP_D_TRM_RV_DWN,
    1<<INP_D_TRM_RV_UP,
    1<<INP_D_TRM_RH_DWN,
    1<<INP_D_TRM_RH_UP
  };
  in = ~PIND;
    dee8:	80 b3       	in	r24, 0x10	; 16
    deea:	80 95       	com	r24
    deec:	c6 e0       	ldi	r28, 0x06	; 6
    deee:	d0 e0       	ldi	r29, 0x00	; 0

	for(int i=0; i<8; i++)
  {
    // INP_D_TRM_RH_UP   0 .. INP_D_TRM_LH_UP   7
    keys[enuk].input(in & pgm_read_byte(crossTrim+i),(EnumKeys)enuk);
    def0:	08 2f       	mov	r16, r24
    def2:	10 e0       	ldi	r17, 0x00	; 0
    def4:	fe 01       	movw	r30, r28
    def6:	e2 54       	subi	r30, 0x42	; 66
    def8:	f7 4e       	sbci	r31, 0xE7	; 231
    defa:	e4 91       	lpm	r30, Z+
    defc:	9e 01       	movw	r18, r28
    defe:	22 0f       	add	r18, r18
    df00:	33 1f       	adc	r19, r19
    df02:	2c 0f       	add	r18, r28
    df04:	3d 1f       	adc	r19, r29
    df06:	26 5b       	subi	r18, 0xB6	; 182
    df08:	32 4f       	sbci	r19, 0xF2	; 242
    df0a:	60 e0       	ldi	r22, 0x00	; 0
    df0c:	8e 2f       	mov	r24, r30
    df0e:	90 e0       	ldi	r25, 0x00	; 0
    df10:	80 23       	and	r24, r16
    df12:	91 23       	and	r25, r17
    df14:	89 2b       	or	r24, r25
    df16:	09 f0       	breq	.+2      	; 0xdf1a <_Z7per10msv+0xce>
    df18:	61 e0       	ldi	r22, 0x01	; 1
    df1a:	c9 01       	movw	r24, r18
    df1c:	4c 2f       	mov	r20, r28
    df1e:	50 e0       	ldi	r21, 0x00	; 0
    df20:	0e 94 4c 6e 	call	0xdc98	; 0xdc98 <_ZN3Key5inputEb8EnumKeys>
    df24:	21 96       	adiw	r28, 0x01	; 1
    1<<INP_D_TRM_RH_DWN,
    1<<INP_D_TRM_RH_UP
  };
  in = ~PIND;

	for(int i=0; i<8; i++)
    df26:	ce 30       	cpi	r28, 0x0E	; 14
    df28:	d1 05       	cpc	r29, r1
    df2a:	21 f7       	brne	.-56     	; 0xdef4 <_Z7per10msv+0xa8>
    // INP_D_TRM_RH_UP   0 .. INP_D_TRM_LH_UP   7
    keys[enuk].input(in & pgm_read_byte(crossTrim+i),(EnumKeys)enuk);
    ++enuk;
  }
	
	uint8_t value = Rotary.RotEncoder & 0x20 ;
    df2c:	80 91 a5 05 	lds	r24, 0x05A5
	keys[enuk].input( value,(EnumKeys)enuk); // Rotary Enc. Switch
    df30:	60 e0       	ldi	r22, 0x00	; 0
    df32:	18 2f       	mov	r17, r24
    df34:	10 72       	andi	r17, 0x20	; 32
    df36:	85 fd       	sbrc	r24, 5
    df38:	61 e0       	ldi	r22, 0x01	; 1
    df3a:	84 e7       	ldi	r24, 0x74	; 116
    df3c:	9d e0       	ldi	r25, 0x0D	; 13
    df3e:	4e e0       	ldi	r20, 0x0E	; 14
    df40:	50 e0       	ldi	r21, 0x00	; 0
    df42:	0e 94 4c 6e 	call	0xdc98	; 0xdc98 <_ZN3Key5inputEb8EnumKeys>
	
	value |= ~PINB & 0x7E ;
    df46:	86 b3       	in	r24, 0x16	; 22
	if ( value )
    df48:	80 95       	com	r24
    df4a:	8e 77       	andi	r24, 0x7E	; 126
    df4c:	81 2b       	or	r24, r17
    df4e:	19 f0       	breq	.+6      	; 0xdf56 <_Z7per10msv+0x10a>
	{
		StickScrollTimer = STICK_SCROLL_TIMEOUT ;
    df50:	89 e0       	ldi	r24, 0x09	; 9
    df52:	80 93 07 06 	sts	0x0607, r24
	}
}
    df56:	df 91       	pop	r29
    df58:	cf 91       	pop	r28
    df5a:	1f 91       	pop	r17
    df5c:	0f 91       	pop	r16
    df5e:	08 95       	ret

0000df60 <_Z15eeWriteBlockCmpPKvjj>:
  EECR |= 1<<EEWE;
#endif
  SREG = flags;
}

void eeWriteBlockCmp(const void *i_pointer_ram, uint16_t i_pointer_eeprom, size_t size)
    df60:	df 92       	push	r13
    df62:	ef 92       	push	r14
    df64:	ff 92       	push	r15
    df66:	0f 93       	push	r16
    df68:	1f 93       	push	r17
    df6a:	cf 93       	push	r28
    df6c:	df 93       	push	r29
    df6e:	7a 01       	movw	r14, r20
{
  const char* pointer_ram = (const char*)i_pointer_ram;
    df70:	8c 01       	movw	r16, r24
    df72:	eb 01       	movw	r28, r22
    df74:	20 c0       	rjmp	.+64     	; 0xdfb6 <_Z15eeWriteBlockCmpPKvjj+0x56>
  uint16_t    pointer_eeprom = i_pointer_eeprom;
  while(size){
    eeprom_write_byte_cmp(*pointer_ram++,pointer_eeprom++);
    df76:	f8 01       	movw	r30, r16
    df78:	d0 80       	ld	r13, Z
    df7a:	04 c0       	rjmp	.+8      	; 0xdf84 <_Z15eeWriteBlockCmpPKvjj+0x24>
  while(EECR & (1<<EEPE)) /* make sure EEPROM is ready */
#else
  while(EECR & (1<<EEWE)) /* make sure EEPROM is ready */
#endif
  {
    if (Ee_lock & EE_TRIM_LOCK)    // Only if writing trim changes
    df7c:	00 97       	sbiw	r24, 0x00	; 0
    df7e:	39 f0       	breq	.+14     	; 0xdf8e <_Z15eeWriteBlockCmpPKvjj+0x2e>
    {
      mainSequence() ;      // Keep the controls running while waiting		
    df80:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_Z12mainSequencev>
  while(EECR & (1<<EEPE)) /* make sure EEPROM is ready */
#else
  while(EECR & (1<<EEWE)) /* make sure EEPROM is ready */
#endif
  {
    if (Ee_lock & EE_TRIM_LOCK)    // Only if writing trim changes
    df84:	80 91 00 09 	lds	r24, 0x0900
    df88:	90 e0       	ldi	r25, 0x00	; 0
    df8a:	82 70       	andi	r24, 0x02	; 2
    df8c:	90 70       	andi	r25, 0x00	; 0
{
  //see /home/thus/work/avr/avrsdk4/avr-libc-1.4.4/libc/misc/eeprom.S:98 143
#ifdef CPUM2561
  while(EECR & (1<<EEPE)) /* make sure EEPROM is ready */
#else
  while(EECR & (1<<EEWE)) /* make sure EEPROM is ready */
    df8e:	e1 99       	sbic	0x1c, 1	; 28
    df90:	f5 cf       	rjmp	.-22     	; 0xdf7c <_Z15eeWriteBlockCmpPKvjj+0x1c>
    if (Ee_lock & EE_TRIM_LOCK)    // Only if writing trim changes
    {
      mainSequence() ;      // Keep the controls running while waiting		
    }
  } ;
  EEAR  = pointer_eeprom;
    df92:	df bb       	out	0x1f, r29	; 31
    df94:	ce bb       	out	0x1e, r28	; 30

  EECR |= 1<<EERE;
    df96:	e0 9a       	sbi	0x1c, 0	; 28
  if(dat == EEDR) return;
    df98:	8d b3       	in	r24, 0x1d	; 29
    df9a:	d8 16       	cp	r13, r24
    df9c:	31 f0       	breq	.+12     	; 0xdfaa <_Z15eeWriteBlockCmpPKvjj+0x4a>

  EEDR  = dat;
    df9e:	dd ba       	out	0x1d, r13	; 29
  uint8_t flags=SREG;
    dfa0:	8f b7       	in	r24, 0x3f	; 63
  cli();
    dfa2:	f8 94       	cli
#ifdef CPUM2561
  EECR |= 1<<EEMPE;
  EECR |= 1<<EEPE;
#else
  EECR |= 1<<EEMWE;
    dfa4:	e2 9a       	sbi	0x1c, 2	; 28
  EECR |= 1<<EEWE;
    dfa6:	e1 9a       	sbi	0x1c, 1	; 28
#endif
  SREG = flags;
    dfa8:	8f bf       	out	0x3f, r24	; 63
void eeWriteBlockCmp(const void *i_pointer_ram, uint16_t i_pointer_eeprom, size_t size)
{
  const char* pointer_ram = (const char*)i_pointer_ram;
  uint16_t    pointer_eeprom = i_pointer_eeprom;
  while(size){
    eeprom_write_byte_cmp(*pointer_ram++,pointer_eeprom++);
    dfaa:	0f 5f       	subi	r16, 0xFF	; 255
    dfac:	1f 4f       	sbci	r17, 0xFF	; 255
    dfae:	21 96       	adiw	r28, 0x01	; 1
    size--;
    dfb0:	08 94       	sec
    dfb2:	e1 08       	sbc	r14, r1
    dfb4:	f1 08       	sbc	r15, r1

void eeWriteBlockCmp(const void *i_pointer_ram, uint16_t i_pointer_eeprom, size_t size)
{
  const char* pointer_ram = (const char*)i_pointer_ram;
  uint16_t    pointer_eeprom = i_pointer_eeprom;
  while(size){
    dfb6:	e1 14       	cp	r14, r1
    dfb8:	f1 04       	cpc	r15, r1
    dfba:	e9 f6       	brne	.-70     	; 0xdf76 <_Z15eeWriteBlockCmpPKvjj+0x16>
    eeprom_write_byte_cmp(*pointer_ram++,pointer_eeprom++);
    size--;
  }
}
    dfbc:	df 91       	pop	r29
    dfbe:	cf 91       	pop	r28
    dfc0:	1f 91       	pop	r17
    dfc2:	0f 91       	pop	r16
    dfc4:	ff 90       	pop	r15
    dfc6:	ef 90       	pop	r14
    dfc8:	df 90       	pop	r13
    dfca:	08 95       	ret

0000dfcc <_Z9setSwitchhhaa>:
	}
}

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  CSwData *cs = &g_model.customSw[idx-1] ;
    dfcc:	90 e0       	ldi	r25, 0x00	; 0
    dfce:	01 97       	sbiw	r24, 0x01	; 1
  cs->func = func ;
    dfd0:	fc 01       	movw	r30, r24
    dfd2:	ee 0f       	add	r30, r30
    dfd4:	ff 1f       	adc	r31, r31
    dfd6:	e8 0f       	add	r30, r24
    dfd8:	f9 1f       	adc	r31, r25
    dfda:	df 01       	movw	r26, r30
    dfdc:	ae 5f       	subi	r26, 0xFE	; 254
    dfde:	bb 4f       	sbci	r27, 0xFB	; 251
  cs->andsw = 0 ;
    dfe0:	6f 70       	andi	r22, 0x0F	; 15
    dfe2:	6c 93       	st	X, r22
  cs->v1   = v1 ;
    dfe4:	e6 55       	subi	r30, 0x56	; 86
    dfe6:	fe 4f       	sbci	r31, 0xFE	; 254
    dfe8:	ea 5a       	subi	r30, 0xAA	; 170
    dfea:	fd 4f       	sbci	r31, 0xFD	; 253
    dfec:	41 93       	st	Z+, r20
  cs->v2   = v2 ;
    dfee:	20 83       	st	Z, r18
}
    dff0:	08 95       	ret

0000dff2 <_ZL7setDesth>:
    string_8
};

#endif

static MixData* setDest(uint8_t dch)
    dff2:	1f 93       	push	r17
    dff4:	cf 93       	push	r28
    dff6:	df 93       	push	r29
    dff8:	18 2f       	mov	r17, r24
    dffa:	80 e0       	ldi	r24, 0x00	; 0
    dffc:	c4 ec       	ldi	r28, 0xC4	; 196
    dffe:	d1 e0       	ldi	r29, 0x01	; 1
    e000:	02 c0       	rjmp	.+4      	; 0xe006 <_ZL7setDesth+0x14>
{
    uint8_t i = 0;
    MixData *md = &g_model.mixData[0];

    while ((md->destCh<=dch) && (md->destCh) && (i<MAX_MIXERS)) i++, md++;
    e002:	8f 5f       	subi	r24, 0xFF	; 255
    e004:	2a 96       	adiw	r28, 0x0a	; 10
    e006:	98 81       	ld	r25, Y
    e008:	19 17       	cp	r17, r25
    e00a:	28 f0       	brcs	.+10     	; 0xe016 <_ZL7setDesth+0x24>
    e00c:	99 23       	and	r25, r25
    e00e:	19 f0       	breq	.+6      	; 0xe016 <_ZL7setDesth+0x24>
    e010:	80 32       	cpi	r24, 0x20	; 32
    e012:	b9 f7       	brne	.-18     	; 0xe002 <_ZL7setDesth+0x10>
    e014:	21 c0       	rjmp	.+66     	; 0xe058 <_ZL7setDesth+0x66>
    if(i==MAX_MIXERS) return &g_model.mixData[0];
    e016:	80 32       	cpi	r24, 0x20	; 32
    e018:	f9 f0       	breq	.+62     	; 0xe058 <_ZL7setDesth+0x66>

    memmove(md+1, md, (MAX_MIXERS-(i+1))*sizeof(MixData) );
    e01a:	90 e0       	ldi	r25, 0x00	; 0
    e01c:	80 95       	com	r24
    e01e:	90 95       	com	r25
    e020:	80 96       	adiw	r24, 0x20	; 32
    e022:	ac 01       	movw	r20, r24
    e024:	73 e0       	ldi	r23, 0x03	; 3
    e026:	44 0f       	add	r20, r20
    e028:	55 1f       	adc	r21, r21
    e02a:	7a 95       	dec	r23
    e02c:	e1 f7       	brne	.-8      	; 0xe026 <_ZL7setDesth+0x34>
    e02e:	88 0f       	add	r24, r24
    e030:	99 1f       	adc	r25, r25
    e032:	48 0f       	add	r20, r24
    e034:	59 1f       	adc	r21, r25
    e036:	ce 01       	movw	r24, r28
    e038:	0a 96       	adiw	r24, 0x0a	; 10
    e03a:	be 01       	movw	r22, r28
    e03c:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <memmove>
    memset( md, 0, sizeof(MixData) ) ;
    e040:	8a e0       	ldi	r24, 0x0A	; 10
    e042:	fe 01       	movw	r30, r28
    e044:	11 92       	st	Z+, r1
    e046:	8a 95       	dec	r24
    e048:	e9 f7       	brne	.-6      	; 0xe044 <_ZL7setDesth+0x52>
    md->destCh = dch;
    e04a:	18 83       	st	Y, r17
		md->weight = 100 ;
    e04c:	84 e6       	ldi	r24, 0x64	; 100
    e04e:	8a 83       	std	Y+2, r24	; 0x02
		md->lateOffset = 1 ;
    e050:	8f 81       	ldd	r24, Y+7	; 0x07
    e052:	88 60       	ori	r24, 0x08	; 8
    e054:	8f 83       	std	Y+7, r24	; 0x07
    e056:	02 c0       	rjmp	.+4      	; 0xe05c <_ZL7setDesth+0x6a>
    return md ;
    e058:	c4 ec       	ldi	r28, 0xC4	; 196
    e05a:	d1 e0       	ldi	r29, 0x01	; 1
}
    e05c:	ce 01       	movw	r24, r28
    e05e:	df 91       	pop	r29
    e060:	cf 91       	pop	r28
    e062:	1f 91       	pop	r17
    e064:	08 95       	ret

0000e066 <_Z6setMixhh>:
const prog_int8_t heli_ar4[] PROGMEM = {-30, -15, 0, 50, 100};
const prog_int8_t heli_ar5[] PROGMEM = {-100, -50, 0, 50, 100};
#endif


void setMix( uint8_t dch, uint8_t stick )
    e066:	1f 93       	push	r17
    e068:	16 2f       	mov	r17, r22
{
  MixData *md ;
	md=setDest( dch ) ;
    e06a:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e06e:	fc 01       	movw	r30, r24
    e070:	11 83       	std	Z+1, r17	; 0x01
}
    e072:	1f 91       	pop	r17
    e074:	08 95       	ret

0000e076 <_Z11clearCurvesv>:
}

#ifndef NO_TEMPLATES
void clearCurves()
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    e076:	e0 e9       	ldi	r30, 0x90	; 144
    e078:	f3 e0       	ldi	r31, 0x03	; 3
    e07a:	88 e2       	ldi	r24, 0x28	; 40
    e07c:	df 01       	movw	r26, r30
    e07e:	1d 92       	st	X+, r1
    e080:	8a 95       	dec	r24
    e082:	e9 f7       	brne	.-6      	; 0xe07e <_Z11clearCurvesv+0x8>
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
    e084:	b8 96       	adiw	r30, 0x28	; 40
    e086:	88 e4       	ldi	r24, 0x48	; 72
    e088:	df 01       	movw	r26, r30
    e08a:	1d 92       	st	X+, r1
    e08c:	8a 95       	dec	r24
    e08e:	e9 f7       	brne	.-6      	; 0xe08a <_Z11clearCurvesv+0x14>
}
    e090:	08 95       	ret

0000e092 <_Z10clearMixesv>:
#ifdef NO_TEMPLATES
inline
#endif 
void clearMixes()
{
    memset(g_model.mixData,0,sizeof(g_model.mixData)); //clear all mixes
    e092:	80 e4       	ldi	r24, 0x40	; 64
    e094:	91 e0       	ldi	r25, 0x01	; 1
    e096:	e4 ec       	ldi	r30, 0xC4	; 196
    e098:	f1 e0       	ldi	r31, 0x01	; 1
    e09a:	df 01       	movw	r26, r30
    e09c:	9c 01       	movw	r18, r24
    e09e:	1d 92       	st	X+, r1
    e0a0:	21 50       	subi	r18, 0x01	; 1
    e0a2:	30 40       	sbci	r19, 0x00	; 0
    e0a4:	e1 f7       	brne	.-8      	; 0xe09e <_Z10clearMixesv+0xc>
}
    e0a6:	08 95       	ret

0000e0a8 <_Z13applyTemplateh>:


#ifdef NO_TEMPLATES
void applyTemplate()
#else
void applyTemplate(uint8_t idx)
    e0a8:	8f 92       	push	r8
    e0aa:	9f 92       	push	r9
    e0ac:	af 92       	push	r10
    e0ae:	bf 92       	push	r11
    e0b0:	cf 92       	push	r12
    e0b2:	df 92       	push	r13
    e0b4:	ef 92       	push	r14
    e0b6:	ff 92       	push	r15
    e0b8:	0f 93       	push	r16
    e0ba:	1f 93       	push	r17
    e0bc:	df 93       	push	r29
    e0be:	cf 93       	push	r28
    e0c0:	00 d0       	rcall	.+0      	; 0xe0c2 <_Z13applyTemplateh+0x1a>
    e0c2:	00 d0       	rcall	.+0      	; 0xe0c4 <_Z13applyTemplateh+0x1c>
    e0c4:	cd b7       	in	r28, 0x3d	; 61
    e0c6:	de b7       	in	r29, 0x3e	; 62
    e0c8:	08 2f       	mov	r16, r24
#endif

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    e0ca:	19 82       	std	Y+1, r1	; 0x01
    e0cc:	1a 82       	std	Y+2, r1	; 0x02
    e0ce:	1b 82       	std	Y+3, r1	; 0x03
    e0d0:	1c 82       	std	Y+4, r1	; 0x04
    for(uint8_t i=1; i<=4; i++) //generate inverse array
        for(uint8_t j=1; j<=4; j++) if(CC(i)==j) icc[j-1]=i;
    e0d2:	e0 91 81 01 	lds	r30, 0x0181
    e0d6:	f0 e0       	ldi	r31, 0x00	; 0
    e0d8:	ee 52       	subi	r30, 0x2E	; 46
    e0da:	ff 4f       	sbci	r31, 0xFF	; 255
    e0dc:	61 e0       	ldi	r22, 0x01	; 1
    e0de:	46 e0       	ldi	r20, 0x06	; 6
    e0e0:	50 e0       	ldi	r21, 0x00	; 0
    e0e2:	e4 91       	lpm	r30, Z+
    e0e4:	ae 2f       	mov	r26, r30
    e0e6:	b0 e0       	ldi	r27, 0x00	; 0
    e0e8:	11 c0       	rjmp	.+34     	; 0xe10c <_Z13applyTemplateh+0x64>
    e0ea:	82 17       	cp	r24, r18
    e0ec:	93 07       	cpc	r25, r19
    e0ee:	21 f4       	brne	.+8      	; 0xe0f8 <_Z13applyTemplateh+0x50>
    e0f0:	fe 01       	movw	r30, r28
    e0f2:	e8 0f       	add	r30, r24
    e0f4:	f9 1f       	adc	r31, r25
    e0f6:	60 83       	st	Z, r22
    e0f8:	2f 5f       	subi	r18, 0xFF	; 255
    e0fa:	3f 4f       	sbci	r19, 0xFF	; 255
    e0fc:	25 30       	cpi	r18, 0x05	; 5
    e0fe:	31 05       	cpc	r19, r1
    e100:	a1 f7       	brne	.-24     	; 0xe0ea <_Z13applyTemplateh+0x42>

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for(uint8_t i=1; i<=4; i++) //generate inverse array
    e102:	6f 5f       	subi	r22, 0xFF	; 255
    e104:	42 50       	subi	r20, 0x02	; 2
    e106:	50 40       	sbci	r21, 0x00	; 0
    e108:	65 30       	cpi	r22, 0x05	; 5
    e10a:	69 f0       	breq	.+26     	; 0xe126 <_Z13applyTemplateh+0x7e>
    e10c:	21 e0       	ldi	r18, 0x01	; 1
    e10e:	30 e0       	ldi	r19, 0x00	; 0
        for(uint8_t j=1; j<=4; j++) if(CC(i)==j) icc[j-1]=i;
    e110:	cd 01       	movw	r24, r26
    e112:	04 2e       	mov	r0, r20
    e114:	02 c0       	rjmp	.+4      	; 0xe11a <_Z13applyTemplateh+0x72>
    e116:	95 95       	asr	r25
    e118:	87 95       	ror	r24
    e11a:	0a 94       	dec	r0
    e11c:	e2 f7       	brpl	.-8      	; 0xe116 <_Z13applyTemplateh+0x6e>
    e11e:	83 70       	andi	r24, 0x03	; 3
    e120:	90 70       	andi	r25, 0x00	; 0
    e122:	01 96       	adiw	r24, 0x01	; 1
    e124:	e2 cf       	rjmp	.-60     	; 0xe0ea <_Z13applyTemplateh+0x42>

#ifndef NO_TEMPLATES
    uint8_t j = 0;

    //Simple 4-Ch
    if(idx==j++) 
    e126:	00 23       	and	r16, r16
    e128:	d9 f4       	brne	.+54     	; 0xe160 <_Z13applyTemplateh+0xb8>
    {
#endif
        clearMixes();
    e12a:	0e 94 49 70 	call	0xe092	; 0xe092 <_Z10clearMixesv>


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e12e:	89 81       	ldd	r24, Y+1	; 0x01
    e130:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e134:	21 e0       	ldi	r18, 0x01	; 1
    e136:	fc 01       	movw	r30, r24
    e138:	21 83       	std	Z+1, r18	; 0x01


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e13a:	8a 81       	ldd	r24, Y+2	; 0x02
    e13c:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e140:	22 e0       	ldi	r18, 0x02	; 2
    e142:	fc 01       	movw	r30, r24
    e144:	21 83       	std	Z+1, r18	; 0x01


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e146:	8b 81       	ldd	r24, Y+3	; 0x03
    e148:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e14c:	23 e0       	ldi	r18, 0x03	; 3
    e14e:	fc 01       	movw	r30, r24
    e150:	21 83       	std	Z+1, r18	; 0x01


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e152:	8c 81       	ldd	r24, Y+4	; 0x04
    e154:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e158:	24 e0       	ldi	r18, 0x04	; 4
    e15a:	fc 01       	movw	r30, r24
    e15c:	21 83       	std	Z+1, r18	; 0x01
    e15e:	86 c1       	rjmp	.+780    	; 0xe46c <_Z13applyTemplateh+0x3c4>

#ifndef NO_TEMPLATES
    }

    //T-Cut
    if(idx==j++)
    e160:	01 30       	cpi	r16, 0x01	; 1
    e162:	49 f4       	brne	.+18     	; 0xe176 <_Z13applyTemplateh+0xce>
    {
//        md=setDest(ICC(STK_THR));  md->srcRaw=MIX_MAX;  md->weight=-100;  md->swtch=DSW_THR;  md->mltpx=MLTPX_REP;
    	SafetySwData *sd = &g_model.safetySw[ICC(STK_THR)-1] ;
    e164:	eb 81       	ldd	r30, Y+3	; 0x03
    e166:	f0 e0       	ldi	r31, 0x00	; 0
			sd->opt.ss.mode = 0 ;
    e168:	ee 0f       	add	r30, r30
    e16a:	ff 1f       	adc	r31, r31
    e16c:	df 01       	movw	r26, r30
    e16e:	ab 5d       	subi	r26, 0xDB	; 219
    e170:	bb 4f       	sbci	r27, 0xFB	; 251
			sd->opt.ss.swtch = DSW_THR ;
    e172:	0c 93       	st	X, r16
    e174:	0b c0       	rjmp	.+22     	; 0xe18c <_Z13applyTemplateh+0xe4>
			sd->opt.ss.val = -100 ;
    }

    //sticky t-cut
    if(idx==j++)
    e176:	02 30       	cpi	r16, 0x02	; 2
    e178:	71 f4       	brne	.+28     	; 0xe196 <_Z13applyTemplateh+0xee>
//        md=setDest(14);            md->srcRaw=MIX_MAX;  md->swtch=DSW_THR;  md->mltpx=MLTPX_REP;

//        setSwitch(0xB,CS_VNEG, CM(STK_THR), -99);
//        setSwitch(0xC,CS_VPOS, CH(14), 0);

    	SafetySwData *sd = &g_model.safetySw[ICC(STK_THR)-1] ;
    e17a:	eb 81       	ldd	r30, Y+3	; 0x03
    e17c:	f0 e0       	ldi	r31, 0x00	; 0
			sd->opt.ss.mode = 3 ;
    e17e:	ee 0f       	add	r30, r30
    e180:	ff 1f       	adc	r31, r31
    e182:	df 01       	movw	r26, r30
    e184:	ab 5d       	subi	r26, 0xDB	; 219
    e186:	bb 4f       	sbci	r27, 0xFB	; 251
			sd->opt.ss.swtch = DSW_THR ;
    e188:	81 ec       	ldi	r24, 0xC1	; 193
    e18a:	8c 93       	st	X, r24
			sd->opt.ss.val = -100 ;
    e18c:	ea 5d       	subi	r30, 0xDA	; 218
    e18e:	fb 4f       	sbci	r31, 0xFB	; 251
    e190:	8c e9       	ldi	r24, 0x9C	; 156
    e192:	80 83       	st	Z, r24
    e194:	6b c1       	rjmp	.+726    	; 0xe46c <_Z13applyTemplateh+0x3c4>
    }

    //V-Tail
    if(idx==j++) 
    e196:	03 30       	cpi	r16, 0x03	; 3
    e198:	f9 f4       	brne	.+62     	; 0xe1d8 <_Z13applyTemplateh+0x130>
    {
        clearMixes();
    e19a:	0e 94 49 70 	call	0xe092	; 0xe092 <_Z10clearMixesv>
        setMix(ICC(STK_RUD), STK_RUD ) ;
    e19e:	19 81       	ldd	r17, Y+1	; 0x01


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e1a0:	81 2f       	mov	r24, r17
    e1a2:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e1a6:	ff 24       	eor	r15, r15
    e1a8:	f3 94       	inc	r15
    e1aa:	fc 01       	movw	r30, r24
    e1ac:	f1 82       	std	Z+1, r15	; 0x01
    //V-Tail
    if(idx==j++) 
    {
        clearMixes();
        setMix(ICC(STK_RUD), STK_RUD ) ;
        md=setDest(ICC(STK_RUD));  md->srcRaw=CM(STK_ELE);  md->weight=-100;
    e1ae:	81 2f       	mov	r24, r17
    e1b0:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e1b4:	fc 01       	movw	r30, r24
    e1b6:	a2 e0       	ldi	r26, 0x02	; 2
    e1b8:	ea 2e       	mov	r14, r26
    e1ba:	e1 82       	std	Z+1, r14	; 0x01
    e1bc:	8c e9       	ldi	r24, 0x9C	; 156
    e1be:	82 83       	std	Z+2, r24	; 0x02
        setMix(ICC(STK_ELE), STK_RUD ) ;
    e1c0:	1a 81       	ldd	r17, Y+2	; 0x02


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e1c2:	81 2f       	mov	r24, r17
    e1c4:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e1c8:	fc 01       	movw	r30, r24
    e1ca:	f1 82       	std	Z+1, r15	; 0x01


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e1cc:	81 2f       	mov	r24, r17
    e1ce:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e1d2:	fc 01       	movw	r30, r24
    e1d4:	e1 82       	std	Z+1, r14	; 0x01
    e1d6:	4a c1       	rjmp	.+660    	; 0xe46c <_Z13applyTemplateh+0x3c4>
        setMix(ICC(STK_ELE), STK_RUD ) ;
        setMix(ICC(STK_ELE), STK_ELE ) ;
    }

    //Elevon\\Delta
    if(idx==j++)
    e1d8:	04 30       	cpi	r16, 0x04	; 4
    e1da:	e9 f4       	brne	.+58     	; 0xe216 <_Z13applyTemplateh+0x16e>
    {
        clearMixes();
    e1dc:	0e 94 49 70 	call	0xe092	; 0xe092 <_Z10clearMixesv>
        setMix(ICC(STK_ELE), STK_ELE ) ;
    e1e0:	1a 81       	ldd	r17, Y+2	; 0x02


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e1e2:	81 2f       	mov	r24, r17
    e1e4:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e1e8:	72 e0       	ldi	r23, 0x02	; 2
    e1ea:	f7 2e       	mov	r15, r23
    e1ec:	fc 01       	movw	r30, r24
    e1ee:	f1 82       	std	Z+1, r15	; 0x01


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e1f0:	81 2f       	mov	r24, r17
    e1f2:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e1f6:	fc 01       	movw	r30, r24
    e1f8:	01 83       	std	Z+1, r16	; 0x01
    if(idx==j++)
    {
        clearMixes();
        setMix(ICC(STK_ELE), STK_ELE ) ;
        setMix(ICC(STK_ELE), STK_AIL ) ;
        setMix(ICC(STK_AIL), STK_ELE ) ;
    e1fa:	1c 81       	ldd	r17, Y+4	; 0x04


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e1fc:	81 2f       	mov	r24, r17
    e1fe:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e202:	fc 01       	movw	r30, r24
    e204:	f1 82       	std	Z+1, r15	; 0x01
    {
        clearMixes();
        setMix(ICC(STK_ELE), STK_ELE ) ;
        setMix(ICC(STK_ELE), STK_AIL ) ;
        setMix(ICC(STK_AIL), STK_ELE ) ;
        md=setDest(ICC(STK_AIL));  md->srcRaw=CM(STK_AIL);  md->weight=-100;
    e206:	81 2f       	mov	r24, r17
    e208:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e20c:	fc 01       	movw	r30, r24
    e20e:	01 83       	std	Z+1, r16	; 0x01
    e210:	8c e9       	ldi	r24, 0x9C	; 156
    e212:	82 83       	std	Z+2, r24	; 0x02
    e214:	2b c1       	rjmp	.+598    	; 0xe46c <_Z13applyTemplateh+0x3c4>
    }


    //Heli Setup
    if(idx==j++)
    e216:	05 30       	cpi	r16, 0x05	; 5
    e218:	09 f0       	breq	.+2      	; 0xe21c <_Z13applyTemplateh+0x174>
    e21a:	c7 c0       	rjmp	.+398    	; 0xe3aa <_Z13applyTemplateh+0x302>
    {
        clearMixes();  //This time we want a clean slate
    e21c:	0e 94 49 70 	call	0xe092	; 0xe092 <_Z10clearMixesv>
        clearCurves();
    e220:	0e 94 3b 70 	call	0xe076	; 0xe076 <_Z11clearCurvesv>

        //Set up Mixes
        //3 cyclic channels
        md=setDest(1);  md->srcRaw=MIX_CYC1;
    e224:	81 e0       	ldi	r24, 0x01	; 1
    e226:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e22a:	6a e0       	ldi	r22, 0x0A	; 10
    e22c:	b6 2e       	mov	r11, r22
    e22e:	fc 01       	movw	r30, r24
    e230:	b1 82       	std	Z+1, r11	; 0x01
        md=setDest(2);  md->srcRaw=MIX_CYC2;
    e232:	82 e0       	ldi	r24, 0x02	; 2
    e234:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e238:	5b e0       	ldi	r21, 0x0B	; 11
    e23a:	a5 2e       	mov	r10, r21
    e23c:	fc 01       	movw	r30, r24
    e23e:	a1 82       	std	Z+1, r10	; 0x01
        md=setDest(3);  md->srcRaw=MIX_CYC3;
    e240:	83 e0       	ldi	r24, 0x03	; 3
    e242:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e246:	4c e0       	ldi	r20, 0x0C	; 12
    e248:	94 2e       	mov	r9, r20
    e24a:	fc 01       	movw	r30, r24
    e24c:	91 82       	std	Z+1, r9	; 0x01


void setMix( uint8_t dch, uint8_t stick )
{
  MixData *md ;
	md=setDest( dch ) ;
    e24e:	84 e0       	ldi	r24, 0x04	; 4
    e250:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    e254:	ee 24       	eor	r14, r14
    e256:	e3 94       	inc	r14
    e258:	fc 01       	movw	r30, r24
    e25a:	e1 82       	std	Z+1, r14	; 0x01

        //rudder
        setMix(4, STK_RUD ) ;

        //Throttle
        md=setDest(5);  md->srcRaw=CM(STK_THR); md->swtch= DSW_ID0; md->curve=CV(1); md->carryTrim=TRIM_OFF;
    e25c:	85 e0       	ldi	r24, 0x05	; 5
    e25e:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e262:	fc 01       	movw	r30, r24
    e264:	33 e0       	ldi	r19, 0x03	; 3
    e266:	83 2e       	mov	r8, r19
    e268:	81 82       	std	Z+1, r8	; 0x01
    e26a:	24 e0       	ldi	r18, 0x04	; 4
    e26c:	c2 2e       	mov	r12, r18
    e26e:	c3 82       	std	Z+3, r12	; 0x03
    e270:	87 e0       	ldi	r24, 0x07	; 7
    e272:	84 83       	std	Z+4, r24	; 0x04
    e274:	87 81       	ldd	r24, Z+7	; 0x07
    e276:	81 60       	ori	r24, 0x01	; 1
    e278:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(5);  md->srcRaw=CM(STK_THR); md->swtch= DSW_ID1; md->curve=CV(2); md->carryTrim=TRIM_OFF;
    e27a:	85 e0       	ldi	r24, 0x05	; 5
    e27c:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e280:	fc 01       	movw	r30, r24
    e282:	81 82       	std	Z+1, r8	; 0x01
    e284:	03 83       	std	Z+3, r16	; 0x03
    e286:	18 e0       	ldi	r17, 0x08	; 8
    e288:	14 83       	std	Z+4, r17	; 0x04
    e28a:	87 81       	ldd	r24, Z+7	; 0x07
    e28c:	81 60       	ori	r24, 0x01	; 1
    e28e:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(5);  md->srcRaw=CM(STK_THR); md->swtch= DSW_ID2; md->curve=CV(3); md->carryTrim=TRIM_OFF;
    e290:	85 e0       	ldi	r24, 0x05	; 5
    e292:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e296:	fc 01       	movw	r30, r24
    e298:	81 82       	std	Z+1, r8	; 0x01
    e29a:	96 e0       	ldi	r25, 0x06	; 6
    e29c:	d9 2e       	mov	r13, r25
    e29e:	d3 82       	std	Z+3, r13	; 0x03
    e2a0:	89 e0       	ldi	r24, 0x09	; 9
    e2a2:	f8 2e       	mov	r15, r24
    e2a4:	f4 82       	std	Z+4, r15	; 0x04
    e2a6:	87 81       	ldd	r24, Z+7	; 0x07
    e2a8:	81 60       	ori	r24, 0x01	; 1
    e2aa:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(5);  md->srcRaw=MIX_MAX;      md->weight=-100; md->swtch= DSW_THR; md->mltpx=MLTPX_REP;
    e2ac:	85 e0       	ldi	r24, 0x05	; 5
    e2ae:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e2b2:	fc 01       	movw	r30, r24
    e2b4:	11 83       	std	Z+1, r17	; 0x01
    e2b6:	8c e9       	ldi	r24, 0x9C	; 156
    e2b8:	82 83       	std	Z+2, r24	; 0x02
    e2ba:	e3 82       	std	Z+3, r14	; 0x03
    e2bc:	87 81       	ldd	r24, Z+7	; 0x07
    e2be:	89 7f       	andi	r24, 0xF9	; 249
    e2c0:	84 60       	ori	r24, 0x04	; 4
    e2c2:	87 83       	std	Z+7, r24	; 0x07

        //gyro gain
        md=setDest(6);  md->srcRaw=MIX_FULL; md->weight=30; md->swtch=-DSW_GEA;
    e2c4:	86 e0       	ldi	r24, 0x06	; 6
    e2c6:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e2ca:	fc 01       	movw	r30, r24
    e2cc:	f1 82       	std	Z+1, r15	; 0x01
    e2ce:	8e e1       	ldi	r24, 0x1E	; 30
    e2d0:	82 83       	std	Z+2, r24	; 0x02
    e2d2:	88 ef       	ldi	r24, 0xF8	; 248
    e2d4:	83 83       	std	Z+3, r24	; 0x03

        //collective
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight=70; md->swtch= DSW_ID0; md->curve=CV(4); md->carryTrim=TRIM_OFF;
    e2d6:	8b e0       	ldi	r24, 0x0B	; 11
    e2d8:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e2dc:	fc 01       	movw	r30, r24
    e2de:	81 82       	std	Z+1, r8	; 0x01
    e2e0:	16 e4       	ldi	r17, 0x46	; 70
    e2e2:	12 83       	std	Z+2, r17	; 0x02
    e2e4:	c3 82       	std	Z+3, r12	; 0x03
    e2e6:	b4 82       	std	Z+4, r11	; 0x04
    e2e8:	87 81       	ldd	r24, Z+7	; 0x07
    e2ea:	81 60       	ori	r24, 0x01	; 1
    e2ec:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight=70; md->swtch= DSW_ID1; md->curve=CV(5); md->carryTrim=TRIM_OFF;
    e2ee:	8b e0       	ldi	r24, 0x0B	; 11
    e2f0:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e2f4:	fc 01       	movw	r30, r24
    e2f6:	81 82       	std	Z+1, r8	; 0x01
    e2f8:	12 83       	std	Z+2, r17	; 0x02
    e2fa:	03 83       	std	Z+3, r16	; 0x03
    e2fc:	a4 82       	std	Z+4, r10	; 0x04
    e2fe:	87 81       	ldd	r24, Z+7	; 0x07
    e300:	81 60       	ori	r24, 0x01	; 1
    e302:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight=70; md->swtch= DSW_ID2; md->curve=CV(6); md->carryTrim=TRIM_OFF;
    e304:	8b e0       	ldi	r24, 0x0B	; 11
    e306:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e30a:	fc 01       	movw	r30, r24
    e30c:	81 82       	std	Z+1, r8	; 0x01
    e30e:	12 83       	std	Z+2, r17	; 0x02
    e310:	d3 82       	std	Z+3, r13	; 0x03
    e312:	94 82       	std	Z+4, r9	; 0x04
    e314:	87 81       	ldd	r24, Z+7	; 0x07
    e316:	81 60       	ori	r24, 0x01	; 1
    e318:	87 83       	std	Z+7, r24	; 0x07

        g_model.swashType = SWASH_TYPE_120;
    e31a:	80 91 c0 01 	lds	r24, 0x01C0
    e31e:	8f 71       	andi	r24, 0x1F	; 31
    e320:	80 62       	ori	r24, 0x20	; 32
    e322:	80 93 c0 01 	sts	0x01C0, r24
        g_model.swashCollectiveSource = CH(11);
    e326:	8f e1       	ldi	r24, 0x1F	; 31
    e328:	80 93 c1 01 	sts	0x01C1, r24
    e32c:	8c ed       	ldi	r24, 0xDC	; 220
    e32e:	98 e1       	ldi	r25, 0x18	; 24
    e330:	a0 e9       	ldi	r26, 0x90	; 144
    e332:	b3 e0       	ldi	r27, 0x03	; 3
    e334:	fc 01       	movw	r30, r24
	int8_t *p ;
	
	p = g_model.curves5[c] ;
  for(uint8_t i=0; i<5; i++)
	{
		*p++ = pgm_read_byte(ar++) ;
    e336:	01 96       	adiw	r24, 0x01	; 1
    e338:	e4 91       	lpm	r30, Z+
    e33a:	ed 93       	st	X+, r30
static void setCurve(uint8_t c, const prog_int8_t *ar )
{
	int8_t *p ;
	
	p = g_model.curves5[c] ;
  for(uint8_t i=0; i<5; i++)
    e33c:	f3 e0       	ldi	r31, 0x03	; 3
    e33e:	a5 39       	cpi	r26, 0x95	; 149
    e340:	bf 07       	cpc	r27, r31
    e342:	c1 f7       	brne	.-16     	; 0xe334 <_Z13applyTemplateh+0x28c>
    e344:	81 ee       	ldi	r24, 0xE1	; 225
    e346:	98 e1       	ldi	r25, 0x18	; 24
    e348:	fc 01       	movw	r30, r24
	{
		*p++ = pgm_read_byte(ar++) ;
    e34a:	01 96       	adiw	r24, 0x01	; 1
    e34c:	e4 91       	lpm	r30, Z+
    e34e:	ed 93       	st	X+, r30
static void setCurve(uint8_t c, const prog_int8_t *ar )
{
	int8_t *p ;
	
	p = g_model.curves5[c] ;
  for(uint8_t i=0; i<5; i++)
    e350:	23 e0       	ldi	r18, 0x03	; 3
    e352:	aa 39       	cpi	r26, 0x9A	; 154
    e354:	b2 07       	cpc	r27, r18
    e356:	c1 f7       	brne	.-16     	; 0xe348 <_Z13applyTemplateh+0x2a0>
    e358:	86 ee       	ldi	r24, 0xE6	; 230
    e35a:	98 e1       	ldi	r25, 0x18	; 24
    e35c:	fc 01       	movw	r30, r24
	{
		*p++ = pgm_read_byte(ar++) ;
    e35e:	01 96       	adiw	r24, 0x01	; 1
    e360:	e4 91       	lpm	r30, Z+
    e362:	ed 93       	st	X+, r30
static void setCurve(uint8_t c, const prog_int8_t *ar )
{
	int8_t *p ;
	
	p = g_model.curves5[c] ;
  for(uint8_t i=0; i<5; i++)
    e364:	e3 e0       	ldi	r30, 0x03	; 3
    e366:	af 39       	cpi	r26, 0x9F	; 159
    e368:	be 07       	cpc	r27, r30
    e36a:	c1 f7       	brne	.-16     	; 0xe35c <_Z13applyTemplateh+0x2b4>
    e36c:	8b ee       	ldi	r24, 0xEB	; 235
    e36e:	98 e1       	ldi	r25, 0x18	; 24
    e370:	fc 01       	movw	r30, r24
	{
		*p++ = pgm_read_byte(ar++) ;
    e372:	01 96       	adiw	r24, 0x01	; 1
    e374:	e4 91       	lpm	r30, Z+
    e376:	ed 93       	st	X+, r30
static void setCurve(uint8_t c, const prog_int8_t *ar )
{
	int8_t *p ;
	
	p = g_model.curves5[c] ;
  for(uint8_t i=0; i<5; i++)
    e378:	f3 e0       	ldi	r31, 0x03	; 3
    e37a:	a4 3a       	cpi	r26, 0xA4	; 164
    e37c:	bf 07       	cpc	r27, r31
    e37e:	c1 f7       	brne	.-16     	; 0xe370 <_Z13applyTemplateh+0x2c8>
    e380:	80 ef       	ldi	r24, 0xF0	; 240
    e382:	98 e1       	ldi	r25, 0x18	; 24
    e384:	fc 01       	movw	r30, r24
	{
		*p++ = pgm_read_byte(ar++) ;
    e386:	01 96       	adiw	r24, 0x01	; 1
    e388:	e4 91       	lpm	r30, Z+
    e38a:	ed 93       	st	X+, r30
static void setCurve(uint8_t c, const prog_int8_t *ar )
{
	int8_t *p ;
	
	p = g_model.curves5[c] ;
  for(uint8_t i=0; i<5; i++)
    e38c:	23 e0       	ldi	r18, 0x03	; 3
    e38e:	a9 3a       	cpi	r26, 0xA9	; 169
    e390:	b2 07       	cpc	r27, r18
    e392:	c1 f7       	brne	.-16     	; 0xe384 <_Z13applyTemplateh+0x2dc>
    e394:	80 ef       	ldi	r24, 0xF0	; 240
    e396:	98 e1       	ldi	r25, 0x18	; 24
    e398:	fc 01       	movw	r30, r24
	{
		*p++ = pgm_read_byte(ar++) ;
    e39a:	01 96       	adiw	r24, 0x01	; 1
    e39c:	e4 91       	lpm	r30, Z+
    e39e:	ed 93       	st	X+, r30
static void setCurve(uint8_t c, const prog_int8_t *ar )
{
	int8_t *p ;
	
	p = g_model.curves5[c] ;
  for(uint8_t i=0; i<5; i++)
    e3a0:	e3 e0       	ldi	r30, 0x03	; 3
    e3a2:	ae 3a       	cpi	r26, 0xAE	; 174
    e3a4:	be 07       	cpc	r27, r30
    e3a6:	c1 f7       	brne	.-16     	; 0xe398 <_Z13applyTemplateh+0x2f0>
    e3a8:	61 c0       	rjmp	.+194    	; 0xe46c <_Z13applyTemplateh+0x3c4>
        setCurve(CURVE5(5),heli_ar5);
        setCurve(CURVE5(6),heli_ar5);
    }

    //Gyro Gain
    if(idx==j++)
    e3aa:	06 30       	cpi	r16, 0x06	; 6
    e3ac:	b1 f4       	brne	.+44     	; 0xe3da <_Z13applyTemplateh+0x332>
    {
        md=setDest(6);  md->srcRaw=STK_P2; md->weight= 50; md->swtch=-DSW_GEA; md->sOffset=100;
    e3ae:	86 e0       	ldi	r24, 0x06	; 6
    e3b0:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e3b4:	fc 01       	movw	r30, r24
    e3b6:	01 83       	std	Z+1, r16	; 0x01
    e3b8:	82 e3       	ldi	r24, 0x32	; 50
    e3ba:	82 83       	std	Z+2, r24	; 0x02
    e3bc:	88 ef       	ldi	r24, 0xF8	; 248
    e3be:	83 83       	std	Z+3, r24	; 0x03
    e3c0:	14 e6       	ldi	r17, 0x64	; 100
    e3c2:	10 87       	std	Z+8, r17	; 0x08
        md=setDest(6);  md->srcRaw=STK_P2; md->weight=-50; md->swtch= DSW_GEA; md->sOffset=100;
    e3c4:	86 e0       	ldi	r24, 0x06	; 6
    e3c6:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e3ca:	fc 01       	movw	r30, r24
    e3cc:	01 83       	std	Z+1, r16	; 0x01
    e3ce:	8e ec       	ldi	r24, 0xCE	; 206
    e3d0:	82 83       	std	Z+2, r24	; 0x02
    e3d2:	88 e0       	ldi	r24, 0x08	; 8
    e3d4:	83 83       	std	Z+3, r24	; 0x03
    e3d6:	10 87       	std	Z+8, r17	; 0x08
    e3d8:	49 c0       	rjmp	.+146    	; 0xe46c <_Z13applyTemplateh+0x3c4>
    }

    //Servo Test
    if(idx==j++)
    e3da:	07 30       	cpi	r16, 0x07	; 7
    e3dc:	09 f0       	breq	.+2      	; 0xe3e0 <_Z13applyTemplateh+0x338>
    e3de:	46 c0       	rjmp	.+140    	; 0xe46c <_Z13applyTemplateh+0x3c4>
    {
        md=setDest(15); md->srcRaw=CH(16);   md->speedUp = 8; md->speedDown = 8;
    e3e0:	8f e0       	ldi	r24, 0x0F	; 15
    e3e2:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e3e6:	fc 01       	movw	r30, r24
    e3e8:	b4 e2       	ldi	r27, 0x24	; 36
    e3ea:	fb 2e       	mov	r15, r27
    e3ec:	f1 82       	std	Z+1, r15	; 0x01
    e3ee:	88 e8       	ldi	r24, 0x88	; 136
    e3f0:	86 83       	std	Z+6, r24	; 0x06
        md=setDest(16); md->srcRaw=MIX_FULL; md->weight= 110; md->swtch=DSW_SW1;
    e3f2:	80 e1       	ldi	r24, 0x10	; 16
    e3f4:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e3f8:	fc 01       	movw	r30, r24
    e3fa:	89 e0       	ldi	r24, 0x09	; 9
    e3fc:	81 83       	std	Z+1, r24	; 0x01
    e3fe:	ae e6       	ldi	r26, 0x6E	; 110
    e400:	ea 2e       	mov	r14, r26
    e402:	e2 82       	std	Z+2, r14	; 0x02
    e404:	8a e0       	ldi	r24, 0x0A	; 10
    e406:	83 83       	std	Z+3, r24	; 0x03
        md=setDest(16); md->srcRaw=MIX_MAX;  md->weight=-110; md->swtch=DSW_SW2; md->mltpx=MLTPX_REP;
    e408:	80 e1       	ldi	r24, 0x10	; 16
    e40a:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e40e:	fc 01       	movw	r30, r24
    e410:	18 e0       	ldi	r17, 0x08	; 8
    e412:	11 83       	std	Z+1, r17	; 0x01
    e414:	82 e9       	ldi	r24, 0x92	; 146
    e416:	82 83       	std	Z+2, r24	; 0x02
    e418:	8b e0       	ldi	r24, 0x0B	; 11
    e41a:	83 83       	std	Z+3, r24	; 0x03
    e41c:	87 81       	ldd	r24, Z+7	; 0x07
    e41e:	89 7f       	andi	r24, 0xF9	; 249
    e420:	84 60       	ori	r24, 0x04	; 4
    e422:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(16); md->srcRaw=MIX_MAX;  md->weight= 110; md->swtch=DSW_SW3; md->mltpx=MLTPX_REP;
    e424:	80 e1       	ldi	r24, 0x10	; 16
    e426:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <_ZL7setDesth>
    e42a:	fc 01       	movw	r30, r24
    e42c:	11 83       	std	Z+1, r17	; 0x01
    e42e:	e2 82       	std	Z+2, r14	; 0x02
    e430:	8c e0       	ldi	r24, 0x0C	; 12
    e432:	83 83       	std	Z+3, r24	; 0x03
    e434:	87 81       	ldd	r24, Z+7	; 0x07
    e436:	89 7f       	andi	r24, 0xF9	; 249
    e438:	84 60       	ori	r24, 0x04	; 4
    e43a:	87 83       	std	Z+7, r24	; 0x07

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  CSwData *cs = &g_model.customSw[idx-1] ;
  cs->func = func ;
  cs->andsw = 0 ;
    e43c:	8b e0       	ldi	r24, 0x0B	; 11
    e43e:	80 93 02 04 	sts	0x0402, r24
  cs->v1   = v1 ;
    e442:	93 e2       	ldi	r25, 0x23	; 35
    e444:	90 93 00 04 	sts	0x0400, r25
  cs->v2   = v2 ;
    e448:	f0 92 01 04 	sts	0x0401, r15

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  CSwData *cs = &g_model.customSw[idx-1] ;
  cs->func = func ;
  cs->andsw = 0 ;
    e44c:	81 e0       	ldi	r24, 0x01	; 1
    e44e:	80 93 05 04 	sts	0x0405, r24
  cs->v1   = v1 ;
    e452:	90 93 03 04 	sts	0x0403, r25
  cs->v2   = v2 ;
    e456:	89 e6       	ldi	r24, 0x69	; 105
    e458:	80 93 04 04 	sts	0x0404, r24

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  CSwData *cs = &g_model.customSw[idx-1] ;
  cs->func = func ;
  cs->andsw = 0 ;
    e45c:	82 e0       	ldi	r24, 0x02	; 2
    e45e:	80 93 08 04 	sts	0x0408, r24
  cs->v1   = v1 ;
    e462:	90 93 06 04 	sts	0x0406, r25
  cs->v2   = v2 ;
    e466:	87 e9       	ldi	r24, 0x97	; 151
    e468:	80 93 07 04 	sts	0x0407, r24
        setSwitch(3,CS_VNEG,CH(15),  -105);
    }



    STORE_MODELVARS;
    e46c:	82 e0       	ldi	r24, 0x02	; 2
    e46e:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <_Z7eeDirtyh>
    eeWaitComplete() ;
    e472:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <_Z14eeWaitCompletev>

#endif

}
    e476:	0f 90       	pop	r0
    e478:	0f 90       	pop	r0
    e47a:	0f 90       	pop	r0
    e47c:	0f 90       	pop	r0
    e47e:	cf 91       	pop	r28
    e480:	df 91       	pop	r29
    e482:	1f 91       	pop	r17
    e484:	0f 91       	pop	r16
    e486:	ff 90       	pop	r15
    e488:	ef 90       	pop	r14
    e48a:	df 90       	pop	r13
    e48c:	cf 90       	pop	r12
    e48e:	bf 90       	pop	r11
    e490:	af 90       	pop	r10
    e492:	9f 90       	pop	r9
    e494:	8f 90       	pop	r8
    e496:	08 95       	ret

0000e498 <_Z12setPpmTimersv>:
	setupPulses() ;
}

void setPpmTimers()
{
  OCR1A = 40000 ;		// Next frame starts in 20 mS
    e498:	80 e4       	ldi	r24, 0x40	; 64
    e49a:	9c e9       	ldi	r25, 0x9C	; 156
    e49c:	9b bd       	out	0x2b, r25	; 43
    e49e:	8a bd       	out	0x2a, r24	; 42
#ifdef CPUM2561
  TIMSK1 |= (1<<OCIE1A) ;		// Enable COMPA
#else
  TIMSK |= (1<<OCIE1A) ;		// Enable COMPA
    e4a0:	87 b7       	in	r24, 0x37	; 55
    e4a2:	80 61       	ori	r24, 0x10	; 16
    e4a4:	87 bf       	out	0x37, r24	; 55
#endif
  TCCR1A = (0<<WGM10) ;
    e4a6:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = (1 << WGM12) | (2<<CS10) ; // CTC OCRA, 16MHz / 8
    e4a8:	8a e0       	ldi	r24, 0x0A	; 10
    e4aa:	8e bd       	out	0x2e, r24	; 46
}
    e4ac:	08 95       	ret

0000e4ae <_Z14setupPulsesPPMh>:
//uint16_t PPM_gap = 300 * 2; //Stoplen *2
//uint16_t PPM_frame ;

uint16_t B3_comp_value ;

void setupPulsesPPM( uint8_t proto )
    e4ae:	df 92       	push	r13
    e4b0:	ef 92       	push	r14
    e4b2:	ff 92       	push	r15
    e4b4:	0f 93       	push	r16
    e4b6:	1f 93       	push	r17
    e4b8:	cf 93       	push	r28
    e4ba:	df 93       	push	r29
    e4bc:	d8 2e       	mov	r13, r24
{
#define PPM_CENTER 1500*2
  int16_t PPM_range ;
  
	uint8_t startChan = g_model.ppmStart ;
    e4be:	e0 91 bb 01 	lds	r30, 0x01BB
    e4c2:	e2 95       	swap	r30
    e4c4:	e6 95       	lsr	r30
    e4c6:	e7 70       	andi	r30, 0x07	; 7
	  
	//Total frame length = 22.5msec
  //each pulse is 0.7..1.7ms long with a 0.3ms stop tail
  //The pulse ISR is 2mhz that's why everything is multiplied by 2
  uint16_t *ptr ;
  ptr = (proto == PROTO_PPM) ? pulses2MHz.pword : &pulses2MHz.pword[PULSES_WORD_SIZE/2] ;
    e4c8:	88 23       	and	r24, r24
    e4ca:	21 f4       	brne	.+8      	; 0xe4d4 <_Z14setupPulsesPPMh+0x26>
    e4cc:	88 e0       	ldi	r24, 0x08	; 8
    e4ce:	ab e7       	ldi	r26, 0x7B	; 123
    e4d0:	bd e0       	ldi	r27, 0x0D	; 13
    e4d2:	08 c0       	rjmp	.+16     	; 0xe4e4 <_Z14setupPulsesPPMh+0x36>
  uint8_t p= ( ( proto == PROTO_PPM16) ? 16 : 8 ) +g_model.ppmNCH*2 ; //Channels *2
    e4d4:	83 e0       	ldi	r24, 0x03	; 3
    e4d6:	d8 16       	cp	r13, r24
    e4d8:	11 f4       	brne	.+4      	; 0xe4de <_Z14setupPulsesPPMh+0x30>
    e4da:	80 e1       	ldi	r24, 0x10	; 16
    e4dc:	01 c0       	rjmp	.+2      	; 0xe4e0 <_Z14setupPulsesPPMh+0x32>
    e4de:	88 e0       	ldi	r24, 0x08	; 8
    e4e0:	a3 ec       	ldi	r26, 0xC3	; 195
    e4e2:	bd e0       	ldi	r27, 0x0D	; 13
    e4e4:	10 91 ba 01 	lds	r17, 0x01BA
    e4e8:	11 0f       	add	r17, r17
    e4ea:	1e 0f       	add	r17, r30
  p += startChan ;
    e4ec:	18 0f       	add	r17, r24
	uint16_t q=(g_model.ppmDelay*50+300)*2; //Stoplen *2
    e4ee:	80 91 bd 01 	lds	r24, 0x01BD
    e4f2:	94 e6       	ldi	r25, 0x64	; 100
    e4f4:	89 02       	muls	r24, r25
    e4f6:	b0 01       	movw	r22, r0
    e4f8:	11 24       	eor	r1, r1
    e4fa:	68 5a       	subi	r22, 0xA8	; 168
    e4fc:	7d 4f       	sbci	r23, 0xFD	; 253
  uint16_t rest=22500u*2-q; //Minimum Framelen=22.5 ms
  rest += (int16_t(g_model.ppmFrameLength))*1000;
    e4fe:	20 91 c3 01 	lds	r18, 0x01C3
  //    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
//	if ( proto != PROTO_PPM )
//	{
		*ptr++ = q ;
    e502:	11 96       	adiw	r26, 0x01	; 1
    e504:	7c 93       	st	X, r23
    e506:	6e 93       	st	-X, r22
//	}
  PPM_range = g_model.extendedLimits ? 640*2 : 512*2;   //range of 0.7..1.7msec
    e508:	80 91 c0 01 	lds	r24, 0x01C0
    e50c:	81 fd       	sbrc	r24, 1
    e50e:	03 c0       	rjmp	.+6      	; 0xe516 <_Z14setupPulsesPPMh+0x68>
    e510:	c0 e0       	ldi	r28, 0x00	; 0
    e512:	d4 e0       	ldi	r29, 0x04	; 4
    e514:	02 c0       	rjmp	.+4      	; 0xe51a <_Z14setupPulsesPPMh+0x6c>
    e516:	c0 e0       	ldi	r28, 0x00	; 0
    e518:	d5 e0       	ldi	r29, 0x05	; 5
	for( uint8_t i = (proto == PROTO_PPM16) ? p-8 : startChan ;i<p ; i++ )
    e51a:	83 e0       	ldi	r24, 0x03	; 3
    e51c:	d8 16       	cp	r13, r24
    e51e:	11 f0       	breq	.+4      	; 0xe524 <_Z14setupPulsesPPMh+0x76>
    e520:	0e 2f       	mov	r16, r30
    e522:	02 c0       	rjmp	.+4      	; 0xe528 <_Z14setupPulsesPPMh+0x7a>
    e524:	01 2f       	mov	r16, r17
    e526:	08 50       	subi	r16, 0x08	; 8
  uint16_t *ptr ;
  ptr = (proto == PROTO_PPM) ? pulses2MHz.pword : &pulses2MHz.pword[PULSES_WORD_SIZE/2] ;
  uint8_t p= ( ( proto == PROTO_PPM16) ? 16 : 8 ) +g_model.ppmNCH*2 ; //Channels *2
  p += startChan ;
	uint16_t q=(g_model.ppmDelay*50+300)*2; //Stoplen *2
  uint16_t rest=22500u*2-q; //Minimum Framelen=22.5 ms
    e528:	33 27       	eor	r19, r19
    e52a:	27 fd       	sbrc	r18, 7
    e52c:	30 95       	com	r19
    e52e:	88 ee       	ldi	r24, 0xE8	; 232
    e530:	93 e0       	ldi	r25, 0x03	; 3
    e532:	28 9f       	mul	r18, r24
    e534:	a0 01       	movw	r20, r0
    e536:	29 9f       	mul	r18, r25
    e538:	50 0d       	add	r21, r0
    e53a:	38 9f       	mul	r19, r24
    e53c:	50 0d       	add	r21, r0
    e53e:	11 24       	eor	r1, r1
    e540:	48 53       	subi	r20, 0x38	; 56
    e542:	50 45       	sbci	r21, 0x50	; 80
  rest += (int16_t(g_model.ppmFrameLength))*1000;
    e544:	46 1b       	sub	r20, r22
    e546:	57 0b       	sbc	r21, r23
  //    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
//	if ( proto != PROTO_PPM )
//	{
		*ptr++ = q ;
    e548:	12 96       	adiw	r26, 0x02	; 2
//	}
  PPM_range = g_model.extendedLimits ? 640*2 : 512*2;   //range of 0.7..1.7msec
	for( uint8_t i = (proto == PROTO_PPM16) ? p-8 : startChan ;i<p ; i++ )
  { //NUM_CHNOUT
//    int16_t v = max(min(g_chans512[i],PPM_range),-PPM_range) + PPM_CENTER;
    int16_t v = g_chans512[i] ;
    e54a:	ee 24       	eor	r14, r14
    e54c:	ff 24       	eor	r15, r15
    e54e:	ec 1a       	sub	r14, r28
    e550:	fd 0a       	sbc	r15, r29
    e552:	20 c0       	rjmp	.+64     	; 0xe594 <_Z14setupPulsesPPMh+0xe6>
    e554:	e0 2f       	mov	r30, r16
    e556:	f0 e0       	ldi	r31, 0x00	; 0
    e558:	ee 0f       	add	r30, r30
    e55a:	ff 1f       	adc	r31, r31
    e55c:	e4 51       	subi	r30, 0x14	; 20
    e55e:	f9 4f       	sbci	r31, 0xF9	; 249
    e560:	20 81       	ld	r18, Z
    e562:	31 81       	ldd	r19, Z+1	; 0x01
    e564:	c9 01       	movw	r24, r18
    e566:	c8 17       	cp	r28, r24
    e568:	d9 07       	cpc	r29, r25
    e56a:	0c f4       	brge	.+2      	; 0xe56e <_Z14setupPulsesPPMh+0xc0>
    e56c:	ce 01       	movw	r24, r28
    e56e:	8e 15       	cp	r24, r14
    e570:	9f 05       	cpc	r25, r15
    e572:	0c f4       	brge	.+2      	; 0xe576 <_Z14setupPulsesPPMh+0xc8>
    e574:	c7 01       	movw	r24, r14
		{
			v = -PPM_range ;			
		}
    v += PPM_CENTER ;
		
		rest -= v ; // (*ptr + q);
    e576:	88 54       	subi	r24, 0x48	; 72
    e578:	94 4f       	sbci	r25, 0xF4	; 244
    e57a:	48 1b       	sub	r20, r24
    e57c:	59 0b       	sbc	r21, r25
		*ptr++ = v - q ; /* as Pat MacKenzie suggests */
    e57e:	86 1b       	sub	r24, r22
    e580:	97 0b       	sbc	r25, r23
    e582:	11 96       	adiw	r26, 0x01	; 1
    e584:	9c 93       	st	X, r25
    e586:	8e 93       	st	-X, r24
		*ptr++ = q;      //to here
    e588:	13 96       	adiw	r26, 0x03	; 3
    e58a:	7c 93       	st	X, r23
    e58c:	6e 93       	st	-X, r22
    e58e:	12 97       	sbiw	r26, 0x02	; 2
//uint16_t PPM_gap = 300 * 2; //Stoplen *2
//uint16_t PPM_frame ;

uint16_t B3_comp_value ;

void setupPulsesPPM( uint8_t proto )
    e590:	14 96       	adiw	r26, 0x04	; 4
//	if ( proto != PROTO_PPM )
//	{
		*ptr++ = q ;
//	}
  PPM_range = g_model.extendedLimits ? 640*2 : 512*2;   //range of 0.7..1.7msec
	for( uint8_t i = (proto == PROTO_PPM16) ? p-8 : startChan ;i<p ; i++ )
    e592:	0f 5f       	subi	r16, 0xFF	; 255
    e594:	01 17       	cp	r16, r17
    e596:	f0 f2       	brcs	.-68     	; 0xe554 <_Z14setupPulsesPPMh+0xa6>
		
		rest -= v ; // (*ptr + q);
		*ptr++ = v - q ; /* as Pat MacKenzie suggests */
		*ptr++ = q;      //to here
	}
	if ( rest < 9000 )
    e598:	83 e2       	ldi	r24, 0x23	; 35
    e59a:	48 32       	cpi	r20, 0x28	; 40
    e59c:	58 07       	cpc	r21, r24
    e59e:	10 f4       	brcc	.+4      	; 0xe5a4 <_Z14setupPulsesPPMh+0xf6>
    e5a0:	48 e2       	ldi	r20, 0x28	; 40
    e5a2:	53 e2       	ldi	r21, 0x23	; 35
	{
		rest = 9000 ;
	}
  *ptr++ = rest;
    e5a4:	11 96       	adiw	r26, 0x01	; 1
    e5a6:	5c 93       	st	X, r21
    e5a8:	4e 93       	st	-X, r20
	if ( proto != PROTO_PPM )
    e5aa:	dd 20       	and	r13, r13
    e5ac:	31 f0       	breq	.+12     	; 0xe5ba <_Z14setupPulsesPPMh+0x10c>
	{
		B3_comp_value = rest - 1000 ;		// 500uS before end of sync pulse
    e5ae:	48 5e       	subi	r20, 0xE8	; 232
    e5b0:	53 40       	sbci	r21, 0x03	; 3
    e5b2:	50 93 10 0e 	sts	0x0E10, r21
    e5b6:	40 93 0f 0e 	sts	0x0E0F, r20
//	if ( proto == PROTO_PPM )
//	{
//		*ptr++ = q ;
//	}
    
	*ptr=0;
    e5ba:	13 96       	adiw	r26, 0x03	; 3
    e5bc:	1c 92       	st	X, r1
    e5be:	1e 92       	st	-X, r1
    e5c0:	12 97       	sbiw	r26, 0x02	; 2
}
    e5c2:	df 91       	pop	r29
    e5c4:	cf 91       	pop	r28
    e5c6:	1f 91       	pop	r17
    e5c8:	0f 91       	pop	r16
    e5ca:	ff 90       	pop	r15
    e5cc:	ef 90       	pop	r14
    e5ce:	df 90       	pop	r13
    e5d0:	08 95       	ret

0000e5d2 <__vector_11>:
//    _send_1(0);        //end of pulse stream
    Dsm2_pulsePtr = pulses2MHz.pbyte ;
}


ISR(TIMER1_CAPT_vect) //2MHz pulse generation
    e5d2:	1f 92       	push	r1
    e5d4:	0f 92       	push	r0
    e5d6:	0f b6       	in	r0, 0x3f	; 63
    e5d8:	0f 92       	push	r0
    e5da:	11 24       	eor	r1, r1
    e5dc:	2f 93       	push	r18
    e5de:	8f 93       	push	r24
    e5e0:	9f 93       	push	r25
    e5e2:	ef 93       	push	r30
    e5e4:	ff 93       	push	r31
{
    //      static uint8_t  pulsePol;
    uint8_t x ;
    PORTB ^=  (1<<OUT_B_PPM);
    e5e6:	88 b3       	in	r24, 0x18	; 24
    e5e8:	91 e0       	ldi	r25, 0x01	; 1
    e5ea:	89 27       	eor	r24, r25
    e5ec:	88 bb       	out	0x18, r24	; 24
    x = *Dsm2_pulsePtr;      // Byte size
    e5ee:	e0 91 0e 01 	lds	r30, 0x010E
    e5f2:	f0 91 0f 01 	lds	r31, 0x010F
    e5f6:	21 91       	ld	r18, Z+
    Dsm2_pulsePtr += 1 ;
    e5f8:	f0 93 0f 01 	sts	0x010F, r31
    e5fc:	e0 93 0e 01 	sts	0x010E, r30
    ICR1 = x ;
    e600:	82 2f       	mov	r24, r18
    e602:	90 e0       	ldi	r25, 0x00	; 0
    e604:	97 bd       	out	0x27, r25	; 39
    e606:	86 bd       	out	0x26, r24	; 38
    if ( x > 200 )
    e608:	29 3c       	cpi	r18, 0xC9	; 201
    e60a:	08 f0       	brcs	.+2      	; 0xe60e <__vector_11+0x3c>
    {
        PORTB |=  (1<<OUT_B_PPM);      // Make sure pulses are the correct way up      
    e60c:	c0 9a       	sbi	0x18, 0	; 24
    }
    heartbeat |= HEART_TIMER2Mhz;
    e60e:	80 91 0b 0e 	lds	r24, 0x0E0B
    e612:	81 60       	ori	r24, 0x01	; 1
    e614:	80 93 0b 0e 	sts	0x0E0B, r24
}
    e618:	ff 91       	pop	r31
    e61a:	ef 91       	pop	r30
    e61c:	9f 91       	pop	r25
    e61e:	8f 91       	pop	r24
    e620:	2f 91       	pop	r18
    e622:	0f 90       	pop	r0
    e624:	0f be       	out	0x3f, r0	; 63
    e626:	0f 90       	pop	r0
    e628:	1f 90       	pop	r1
    e62a:	18 95       	reti

0000e62c <__vector_13>:
    }
}

// This interrupt for PXX

ISR(TIMER1_COMPB_vect) // PXX main interrupt
    e62c:	1f 92       	push	r1
    e62e:	0f 92       	push	r0
    e630:	0f b6       	in	r0, 0x3f	; 63
    e632:	0f 92       	push	r0
    e634:	11 24       	eor	r1, r1
    e636:	2f 93       	push	r18
    e638:	3f 93       	push	r19
    e63a:	8f 93       	push	r24
    e63c:	9f 93       	push	r25
    e63e:	ef 93       	push	r30
    e640:	ff 93       	push	r31
{
    uint8_t x ;
    PORTB ^= (1<<OUT_B_PPM) ;
    e642:	88 b3       	in	r24, 0x18	; 24
    e644:	91 e0       	ldi	r25, 0x01	; 1
    e646:	89 27       	eor	r24, r25
    e648:	88 bb       	out	0x18, r24	; 24
    x = *pulses2MHzptr;      // Byte size
    e64a:	e0 91 0a 01 	lds	r30, 0x010A
    e64e:	f0 91 0b 01 	lds	r31, 0x010B
    if ( ( x & 1 ) == 0 )
    e652:	80 81       	ld	r24, Z
    e654:	28 2f       	mov	r18, r24
    e656:	30 e0       	ldi	r19, 0x00	; 0
    e658:	80 fd       	sbrc	r24, 0
    e65a:	04 c0       	rjmp	.+8      	; 0xe664 <__vector_13+0x38>
    {
        OCR1B += 32 ;
    e65c:	88 b5       	in	r24, 0x28	; 40
    e65e:	99 b5       	in	r25, 0x29	; 41
    e660:	80 96       	adiw	r24, 0x20	; 32
    e662:	03 c0       	rjmp	.+6      	; 0xe66a <__vector_13+0x3e>
    }
    else
    {
        OCR1B += 16 ;
    e664:	88 b5       	in	r24, 0x28	; 40
    e666:	99 b5       	in	r25, 0x29	; 41
    e668:	40 96       	adiw	r24, 0x10	; 16
    e66a:	99 bd       	out	0x29, r25	; 41
    e66c:	88 bd       	out	0x28, r24	; 40
    }
    if ( (x >>= 1) == 0 )
    e66e:	c9 01       	movw	r24, r18
    e670:	95 95       	asr	r25
    e672:	87 95       	ror	r24
    e674:	88 23       	and	r24, r24
    e676:	69 f4       	brne	.+26     	; 0xe692 <__vector_13+0x66>
    {
        if ( *(++pulses2MHzptr) == 0 )
    e678:	31 96       	adiw	r30, 0x01	; 1
    e67a:	f0 93 0b 01 	sts	0x010B, r31
    e67e:	e0 93 0a 01 	sts	0x010A, r30
    e682:	31 97       	sbiw	r30, 0x01	; 1
    e684:	81 81       	ldd	r24, Z+1	; 0x01
    e686:	88 23       	and	r24, r24
    e688:	29 f4       	brne	.+10     	; 0xe694 <__vector_13+0x68>
//            OCR1B -= 48 ; // = OCR1C + 3000 ;		// 1.5mS on from OCR1C
						// disable COMPB interrupt
#ifdef CPUM2561
    TIMSK1 &= ~(1<<OCIE1B) ;	// COMPB interrupt off
#else
    TIMSK &= ~(1<<OCIE1B) ;	// COMPB interrupt off
    e68a:	87 b7       	in	r24, 0x37	; 55
    e68c:	87 7f       	andi	r24, 0xF7	; 247
    e68e:	87 bf       	out	0x37, r24	; 55
    e690:	01 c0       	rjmp	.+2      	; 0xe694 <__vector_13+0x68>
#endif
        }
    }
    else
    {
        *pulses2MHzptr = x ;
    e692:	80 83       	st	Z, r24
    }
    heartbeat |= HEART_TIMER2Mhz;
    e694:	80 91 0b 0e 	lds	r24, 0x0E0B
    e698:	81 60       	ori	r24, 0x01	; 1
    e69a:	80 93 0b 0e 	sts	0x0E0B, r24
}
    e69e:	ff 91       	pop	r31
    e6a0:	ef 91       	pop	r30
    e6a2:	9f 91       	pop	r25
    e6a4:	8f 91       	pop	r24
    e6a6:	3f 91       	pop	r19
    e6a8:	2f 91       	pop	r18
    e6aa:	0f 90       	pop	r0
    e6ac:	0f be       	out	0x3f, r0	; 63
    e6ae:	0f 90       	pop	r0
    e6b0:	1f 90       	pop	r1
    e6b2:	18 95       	reti

0000e6b4 <_Z18set_timer3_capturev>:
void set_timer3_capture()
{
#ifdef CPUM2561
    TIMSK3 &= ~( (1<<OCIE3A) | (1<<OCIE3B) | (1<<OCIE3C) ) ;	// Stop compare interrupts
#else
    ETIMSK &= ~( (1<<OCIE3A) | (1<<OCIE3B) | (1<<OCIE3C) ) ;	// Stop compare interrupts
    e6b4:	ed e7       	ldi	r30, 0x7D	; 125
    e6b6:	f0 e0       	ldi	r31, 0x00	; 0
    e6b8:	80 81       	ld	r24, Z
    e6ba:	85 7e       	andi	r24, 0xE5	; 229
    e6bc:	80 83       	st	Z, r24
#endif
    DDRE &= ~0x80;  PORTE |= 0x80 ;	// Bit 7 input + pullup
    e6be:	17 98       	cbi	0x02, 7	; 2
    e6c0:	1f 9a       	sbi	0x03, 7	; 3

    TCCR3B = 0 ;			// Stop counter
    e6c2:	aa e8       	ldi	r26, 0x8A	; 138
    e6c4:	b0 e0       	ldi	r27, 0x00	; 0
    e6c6:	1c 92       	st	X, r1
    TCCR3A  = 0;
    e6c8:	10 92 8b 00 	sts	0x008B, r1
    TCCR3B  = (1<<ICNC3) | (2<<CS30);      //ICNC3 16MHz / 8
    e6cc:	82 e8       	ldi	r24, 0x82	; 130
    e6ce:	8c 93       	st	X, r24
#ifdef CPUM2561
    TIMSK3 |= (1<<ICIE3);
#else
    ETIMSK |= (1<<TICIE3);
    e6d0:	80 81       	ld	r24, Z
    e6d2:	80 62       	ori	r24, 0x20	; 32
    e6d4:	80 83       	st	Z, r24
#endif
}
    e6d6:	08 95       	ret

0000e6d8 <_Z14set_timer3_ppmv>:
void set_timer3_ppm()
{
#ifdef CPUM2561
    TIMSK3 &= ~( 1<<ICIE3) ;	// Stop capture interrupt
#else
    ETIMSK &= ~( 1<<TICIE3) ;	// Stop capture interrupt
    e6d8:	ed e7       	ldi	r30, 0x7D	; 125
    e6da:	f0 e0       	ldi	r31, 0x00	; 0
    e6dc:	80 81       	ld	r24, Z
    e6de:	8f 7d       	andi	r24, 0xDF	; 223
    e6e0:	80 83       	st	Z, r24
#endif
    DDRE |= 0x80;					// Bit 7 output
    e6e2:	17 9a       	sbi	0x02, 7	; 2

    TCCR3B = 0 ;			// Stop counter
    e6e4:	aa e8       	ldi	r26, 0x8A	; 138
    e6e6:	b0 e0       	ldi	r27, 0x00	; 0
    e6e8:	1c 92       	st	X, r1
    TCCR3A = (0<<WGM10);
    e6ea:	10 92 8b 00 	sts	0x008B, r1
    TCCR3B = (1 << WGM12) | (2<<CS10); // CTC OCR1A, 16MHz / 8
    e6ee:	8a e0       	ldi	r24, 0x0A	; 10
    e6f0:	8c 93       	st	X, r24

#ifdef CPUM2561
    TIMSK3 |= ( (1<<OCIE3A) | (1<<OCIE3B) ); 			// enable immediately before mainloop
#else
    ETIMSK |= ( (1<<OCIE3A) | (1<<OCIE3B) ); 			// enable immediately before mainloop
    e6f2:	80 81       	ld	r24, Z
    e6f4:	88 61       	ori	r24, 0x18	; 24
    e6f6:	80 83       	st	Z, r24
#endif
}
    e6f8:	08 95       	ret

0000e6fa <__vector_26>:



ISR(TIMER3_COMPA_vect) //2MHz pulse generation
    e6fa:	1f 92       	push	r1
    e6fc:	0f 92       	push	r0
    e6fe:	0f b6       	in	r0, 0x3f	; 63
    e700:	0f 92       	push	r0
    e702:	11 24       	eor	r1, r1
    e704:	8f 93       	push	r24
    e706:	9f 93       	push	r25
    e708:	af 93       	push	r26
    e70a:	bf 93       	push	r27
    e70c:	ef 93       	push	r30
    e70e:	ff 93       	push	r31
{
    static uint16_t *pulsePtr = &pulses2MHz.pword[PULSES_WORD_SIZE/2];
    uint16_t *xpulsePtr ;

    if(PulsePol16)
    e710:	80 91 18 0e 	lds	r24, 0x0E18
    e714:	88 23       	and	r24, r24
    e716:	21 f0       	breq	.+8      	; 0xe720 <__vector_26+0x26>
    {
        PORTE |= 0x80 ; // (1<<OUT_B_PPM);
    e718:	1f 9a       	sbi	0x03, 7	; 3
        PulsePol16 = 0;
    e71a:	10 92 18 0e 	sts	0x0E18, r1
    e71e:	04 c0       	rjmp	.+8      	; 0xe728 <__vector_26+0x2e>
    }else{
        PORTE &= ~0x80 ;		// (1<<OUT_B_PPM);
    e720:	1f 98       	cbi	0x03, 7	; 3
        PulsePol16 = 1;
    e722:	81 e0       	ldi	r24, 0x01	; 1
    e724:	80 93 18 0e 	sts	0x0E18, r24
    }

		xpulsePtr = pulsePtr ;	// read memory once
    e728:	e0 91 0c 01 	lds	r30, 0x010C
    e72c:	f0 91 0d 01 	lds	r31, 0x010D

    OCR3A  = *xpulsePtr++;
    e730:	df 01       	movw	r26, r30
    e732:	8d 91       	ld	r24, X+
    e734:	9d 91       	ld	r25, X+
    e736:	90 93 87 00 	sts	0x0087, r25
    e73a:	80 93 86 00 	sts	0x0086, r24
    OCR3B = B3_comp_value ;
    e73e:	80 91 0f 0e 	lds	r24, 0x0E0F
    e742:	90 91 10 0e 	lds	r25, 0x0E10
    e746:	90 93 85 00 	sts	0x0085, r25
    e74a:	80 93 84 00 	sts	0x0084, r24
    
    if( *xpulsePtr == 0)
    e74e:	82 81       	ldd	r24, Z+2	; 0x02
    e750:	93 81       	ldd	r25, Z+3	; 0x03
    e752:	89 2b       	or	r24, r25
    e754:	41 f4       	brne	.+16     	; 0xe766 <__vector_26+0x6c>
    {
        xpulsePtr = &pulses2MHz.pword[PULSES_WORD_SIZE/2];
        PulsePol16 = !g_model.pulsePol;//0;     // changed polarity
    e756:	80 91 c0 01 	lds	r24, 0x01C0
    e75a:	80 95       	com	r24
    e75c:	81 70       	andi	r24, 0x01	; 1
    e75e:	80 93 18 0e 	sts	0x0E18, r24
    e762:	a3 ec       	ldi	r26, 0xC3	; 195
    e764:	bd e0       	ldi	r27, 0x0D	; 13
    }
		pulsePtr = xpulsePtr ;	// write memory back
    e766:	b0 93 0d 01 	sts	0x010D, r27
    e76a:	a0 93 0c 01 	sts	0x010C, r26
    heartbeat |= HEART_TIMER2Mhz;
    e76e:	80 91 0b 0e 	lds	r24, 0x0E0B
    e772:	81 60       	ori	r24, 0x01	; 1
    e774:	80 93 0b 0e 	sts	0x0E0B, r24
}
    e778:	ff 91       	pop	r31
    e77a:	ef 91       	pop	r30
    e77c:	bf 91       	pop	r27
    e77e:	af 91       	pop	r26
    e780:	9f 91       	pop	r25
    e782:	8f 91       	pop	r24
    e784:	0f 90       	pop	r0
    e786:	0f be       	out	0x3f, r0	; 63
    e788:	0f 90       	pop	r0
    e78a:	1f 90       	pop	r1
    e78c:	18 95       	reti

0000e78e <_Z10putPcmParth>:
void putPcmPart( uint8_t value )
{
		struct t_pcm_control *ptrControl ;

		ptrControl = &PcmControl ;
		FORCE_INDIRECT(ptrControl) ;
    e78e:	a1 e1       	ldi	r26, 0x11	; 17
    e790:	be e0       	ldi	r27, 0x0E	; 14
    
		ptrControl->PcmByte >>= 2 ;
    ptrControl->PcmByte |= value ;
    e792:	9c 91       	ld	r25, X
    e794:	96 95       	lsr	r25
    e796:	96 95       	lsr	r25
    e798:	98 2b       	or	r25, r24
    e79a:	9c 93       	st	X, r25
    if ( ++ptrControl->PcmBitCount >= 4 )
    e79c:	11 96       	adiw	r26, 0x01	; 1
    e79e:	8c 91       	ld	r24, X
    e7a0:	11 97       	sbiw	r26, 0x01	; 1
    e7a2:	8f 5f       	subi	r24, 0xFF	; 255
    e7a4:	11 96       	adiw	r26, 0x01	; 1
    e7a6:	8c 93       	st	X, r24
    e7a8:	11 97       	sbiw	r26, 0x01	; 1
    e7aa:	84 30       	cpi	r24, 0x04	; 4
    e7ac:	60 f0       	brcs	.+24     	; 0xe7c6 <_Z10putPcmParth+0x38>
    {
        *ptrControl->PcmPtr++ = ptrControl->PcmByte ;
    e7ae:	12 96       	adiw	r26, 0x02	; 2
    e7b0:	ed 91       	ld	r30, X+
    e7b2:	fc 91       	ld	r31, X
    e7b4:	13 97       	sbiw	r26, 0x03	; 3
    e7b6:	91 93       	st	Z+, r25
    e7b8:	13 96       	adiw	r26, 0x03	; 3
    e7ba:	fc 93       	st	X, r31
    e7bc:	ee 93       	st	-X, r30
    e7be:	12 97       	sbiw	r26, 0x02	; 2
        ptrControl->PcmBitCount = ptrControl->PcmByte = 0 ;
    e7c0:	1c 92       	st	X, r1
    e7c2:	11 96       	adiw	r26, 0x01	; 1
    e7c4:	1c 92       	st	X, r1
    e7c6:	08 95       	ret

0000e7c8 <_Z9putPcmBith>:
	asm("") ;
}

void putPcmBit( uint8_t bit )
{
    if ( bit )
    e7c8:	88 23       	and	r24, r24
    e7ca:	39 f0       	breq	.+14     	; 0xe7da <_Z9putPcmBith+0x12>
    {
        PcmControl.PcmOnesCount += 1 ;
    e7cc:	80 91 17 0e 	lds	r24, 0x0E17
    e7d0:	8f 5f       	subi	r24, 0xFF	; 255
    e7d2:	80 93 17 0e 	sts	0x0E17, r24
        putPcmPart( 0x80 ) ;
    e7d6:	80 e8       	ldi	r24, 0x80	; 128
    e7d8:	03 c0       	rjmp	.+6      	; 0xe7e0 <_Z9putPcmBith+0x18>
    }
    else
    {
        PcmControl.PcmOnesCount = 0 ;
    e7da:	10 92 17 0e 	sts	0x0E17, r1
        putPcmPart( 0xC0 ) ;
    e7de:	80 ec       	ldi	r24, 0xC0	; 192
    e7e0:	0e 94 c7 73 	call	0xe78e	; 0xe78e <_Z10putPcmParth>
    }
    if ( PcmControl.PcmOnesCount >= 5 )
    e7e4:	80 91 17 0e 	lds	r24, 0x0E17
    e7e8:	85 30       	cpi	r24, 0x05	; 5
    e7ea:	b8 f7       	brcc	.-18     	; 0xe7da <_Z9putPcmBith+0x12>
    {
        putPcmBit( 0 ) ;				// Stuff a 0 bit in
    }
}
    e7ec:	08 95       	ret

0000e7ee <_Z10putPcmByteh>:

void putPcmByte( uint8_t byte )
    e7ee:	0f 93       	push	r16
    e7f0:	1f 93       	push	r17
    e7f2:	08 2f       	mov	r16, r24

static void crc( uint8_t data )
{
    //	uint8_t i ;

  PcmControl.PcmCrc=(PcmControl.PcmCrc<<8)^pgm_read_word(&CRCTable[((uint8_t)(PcmControl.PcmCrc>>8)^data) & 0xFF]);
    e7f4:	80 91 16 0e 	lds	r24, 0x0E16
    e7f8:	e0 2f       	mov	r30, r16
    e7fa:	f0 e0       	ldi	r31, 0x00	; 0
    e7fc:	90 e0       	ldi	r25, 0x00	; 0
    e7fe:	e8 27       	eor	r30, r24
    e800:	f9 27       	eor	r31, r25
    e802:	ee 0f       	add	r30, r30
    e804:	ff 1f       	adc	r31, r31
    e806:	e7 5b       	subi	r30, 0xB7	; 183
    e808:	f6 4e       	sbci	r31, 0xE6	; 230
    e80a:	25 91       	lpm	r18, Z+
    e80c:	34 91       	lpm	r19, Z+
    e80e:	90 91 15 0e 	lds	r25, 0x0E15
    e812:	80 e0       	ldi	r24, 0x00	; 0
    e814:	28 27       	eor	r18, r24
    e816:	39 27       	eor	r19, r25
    e818:	30 93 16 0e 	sts	0x0E16, r19
    e81c:	20 93 15 0e 	sts	0x0E15, r18
    e820:	10 e0       	ldi	r17, 0x00	; 0

    crc( byte ) ;

    for ( i = 0 ; i < 8 ; i += 1 )
    {
        putPcmBit( byte & 0x80 ) ;
    e822:	80 2f       	mov	r24, r16
    e824:	80 78       	andi	r24, 0x80	; 128
    e826:	0e 94 e4 73 	call	0xe7c8	; 0xe7c8 <_Z9putPcmBith>
        byte <<= 1 ;
    e82a:	00 0f       	add	r16, r16
{
    uint8_t i ;

    crc( byte ) ;

    for ( i = 0 ; i < 8 ; i += 1 )
    e82c:	1f 5f       	subi	r17, 0xFF	; 255
    e82e:	18 30       	cpi	r17, 0x08	; 8
    e830:	c1 f7       	brne	.-16     	; 0xe822 <_Z10putPcmByteh+0x34>
    {
        putPcmBit( byte & 0x80 ) ;
        byte <<= 1 ;
    }
}
    e832:	1f 91       	pop	r17
    e834:	0f 91       	pop	r16
    e836:	08 95       	ret

0000e838 <_Z10putPcmHeadv>:

void putPcmHead()
    e838:	1f 93       	push	r17
{
	uint8_t i ;
    // send 7E, do not CRC
    // 01111110
    putPcmPart( 0xC0 ) ;
    e83a:	80 ec       	ldi	r24, 0xC0	; 192
    e83c:	0e 94 c7 73 	call	0xe78e	; 0xe78e <_Z10putPcmParth>
    e840:	10 e0       	ldi	r17, 0x00	; 0
		for ( i = 0 ; i < 6 ; i += 1 )
		{
    	putPcmPart( 0x80 ) ;
    e842:	80 e8       	ldi	r24, 0x80	; 128
    e844:	0e 94 c7 73 	call	0xe78e	; 0xe78e <_Z10putPcmParth>
{
	uint8_t i ;
    // send 7E, do not CRC
    // 01111110
    putPcmPart( 0xC0 ) ;
		for ( i = 0 ; i < 6 ; i += 1 )
    e848:	1f 5f       	subi	r17, 0xFF	; 255
    e84a:	16 30       	cpi	r17, 0x06	; 6
    e84c:	d1 f7       	brne	.-12     	; 0xe842 <_Z10putPcmHeadv+0xa>
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
    putPcmPart( 0xC0 ) ;
    e84e:	80 ec       	ldi	r24, 0xC0	; 192
    e850:	0e 94 c7 73 	call	0xe78e	; 0xe78e <_Z10putPcmParth>
}
    e854:	1f 91       	pop	r17
    e856:	08 95       	ret

0000e858 <_Z11scaleForPXXh>:

uint16_t scaleForPXX( uint8_t i )
{
	int16_t value ;
	
	value = ( ( i < 16 ) ? g_chans512[i] *3 / 4 : 0 ) + 1024 ;
    e858:	80 31       	cpi	r24, 0x10	; 16
    e85a:	18 f0       	brcs	.+6      	; 0xe862 <_Z11scaleForPXXh+0xa>
    e85c:	60 e0       	ldi	r22, 0x00	; 0
    e85e:	74 e0       	ldi	r23, 0x04	; 4
    e860:	1f c0       	rjmp	.+62     	; 0xe8a0 <_Z11scaleForPXXh+0x48>
    e862:	e8 2f       	mov	r30, r24
    e864:	f0 e0       	ldi	r31, 0x00	; 0
    e866:	ee 0f       	add	r30, r30
    e868:	ff 1f       	adc	r31, r31
    e86a:	e4 51       	subi	r30, 0x14	; 20
    e86c:	f9 4f       	sbci	r31, 0xF9	; 249
    e86e:	20 81       	ld	r18, Z
    e870:	31 81       	ldd	r19, Z+1	; 0x01
    e872:	c9 01       	movw	r24, r18
    e874:	88 0f       	add	r24, r24
    e876:	99 1f       	adc	r25, r25
    e878:	82 0f       	add	r24, r18
    e87a:	93 1f       	adc	r25, r19
    e87c:	64 e0       	ldi	r22, 0x04	; 4
    e87e:	70 e0       	ldi	r23, 0x00	; 0
    e880:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    e884:	60 50       	subi	r22, 0x00	; 0
    e886:	7c 4f       	sbci	r23, 0xFC	; 252
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    e888:	16 16       	cp	r1, r22
    e88a:	17 06       	cpc	r1, r23
    e88c:	1c f0       	brlt	.+6      	; 0xe894 <_Z11scaleForPXXh+0x3c>
    e88e:	61 e0       	ldi	r22, 0x01	; 1
    e890:	70 e0       	ldi	r23, 0x00	; 0
    e892:	06 c0       	rjmp	.+12     	; 0xe8a0 <_Z11scaleForPXXh+0x48>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    e894:	87 e0       	ldi	r24, 0x07	; 7
    e896:	6e 3f       	cpi	r22, 0xFE	; 254
    e898:	78 07       	cpc	r23, r24
    e89a:	14 f0       	brlt	.+4      	; 0xe8a0 <_Z11scaleForPXXh+0x48>
    e89c:	6e ef       	ldi	r22, 0xFE	; 254
    e89e:	77 e0       	ldi	r23, 0x07	; 7
	return limit( 1, value, 2046 ) ;
}
    e8a0:	cb 01       	movw	r24, r22
    e8a2:	08 95       	ret

0000e8a4 <_Z15setupPulsesDsm2h>:
	  pulses2MHzptr = ptr ;
}


static uint8_t *Dsm2_pulsePtr = pulses2MHz.pbyte ;
void setupPulsesDsm2(uint8_t chns)
    e8a4:	0f 93       	push	r16
    e8a6:	1f 93       	push	r17
    e8a8:	cf 93       	push	r28
    e8aa:	df 93       	push	r29
    e8ac:	08 2f       	mov	r16, r24
    static uint8_t dsmDat[2+6*2]={0xFF,0x00,  0x00,0xAA,  0x05,0xFF,  0x09,0xFF,  0x0D,0xFF,  0x13,0x54,  0x14,0xAA};
    uint8_t counter ;
    uint8_t dsmdat0copy ;
    //	CSwData &cs = g_model.customSw[NUM_CSW-1];

    pulses2MHzptr = pulses2MHz.pbyte ;
    e8ae:	8b e7       	ldi	r24, 0x7B	; 123
    e8b0:	9d e0       	ldi	r25, 0x0D	; 13
    e8b2:	90 93 0b 01 	sts	0x010B, r25
    e8b6:	80 93 0a 01 	sts	0x010A, r24
    
    // If more channels needed make sure the pulses union/array is large enough

		dsmdat0copy = dsmDat[0] ;		// Fetch byte once, saves flash
    e8ba:	10 91 10 01 	lds	r17, 0x0110
    if (dsmdat0copy&BadData)  //first time through, setup header
    e8be:	81 2f       	mov	r24, r17
    e8c0:	87 74       	andi	r24, 0x47	; 71
    e8c2:	61 f0       	breq	.+24     	; 0xe8dc <_Z15setupPulsesDsm2h+0x38>
    {
			if ( g_model.sub_protocol == LPXDSM2 )
    e8c4:	80 91 b9 01 	lds	r24, 0x01B9
    e8c8:	80 7c       	andi	r24, 0xC0	; 192
    e8ca:	11 f4       	brne	.+4      	; 0xe8d0 <_Z15setupPulsesDsm2h+0x2c>
    e8cc:	10 e8       	ldi	r17, 0x80	; 128
    e8ce:	08 c0       	rjmp	.+16     	; 0xe8e0 <_Z15setupPulsesDsm2h+0x3c>
			{
        dsmdat0copy= 0x80;
			}
			else if ( g_model.sub_protocol == DSM2only )
    e8d0:	80 34       	cpi	r24, 0x40	; 64
    e8d2:	11 f0       	breq	.+4      	; 0xe8d8 <_Z15setupPulsesDsm2h+0x34>
    e8d4:	18 e9       	ldi	r17, 0x98	; 152
    e8d6:	04 c0       	rjmp	.+8      	; 0xe8e0 <_Z15setupPulsesDsm2h+0x3c>
    e8d8:	10 e9       	ldi	r17, 0x90	; 144
    e8da:	02 c0       	rjmp	.+4      	; 0xe8e0 <_Z15setupPulsesDsm2h+0x3c>
			else
			{
        dsmdat0copy=0x98;  //dsmx, bind mode
			}
    }
    if((dsmdat0copy&BindBit)&&(!keyState(SW_Trainer)))  dsmdat0copy&=~BindBit;		//clear bind bit if trainer not pulled
    e8dc:	17 ff       	sbrs	r17, 7
    e8de:	07 c0       	rjmp	.+14     	; 0xe8ee <_Z15setupPulsesDsm2h+0x4a>
    e8e0:	87 e1       	ldi	r24, 0x17	; 23
    e8e2:	90 e0       	ldi	r25, 0x00	; 0
    e8e4:	0e 94 b9 6e 	call	0xdd72	; 0xdd72 <_Z8keyState8EnumKeys>
    e8e8:	88 23       	and	r24, r24
    e8ea:	09 f4       	brne	.+2      	; 0xe8ee <_Z15setupPulsesDsm2h+0x4a>
    e8ec:	1f 77       	andi	r17, 0x7F	; 127
    if ((!(dsmdat0copy&BindBit))&&getSwitch(MAX_DRSWITCH-1,0,0)) dsmdat0copy|=RangeCheckBit;   //range check function
    e8ee:	17 fd       	sbrc	r17, 7
    e8f0:	77 c0       	rjmp	.+238    	; 0xe9e0 <_Z15setupPulsesDsm2h+0x13c>
    e8f2:	85 e1       	ldi	r24, 0x15	; 21
    e8f4:	60 e0       	ldi	r22, 0x00	; 0
    e8f6:	40 e0       	ldi	r20, 0x00	; 0
    e8f8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z9getSwitchabh>
    e8fc:	88 23       	and	r24, r24
    e8fe:	09 f4       	brne	.+2      	; 0xe902 <_Z15setupPulsesDsm2h+0x5e>
    e900:	6f c0       	rjmp	.+222    	; 0xe9e0 <_Z15setupPulsesDsm2h+0x13c>
    e902:	81 2f       	mov	r24, r17
    e904:	80 62       	ori	r24, 0x20	; 32
    else dsmdat0copy&=~RangeCheckBit;

		dsmDat[0] = dsmdat0copy ;		// Put byte back
    e906:	80 93 10 01 	sts	0x0110, r24

//    dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
    dsmDat[1] = g_model.ppmNCH ;  //DSM2 Header second byte for model match
    e90a:	80 91 ba 01 	lds	r24, 0x01BA
    e90e:	80 93 11 01 	sts	0x0111, r24
    e912:	e2 e1       	ldi	r30, 0x12	; 18
    e914:	f1 e0       	ldi	r31, 0x01	; 1
    e916:	ac ee       	ldi	r26, 0xEC	; 236
    e918:	b6 e0       	ldi	r27, 0x06	; 6
    e91a:	40 e0       	ldi	r20, 0x00	; 0
//    uint8_t *p = &dsmDat[2] ;
//		FORCE_INDIRECT(p) ;
		for(uint8_t i=0; i<chns; i++)
    {
		    uint16_t pulse = limit(0, ((g_chans512[i]*13)>>5)+512,1023);
    e91c:	6d e0       	ldi	r22, 0x0D	; 13
    e91e:	70 e0       	ldi	r23, 0x00	; 0
    e920:	27 c0       	rjmp	.+78     	; 0xe970 <_Z15setupPulsesDsm2h+0xcc>
    e922:	8d 91       	ld	r24, X+
    e924:	9c 91       	ld	r25, X
    e926:	11 97       	sbiw	r26, 0x01	; 1
    e928:	86 9f       	mul	r24, r22
    e92a:	90 01       	movw	r18, r0
    e92c:	87 9f       	mul	r24, r23
    e92e:	30 0d       	add	r19, r0
    e930:	96 9f       	mul	r25, r22
    e932:	30 0d       	add	r19, r0
    e934:	11 24       	eor	r1, r1
    e936:	15 e0       	ldi	r17, 0x05	; 5
    e938:	35 95       	asr	r19
    e93a:	27 95       	ror	r18
    e93c:	1a 95       	dec	r17
    e93e:	e1 f7       	brne	.-8      	; 0xe938 <_Z15setupPulsesDsm2h+0x94>
    e940:	20 50       	subi	r18, 0x00	; 0
    e942:	3e 4f       	sbci	r19, 0xFE	; 254
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    e944:	37 ff       	sbrs	r19, 7
    e946:	03 c0       	rjmp	.+6      	; 0xe94e <_Z15setupPulsesDsm2h+0xaa>
    e948:	20 e0       	ldi	r18, 0x00	; 0
    e94a:	30 e0       	ldi	r19, 0x00	; 0
    e94c:	06 c0       	rjmp	.+12     	; 0xe95a <_Z15setupPulsesDsm2h+0xb6>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    e94e:	83 e0       	ldi	r24, 0x03	; 3
    e950:	2f 3f       	cpi	r18, 0xFF	; 255
    e952:	38 07       	cpc	r19, r24
    e954:	14 f0       	brlt	.+4      	; 0xe95a <_Z15setupPulsesDsm2h+0xb6>
    e956:	2f ef       	ldi	r18, 0xFF	; 255
    e958:	33 e0       	ldi	r19, 0x03	; 3
        dsmDat[2+2*i] = (i<<2) | ((pulse>>8)&0x03);
    e95a:	83 2f       	mov	r24, r19
    e95c:	83 70       	andi	r24, 0x03	; 3
    e95e:	94 2f       	mov	r25, r20
    e960:	99 0f       	add	r25, r25
    e962:	99 0f       	add	r25, r25
    e964:	89 2b       	or	r24, r25
    e966:	80 83       	st	Z, r24
        dsmDat[3+2*i] = pulse & 0xff;
    e968:	21 83       	std	Z+1, r18	; 0x01

//    dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
    dsmDat[1] = g_model.ppmNCH ;  //DSM2 Header second byte for model match
//    uint8_t *p = &dsmDat[2] ;
//		FORCE_INDIRECT(p) ;
		for(uint8_t i=0; i<chns; i++)
    e96a:	4f 5f       	subi	r20, 0xFF	; 255
    e96c:	32 96       	adiw	r30, 0x02	; 2
    e96e:	12 96       	adiw	r26, 0x02	; 2
    e970:	40 17       	cp	r20, r16
    e972:	b8 f2       	brcs	.-82     	; 0xe922 <_Z15setupPulsesDsm2h+0x7e>
    e974:	a0 e1       	ldi	r26, 0x10	; 16
    e976:	b1 e0       	ldi	r27, 0x01	; 1
//        *p++ = pulse & 0xff;
    }

    for ( counter = 0 ; counter < 14 ; counter += 1 )
    {
    	sendByteDsm2(dsmDat[counter]);
    e978:	8c 91       	ld	r24, X
{
    bool    lev = 0;
    uint8_t len = BITLEN_DSM2; //max val: 9*16 < 256
		uint8_t *ptr ;

		ptr = pulses2MHzptr ;
    e97a:	c0 91 0a 01 	lds	r28, 0x010A
    e97e:	d0 91 0b 01 	lds	r29, 0x010B
    e982:	40 e0       	ldi	r20, 0x00	; 0
    e984:	20 e1       	ldi	r18, 0x10	; 16
    e986:	30 e0       	ldi	r19, 0x00	; 0
    for( uint8_t i=0; i<=8; i++){ //8Bits + Stop=1
        bool nlev = b & 1; //lsb first
    e988:	90 e0       	ldi	r25, 0x00	; 0
    e98a:	58 2f       	mov	r21, r24
    e98c:	51 70       	andi	r21, 0x01	; 1
        if(lev == nlev){
    e98e:	45 17       	cp	r20, r21
    e990:	11 f4       	brne	.+4      	; 0xe996 <_Z15setupPulsesDsm2h+0xf2>
            len += BITLEN_DSM2;
    e992:	20 5f       	subi	r18, 0xF0	; 240
    e994:	03 c0       	rjmp	.+6      	; 0xe99c <_Z15setupPulsesDsm2h+0xf8>
        }else{
						*ptr++ = len -1 ;
    e996:	21 50       	subi	r18, 0x01	; 1
    e998:	29 93       	st	Y+, r18
    e99a:	20 e1       	ldi	r18, 0x10	; 16
    bool    lev = 0;
    uint8_t len = BITLEN_DSM2; //max val: 9*16 < 256
		uint8_t *ptr ;

		ptr = pulses2MHzptr ;
    for( uint8_t i=0; i<=8; i++){ //8Bits + Stop=1
    e99c:	3f 5f       	subi	r19, 0xFF	; 255
    e99e:	39 30       	cpi	r19, 0x09	; 9
    e9a0:	29 f0       	breq	.+10     	; 0xe9ac <_Z15setupPulsesDsm2h+0x108>
        }else{
						*ptr++ = len -1 ;
            len  = BITLEN_DSM2;
            lev  = nlev;
        }
        b = (b>>1) | 0x80; //shift in stop bit
    e9a2:	95 95       	asr	r25
    e9a4:	87 95       	ror	r24
    e9a6:	80 68       	ori	r24, 0x80	; 128
    e9a8:	45 2f       	mov	r20, r21
    e9aa:	ee cf       	rjmp	.-36     	; 0xe988 <_Z15setupPulsesDsm2h+0xe4>
    }
    *ptr++ = len+BITLEN_DSM2-1 ; // 2 stop bits
    e9ac:	21 5f       	subi	r18, 0xF1	; 241
    e9ae:	fe 01       	movw	r30, r28
    e9b0:	21 93       	st	Z+, r18
	  pulses2MHzptr = ptr ;
    e9b2:	f0 93 0b 01 	sts	0x010B, r31
    e9b6:	e0 93 0a 01 	sts	0x010A, r30
    e9ba:	11 96       	adiw	r26, 0x01	; 1
        dsmDat[3+2*i] = pulse & 0xff;
//        *p++ = (i<<2) | ((pulse>>8)&0x03);
//        *p++ = pulse & 0xff;
    }

    for ( counter = 0 ; counter < 14 ; counter += 1 )
    e9bc:	81 e0       	ldi	r24, 0x01	; 1
    e9be:	ae 31       	cpi	r26, 0x1E	; 30
    e9c0:	b8 07       	cpc	r27, r24
    e9c2:	d1 f6       	brne	.-76     	; 0xe978 <_Z15setupPulsesDsm2h+0xd4>

		ptr = pulses2MHzptr ;

//    pulses2MHzptr-=1 ; //remove last stopbits and
//    _send_1( 255 ) ;	 //prolong them
		*ptr = 0 ;
    e9c4:	10 82       	st	Z, r1
		*(ptr-1) = 255 ;
    e9c6:	8f ef       	ldi	r24, 0xFF	; 255
    e9c8:	88 83       	st	Y, r24
//    _send_1(0);        //end of pulse stream
    Dsm2_pulsePtr = pulses2MHz.pbyte ;
    e9ca:	8b e7       	ldi	r24, 0x7B	; 123
    e9cc:	9d e0       	ldi	r25, 0x0D	; 13
    e9ce:	90 93 0f 01 	sts	0x010F, r25
    e9d2:	80 93 0e 01 	sts	0x010E, r24
}
    e9d6:	df 91       	pop	r29
    e9d8:	cf 91       	pop	r28
    e9da:	1f 91       	pop	r17
    e9dc:	0f 91       	pop	r16
    e9de:	08 95       	ret
        dsmdat0copy=0x98;  //dsmx, bind mode
			}
    }
    if((dsmdat0copy&BindBit)&&(!keyState(SW_Trainer)))  dsmdat0copy&=~BindBit;		//clear bind bit if trainer not pulled
    if ((!(dsmdat0copy&BindBit))&&getSwitch(MAX_DRSWITCH-1,0,0)) dsmdat0copy|=RangeCheckBit;   //range check function
    else dsmdat0copy&=~RangeCheckBit;
    e9e0:	81 2f       	mov	r24, r17
    e9e2:	8f 7d       	andi	r24, 0xDF	; 223
    e9e4:	90 cf       	rjmp	.-224    	; 0xe906 <_Z15setupPulsesDsm2h+0x62>

0000e9e6 <_Z11setupPulsesv>:
#endif
  TCCR1A = (0<<WGM10) ;
  TCCR1B = (1 << WGM12) | (2<<CS10) ; // CTC OCRA, 16MHz / 8
}

void setupPulses()
    e9e6:	bf 92       	push	r11
    e9e8:	cf 92       	push	r12
    e9ea:	df 92       	push	r13
    e9ec:	ef 92       	push	r14
    e9ee:	ff 92       	push	r15
    e9f0:	0f 93       	push	r16
    e9f2:	1f 93       	push	r17
    e9f4:	cf 93       	push	r28
    e9f6:	df 93       	push	r29
{
	uint8_t required_protocol ;
  required_protocol = g_model.protocol ;
    e9f8:	10 91 b9 01 	lds	r17, 0x01B9
    e9fc:	1f 70       	andi	r17, 0x0F	; 15
	// Sort required_protocol depending on student mode and PPMSIM allowed

	if ( g_eeGeneral.enablePpmsim )
    e9fe:	80 91 84 01 	lds	r24, 0x0184
    ea02:	85 ff       	sbrs	r24, 5
    ea04:	04 c0       	rjmp	.+8      	; 0xea0e <_Z11setupPulsesv+0x28>
	{
		if ( SlaveMode )
    ea06:	80 91 6e 05 	lds	r24, 0x056E
    ea0a:	81 11       	cpse	r24, r1
    ea0c:	15 e0       	ldi	r17, 0x05	; 5
		{
			required_protocol = PROTO_PPMSIM ;			
		}		
	}
	if ( PausePulses )
    ea0e:	80 91 0e 0e 	lds	r24, 0x0E0E
    ea12:	81 11       	cpse	r24, r1
    ea14:	1f ef       	ldi	r17, 0xFF	; 255
	{
		required_protocol = PROTO_NONE ;
	}

    //	SPY_ON;
    if ( Current_protocol != required_protocol )
    ea16:	80 91 0c 0e 	lds	r24, 0x0E0C
    ea1a:	81 17       	cp	r24, r17
    ea1c:	09 f4       	brne	.+2      	; 0xea20 <_Z11setupPulsesv+0x3a>
    ea1e:	86 c0       	rjmp	.+268    	; 0xeb2c <_Z11setupPulsesv+0x146>
    {
        Current_protocol = required_protocol ;
    ea20:	10 93 0c 0e 	sts	0x0E0C, r17
        // switch mode here
        TCCR1B = 0 ;			// Stop counter
    ea24:	1e bc       	out	0x2e, r1	; 46
        TCNT1 = 0 ;
    ea26:	1d bc       	out	0x2d, r1	; 45
    ea28:	1c bc       	out	0x2c, r1	; 44
        TIMSK1 &= ~( (1<<OCIE1A) | (1<<OCIE1B) | (1<<OCIE1C) | (1<<ICIE1) | (1<<TOIE1) ) ;	// All interrupts off
//        TIMSK1 &= ~(1<<OCIE1C) ;		// COMPC1 off
        TIFR1 = ( (1<<OCF1A) | (1<<OCF1B) | (1<<OCF1C) | (1<<ICF1) | (1<<TOV1) ) ;			// Clear all pending interrupts
        TIFR3 = ( (1<<OCF3A) | (1<<OCF3B) | (1<<OCF3C) | (1<<ICF3) | (1<<TOV3) ) ;			// Clear all pending interrupts
#else
        TIMSK &= ~0x3C ;	// All interrupts off
    ea2a:	87 b7       	in	r24, 0x37	; 55
    ea2c:	83 7c       	andi	r24, 0xC3	; 195
    ea2e:	87 bf       	out	0x37, r24	; 55
        ETIMSK &= ~(1<<OCIE1C) ;		// COMPC1 off
    ea30:	80 91 7d 00 	lds	r24, 0x007D
    ea34:	8e 7f       	andi	r24, 0xFE	; 254
    ea36:	80 93 7d 00 	sts	0x007D, r24
        TIFR = 0x3C ;			// Clear all pending interrupts
    ea3a:	8c e3       	ldi	r24, 0x3C	; 60
    ea3c:	86 bf       	out	0x36, r24	; 54
        ETIFR = 0x3F ;			// Clear all pending interrupts
    ea3e:	8f e3       	ldi	r24, 0x3F	; 63
    ea40:	80 93 7c 00 	sts	0x007C, r24
#endif

        switch(required_protocol)
    ea44:	12 30       	cpi	r17, 0x02	; 2
    ea46:	a1 f1       	breq	.+104    	; 0xeab0 <_Z11setupPulsesv+0xca>
    ea48:	13 30       	cpi	r17, 0x03	; 3
    ea4a:	30 f4       	brcc	.+12     	; 0xea58 <_Z11setupPulsesv+0x72>
    ea4c:	11 23       	and	r17, r17
    ea4e:	59 f0       	breq	.+22     	; 0xea66 <_Z11setupPulsesv+0x80>
    ea50:	11 30       	cpi	r17, 0x01	; 1
    ea52:	09 f0       	breq	.+2      	; 0xea56 <_Z11setupPulsesv+0x70>
    ea54:	6b c0       	rjmp	.+214    	; 0xeb2c <_Z11setupPulsesv+0x146>
    ea56:	14 c0       	rjmp	.+40     	; 0xea80 <_Z11setupPulsesv+0x9a>
    ea58:	13 30       	cpi	r17, 0x03	; 3
    ea5a:	09 f4       	brne	.+2      	; 0xea5e <_Z11setupPulsesv+0x78>
    ea5c:	45 c0       	rjmp	.+138    	; 0xeae8 <_Z11setupPulsesv+0x102>
    ea5e:	15 30       	cpi	r17, 0x05	; 5
    ea60:	09 f0       	breq	.+2      	; 0xea64 <_Z11setupPulsesv+0x7e>
    ea62:	64 c0       	rjmp	.+200    	; 0xeb2c <_Z11setupPulsesv+0x146>
    ea64:	41 c0       	rjmp	.+130    	; 0xeae8 <_Z11setupPulsesv+0x102>
        {
        case PROTO_PPM:
            set_timer3_capture() ;
    ea66:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <_Z18set_timer3_capturev>
	setupPulses() ;
}

void setPpmTimers()
{
  OCR1A = 40000 ;		// Next frame starts in 20 mS
    ea6a:	80 e4       	ldi	r24, 0x40	; 64
    ea6c:	9c e9       	ldi	r25, 0x9C	; 156
    ea6e:	9b bd       	out	0x2b, r25	; 43
    ea70:	8a bd       	out	0x2a, r24	; 42
#ifdef CPUM2561
  TIMSK1 |= (1<<OCIE1A) ;		// Enable COMPA
#else
  TIMSK |= (1<<OCIE1A) ;		// Enable COMPA
    ea72:	87 b7       	in	r24, 0x37	; 55
    ea74:	80 61       	ori	r24, 0x10	; 16
    ea76:	87 bf       	out	0x37, r24	; 55
#endif
  TCCR1A = (0<<WGM10) ;
    ea78:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = (1 << WGM12) | (2<<CS10) ; // CTC OCRA, 16MHz / 8
    ea7a:	8a e0       	ldi	r24, 0x0A	; 10
    ea7c:	8e bd       	out	0x2e, r24	; 46
    ea7e:	22 c1       	rjmp	.+580    	; 0xecc4 <_Z11setupPulsesv+0x2de>
        case PROTO_PPM:
            set_timer3_capture() ;
						setPpmTimers() ;
            break;
        case PROTO_PXX:
            set_timer3_capture() ;
    ea80:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <_Z18set_timer3_capturev>
            OCR1B = 7000 ;		// Next frame starts in 3.5 mS
    ea84:	88 e5       	ldi	r24, 0x58	; 88
    ea86:	9b e1       	ldi	r25, 0x1B	; 27
    ea88:	99 bd       	out	0x29, r25	; 41
    ea8a:	88 bd       	out	0x28, r24	; 40
            OCR1C = 4000 ;		// Next frame setup in 2 mS
    ea8c:	80 ea       	ldi	r24, 0xA0	; 160
    ea8e:	9f e0       	ldi	r25, 0x0F	; 15
    ea90:	90 93 79 00 	sts	0x0079, r25
    ea94:	80 93 78 00 	sts	0x0078, r24
#ifdef CPUM2561
            TIMSK1 |= (1<<OCIE1B) | (1<<OCIE1C);	// Enable COMPB and COMPC
#else
            TIMSK |= (1<<OCIE1B) ;	// Enable COMPB
    ea98:	87 b7       	in	r24, 0x37	; 55
    ea9a:	88 60       	ori	r24, 0x08	; 8
    ea9c:	87 bf       	out	0x37, r24	; 55
            ETIMSK |= (1<<OCIE1C);	// Enable COMPC
    ea9e:	80 91 7d 00 	lds	r24, 0x007D
    eaa2:	81 60       	ori	r24, 0x01	; 1
    eaa4:	80 93 7d 00 	sts	0x007D, r24
#endif
            TCCR1A  = 0;
    eaa8:	1f bc       	out	0x2f, r1	; 47
            TCCR1B  = (2<<CS10);      //ICNC3 16MHz / 8
    eaaa:	82 e0       	ldi	r24, 0x02	; 2
    eaac:	8e bd       	out	0x2e, r24	; 46
    eaae:	4a c0       	rjmp	.+148    	; 0xeb44 <_Z11setupPulsesv+0x15e>
            break;
        case PROTO_DSM2:
            set_timer3_capture() ;
    eab0:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <_Z18set_timer3_capturev>
            OCR1C = 200 ;			// 100 uS
    eab4:	88 ec       	ldi	r24, 0xC8	; 200
    eab6:	90 e0       	ldi	r25, 0x00	; 0
    eab8:	90 93 79 00 	sts	0x0079, r25
    eabc:	80 93 78 00 	sts	0x0078, r24
            TCNT1 = 300 ;			// Past the OCR1C value
    eac0:	8c e2       	ldi	r24, 0x2C	; 44
    eac2:	91 e0       	ldi	r25, 0x01	; 1
    eac4:	9d bd       	out	0x2d, r25	; 45
    eac6:	8c bd       	out	0x2c, r24	; 44
            ICR1 = 44000 ;		// Next frame starts in 22 mS
    eac8:	80 ee       	ldi	r24, 0xE0	; 224
    eaca:	9b ea       	ldi	r25, 0xAB	; 171
    eacc:	97 bd       	out	0x27, r25	; 39
    eace:	86 bd       	out	0x26, r24	; 38
#ifdef CPUM2561
            TIMSK1 |= (1<<ICIE1) ;		// Enable CAPT
#else
            TIMSK |= (1<<TICIE1) ;		// Enable CAPT
    ead0:	87 b7       	in	r24, 0x37	; 55
    ead2:	80 62       	ori	r24, 0x20	; 32
    ead4:	87 bf       	out	0x37, r24	; 55
#endif

#ifdef CPUM2561
            TIMSK1 |= (1<<OCIE1C);	// Enable COMPC
#else
            ETIMSK |= (1<<OCIE1C);	// Enable COMPC
    ead6:	80 91 7d 00 	lds	r24, 0x007D
    eada:	81 60       	ori	r24, 0x01	; 1
    eadc:	80 93 7d 00 	sts	0x007D, r24
#endif
            TCCR1A = (0<<WGM10) ;
    eae0:	1f bc       	out	0x2f, r1	; 47
            TCCR1B = (3 << WGM12) | (2<<CS10) ; // CTC ICR, 16MHz / 8
    eae2:	8a e1       	ldi	r24, 0x1A	; 26
    eae4:	8e bd       	out	0x2e, r24	; 46
    eae6:	e9 c0       	rjmp	.+466    	; 0xecba <_Z11setupPulsesv+0x2d4>
            break;
        case PROTO_PPM16 :
				case PROTO_PPMSIM :
					if ( required_protocol == PROTO_PPMSIM )
    eae8:	15 30       	cpi	r17, 0x05	; 5
    eaea:	29 f4       	brne	.+10     	; 0xeaf6 <_Z11setupPulsesv+0x110>
					{
            setupPulsesPPM(PROTO_PPMSIM);
    eaec:	85 e0       	ldi	r24, 0x05	; 5
    eaee:	0e 94 57 72 	call	0xe4ae	; 0xe4ae <_Z14setupPulsesPPMh>
		        PORTB &= ~(1<<OUT_B_PPM);			// Hold PPM output low
    eaf2:	c0 98       	cbi	0x18, 0	; 24
    eaf4:	0d c0       	rjmp	.+26     	; 0xeb10 <_Z11setupPulsesv+0x12a>
	setupPulses() ;
}

void setPpmTimers()
{
  OCR1A = 40000 ;		// Next frame starts in 20 mS
    eaf6:	80 e4       	ldi	r24, 0x40	; 64
    eaf8:	9c e9       	ldi	r25, 0x9C	; 156
    eafa:	9b bd       	out	0x2b, r25	; 43
    eafc:	8a bd       	out	0x2a, r24	; 42
#ifdef CPUM2561
  TIMSK1 |= (1<<OCIE1A) ;		// Enable COMPA
#else
  TIMSK |= (1<<OCIE1A) ;		// Enable COMPA
    eafe:	87 b7       	in	r24, 0x37	; 55
    eb00:	80 61       	ori	r24, 0x10	; 16
    eb02:	87 bf       	out	0x37, r24	; 55
#endif
  TCCR1A = (0<<WGM10) ;
    eb04:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = (1 << WGM12) | (2<<CS10) ; // CTC OCRA, 16MHz / 8
    eb06:	8a e0       	ldi	r24, 0x0A	; 10
    eb08:	8e bd       	out	0x2e, r24	; 46
		        PORTB &= ~(1<<OUT_B_PPM);			// Hold PPM output low
					}
					else
					{
						setPpmTimers() ;
            setupPulsesPPM(PROTO_PPM16);
    eb0a:	83 e0       	ldi	r24, 0x03	; 3
    eb0c:	0e 94 57 72 	call	0xe4ae	; 0xe4ae <_Z14setupPulsesPPMh>
					}
					OCR3A = 50000 ;
    eb10:	80 e5       	ldi	r24, 0x50	; 80
    eb12:	93 ec       	ldi	r25, 0xC3	; 195
    eb14:	90 93 87 00 	sts	0x0087, r25
    eb18:	80 93 86 00 	sts	0x0086, r24
          OCR3B = 5000 ;
    eb1c:	88 e8       	ldi	r24, 0x88	; 136
    eb1e:	93 e1       	ldi	r25, 0x13	; 19
    eb20:	90 93 85 00 	sts	0x0085, r25
    eb24:	80 93 84 00 	sts	0x0084, r24
          set_timer3_ppm() ;
    eb28:	0e 94 6c 73 	call	0xe6d8	; 0xe6d8 <_Z14set_timer3_ppmv>
//            OCR3B = 5000 ;
//            set_timer3_ppm() ;
//            break ;
				}
    }
    switch(required_protocol)
    eb2c:	11 30       	cpi	r17, 0x01	; 1
    eb2e:	51 f0       	breq	.+20     	; 0xeb44 <_Z11setupPulsesv+0x15e>
    eb30:	11 30       	cpi	r17, 0x01	; 1
    eb32:	08 f4       	brcc	.+2      	; 0xeb36 <_Z11setupPulsesv+0x150>
    eb34:	c7 c0       	rjmp	.+398    	; 0xecc4 <_Z11setupPulsesv+0x2de>
    eb36:	12 30       	cpi	r17, 0x02	; 2
    eb38:	09 f4       	brne	.+2      	; 0xeb3c <_Z11setupPulsesv+0x156>
    eb3a:	bf c0       	rjmp	.+382    	; 0xecba <_Z11setupPulsesv+0x2d4>
    eb3c:	13 30       	cpi	r17, 0x03	; 3
    eb3e:	09 f0       	breq	.+2      	; 0xeb42 <_Z11setupPulsesv+0x15c>
    eb40:	c4 c0       	rjmp	.+392    	; 0xecca <_Z11setupPulsesv+0x2e4>
    eb42:	c0 c0       	rjmp	.+384    	; 0xecc4 <_Z11setupPulsesv+0x2de>
    {
    case PROTO_PPM:
        setupPulsesPPM( PROTO_PPM );		// Don't enable interrupts through here
        break;
    case PROTO_PXX:
        sei() ;							// Interrupts allowed here
    eb44:	78 94       	sei
static void setupPulsesPXX()
{
    uint8_t i ;
    uint16_t chan ;
    uint16_t chan_1 ;
		uint8_t lpass = pass ;
    eb46:	b0 90 19 0e 	lds	r11, 0x0E19

#ifdef CPUM2561
    TIMSK1 &= ~( (1<<OCIE1B) | (1<<OCIE1C) ) ;	// COMPC & B interrupts off
#else
    TIMSK &= ~(1<<OCIE1B) ;	// COMPB interrupt off
    eb4a:	87 b7       	in	r24, 0x37	; 55
    eb4c:	87 7f       	andi	r24, 0xF7	; 247
    eb4e:	87 bf       	out	0x37, r24	; 55
    ETIMSK &= ~(1<<OCIE1C) ;	// COMPC interrupt off
    eb50:	80 91 7d 00 	lds	r24, 0x007D
    eb54:	8e 7f       	andi	r24, 0xFE	; 254
    eb56:	80 93 7d 00 	sts	0x007D, r24
//		PxxStart = TCNT1 ;
		{
			struct t_pcm_control *ptrControl ;

			ptrControl = &PcmControl ;
			FORCE_INDIRECT(ptrControl) ;
    eb5a:	e1 e1       	ldi	r30, 0x11	; 17
    eb5c:	fe e0       	ldi	r31, 0x0E	; 14
    
			pulses2MHzptr = pulses2MHz.pbyte ;
    eb5e:	8b e7       	ldi	r24, 0x7B	; 123
    eb60:	9d e0       	ldi	r25, 0x0D	; 13
    eb62:	90 93 0b 01 	sts	0x010B, r25
    eb66:	80 93 0a 01 	sts	0x010A, r24
    	ptrControl->PcmPtr = pulses2MHz.pbyte + 1 ;		// past preamble
    eb6a:	01 96       	adiw	r24, 0x01	; 1
    eb6c:	93 83       	std	Z+3, r25	; 0x03
    eb6e:	82 83       	std	Z+2, r24	; 0x02
    	ptrControl->PcmCrc = 0 ;
    eb70:	15 82       	std	Z+5, r1	; 0x05
    eb72:	14 82       	std	Z+4, r1	; 0x04
    	ptrControl->PcmBitCount = ptrControl->PcmByte = 0 ;
    eb74:	10 82       	st	Z, r1
    eb76:	11 82       	std	Z+1, r1	; 0x01
    	ptrControl->PcmOnesCount = 0 ;
    eb78:	16 82       	std	Z+6, r1	; 0x06
		}

			pulses2MHz.pbyte[0] = 0xFF ;		// Preamble
    eb7a:	8f ef       	ldi	r24, 0xFF	; 255
    eb7c:	80 93 7b 0d 	sts	0x0D7B, r24
//    putPcmPart( 0xC0 ) ;
//    putPcmPart( 0xC0 ) ;
//    putPcmPart( 0xC0 ) ;
//    putPcmPart( 0xC0 ) ;
    putPcmHead(  ) ;  // sync byte
    eb80:	0e 94 1c 74 	call	0xe838	; 0xe838 <_Z10putPcmHeadv>
    putPcmByte( g_model.ppmNCH ) ;     // putPcmByte( g_model.rxnum ) ;  //
    eb84:	80 91 ba 01 	lds	r24, 0x01BA
    eb88:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>

  uint8_t flag1;
  if (pxxFlag & PXX_BIND)
    eb8c:	20 91 0d 0e 	lds	r18, 0x0E0D
    eb90:	20 ff       	sbrs	r18, 0
    eb92:	0a c0       	rjmp	.+20     	; 0xeba8 <_Z11setupPulsesv+0x1c2>
	{
    flag1 = (g_model.sub_protocol<< 6) | (g_model.country << 1) | pxxFlag ;
    eb94:	80 91 b9 01 	lds	r24, 0x01B9
    eb98:	98 2f       	mov	r25, r24
    eb9a:	96 95       	lsr	r25
    eb9c:	96 95       	lsr	r25
    eb9e:	96 95       	lsr	r25
    eba0:	96 70       	andi	r25, 0x06	; 6
    eba2:	80 7c       	andi	r24, 0xC0	; 192
    eba4:	98 2b       	or	r25, r24
    eba6:	03 c0       	rjmp	.+6      	; 0xebae <_Z11setupPulsesv+0x1c8>
  }
  else
	{
    flag1 = (g_model.sub_protocol << 6) | pxxFlag ;
    eba8:	90 91 b9 01 	lds	r25, 0x01B9
    ebac:	90 7c       	andi	r25, 0xC0	; 192
    ebae:	92 2b       	or	r25, r18
	}	
	 putPcmByte( flag1 ) ;     // First byte of flags
    ebb0:	89 2f       	mov	r24, r25
    ebb2:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>

		putPcmByte( 0 ) ;     // Second byte of flags
    ebb6:	80 e0       	ldi	r24, 0x00	; 0
    ebb8:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>
		
		uint8_t startChan = g_model.ppmStart ;
    ebbc:	20 91 bb 01 	lds	r18, 0x01BB
    ebc0:	22 95       	swap	r18
    ebc2:	26 95       	lsr	r18
    ebc4:	27 70       	andi	r18, 0x07	; 7
		if ( lpass & 1 )
    ebc6:	8b 2d       	mov	r24, r11
    ebc8:	90 e0       	ldi	r25, 0x00	; 0
    ebca:	31 e0       	ldi	r19, 0x01	; 1
    ebcc:	c3 2e       	mov	r12, r19
    ebce:	d1 2c       	mov	r13, r1
    ebd0:	c8 22       	and	r12, r24
    ebd2:	d9 22       	and	r13, r25
    ebd4:	b0 fc       	sbrc	r11, 0
		{
			startChan += 8 ;			
    ebd6:	28 5f       	subi	r18, 0xF8	; 248
    ebd8:	f2 2e       	mov	r15, r18
		}
    for ( i = 0 ; i < 4 ; i += 1 )		// First 8 channels only
    ebda:	86 e0       	ldi	r24, 0x06	; 6
    ebdc:	e8 2e       	mov	r14, r24
    ebde:	e2 0e       	add	r14, r18
    {																	// Next 8 channels would have 2048 added
      chan = scaleForPXX( startChan ) ;
    ebe0:	8f 2d       	mov	r24, r15
    ebe2:	0e 94 2c 74 	call	0xe858	; 0xe858 <_Z11scaleForPXXh>
    ebe6:	8c 01       	movw	r16, r24
			if ( lpass & 1 )
    ebe8:	c1 14       	cp	r12, r1
    ebea:	d1 04       	cpc	r13, r1
    ebec:	11 f0       	breq	.+4      	; 0xebf2 <_Z11setupPulsesv+0x20c>
			{
				chan += 2048 ;
    ebee:	00 50       	subi	r16, 0x00	; 0
    ebf0:	18 4f       	sbci	r17, 0xF8	; 248
			}
      putPcmByte( chan ) ; // Low byte of channel
    ebf2:	80 2f       	mov	r24, r16
    ebf4:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>
			startChan += 1 ;
      chan_1 = scaleForPXX( startChan ) ;
    ebf8:	8f 2d       	mov	r24, r15
    ebfa:	8f 5f       	subi	r24, 0xFF	; 255
    ebfc:	0e 94 2c 74 	call	0xe858	; 0xe858 <_Z11scaleForPXXh>
    ec00:	ec 01       	movw	r28, r24
			if ( lpass & 1 )
    ec02:	c1 14       	cp	r12, r1
    ec04:	d1 04       	cpc	r13, r1
    ec06:	11 f0       	breq	.+4      	; 0xec0c <_Z11setupPulsesv+0x226>
			{
				chan_1 += 2048 ;
    ec08:	c0 50       	subi	r28, 0x00	; 0
    ec0a:	d8 4f       	sbci	r29, 0xF8	; 248
			}
			startChan += 1 ;
			putPcmByte( ( ( chan >> 8 ) & 0x0F ) | ( chan_1 << 4) ) ;  // 4 bits each from 2 channels
    ec0c:	9e 01       	movw	r18, r28
    ec0e:	22 95       	swap	r18
    ec10:	20 7f       	andi	r18, 0xF0	; 240
    ec12:	82 2f       	mov	r24, r18
    ec14:	91 2f       	mov	r25, r17
    ec16:	9f 70       	andi	r25, 0x0F	; 15
    ec18:	89 2b       	or	r24, r25
    ec1a:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>
      putPcmByte( chan_1 >> 4 ) ;  // High byte of channel
    ec1e:	04 e0       	ldi	r16, 0x04	; 4
    ec20:	d6 95       	lsr	r29
    ec22:	c7 95       	ror	r28
    ec24:	0a 95       	dec	r16
    ec26:	e1 f7       	brne	.-8      	; 0xec20 <_Z11setupPulsesv+0x23a>
    ec28:	8c 2f       	mov	r24, r28
    ec2a:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>
		uint8_t startChan = g_model.ppmStart ;
		if ( lpass & 1 )
		{
			startChan += 8 ;			
		}
    for ( i = 0 ; i < 4 ; i += 1 )		// First 8 channels only
    ec2e:	fe 14       	cp	r15, r14
    ec30:	19 f0       	breq	.+6      	; 0xec38 <_Z11setupPulsesv+0x252>
    ec32:	32 e0       	ldi	r19, 0x02	; 2
    ec34:	f3 0e       	add	r15, r19
    ec36:	d4 cf       	rjmp	.-88     	; 0xebe0 <_Z11setupPulsesv+0x1fa>
			}
			startChan += 1 ;
			putPcmByte( ( ( chan >> 8 ) & 0x0F ) | ( chan_1 << 4) ) ;  // 4 bits each from 2 channels
      putPcmByte( chan_1 >> 4 ) ;  // High byte of channel
    }
		putPcmByte( 0 ) ;
    ec38:	80 e0       	ldi	r24, 0x00	; 0
    ec3a:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>
    chan = PcmControl.PcmCrc ;		        // get the crc
    ec3e:	10 91 15 0e 	lds	r17, 0x0E15
    putPcmByte( chan >> 8 ) ; // Checksum hi
    ec42:	80 91 16 0e 	lds	r24, 0x0E16
    ec46:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>
    putPcmByte( chan ) ; 			// Checksum lo
    ec4a:	81 2f       	mov	r24, r17
    ec4c:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_Z10putPcmByteh>
    putPcmHead(  ) ;      // sync byte
    ec50:	0e 94 1c 74 	call	0xe838	; 0xe838 <_Z10putPcmHeadv>
    ec54:	03 c0       	rjmp	.+6      	; 0xec5c <_Z11setupPulsesv+0x276>

static void putPcmFlush()
{
  while ( PcmControl.PcmBitCount != 0 )
  {
  	putPcmPart( 0 ) ; // Empty
    ec56:	80 e0       	ldi	r24, 0x00	; 0
    ec58:	0e 94 c7 73 	call	0xe78e	; 0xe78e <_Z10putPcmParth>
}


static void putPcmFlush()
{
  while ( PcmControl.PcmBitCount != 0 )
    ec5c:	80 91 12 0e 	lds	r24, 0x0E12
    ec60:	88 23       	and	r24, r24
    ec62:	c9 f7       	brne	.-14     	; 0xec56 <_Z11setupPulsesv+0x270>
  {
  	putPcmPart( 0 ) ; // Empty
  }
  *PcmControl.PcmPtr = 0 ;				// Mark end
    ec64:	e0 91 13 0e 	lds	r30, 0x0E13
    ec68:	f0 91 14 0e 	lds	r31, 0x0E14
    ec6c:	10 82       	st	Z, r1
    putPcmByte( chan >> 8 ) ; // Checksum hi
    putPcmByte( chan ) ; 			// Checksum lo
    putPcmHead(  ) ;      // sync byte
    putPcmFlush() ;
		volatile uint16_t *ptr = &OCR1C ;
		FORCE_INDIRECT( ptr ) ;
    ec6e:	e8 e7       	ldi	r30, 0x78	; 120
    ec70:	f0 e0       	ldi	r31, 0x00	; 0
		{
			uint16_t ocrc ;
			ocrc = *ptr ;
    ec72:	80 81       	ld	r24, Z
    ec74:	91 81       	ldd	r25, Z+1	; 0x01
    	OCR1B = ocrc + 3000 ;		// 1.5mS on from OCR1C
    ec76:	88 54       	subi	r24, 0x48	; 72
    ec78:	94 4f       	sbci	r25, 0xF4	; 244
    ec7a:	99 bd       	out	0x29, r25	; 41
    ec7c:	88 bd       	out	0x28, r24	; 40
			*ptr = ocrc + 18000 ;		// 18mS on, 9mS needed if 16 channels
    ec7e:	88 56       	subi	r24, 0x68	; 104
    ec80:	95 4c       	sbci	r25, 0xC5	; 197
    ec82:	91 83       	std	Z+1, r25	; 0x01
    ec84:	80 83       	st	Z, r24
		}
//    OCR1B = *ptr + 3000 ;		// 1.5mS on from OCR1C
//    *ptr += 18000 ;		// 18mS on, 9mS needed if 16 channels
    PORTB |= (1<<OUT_B_PPM);		// Idle is line high
    ec86:	c0 9a       	sbi	0x18, 0	; 24
#ifdef CPUM2561
    TIFR1 = (1<<OCF1B) | (1<<OCF1C) ;			// Clear pending interrupts
    TIMSK1 |= (1<<OCIE1B) | (1<<OCIE1C);	// Enable COMPB and COMPC
#else
    TIFR = (1<<OCF1B) ;			// Clear pending interrupt
    ec88:	88 e0       	ldi	r24, 0x08	; 8
    ec8a:	86 bf       	out	0x36, r24	; 54
    ETIFR = (1<<OCF1C) ;			// Clear pending interrupt
    ec8c:	81 e0       	ldi	r24, 0x01	; 1
    ec8e:	80 93 7c 00 	sts	0x007C, r24
    TIMSK |= (1<<OCIE1B) ;	// Enable COMPB
    ec92:	87 b7       	in	r24, 0x37	; 55
    ec94:	88 60       	ori	r24, 0x08	; 8
    ec96:	87 bf       	out	0x37, r24	; 55
    ETIMSK |= (1<<OCIE1C);	// Enable COMPC
    ec98:	80 91 7d 00 	lds	r24, 0x007D
    ec9c:	81 60       	ori	r24, 0x01	; 1
    ec9e:	80 93 7d 00 	sts	0x007D, r24
#endif
		if (g_model.sub_protocol == 1 )		// D8
    eca2:	80 91 b9 01 	lds	r24, 0x01B9
    eca6:	80 7c       	andi	r24, 0xC0	; 192
    eca8:	80 34       	cpi	r24, 0x40	; 64
    ecaa:	11 f4       	brne	.+4      	; 0xecb0 <_Z11setupPulsesv+0x2ca>
    ecac:	80 e0       	ldi	r24, 0x00	; 0
    ecae:	02 c0       	rjmp	.+4      	; 0xecb4 <_Z11setupPulsesv+0x2ce>
		{
			lpass = 0 ;
		}
		else
		{
			lpass += 1 ;
    ecb0:	8b 2d       	mov	r24, r11
    ecb2:	8f 5f       	subi	r24, 0xFF	; 255
		}
		pass = lpass ;
    ecb4:	80 93 19 0e 	sts	0x0E19, r24
//		PxxTime = TCNT1 - PxxStart ;
	asm("") ;
    ecb8:	08 c0       	rjmp	.+16     	; 0xecca <_Z11setupPulsesv+0x2e4>
    case PROTO_PXX:
        sei() ;							// Interrupts allowed here
        setupPulsesPXX();
        break;
    case PROTO_DSM2:
        sei() ;							// Interrupts allowed here
    ecba:	78 94       	sei
        setupPulsesDsm2(6); 
    ecbc:	86 e0       	ldi	r24, 0x06	; 6
    ecbe:	0e 94 52 74 	call	0xe8a4	; 0xe8a4 <_Z15setupPulsesDsm2h>
    ecc2:	03 c0       	rjmp	.+6      	; 0xecca <_Z11setupPulsesv+0x2e4>
        break;
    case PROTO_PPM16 :
        setupPulsesPPM( PROTO_PPM );		// Don't enable interrupts through here
    ecc4:	80 e0       	ldi	r24, 0x00	; 0
    ecc6:	0e 94 57 72 	call	0xe4ae	; 0xe4ae <_Z14setupPulsesPPMh>
    }
    //    SPY_OFF;
//extern void nothing() ;
//	nothing() ;
	asm("") ;
}
    ecca:	df 91       	pop	r29
    eccc:	cf 91       	pop	r28
    ecce:	1f 91       	pop	r17
    ecd0:	0f 91       	pop	r16
    ecd2:	ff 90       	pop	r15
    ecd4:	ef 90       	pop	r14
    ecd6:	df 90       	pop	r13
    ecd8:	cf 90       	pop	r12
    ecda:	bf 90       	pop	r11
    ecdc:	08 95       	ret

0000ecde <__vector_27>:
    }
		pulsePtr = xpulsePtr ;	// write memory back
    heartbeat |= HEART_TIMER2Mhz;
}

ISR(TIMER3_COMPB_vect) //2MHz pulse generation
    ecde:	1f 92       	push	r1
    ece0:	0f 92       	push	r0
    ece2:	0f b6       	in	r0, 0x3f	; 63
    ece4:	0f 92       	push	r0
    ece6:	11 24       	eor	r1, r1
    ece8:	2f 93       	push	r18
    ecea:	3f 93       	push	r19
    ecec:	4f 93       	push	r20
    ecee:	5f 93       	push	r21
    ecf0:	6f 93       	push	r22
    ecf2:	7f 93       	push	r23
    ecf4:	8f 93       	push	r24
    ecf6:	9f 93       	push	r25
    ecf8:	af 93       	push	r26
    ecfa:	bf 93       	push	r27
    ecfc:	ef 93       	push	r30
    ecfe:	ff 93       	push	r31
{
	uint8_t proto = g_model.protocol ;
    ed00:	80 91 b9 01 	lds	r24, 0x01B9
    ed04:	8f 70       	andi	r24, 0x0F	; 15
    sei() ;
    ed06:	78 94       	sei
    if ( Current_protocol != proto )
    ed08:	90 91 0c 0e 	lds	r25, 0x0E0C
    ed0c:	98 17       	cp	r25, r24
    ed0e:	71 f0       	breq	.+28     	; 0xed2c <__vector_27+0x4e>
		{
    	if ( Current_protocol == PROTO_PPMSIM )
    ed10:	95 30       	cpi	r25, 0x05	; 5
    ed12:	61 f4       	brne	.+24     	; 0xed2c <__vector_27+0x4e>
			{
				if ( ( !SlaveMode ) || ( g_eeGeneral.enablePpmsim == 0 ) )
    ed14:	80 91 6e 05 	lds	r24, 0x056E
    ed18:	88 23       	and	r24, r24
    ed1a:	21 f0       	breq	.+8      	; 0xed24 <__vector_27+0x46>
    ed1c:	80 91 84 01 	lds	r24, 0x0184
    ed20:	85 fd       	sbrc	r24, 5
    ed22:	03 c0       	rjmp	.+6      	; 0xed2a <__vector_27+0x4c>
				{
        	setupPulses();
    ed24:	0e 94 f3 74 	call	0xe9e6	; 0xe9e6 <_Z11setupPulsesv>
    ed28:	03 c0       	rjmp	.+6      	; 0xed30 <__vector_27+0x52>
					return ;
    ed2a:	85 e0       	ldi	r24, 0x05	; 5
				{
					proto = PROTO_PPMSIM ;
				}
			}
		}
    setupPulsesPPM(proto) ;
    ed2c:	0e 94 57 72 	call	0xe4ae	; 0xe4ae <_Z14setupPulsesPPMh>
}
    ed30:	ff 91       	pop	r31
    ed32:	ef 91       	pop	r30
    ed34:	bf 91       	pop	r27
    ed36:	af 91       	pop	r26
    ed38:	9f 91       	pop	r25
    ed3a:	8f 91       	pop	r24
    ed3c:	7f 91       	pop	r23
    ed3e:	6f 91       	pop	r22
    ed40:	5f 91       	pop	r21
    ed42:	4f 91       	pop	r20
    ed44:	3f 91       	pop	r19
    ed46:	2f 91       	pop	r18
    ed48:	0f 90       	pop	r0
    ed4a:	0f be       	out	0x3f, r0	; 63
    ed4c:	0f 90       	pop	r0
    ed4e:	1f 90       	pop	r1
    ed50:	18 95       	reti

0000ed52 <__vector_24>:
    }
    heartbeat |= HEART_TIMER2Mhz;
}


ISR(TIMER1_COMPC_vect) // DSM2 or PXX end of frame
    ed52:	1f 92       	push	r1
    ed54:	0f 92       	push	r0
    ed56:	0f b6       	in	r0, 0x3f	; 63
    ed58:	0f 92       	push	r0
    ed5a:	11 24       	eor	r1, r1
    ed5c:	2f 93       	push	r18
    ed5e:	3f 93       	push	r19
    ed60:	4f 93       	push	r20
    ed62:	5f 93       	push	r21
    ed64:	6f 93       	push	r22
    ed66:	7f 93       	push	r23
    ed68:	8f 93       	push	r24
    ed6a:	9f 93       	push	r25
    ed6c:	af 93       	push	r26
    ed6e:	bf 93       	push	r27
    ed70:	ef 93       	push	r30
    ed72:	ff 93       	push	r31
{

    if ( g_model.protocol == PROTO_DSM2 )
    ed74:	80 91 b9 01 	lds	r24, 0x01B9
    ed78:	8f 70       	andi	r24, 0x0F	; 15
    ed7a:	82 30       	cpi	r24, 0x02	; 2
    ed7c:	c1 f4       	brne	.+48     	; 0xedae <__vector_24+0x5c>
    {
      // DSM2
      ICR1 = 41536 ; //next frame starts in 22 msec 41536 = 2*(22000 - 14*11*8)
    ed7e:	80 e4       	ldi	r24, 0x40	; 64
    ed80:	92 ea       	ldi	r25, 0xA2	; 162
    ed82:	97 bd       	out	0x27, r25	; 39
    ed84:	86 bd       	out	0x26, r24	; 38
	  	if (OCR1C<255) OCR1C = 39000;  //delay setup pulses by 19.5 msec to reduce sytem latency
    ed86:	80 91 78 00 	lds	r24, 0x0078
    ed8a:	90 91 79 00 	lds	r25, 0x0079
    ed8e:	8f 3f       	cpi	r24, 0xFF	; 255
    ed90:	91 05       	cpc	r25, r1
    ed92:	38 f4       	brcc	.+14     	; 0xeda2 <__vector_24+0x50>
    ed94:	88 e5       	ldi	r24, 0x58	; 88
    ed96:	98 e9       	ldi	r25, 0x98	; 152
    ed98:	90 93 79 00 	sts	0x0079, r25
    ed9c:	80 93 78 00 	sts	0x0078, r24
    eda0:	08 c0       	rjmp	.+16     	; 0xedb2 <__vector_24+0x60>
  		else
	  	{
        OCR1C=200;
    eda2:	88 ec       	ldi	r24, 0xC8	; 200
    eda4:	90 e0       	ldi	r25, 0x00	; 0
    eda6:	90 93 79 00 	sts	0x0079, r25
    edaa:	80 93 78 00 	sts	0x0078, r24
        setupPulses();
  		}
    }
    else		// must be PXX
    {
      setupPulses() ;
    edae:	0e 94 f3 74 	call	0xe9e6	; 0xe9e6 <_Z11setupPulsesv>
    }
}
    edb2:	ff 91       	pop	r31
    edb4:	ef 91       	pop	r30
    edb6:	bf 91       	pop	r27
    edb8:	af 91       	pop	r26
    edba:	9f 91       	pop	r25
    edbc:	8f 91       	pop	r24
    edbe:	7f 91       	pop	r23
    edc0:	6f 91       	pop	r22
    edc2:	5f 91       	pop	r21
    edc4:	4f 91       	pop	r20
    edc6:	3f 91       	pop	r19
    edc8:	2f 91       	pop	r18
    edca:	0f 90       	pop	r0
    edcc:	0f be       	out	0x3f, r0	; 63
    edce:	0f 90       	pop	r0
    edd0:	1f 90       	pop	r1
    edd2:	18 95       	reti

0000edd4 <_Z11startPulsesv>:
    heartbeat |= HEART_TIMER2Mhz;
}

void startPulses()
{
  PulsePol16 = PulsePol = !g_model.pulsePol ;
    edd4:	80 91 c0 01 	lds	r24, 0x01C0
    edd8:	80 95       	com	r24
    edda:	81 70       	andi	r24, 0x01	; 1
    eddc:	80 93 1a 0e 	sts	0x0E1A, r24
    ede0:	80 93 18 0e 	sts	0x0E18, r24
  if(!PulsePol)
    ede4:	88 23       	and	r24, r24
    ede6:	09 f4       	brne	.+2      	; 0xedea <_Z11startPulsesv+0x16>
  {
		PORTB |= (1<<OUT_B_PPM);
    ede8:	c0 9a       	sbi	0x18, 0	; 24
  }
	Current_protocol = g_model.protocol + 10 ;		// Not the same!
    edea:	80 91 b9 01 	lds	r24, 0x01B9
    edee:	8f 70       	andi	r24, 0x0F	; 15
    edf0:	86 5f       	subi	r24, 0xF6	; 246
    edf2:	80 93 0c 0e 	sts	0x0E0C, r24
	PausePulses = 0 ;
    edf6:	10 92 0e 0e 	sts	0x0E0E, r1
	setupPulses() ;
    edfa:	0e 94 f3 74 	call	0xe9e6	; 0xe9e6 <_Z11setupPulsesv>
}
    edfe:	08 95       	ret

0000ee00 <__vector_12>:

static uint8_t PulsePol ;
static uint8_t PulsePol16 ;

//ISR(TIMER1_OVF_vect)
ISR(TIMER1_COMPA_vect) //2MHz pulse generation
    ee00:	1f 92       	push	r1
    ee02:	0f 92       	push	r0
    ee04:	0f b6       	in	r0, 0x3f	; 63
    ee06:	0f 92       	push	r0
    ee08:	11 24       	eor	r1, r1
    ee0a:	2f 93       	push	r18
    ee0c:	3f 93       	push	r19
    ee0e:	4f 93       	push	r20
    ee10:	5f 93       	push	r21
    ee12:	6f 93       	push	r22
    ee14:	7f 93       	push	r23
    ee16:	8f 93       	push	r24
    ee18:	9f 93       	push	r25
    ee1a:	af 93       	push	r26
    ee1c:	bf 93       	push	r27
    ee1e:	ef 93       	push	r30
    ee20:	ff 93       	push	r31
    static uint16_t *pulsePtr = pulses2MHz.pword;

    //    uint8_t i = 0;
    //    while((TCNT1L < 10) && (++i < 50))  // Timer does not read too fast, so i
    //        ;
    uint16_t dt=TCNT1;//-OCR1A;
    ee22:	2c b5       	in	r18, 0x2c	; 44
    ee24:	3d b5       	in	r19, 0x2d	; 45

    if(PulsePol)
    ee26:	80 91 1a 0e 	lds	r24, 0x0E1A
    ee2a:	88 23       	and	r24, r24
    ee2c:	21 f0       	breq	.+8      	; 0xee36 <__vector_12+0x36>
    {
        PORTB |=  (1<<OUT_B_PPM);
    ee2e:	c0 9a       	sbi	0x18, 0	; 24
        PulsePol = 0;
    ee30:	10 92 1a 0e 	sts	0x0E1A, r1
    ee34:	04 c0       	rjmp	.+8      	; 0xee3e <__vector_12+0x3e>
    }else{
        PORTB &= ~(1<<OUT_B_PPM);
    ee36:	c0 98       	cbi	0x18, 0	; 24
        PulsePol = 1;
    ee38:	81 e0       	ldi	r24, 0x01	; 1
    ee3a:	80 93 1a 0e 	sts	0x0E1A, r24
    //      *pulsePtr = rest ;
    //    }
    //    channel += 1 ;
    //  }
    //  PulseTotal += (OCR1A  = *pulsePtr++);
    OCR1A  = *pulsePtr ;
    ee3e:	a0 91 1e 01 	lds	r26, 0x011E
    ee42:	b0 91 1f 01 	lds	r27, 0x011F
    ee46:	fd 01       	movw	r30, r26
    ee48:	81 91       	ld	r24, Z+
    ee4a:	91 91       	ld	r25, Z+
    ee4c:	9b bd       	out	0x2b, r25	; 43
    ee4e:	8a bd       	out	0x2a, r24	; 42
		pulsePtr += 1 ;
    ee50:	f0 93 1f 01 	sts	0x011F, r31
    ee54:	e0 93 1e 01 	sts	0x011E, r30
    
		{
			struct t_latency *ptrLat = &g_latency ;
			
			FORCE_INDIRECT(ptrLat) ;
    ee58:	e6 e0       	ldi	r30, 0x06	; 6
    ee5a:	f1 e0       	ldi	r31, 0x01	; 1
  	  if ( (uint8_t)dt > ptrLat->g_tmr1Latency_max) ptrLat->g_tmr1Latency_max = dt ;    // max has leap, therefore vary in length
    ee5c:	92 2f       	mov	r25, r18
    ee5e:	81 81       	ldd	r24, Z+1	; 0x01
    ee60:	82 17       	cp	r24, r18
    ee62:	08 f4       	brcc	.+2      	; 0xee66 <__vector_12+0x66>
    ee64:	21 83       	std	Z+1, r18	; 0x01
	    if ( (uint8_t)dt < ptrLat->g_tmr1Latency_min) ptrLat->g_tmr1Latency_min = dt ;    // max has leap, therefore vary in length
    ee66:	80 81       	ld	r24, Z
    ee68:	98 17       	cp	r25, r24
    ee6a:	08 f4       	brcc	.+2      	; 0xee6e <__vector_12+0x6e>
    ee6c:	90 83       	st	Z, r25
		}
    if( *pulsePtr == 0) {
    ee6e:	12 96       	adiw	r26, 0x02	; 2
    ee70:	8d 91       	ld	r24, X+
    ee72:	9c 91       	ld	r25, X
    ee74:	13 97       	sbiw	r26, 0x03	; 3
    ee76:	89 2b       	or	r24, r25
    ee78:	d9 f4       	brne	.+54     	; 0xeeb0 <__vector_12+0xb0>
        //currpulse=0;
        pulsePtr = pulses2MHz.pword;
    ee7a:	8b e7       	ldi	r24, 0x7B	; 123
    ee7c:	9d e0       	ldi	r25, 0x0D	; 13
    ee7e:	90 93 1f 01 	sts	0x011F, r25
    ee82:	80 93 1e 01 	sts	0x011E, r24
        PulsePol = !g_model.pulsePol;//0;     // changed polarity
    ee86:	80 91 c0 01 	lds	r24, 0x01C0
    ee8a:	80 95       	com	r24
    ee8c:	81 70       	andi	r24, 0x01	; 1
    ee8e:	80 93 1a 0e 	sts	0x0E1A, r24
        //    PulseTotal = 0 ;

#ifdef CPUM2561
        TIMSK1 &= ~(1<<OCIE1A); //stop reentrance
#else
        TIMSK &= ~(1<<OCIE1A); //stop reentrance
    ee92:	87 b7       	in	r24, 0x37	; 55
    ee94:	8f 7e       	andi	r24, 0xEF	; 239
    ee96:	87 bf       	out	0x37, r24	; 55
#endif
        //        sei();		// Don't do this yet
        setupPulses();
    ee98:	0e 94 f3 74 	call	0xe9e6	; 0xe9e6 <_Z11setupPulsesv>
        //					if ( TIFR & (1 << OCF1A ) )		// Interrupt pending
        //					{
        //						TCNT1 = 0 ;
        //					}
        //				}
        if ( (g_model.protocol == PROTO_PPM) || (g_model.protocol == PROTO_PPM16) )
    ee9c:	80 91 b9 01 	lds	r24, 0x01B9
    eea0:	8f 70       	andi	r24, 0x0F	; 15
    eea2:	11 f0       	breq	.+4      	; 0xeea8 <__vector_12+0xa8>
    eea4:	83 30       	cpi	r24, 0x03	; 3
    eea6:	21 f4       	brne	.+8      	; 0xeeb0 <__vector_12+0xb0>
        {
            //            cli();		// Not needed if sei() not done above
#ifdef CPUM2561
            TIMSK1 |= (1<<OCIE1A);
#else
            TIMSK |= (1<<OCIE1A);
    eea8:	87 b7       	in	r24, 0x37	; 55
    eeaa:	80 61       	ori	r24, 0x10	; 16
    eeac:	87 bf       	out	0x37, r24	; 55
#endif
            sei();
    eeae:	78 94       	sei
        }
    }
    heartbeat |= HEART_TIMER2Mhz;
    eeb0:	80 91 0b 0e 	lds	r24, 0x0E0B
    eeb4:	81 60       	ori	r24, 0x01	; 1
    eeb6:	80 93 0b 0e 	sts	0x0E0B, r24
}
    eeba:	ff 91       	pop	r31
    eebc:	ef 91       	pop	r30
    eebe:	bf 91       	pop	r27
    eec0:	af 91       	pop	r26
    eec2:	9f 91       	pop	r25
    eec4:	8f 91       	pop	r24
    eec6:	7f 91       	pop	r23
    eec8:	6f 91       	pop	r22
    eeca:	5f 91       	pop	r21
    eecc:	4f 91       	pop	r20
    eece:	3f 91       	pop	r19
    eed0:	2f 91       	pop	r18
    eed2:	0f 90       	pop	r0
    eed4:	0f be       	out	0x3f, r0	; 63
    eed6:	0f 90       	pop	r0
    eed8:	1f 90       	pop	r1
    eeda:	18 95       	reti

0000eedc <_ZN10audioQueue6aqinitEv>:
{
  aqinit();
}

// TODO should not be needed
void audioQueue::aqinit()
    eedc:	fc 01       	movw	r30, r24
{
  //make sure haptic off by default
  HAPTIC_OFF;
    eede:	a5 e6       	ldi	r26, 0x65	; 101
    eee0:	b0 e0       	ldi	r27, 0x00	; 0
    eee2:	8c 91       	ld	r24, X
    eee4:	8b 7f       	andi	r24, 0xFB	; 251
    eee6:	8c 93       	st	X, r24

  toneTimeLeft = 0;
    eee8:	14 82       	std	Z+4, r1	; 0x04
  tonePause = 0;
    eeea:	15 82       	std	Z+5, r1	; 0x05

  t_queueRidx = 0;
    eeec:	10 82       	st	Z, r1
  t_queueWidx = 0;
    eeee:	11 82       	std	Z+1, r1	; 0x01

  toneHaptic = 0;
    eef0:	16 a6       	std	Z+46, r1	; 0x2e
  hapticTick = 0;
    eef2:	17 a6       	std	Z+47, r1	; 0x2f

}
    eef4:	08 95       	ret

0000eef6 <_ZN10audioQueueC1Ev>:

struct t_voice Voice ;

audioQueue::audioQueue()
{
  aqinit();
    eef6:	0e 94 6e 77 	call	0xeedc	; 0xeedc <_ZN10audioQueue6aqinitEv>
}
    eefa:	08 95       	ret

0000eefc <_ZN10audioQueueC2Ev>:

struct t_voice Voice ;

audioQueue::audioQueue()
{
  aqinit();
    eefc:	0e 94 6e 77 	call	0xeedc	; 0xeedc <_ZN10audioQueue6aqinitEv>
}
    ef00:	08 95       	ret

0000ef02 <_ZN10audioQueue4busyEv>:
  toneHaptic = 0;
  hapticTick = 0;

}

bool audioQueue::busy()
    ef02:	fc 01       	movw	r30, r24
    ef04:	84 81       	ldd	r24, Z+4	; 0x04
    ef06:	81 11       	cpse	r24, r1
    ef08:	81 e0       	ldi	r24, 0x01	; 1
{
  return (toneTimeLeft > 0);
}
    ef0a:	08 95       	ret

0000ef0c <_ZN10audioQueue9freeslotsEv>:


bool audioQueue::freeslots()
    ef0c:	fc 01       	movw	r30, r24
{
	uint8_t temp ;
	temp = t_queueWidx ;
    ef0e:	91 81       	ldd	r25, Z+1	; 0x01
	temp += AUDIO_QUEUE_LENGTH ;
	temp -= t_queueRidx ;
    ef10:	80 81       	ld	r24, Z
    ef12:	98 1b       	sub	r25, r24
	temp %= AUDIO_QUEUE_LENGTH ;
    ef14:	97 70       	andi	r25, 0x07	; 7
    ef16:	20 e0       	ldi	r18, 0x00	; 0
    ef18:	88 e0       	ldi	r24, 0x08	; 8
    ef1a:	89 1b       	sub	r24, r25
    ef1c:	83 30       	cpi	r24, 0x03	; 3
    ef1e:	08 f0       	brcs	.+2      	; 0xef22 <_ZN10audioQueue9freeslotsEv+0x16>
    ef20:	21 e0       	ldi	r18, 0x01	; 1
	temp = AUDIO_QUEUE_LENGTH - temp ;
	return temp >= AUDIO_QUEUE_FREESLOTS ;
//  return AUDIO_QUEUE_LENGTH - ((t_queueWidx + AUDIO_QUEUE_LENGTH - t_queueRidx) % AUDIO_QUEUE_LENGTH) >= AUDIO_QUEUE_FREESLOTS;
}
    ef22:	82 2f       	mov	r24, r18
    ef24:	08 95       	ret

0000ef26 <_ZN10audioQueue9heartbeatEv>:


// heartbeat is responsibile for issueing the audio tones and general square waves
// it is essentially the life of the class.
// it is called every 10ms
void audioQueue::heartbeat()
    ef26:	dc 01       	movw	r26, r24
{
  if (toneTimeLeft > 0) {
    ef28:	14 96       	adiw	r26, 0x04	; 4
    ef2a:	8c 91       	ld	r24, X
    ef2c:	14 97       	sbiw	r26, 0x04	; 4
    ef2e:	88 23       	and	r24, r24
    ef30:	69 f1       	breq	.+90     	; 0xef8c <_ZN10audioQueue9heartbeatEv+0x66>
    toneTimeLeft--; //time gets counted down
    ef32:	81 50       	subi	r24, 0x01	; 1
    ef34:	14 96       	adiw	r26, 0x04	; 4
    ef36:	8c 93       	st	X, r24
    ef38:	14 97       	sbiw	r26, 0x04	; 4
    toneFreq += toneFreqIncr;
    ef3a:	12 96       	adiw	r26, 0x02	; 2
    ef3c:	8c 91       	ld	r24, X
    ef3e:	12 97       	sbiw	r26, 0x02	; 2
    ef40:	13 96       	adiw	r26, 0x03	; 3
    ef42:	9c 91       	ld	r25, X
    ef44:	13 97       	sbiw	r26, 0x03	; 3
    ef46:	89 0f       	add	r24, r25
    ef48:	12 96       	adiw	r26, 0x02	; 2
    ef4a:	8c 93       	st	X, r24
    ef4c:	12 97       	sbiw	r26, 0x02	; 2
    if (toneHaptic){
    ef4e:	9e 96       	adiw	r26, 0x2e	; 46
    ef50:	8c 91       	ld	r24, X
    ef52:	9e 97       	sbiw	r26, 0x2e	; 46
    ef54:	88 23       	and	r24, r24
    ef56:	09 f4       	brne	.+2      	; 0xef5a <_ZN10audioQueue9heartbeatEv+0x34>
    ef58:	54 c0       	rjmp	.+168    	; 0xf002 <_ZN10audioQueue9heartbeatEv+0xdc>
      if (hapticTick-- > 0) {
    ef5a:	9f 96       	adiw	r26, 0x2f	; 47
    ef5c:	8c 91       	ld	r24, X
    ef5e:	9f 97       	sbiw	r26, 0x2f	; 47
    ef60:	81 50       	subi	r24, 0x01	; 1
    ef62:	9f 96       	adiw	r26, 0x2f	; 47
    ef64:	8c 93       	st	X, r24
    ef66:	9f 97       	sbiw	r26, 0x2f	; 47
    ef68:	8f 5f       	subi	r24, 0xFF	; 255
    ef6a:	31 f0       	breq	.+12     	; 0xef78 <_ZN10audioQueue9heartbeatEv+0x52>
        HAPTIC_ON; // haptic output 'high'
    ef6c:	80 91 65 00 	lds	r24, 0x0065
    ef70:	84 60       	ori	r24, 0x04	; 4
    ef72:	80 93 65 00 	sts	0x0065, r24
    ef76:	08 95       	ret
      }
      else {
        HAPTIC_OFF; // haptic output 'low'
    ef78:	80 91 65 00 	lds	r24, 0x0065
    ef7c:	8b 7f       	andi	r24, 0xFB	; 251
    ef7e:	80 93 65 00 	sts	0x0065, r24
        hapticTick = g_eeGeneral.hapticStrength;
    ef82:	80 91 86 01 	lds	r24, 0x0186
    ef86:	9f 96       	adiw	r26, 0x2f	; 47
    ef88:	8c 93       	st	X, r24
    ef8a:	08 95       	ret
      }
    }
  }
  else {
    SPEAKER_OFF;
    ef8c:	1b 98       	cbi	0x03, 3	; 3
    HAPTIC_OFF;
    ef8e:	80 91 65 00 	lds	r24, 0x0065
    ef92:	8b 7f       	andi	r24, 0xFB	; 251
    ef94:	80 93 65 00 	sts	0x0065, r24

    //if (tonePause-- <= 0) {
    if (tonePause > 0) {
    ef98:	15 96       	adiw	r26, 0x05	; 5
    ef9a:	8c 91       	ld	r24, X
    ef9c:	15 97       	sbiw	r26, 0x05	; 5
    ef9e:	88 23       	and	r24, r24
    efa0:	21 f0       	breq	.+8      	; 0xefaa <_ZN10audioQueue9heartbeatEv+0x84>
      tonePause--;
    efa2:	81 50       	subi	r24, 0x01	; 1
    efa4:	15 96       	adiw	r26, 0x05	; 5
    efa6:	8c 93       	st	X, r24
    efa8:	08 95       	ret
    } else  {  
      if (t_queueRidx != t_queueWidx) {
    efaa:	9c 91       	ld	r25, X
    efac:	11 96       	adiw	r26, 0x01	; 1
    efae:	8c 91       	ld	r24, X
    efb0:	11 97       	sbiw	r26, 0x01	; 1
    efb2:	98 17       	cp	r25, r24
    efb4:	31 f1       	breq	.+76     	; 0xf002 <_ZN10audioQueue9heartbeatEv+0xdc>
        toneFreq = queueToneFreq[t_queueRidx];
    efb6:	29 2f       	mov	r18, r25
    efb8:	30 e0       	ldi	r19, 0x00	; 0
    efba:	fd 01       	movw	r30, r26
    efbc:	e2 0f       	add	r30, r18
    efbe:	f3 1f       	adc	r31, r19
    efc0:	86 81       	ldd	r24, Z+6	; 0x06
    efc2:	12 96       	adiw	r26, 0x02	; 2
    efc4:	8c 93       	st	X, r24
    efc6:	12 97       	sbiw	r26, 0x02	; 2
        toneTimeLeft = queueToneLength[t_queueRidx];
    efc8:	86 89       	ldd	r24, Z+22	; 0x16
    efca:	14 96       	adiw	r26, 0x04	; 4
    efcc:	8c 93       	st	X, r24
    efce:	14 97       	sbiw	r26, 0x04	; 4
        toneFreqIncr = queueToneFreqIncr[t_queueRidx];
    efd0:	86 85       	ldd	r24, Z+14	; 0x0e
    efd2:	13 96       	adiw	r26, 0x03	; 3
    efd4:	8c 93       	st	X, r24
    efd6:	13 97       	sbiw	r26, 0x03	; 3
        tonePause = queueTonePause[t_queueRidx];
    efd8:	86 8d       	ldd	r24, Z+30	; 0x1e
    efda:	15 96       	adiw	r26, 0x05	; 5
    efdc:	8c 93       	st	X, r24
    efde:	15 97       	sbiw	r26, 0x05	; 5
        toneHaptic = queueToneHaptic[t_queueRidx];
    efe0:	80 a9       	ldd	r24, Z+48	; 0x30
    efe2:	9e 96       	adiw	r26, 0x2e	; 46
    efe4:	8c 93       	st	X, r24
    efe6:	9e 97       	sbiw	r26, 0x2e	; 46
        hapticTick = 0;
    efe8:	9f 96       	adiw	r26, 0x2f	; 47
    efea:	1c 92       	st	X, r1
    efec:	9f 97       	sbiw	r26, 0x2f	; 47
        if (!queueToneRepeat[t_queueRidx]--) {
    efee:	86 a1       	ldd	r24, Z+38	; 0x26
    eff0:	81 50       	subi	r24, 0x01	; 1
    eff2:	86 a3       	std	Z+38, r24	; 0x26
    eff4:	8f 5f       	subi	r24, 0xFF	; 255
    eff6:	29 f4       	brne	.+10     	; 0xf002 <_ZN10audioQueue9heartbeatEv+0xdc>
          t_queueRidx = (t_queueRidx + 1) % AUDIO_QUEUE_LENGTH;
    eff8:	2f 5f       	subi	r18, 0xFF	; 255
    effa:	3f 4f       	sbci	r19, 0xFF	; 255
    effc:	27 70       	andi	r18, 0x07	; 7
    effe:	30 70       	andi	r19, 0x00	; 0
    f000:	2c 93       	st	X, r18
    f002:	08 95       	ret

0000f004 <_ZN10audioQueue4playEhhhh>:
    result *= 3;
  }
  return result;
}

void audioQueue::play(uint8_t tFreq, uint8_t tLen, uint8_t tPause, uint8_t flags )
    f004:	ff 92       	push	r15
    f006:	0f 93       	push	r16
    f008:	1f 93       	push	r17
    f00a:	cf 93       	push	r28
    f00c:	df 93       	push	r29
    f00e:	dc 01       	movw	r26, r24
    f010:	56 2f       	mov	r21, r22
    f012:	f2 2e       	mov	r15, r18


bool audioQueue::freeslots()
{
	uint8_t temp ;
	temp = t_queueWidx ;
    f014:	11 96       	adiw	r26, 0x01	; 1
    f016:	8c 91       	ld	r24, X
    f018:	11 97       	sbiw	r26, 0x01	; 1
	temp += AUDIO_QUEUE_LENGTH ;
	temp -= t_queueRidx ;
    f01a:	9c 91       	ld	r25, X
    f01c:	89 1b       	sub	r24, r25
	temp %= AUDIO_QUEUE_LENGTH ;
    f01e:	87 70       	andi	r24, 0x07	; 7
}

void audioQueue::play(uint8_t tFreq, uint8_t tLen, uint8_t tPause, uint8_t flags )
{
	
	if(!freeslots()){
    f020:	98 e0       	ldi	r25, 0x08	; 8
    f022:	98 1b       	sub	r25, r24
    f024:	93 30       	cpi	r25, 0x03	; 3
    f026:	08 f4       	brcc	.+2      	; 0xf02a <_ZN10audioQueue4playEhhhh+0x26>
    f028:	71 c0       	rjmp	.+226    	; 0xf10c <_ZN10audioQueue4playEhhhh+0x108>
			return;
	}
  if (g_eeGeneral.beeperVal)
    f02a:	90 91 7b 01 	lds	r25, 0x017B
    f02e:	98 73       	andi	r25, 0x38	; 56
    f030:	09 f4       	brne	.+2      	; 0xf034 <_ZN10audioQueue4playEhhhh+0x30>
    f032:	6c c0       	rjmp	.+216    	; 0xf10c <_ZN10audioQueue4playEhhhh+0x108>
	{
	  int8_t tFreqIncr = (flags >> 6) ;
    f034:	20 2f       	mov	r18, r16
    f036:	30 e0       	ldi	r19, 0x00	; 0
    f038:	10 2f       	mov	r17, r16
    f03a:	12 95       	swap	r17
    f03c:	16 95       	lsr	r17
    f03e:	16 95       	lsr	r17
    f040:	13 70       	andi	r17, 0x03	; 3
		uint8_t tRepeat = flags & 0x0F ;
    f042:	0f 70       	andi	r16, 0x0F	; 15

	  if (tFreqIncr == 3) tFreqIncr = -1 ;
    f044:	13 30       	cpi	r17, 0x03	; 3
    f046:	09 f4       	brne	.+2      	; 0xf04a <_ZN10audioQueue4playEhhhh+0x46>
    f048:	1f ef       	ldi	r17, 0xFF	; 255

    if (tFreq > 0)
    f04a:	55 23       	and	r21, r21
    f04c:	21 f0       	breq	.+8      	; 0xf056 <_ZN10audioQueue4playEhhhh+0x52>
		{ //we dont add pitch if zero as this is a pause only event
      tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
    f04e:	80 91 85 01 	lds	r24, 0x0185
    f052:	86 5f       	subi	r24, 0xF6	; 246
    f054:	58 0f       	add	r21, r24
}

inline uint8_t audioQueue::getToneLength(uint8_t tLen)
{
  uint8_t result = tLen; // default
  if (g_eeGeneral.beeperVal == 2) {
    f056:	90 31       	cpi	r25, 0x10	; 16
    f058:	31 f4       	brne	.+12     	; 0xf066 <_ZN10audioQueue4playEhhhh+0x62>
    result /= 3;
    f05a:	84 2f       	mov	r24, r20
    f05c:	63 e0       	ldi	r22, 0x03	; 3
    f05e:	0e 94 6b 7e 	call	0xfcd6	; 0xfcd6 <__udivmodqi4>
    f062:	48 2f       	mov	r20, r24
    f064:	0e c0       	rjmp	.+28     	; 0xf082 <_ZN10audioQueue4playEhhhh+0x7e>
  }
  else if (g_eeGeneral.beeperVal == 3) {
    f066:	98 31       	cpi	r25, 0x18	; 24
    f068:	11 f4       	brne	.+4      	; 0xf06e <_ZN10audioQueue4playEhhhh+0x6a>
    result /= 2;
    f06a:	46 95       	lsr	r20
    f06c:	0a c0       	rjmp	.+20     	; 0xf082 <_ZN10audioQueue4playEhhhh+0x7e>
  }
  else if (g_eeGeneral.beeperVal == 5) {
    f06e:	98 32       	cpi	r25, 0x28	; 40
    f070:	11 f4       	brne	.+4      	; 0xf076 <_ZN10audioQueue4playEhhhh+0x72>
    //long
    result *= 2;
    f072:	44 0f       	add	r20, r20
    f074:	06 c0       	rjmp	.+12     	; 0xf082 <_ZN10audioQueue4playEhhhh+0x7e>
  }
  else if (g_eeGeneral.beeperVal == 6) {
    f076:	90 33       	cpi	r25, 0x30	; 48
    f078:	21 f4       	brne	.+8      	; 0xf082 <_ZN10audioQueue4playEhhhh+0x7e>
    //xlong
    result *= 3;
    f07a:	83 e0       	ldi	r24, 0x03	; 3
    f07c:	48 9f       	mul	r20, r24
    f07e:	40 2d       	mov	r20, r0
    f080:	11 24       	eor	r1, r1
		{ //we dont add pitch if zero as this is a pause only event
      tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
    }
    tLen = getToneLength(tLen);

		if ( flags & PLAY_NOW )
    f082:	24 ff       	sbrs	r18, 4
    f084:	20 c0       	rjmp	.+64     	; 0xf0c6 <_ZN10audioQueue4playEhhhh+0xc2>
		{
    	toneFreq = tFreq ; // add pitch compensator
    f086:	12 96       	adiw	r26, 0x02	; 2
    f088:	5c 93       	st	X, r21
    f08a:	12 97       	sbiw	r26, 0x02	; 2
    	toneTimeLeft = tLen ;
    f08c:	14 96       	adiw	r26, 0x04	; 4
    f08e:	4c 93       	st	X, r20
    f090:	14 97       	sbiw	r26, 0x04	; 4
    	tonePause = tPause;
    f092:	15 96       	adiw	r26, 0x05	; 5
    f094:	fc 92       	st	X, r15
    f096:	15 97       	sbiw	r26, 0x05	; 5
    	toneHaptic = flags & PLAY_HAPTIC ? 1 : 0 ;
    f098:	c9 01       	movw	r24, r18
    f09a:	65 e0       	ldi	r22, 0x05	; 5
    f09c:	96 95       	lsr	r25
    f09e:	87 95       	ror	r24
    f0a0:	6a 95       	dec	r22
    f0a2:	e1 f7       	brne	.-8      	; 0xf09c <_ZN10audioQueue4playEhhhh+0x98>
    f0a4:	81 70       	andi	r24, 0x01	; 1
    f0a6:	9e 96       	adiw	r26, 0x2e	; 46
    f0a8:	8c 93       	st	X, r24
    f0aa:	9e 97       	sbiw	r26, 0x2e	; 46
    	hapticTick = 0;
    f0ac:	9f 96       	adiw	r26, 0x2f	; 47
    f0ae:	1c 92       	st	X, r1
    f0b0:	9f 97       	sbiw	r26, 0x2f	; 47
    	toneFreqIncr = tFreqIncr ;
    f0b2:	13 96       	adiw	r26, 0x03	; 3
    f0b4:	1c 93       	st	X, r17
    f0b6:	13 97       	sbiw	r26, 0x03	; 3
    	t_queueWidx = t_queueRidx;
    f0b8:	8c 91       	ld	r24, X
    f0ba:	11 96       	adiw	r26, 0x01	; 1
    f0bc:	8c 93       	st	X, r24
    f0be:	11 97       	sbiw	r26, 0x01	; 1
		else
		{
			tRepeat += 1 ;			
		}

		if ( tRepeat )
    f0c0:	00 23       	and	r16, r16
    f0c2:	21 f1       	breq	.+72     	; 0xf10c <_ZN10audioQueue4playEhhhh+0x108>
    f0c4:	01 c0       	rjmp	.+2      	; 0xf0c8 <_ZN10audioQueue4playEhhhh+0xc4>
//    	  playASAP(tFreq, tLen, tPause, tRepeat-1, toneHaptic, 0 ) ;
//    	}
		}
		else
		{
			tRepeat += 1 ;			
    f0c6:	0f 5f       	subi	r16, 0xFF	; 255
		}

		if ( tRepeat )
		{
    	uint8_t next_queueWidx = (t_queueWidx + 1) % AUDIO_QUEUE_LENGTH;
    f0c8:	11 96       	adiw	r26, 0x01	; 1
    f0ca:	8c 91       	ld	r24, X
    f0cc:	11 97       	sbiw	r26, 0x01	; 1
    f0ce:	68 2f       	mov	r22, r24
    f0d0:	70 e0       	ldi	r23, 0x00	; 0
    f0d2:	6f 5f       	subi	r22, 0xFF	; 255
    f0d4:	7f 4f       	sbci	r23, 0xFF	; 255
    f0d6:	eb 01       	movw	r28, r22
    f0d8:	c7 70       	andi	r28, 0x07	; 7
    f0da:	d0 70       	andi	r29, 0x00	; 0
    f0dc:	61 50       	subi	r22, 0x01	; 1
    f0de:	70 40       	sbci	r23, 0x00	; 0
    	if (next_queueWidx != t_queueRidx)
    f0e0:	8c 91       	ld	r24, X
    f0e2:	8c 17       	cp	r24, r28
    f0e4:	99 f0       	breq	.+38     	; 0xf10c <_ZN10audioQueue4playEhhhh+0x108>
			{
    	  queueToneFreq[t_queueWidx] = tFreq ; // add pitch compensator
    f0e6:	fd 01       	movw	r30, r26
    f0e8:	e6 0f       	add	r30, r22
    f0ea:	f7 1f       	adc	r31, r23
    f0ec:	56 83       	std	Z+6, r21	; 0x06
    	  queueToneLength[t_queueWidx] = tLen ;
    f0ee:	46 8b       	std	Z+22, r20	; 0x16
    	  queueTonePause[t_queueWidx] = tPause;
    f0f0:	f6 8e       	std	Z+30, r15	; 0x1e
    	  queueToneHaptic[t_queueWidx] = flags & PLAY_HAPTIC ? 1 : 0;
    f0f2:	85 e0       	ldi	r24, 0x05	; 5
    f0f4:	36 95       	lsr	r19
    f0f6:	27 95       	ror	r18
    f0f8:	8a 95       	dec	r24
    f0fa:	e1 f7       	brne	.-8      	; 0xf0f4 <_ZN10audioQueue4playEhhhh+0xf0>
    f0fc:	82 2f       	mov	r24, r18
    f0fe:	81 70       	andi	r24, 0x01	; 1
    f100:	80 ab       	std	Z+48, r24	; 0x30
    	  queueToneRepeat[t_queueWidx] = tRepeat - 1;
    f102:	01 50       	subi	r16, 0x01	; 1
    f104:	06 a3       	std	Z+38, r16	; 0x26
    	  queueToneFreqIncr[t_queueWidx] = tFreqIncr;
    f106:	16 87       	std	Z+14, r17	; 0x0e
    	  t_queueWidx = next_queueWidx;
    f108:	11 96       	adiw	r26, 0x01	; 1
    f10a:	cc 93       	st	X, r28
			}
		}
  }
}
    f10c:	df 91       	pop	r29
    f10e:	cf 91       	pop	r28
    f110:	1f 91       	pop	r17
    f112:	0f 91       	pop	r16
    f114:	ff 90       	pop	r15
    f116:	08 95       	ret

0000f118 <_ZN10audioQueue5eventEhh>:
//      t_queueWidx = next_queueWidx;
//    }
//  }
//}

void audioQueue::event(uint8_t e, uint8_t f) {
    f118:	0f 93       	push	r16
    f11a:	cf 93       	push	r28
    f11c:	df 93       	push	r29
    f11e:	ec 01       	movw	r28, r24

  uint8_t beepVal = g_eeGeneral.beeperVal;
    f120:	20 91 7b 01 	lds	r18, 0x017B
    f124:	26 95       	lsr	r18
    f126:	26 95       	lsr	r18
    f128:	26 95       	lsr	r18
    f12a:	27 70       	andi	r18, 0x07	; 7
	if (t_queueRidx == t_queueWidx) {		
    f12c:	98 81       	ld	r25, Y
    f12e:	89 81       	ldd	r24, Y+1	; 0x01
    f130:	98 17       	cp	r25, r24
    f132:	09 f0       	breq	.+2      	; 0xf136 <_ZN10audioQueue5eventEhh+0x1e>
    f134:	36 c1       	rjmp	.+620    	; 0xf3a2 <_ZN10audioQueue5eventEhh+0x28a>
	  switch (e) {
    f136:	e6 2f       	mov	r30, r22
    f138:	f0 e0       	ldi	r31, 0x00	; 0
    f13a:	e3 32       	cpi	r30, 0x23	; 35
    f13c:	f1 05       	cpc	r31, r1
    f13e:	08 f0       	brcs	.+2      	; 0xf142 <_ZN10audioQueue5eventEhh+0x2a>
    f140:	30 c1       	rjmp	.+608    	; 0xf3a2 <_ZN10audioQueue5eventEhh+0x28a>
    f142:	ea 5b       	subi	r30, 0xBA	; 186
    f144:	ff 4f       	sbci	r31, 0xFF	; 255
    f146:	ee 0f       	add	r30, r30
    f148:	ff 1f       	adc	r31, r31
    f14a:	05 90       	lpm	r0, Z+
    f14c:	f4 91       	lpm	r31, Z+
    f14e:	e0 2d       	mov	r30, r0
    f150:	09 94       	ijmp
		    case AU_WARNING1:
		      play(BEEP_DEFAULT_FREQ, 10, 1, PLAY_HAPTIC | PLAY_NOW ) ;
    f152:	ce 01       	movw	r24, r28
    f154:	66 e4       	ldi	r22, 0x46	; 70
    f156:	4a e0       	ldi	r20, 0x0A	; 10
    f158:	02 c1       	rjmp	.+516    	; 0xf35e <_ZN10audioQueue5eventEhh+0x246>
		      break;
		    case AU_WARNING2:
		      play(BEEP_DEFAULT_FREQ, 20, 1, PLAY_HAPTIC | PLAY_NOW);
    f15a:	ce 01       	movw	r24, r28
    f15c:	66 e4       	ldi	r22, 0x46	; 70
    f15e:	44 e1       	ldi	r20, 0x14	; 20
    f160:	fe c0       	rjmp	.+508    	; 0xf35e <_ZN10audioQueue5eventEhh+0x246>
		      break;
	      case AU_CHEEP:
	        play(BEEP_DEFAULT_FREQ+30,10,2,2 | PLAY_HAPTIC | PLAY_INCREMENT(2) ) ;
    f162:	ce 01       	movw	r24, r28
    f164:	64 e6       	ldi	r22, 0x64	; 100
    f166:	4a e0       	ldi	r20, 0x0A	; 10
    f168:	22 e0       	ldi	r18, 0x02	; 2
    f16a:	02 ea       	ldi	r16, 0xA2	; 162
    f16c:	18 c1       	rjmp	.+560    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
	      case AU_RING:
	        play(BEEP_DEFAULT_FREQ+25,5,2,10 |PLAY_HAPTIC);
    f16e:	ce 01       	movw	r24, r28
    f170:	6f e5       	ldi	r22, 0x5F	; 95
    f172:	45 e0       	ldi	r20, 0x05	; 5
    f174:	22 e0       	ldi	r18, 0x02	; 2
    f176:	0a e2       	ldi	r16, 0x2A	; 42
    f178:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(BEEP_DEFAULT_FREQ+25,5,10,1 | PLAY_HAPTIC);
    f17c:	ce 01       	movw	r24, r28
    f17e:	6f e5       	ldi	r22, 0x5F	; 95
    f180:	45 e0       	ldi	r20, 0x05	; 5
    f182:	2a e0       	ldi	r18, 0x0A	; 10
    f184:	01 e2       	ldi	r16, 0x21	; 33
    f186:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(BEEP_DEFAULT_FREQ+25,5,2,10 | PLAY_HAPTIC);
    f18a:	ce 01       	movw	r24, r28
    f18c:	6f e5       	ldi	r22, 0x5F	; 95
    f18e:	45 e0       	ldi	r20, 0x05	; 5
    f190:	22 e0       	ldi	r18, 0x02	; 2
    f192:	7b c0       	rjmp	.+246    	; 0xf28a <_ZN10audioQueue5eventEhh+0x172>
	        break;
	      case AU_SCIFI:
	        play(80,10,3,2 | PLAY_INCREMENT(-1));
    f194:	ce 01       	movw	r24, r28
    f196:	60 e5       	ldi	r22, 0x50	; 80
    f198:	4a e0       	ldi	r20, 0x0A	; 10
    f19a:	23 e0       	ldi	r18, 0x03	; 3
    f19c:	02 ec       	ldi	r16, 0xC2	; 194
    f19e:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(60,10,3,2 | PLAY_INCREMENT(1));
    f1a2:	ce 01       	movw	r24, r28
    f1a4:	6c e3       	ldi	r22, 0x3C	; 60
    f1a6:	4a e0       	ldi	r20, 0x0A	; 10
    f1a8:	23 e0       	ldi	r18, 0x03	; 3
    f1aa:	02 e4       	ldi	r16, 0x42	; 66
    f1ac:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(70,10,1, PLAY_HAPTIC );
    f1b0:	ce 01       	movw	r24, r28
    f1b2:	66 e4       	ldi	r22, 0x46	; 70
    f1b4:	4a e0       	ldi	r20, 0x0A	; 10
    f1b6:	21 e0       	ldi	r18, 0x01	; 1
    f1b8:	00 e2       	ldi	r16, 0x20	; 32
    f1ba:	f1 c0       	rjmp	.+482    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
	      case AU_ROBOT:
	        play(70,5,1,1 | PLAY_HAPTIC);
    f1bc:	ce 01       	movw	r24, r28
    f1be:	66 e4       	ldi	r22, 0x46	; 70
    f1c0:	45 e0       	ldi	r20, 0x05	; 5
    f1c2:	21 e0       	ldi	r18, 0x01	; 1
    f1c4:	01 e2       	ldi	r16, 0x21	; 33
    f1c6:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(50,15,2,1 | PLAY_HAPTIC);
    f1ca:	ce 01       	movw	r24, r28
    f1cc:	62 e3       	ldi	r22, 0x32	; 50
    f1ce:	4f e0       	ldi	r20, 0x0F	; 15
    f1d0:	22 e0       	ldi	r18, 0x02	; 2
    f1d2:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(80,15,2,1 | PLAY_HAPTIC);
    f1d6:	ce 01       	movw	r24, r28
    f1d8:	60 e5       	ldi	r22, 0x50	; 80
    f1da:	4f e0       	ldi	r20, 0x0F	; 15
    f1dc:	22 e0       	ldi	r18, 0x02	; 2
    f1de:	df c0       	rjmp	.+446    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
	      case AU_CHIRP:
	        play(BEEP_DEFAULT_FREQ+40,5,1,2 | PLAY_HAPTIC);
    f1e0:	ce 01       	movw	r24, r28
    f1e2:	6e e6       	ldi	r22, 0x6E	; 110
    f1e4:	45 e0       	ldi	r20, 0x05	; 5
    f1e6:	21 e0       	ldi	r18, 0x01	; 1
    f1e8:	02 e2       	ldi	r16, 0x22	; 34
    f1ea:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(BEEP_DEFAULT_FREQ+54,5,1,3 | PLAY_HAPTIC);
    f1ee:	ce 01       	movw	r24, r28
    f1f0:	6c e7       	ldi	r22, 0x7C	; 124
    f1f2:	45 e0       	ldi	r20, 0x05	; 5
    f1f4:	21 e0       	ldi	r18, 0x01	; 1
    f1f6:	60 c0       	rjmp	.+192    	; 0xf2b8 <_ZN10audioQueue5eventEhh+0x1a0>
	        break;
	      case AU_TADA:
	        play(50,5,5,0);
    f1f8:	ce 01       	movw	r24, r28
    f1fa:	62 e3       	ldi	r22, 0x32	; 50
    f1fc:	45 e0       	ldi	r20, 0x05	; 5
    f1fe:	25 e0       	ldi	r18, 0x05	; 5
    f200:	00 e0       	ldi	r16, 0x00	; 0
    f202:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(90,5,5,0);
    f206:	ce 01       	movw	r24, r28
    f208:	6a e5       	ldi	r22, 0x5A	; 90
    f20a:	45 e0       	ldi	r20, 0x05	; 5
    f20c:	25 e0       	ldi	r18, 0x05	; 5
    f20e:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(110,3,4,2);
    f212:	ce 01       	movw	r24, r28
    f214:	6e e6       	ldi	r22, 0x6E	; 110
    f216:	43 e0       	ldi	r20, 0x03	; 3
    f218:	24 e0       	ldi	r18, 0x04	; 4
    f21a:	02 e0       	ldi	r16, 0x02	; 2
    f21c:	c0 c0       	rjmp	.+384    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
	      case AU_CRICKET:
	        play(80,5,10,3 | PLAY_HAPTIC);
    f21e:	ce 01       	movw	r24, r28
    f220:	60 e5       	ldi	r22, 0x50	; 80
    f222:	45 e0       	ldi	r20, 0x05	; 5
    f224:	2a e0       	ldi	r18, 0x0A	; 10
    f226:	03 e2       	ldi	r16, 0x23	; 35
    f228:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(80,5,20,1 | PLAY_HAPTIC);
    f22c:	ce 01       	movw	r24, r28
    f22e:	60 e5       	ldi	r22, 0x50	; 80
    f230:	45 e0       	ldi	r20, 0x05	; 5
    f232:	24 e1       	ldi	r18, 0x14	; 20
    f234:	01 e2       	ldi	r16, 0x21	; 33
    f236:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(80,5,10,3 | PLAY_HAPTIC);
    f23a:	ce 01       	movw	r24, r28
    f23c:	60 e5       	ldi	r22, 0x50	; 80
    f23e:	45 e0       	ldi	r20, 0x05	; 5
    f240:	3a c0       	rjmp	.+116    	; 0xf2b6 <_ZN10audioQueue5eventEhh+0x19e>
	        break;
	      case AU_SIREN:
	        play(10,20,5,2 | PLAY_HAPTIC | PLAY_INCREMENT(1));
    f242:	ce 01       	movw	r24, r28
    f244:	6a e0       	ldi	r22, 0x0A	; 10
    f246:	44 e1       	ldi	r20, 0x14	; 20
    f248:	25 e0       	ldi	r18, 0x05	; 5
    f24a:	02 e6       	ldi	r16, 0x62	; 98
    f24c:	a8 c0       	rjmp	.+336    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
	      case AU_ALARMC:
	        play(50,4,10,2 | PLAY_HAPTIC);
    f24e:	ce 01       	movw	r24, r28
    f250:	62 e3       	ldi	r22, 0x32	; 50
    f252:	44 e0       	ldi	r20, 0x04	; 4
    f254:	2a e0       	ldi	r18, 0x0A	; 10
    f256:	02 e2       	ldi	r16, 0x22	; 34
    f258:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(70,8,20,1 | PLAY_HAPTIC);
    f25c:	ce 01       	movw	r24, r28
    f25e:	66 e4       	ldi	r22, 0x46	; 70
    f260:	48 e0       	ldi	r20, 0x08	; 8
    f262:	24 e1       	ldi	r18, 0x14	; 20
    f264:	01 e2       	ldi	r16, 0x21	; 33
    f266:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(50,8,10,2 | PLAY_HAPTIC);
    f26a:	ce 01       	movw	r24, r28
    f26c:	62 e3       	ldi	r22, 0x32	; 50
    f26e:	48 e0       	ldi	r20, 0x08	; 8
    f270:	2a e0       	ldi	r18, 0x0A	; 10
    f272:	02 e2       	ldi	r16, 0x22	; 34
    f274:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
	        play(70,4,20,1 | PLAY_HAPTIC);
    f278:	ce 01       	movw	r24, r28
    f27a:	66 e4       	ldi	r22, 0x46	; 70
    f27c:	44 e0       	ldi	r20, 0x04	; 4
    f27e:	24 e1       	ldi	r18, 0x14	; 20
    f280:	0f c0       	rjmp	.+30     	; 0xf2a0 <_ZN10audioQueue5eventEhh+0x188>
	        break;
	      case AU_RATATA:
	        play(BEEP_DEFAULT_FREQ+50,5,10,10 | PLAY_HAPTIC);
    f282:	ce 01       	movw	r24, r28
    f284:	68 e7       	ldi	r22, 0x78	; 120
    f286:	45 e0       	ldi	r20, 0x05	; 5
    f288:	2a e0       	ldi	r18, 0x0A	; 10
    f28a:	0a e2       	ldi	r16, 0x2A	; 42
    f28c:	88 c0       	rjmp	.+272    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
	      case AU_TICK:
	        play(BEEP_DEFAULT_FREQ+50,5,50,2 | PLAY_HAPTIC);
    f28e:	ce 01       	movw	r24, r28
    f290:	68 e7       	ldi	r22, 0x78	; 120
    f292:	45 e0       	ldi	r20, 0x05	; 5
    f294:	22 e3       	ldi	r18, 0x32	; 50
    f296:	0a c0       	rjmp	.+20     	; 0xf2ac <_ZN10audioQueue5eventEhh+0x194>
	        break;
	      case AU_HAPTIC1:
	        play(0,20,10,1 | PLAY_HAPTIC);
    f298:	ce 01       	movw	r24, r28
    f29a:	60 e0       	ldi	r22, 0x00	; 0
    f29c:	44 e1       	ldi	r20, 0x14	; 20
    f29e:	2a e0       	ldi	r18, 0x0A	; 10
    f2a0:	01 e2       	ldi	r16, 0x21	; 33
    f2a2:	7d c0       	rjmp	.+250    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
	      case AU_HAPTIC2:
	        play(0,20,10,2 | PLAY_HAPTIC);
    f2a4:	ce 01       	movw	r24, r28
    f2a6:	60 e0       	ldi	r22, 0x00	; 0
    f2a8:	44 e1       	ldi	r20, 0x14	; 20
    f2aa:	2a e0       	ldi	r18, 0x0A	; 10
    f2ac:	02 e2       	ldi	r16, 0x22	; 34
    f2ae:	77 c0       	rjmp	.+238    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
	      case AU_HAPTIC3:
	        play(0,20,10,3 | PLAY_HAPTIC);
    f2b0:	ce 01       	movw	r24, r28
    f2b2:	60 e0       	ldi	r22, 0x00	; 0
    f2b4:	44 e1       	ldi	r20, 0x14	; 20
    f2b6:	2a e0       	ldi	r18, 0x0A	; 10
    f2b8:	03 e2       	ldi	r16, 0x23	; 35
    f2ba:	71 c0       	rjmp	.+226    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
	        break;
		    case AU_INACTIVITY:
		      play(70, 10, 2, 2 | PLAY_NOW ) ;
    f2bc:	ce 01       	movw	r24, r28
    f2be:	66 e4       	ldi	r22, 0x46	; 70
    f2c0:	4a e0       	ldi	r20, 0x0A	; 10
    f2c2:	22 e0       	ldi	r18, 0x02	; 2
    f2c4:	02 e1       	ldi	r16, 0x12	; 18
    f2c6:	6b c0       	rjmp	.+214    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
		      break;
		    case AU_TX_BATTERY_LOW:
		        play(60, 20, 3, 2 | PLAY_INCREMENT(1));
    f2c8:	ce 01       	movw	r24, r28
    f2ca:	6c e3       	ldi	r22, 0x3C	; 60
    f2cc:	44 e1       	ldi	r20, 0x14	; 20
    f2ce:	23 e0       	ldi	r18, 0x03	; 3
    f2d0:	02 e4       	ldi	r16, 0x42	; 66
    f2d2:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
		        play(80, 20, 3, 2 | PLAY_HAPTIC | PLAY_INCREMENT(-1));
    f2d6:	ce 01       	movw	r24, r28
    f2d8:	60 e5       	ldi	r22, 0x50	; 80
    f2da:	44 e1       	ldi	r20, 0x14	; 20
    f2dc:	23 e0       	ldi	r18, 0x03	; 3
    f2de:	02 ee       	ldi	r16, 0xE2	; 226
    f2e0:	5e c0       	rjmp	.+188    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
		      break;
		    case AU_ERROR:
		      play(BEEP_DEFAULT_FREQ, 40, 1, PLAY_HAPTIC | PLAY_NOW);
    f2e2:	ce 01       	movw	r24, r28
    f2e4:	66 e4       	ldi	r22, 0x46	; 70
    f2e6:	48 e2       	ldi	r20, 0x28	; 40
    f2e8:	3a c0       	rjmp	.+116    	; 0xf35e <_ZN10audioQueue5eventEhh+0x246>
		      break;
		    case AU_KEYPAD_UP:
		      if (beepVal != BEEP_NOKEYS) {
    f2ea:	21 30       	cpi	r18, 0x01	; 1
    f2ec:	09 f4       	brne	.+2      	; 0xf2f0 <_ZN10audioQueue5eventEhh+0x1d8>
    f2ee:	59 c0       	rjmp	.+178    	; 0xf3a2 <_ZN10audioQueue5eventEhh+0x28a>
		        play(BEEP_KEY_UP_FREQ, 10, 1, PLAY_NOW );
    f2f0:	ce 01       	movw	r24, r28
    f2f2:	6b e4       	ldi	r22, 0x4B	; 75
    f2f4:	19 c0       	rjmp	.+50     	; 0xf328 <_ZN10audioQueue5eventEhh+0x210>
		      }
		      break;
		    case AU_KEYPAD_DOWN:
		      if (beepVal != BEEP_NOKEYS) {
    f2f6:	21 30       	cpi	r18, 0x01	; 1
    f2f8:	09 f4       	brne	.+2      	; 0xf2fc <_ZN10audioQueue5eventEhh+0x1e4>
    f2fa:	53 c0       	rjmp	.+166    	; 0xf3a2 <_ZN10audioQueue5eventEhh+0x28a>
		        play(BEEP_KEY_DOWN_FREQ, 10, 1, PLAY_NOW);
    f2fc:	ce 01       	movw	r24, r28
    f2fe:	61 e4       	ldi	r22, 0x41	; 65
    f300:	13 c0       	rjmp	.+38     	; 0xf328 <_ZN10audioQueue5eventEhh+0x210>
		      }
		      break;
		    case AU_TRIM_MOVE:
		      play(f, 6, 1, PLAY_NOW);
    f302:	ce 01       	movw	r24, r28
    f304:	64 2f       	mov	r22, r20
    f306:	46 e0       	ldi	r20, 0x06	; 6
    f308:	10 c0       	rjmp	.+32     	; 0xf32a <_ZN10audioQueue5eventEhh+0x212>
		      break;
		    case AU_TRIM_MIDDLE:
		      play(BEEP_DEFAULT_FREQ, 10, 2, PLAY_HAPTIC | PLAY_NOW);
    f30a:	ce 01       	movw	r24, r28
    f30c:	66 e4       	ldi	r22, 0x46	; 70
    f30e:	4a e0       	ldi	r20, 0x0A	; 10
    f310:	22 e0       	ldi	r18, 0x02	; 2
    f312:	26 c0       	rjmp	.+76     	; 0xf360 <_ZN10audioQueue5eventEhh+0x248>
		      break;
		    case AU_MENUS:
		      if (beepVal != BEEP_NOKEYS) {
    f314:	21 30       	cpi	r18, 0x01	; 1
    f316:	09 f4       	brne	.+2      	; 0xf31a <_ZN10audioQueue5eventEhh+0x202>
    f318:	44 c0       	rjmp	.+136    	; 0xf3a2 <_ZN10audioQueue5eventEhh+0x28a>
		        play(BEEP_DEFAULT_FREQ, 10, 2, PLAY_NOW);
    f31a:	ce 01       	movw	r24, r28
    f31c:	66 e4       	ldi	r22, 0x46	; 70
    f31e:	4a e0       	ldi	r20, 0x0A	; 10
    f320:	22 e0       	ldi	r18, 0x02	; 2
    f322:	04 c0       	rjmp	.+8      	; 0xf32c <_ZN10audioQueue5eventEhh+0x214>
		      }
		      break;
		    case AU_POT_STICK_MIDDLE:
		      play(BEEP_DEFAULT_FREQ + 50, 10, 1, PLAY_NOW);
    f324:	ce 01       	movw	r24, r28
    f326:	68 e7       	ldi	r22, 0x78	; 120
    f328:	4a e0       	ldi	r20, 0x0A	; 10
    f32a:	21 e0       	ldi	r18, 0x01	; 1
    f32c:	00 e1       	ldi	r16, 0x10	; 16
    f32e:	37 c0       	rjmp	.+110    	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
		      break;
		    case AU_TIMER_30:
		      play(BEEP_DEFAULT_FREQ + 50, 15, 3, 3 | PLAY_HAPTIC | PLAY_NOW);
    f330:	ce 01       	movw	r24, r28
    f332:	68 e7       	ldi	r22, 0x78	; 120
    f334:	4f e0       	ldi	r20, 0x0F	; 15
    f336:	23 e0       	ldi	r18, 0x03	; 3
    f338:	25 c0       	rjmp	.+74     	; 0xf384 <_ZN10audioQueue5eventEhh+0x26c>
		      break;
		    case AU_TIMER_20:
		      play(BEEP_DEFAULT_FREQ + 50, 15, 3, 2 | PLAY_HAPTIC | PLAY_NOW);
    f33a:	ce 01       	movw	r24, r28
    f33c:	68 e7       	ldi	r22, 0x78	; 120
    f33e:	4f e0       	ldi	r20, 0x0F	; 15
    f340:	23 e0       	ldi	r18, 0x03	; 3
    f342:	1a c0       	rjmp	.+52     	; 0xf378 <_ZN10audioQueue5eventEhh+0x260>
		      break;
		    case AU_TIMER_10:
		      play(BEEP_DEFAULT_FREQ + 50, 15, 3, 1 | PLAY_HAPTIC | PLAY_NOW);
    f344:	ce 01       	movw	r24, r28
    f346:	68 e7       	ldi	r22, 0x78	; 120
    f348:	4f e0       	ldi	r20, 0x0F	; 15
    f34a:	23 e0       	ldi	r18, 0x03	; 3
    f34c:	0f c0       	rjmp	.+30     	; 0xf36c <_ZN10audioQueue5eventEhh+0x254>
		      break;
		    case AU_TIMER_LT3:
		      play(BEEP_DEFAULT_FREQ, 20, 25, 1 | PLAY_HAPTIC | PLAY_NOW);
    f34e:	ce 01       	movw	r24, r28
    f350:	66 e4       	ldi	r22, 0x46	; 70
    f352:	44 e1       	ldi	r20, 0x14	; 20
    f354:	29 e1       	ldi	r18, 0x19	; 25
    f356:	0a c0       	rjmp	.+20     	; 0xf36c <_ZN10audioQueue5eventEhh+0x254>
		      break;
		    case AU_WARNING3:
		      play(BEEP_DEFAULT_FREQ, 30, 1, PLAY_HAPTIC | PLAY_NOW);
    f358:	ce 01       	movw	r24, r28
    f35a:	66 e4       	ldi	r22, 0x46	; 70
    f35c:	4e e1       	ldi	r20, 0x1E	; 30
    f35e:	21 e0       	ldi	r18, 0x01	; 1
    f360:	00 e3       	ldi	r16, 0x30	; 48
    f362:	1d c0       	rjmp	.+58     	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
		      break;
				case AU_MIX_WARNING_1:
		      play(BEEP_DEFAULT_FREQ + 50, 10, 1, 1 | PLAY_HAPTIC | PLAY_NOW);
    f364:	ce 01       	movw	r24, r28
    f366:	68 e7       	ldi	r22, 0x78	; 120
    f368:	4a e0       	ldi	r20, 0x0A	; 10
    f36a:	21 e0       	ldi	r18, 0x01	; 1
    f36c:	01 e3       	ldi	r16, 0x31	; 49
    f36e:	17 c0       	rjmp	.+46     	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
		      break;
		    case AU_MIX_WARNING_2:
		      play(BEEP_DEFAULT_FREQ + 52, 10, 1, 2 | PLAY_HAPTIC | PLAY_NOW);
    f370:	ce 01       	movw	r24, r28
    f372:	6a e7       	ldi	r22, 0x7A	; 122
    f374:	4a e0       	ldi	r20, 0x0A	; 10
    f376:	21 e0       	ldi	r18, 0x01	; 1
    f378:	02 e3       	ldi	r16, 0x32	; 50
    f37a:	11 c0       	rjmp	.+34     	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
		      break;
		    case AU_MIX_WARNING_3:
		      play(BEEP_DEFAULT_FREQ + 54, 10, 1, 3 | PLAY_HAPTIC | PLAY_NOW);
    f37c:	ce 01       	movw	r24, r28
    f37e:	6c e7       	ldi	r22, 0x7C	; 124
    f380:	4a e0       	ldi	r20, 0x0A	; 10
    f382:	21 e0       	ldi	r18, 0x01	; 1
    f384:	03 e3       	ldi	r16, 0x33	; 51
    f386:	0b c0       	rjmp	.+22     	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
		      break;
		    
				case AU_VARIO_UP :
		      play(BEEP_DEFAULT_FREQ + 60, 10, 0, PLAY_INCREMENT(1) | PLAY_NOW ) ;
    f388:	ce 01       	movw	r24, r28
    f38a:	62 e8       	ldi	r22, 0x82	; 130
    f38c:	4a e0       	ldi	r20, 0x0A	; 10
    f38e:	20 e0       	ldi	r18, 0x00	; 0
    f390:	00 e5       	ldi	r16, 0x50	; 80
    f392:	05 c0       	rjmp	.+10     	; 0xf39e <_ZN10audioQueue5eventEhh+0x286>
		    break ;
		    
				case AU_VARIO_DOWN :
		      play(BEEP_DEFAULT_FREQ - 20, 10, 0, PLAY_INCREMENT(-1) | PLAY_NOW ) ;
    f394:	ce 01       	movw	r24, r28
    f396:	62 e3       	ldi	r22, 0x32	; 50
    f398:	4a e0       	ldi	r20, 0x0A	; 10
    f39a:	20 e0       	ldi	r18, 0x00	; 0
    f39c:	00 ed       	ldi	r16, 0xD0	; 208
    f39e:	0e 94 02 78 	call	0xf004	; 0xf004 <_ZN10audioQueue4playEhhhh>
		    
				default:
		      break;
	  }
	}  
}
    f3a2:	df 91       	pop	r29
    f3a4:	cf 91       	pop	r28
    f3a6:	0f 91       	pop	r16
    f3a8:	08 95       	ret

0000f3aa <_Z13audioDefeventh>:

void audioDefevent(uint8_t e)
    f3aa:	68 2f       	mov	r22, r24
{
  audio.event(e, BEEP_DEFAULT_FREQ);
    f3ac:	85 eb       	ldi	r24, 0xB5	; 181
    f3ae:	95 e0       	ldi	r25, 0x05	; 5
    f3b0:	46 e4       	ldi	r20, 0x46	; 70
    f3b2:	0e 94 8c 78 	call	0xf118	; 0xf118 <_ZN10audioQueue5eventEhh>
}
    f3b6:	08 95       	ret

0000f3b8 <_Z10audioEventhj>:

void audioEvent( uint8_t e, uint16_t f )
    f3b8:	28 2f       	mov	r18, r24
    f3ba:	46 2f       	mov	r20, r22
{
  audio.event( e, f ) ;
    f3bc:	85 eb       	ldi	r24, 0xB5	; 181
    f3be:	95 e0       	ldi	r25, 0x05	; 5
    f3c0:	62 2f       	mov	r22, r18
    f3c2:	0e 94 8c 78 	call	0xf118	; 0xf118 <_ZN10audioQueue5eventEhh>
}
    f3c6:	08 95       	ret

0000f3c8 <_Z18audioVoiceDefeventhh>:

void audioVoiceDefevent( uint8_t e, uint8_t v)
    f3c8:	98 2f       	mov	r25, r24
{
	if ( g_eeGeneral.speakerMode & 2 )
    f3ca:	80 91 87 01 	lds	r24, 0x0187
    f3ce:	81 ff       	sbrs	r24, 1
    f3d0:	04 c0       	rjmp	.+8      	; 0xf3da <_Z18audioVoiceDefeventhh+0x12>
	{
		putVoiceQueue( v ) ;
    f3d2:	86 2f       	mov	r24, r22
    f3d4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z13putVoiceQueueh>
    f3d8:	08 95       	ret
	}
	else
	{
    audioDefevent( e ) ;
    f3da:	89 2f       	mov	r24, r25
    f3dc:	0e 94 d5 79 	call	0xf3aa	; 0xf3aa <_Z13audioDefeventh>
    f3e0:	08 95       	ret

0000f3e2 <_Z13voice_numericihh>:
}

#include <stdlib.h>

// Announce a value using voice
void voice_numeric( int16_t value, uint8_t num_decimals, uint8_t units_index )
    f3e2:	ff 92       	push	r15
    f3e4:	0f 93       	push	r16
    f3e6:	1f 93       	push	r17
    f3e8:	cf 93       	push	r28
    f3ea:	df 93       	push	r29
    f3ec:	ec 01       	movw	r28, r24
    f3ee:	16 2f       	mov	r17, r22
    f3f0:	f4 2e       	mov	r15, r20
{
	uint8_t decimals ;
	div_t qr ;
	uint8_t flag = 0 ;

	if ( units_index > 127 )
    f3f2:	47 ff       	sbrs	r20, 7
    f3f4:	03 c0       	rjmp	.+6      	; 0xf3fc <_Z13voice_numericihh+0x1a>
	{
		putVoiceQueue( units_index ) ;
    f3f6:	84 2f       	mov	r24, r20
    f3f8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z13putVoiceQueueh>
	}

	if ( value < 0 )
    f3fc:	d7 ff       	sbrs	r29, 7
    f3fe:	06 c0       	rjmp	.+12     	; 0xf40c <_Z13voice_numericihh+0x2a>
	{
		value = - value ;
    f400:	d0 95       	com	r29
    f402:	c1 95       	neg	r28
    f404:	df 4f       	sbci	r29, 0xFF	; 255
		putVoiceQueue( V_MINUS ) ;		
    f406:	8a e1       	ldi	r24, 0x1A	; 26
    f408:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z13putVoiceQueueh>
	}

	if ( num_decimals )
    f40c:	11 23       	and	r17, r17
    f40e:	79 f0       	breq	.+30     	; 0xf42e <_Z13voice_numericihh+0x4c>
	{
		qr = div( value, num_decimals == 2 ? 100 : 10 ) ;
    f410:	12 30       	cpi	r17, 0x02	; 2
    f412:	19 f0       	breq	.+6      	; 0xf41a <_Z13voice_numericihh+0x38>
    f414:	6a e0       	ldi	r22, 0x0A	; 10
    f416:	70 e0       	ldi	r23, 0x00	; 0
    f418:	02 c0       	rjmp	.+4      	; 0xf41e <_Z13voice_numericihh+0x3c>
    f41a:	64 e6       	ldi	r22, 0x64	; 100
    f41c:	70 e0       	ldi	r23, 0x00	; 0
    f41e:	ce 01       	movw	r24, r28
    f420:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
		decimals = qr.rem ;
    f424:	08 2f       	mov	r16, r24
    f426:	26 2f       	mov	r18, r22
    f428:	37 2f       	mov	r19, r23
    f42a:	c9 01       	movw	r24, r18
    f42c:	ec 01       	movw	r28, r24
		value = qr.quot ;
	}

	qr = div( value, 100 ) ;
    f42e:	ce 01       	movw	r24, r28
    f430:	64 e6       	ldi	r22, 0x64	; 100
    f432:	70 e0       	ldi	r23, 0x00	; 0
    f434:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    f438:	9b 01       	movw	r18, r22
    f43a:	ec 01       	movw	r28, r24
	if ( qr.quot )
    f43c:	61 15       	cp	r22, r1
    f43e:	71 05       	cpc	r23, r1
    f440:	99 f1       	breq	.+102    	; 0xf4a8 <_Z13voice_numericihh+0xc6>
	{
		// At least 100
		num_decimals = 0 ;		// Cancel decimals
		if ( qr.quot > 9 )		// Thousands
    f442:	6a 30       	cpi	r22, 0x0A	; 10
    f444:	71 05       	cpc	r23, r1
    f446:	14 f4       	brge	.+4      	; 0xf44c <_Z13voice_numericihh+0x6a>
    f448:	10 e0       	ldi	r17, 0x00	; 0
    f44a:	18 c0       	rjmp	.+48     	; 0xf47c <_Z13voice_numericihh+0x9a>
		{
			flag = 1 ;
			div_t xr ;

			xr = div( qr.quot, 10 ) ;
    f44c:	cb 01       	movw	r24, r22
    f44e:	6a e0       	ldi	r22, 0x0A	; 10
    f450:	70 e0       	ldi	r23, 0x00	; 0
    f452:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    f456:	8c 01       	movw	r16, r24
			if ( xr.quot < 21 )
    f458:	65 31       	cpi	r22, 0x15	; 21
    f45a:	71 05       	cpc	r23, r1
    f45c:	1c f4       	brge	.+6      	; 0xf464 <_Z13voice_numericihh+0x82>
			{
				putVoiceQueue( xr.quot + 110 ) ;
    f45e:	86 2f       	mov	r24, r22
    f460:	82 59       	subi	r24, 0x92	; 146
    f462:	05 c0       	rjmp	.+10     	; 0xf46e <_Z13voice_numericihh+0x8c>
			}
			else
			{
				putVoiceQueueUpper( xr.quot + 140 ) ;
    f464:	86 2f       	mov	r24, r22
    f466:	84 57       	subi	r24, 0x74	; 116
    f468:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_Z18putVoiceQueueUpperh>
				putVoiceQueue( V_THOUSAND ) ;
    f46c:	8e e6       	ldi	r24, 0x6E	; 110
    f46e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z13putVoiceQueueh>
			}
			qr.quot = xr.rem ;			
		}
		if ( qr.quot )
    f472:	01 15       	cp	r16, r1
    f474:	11 05       	cpc	r17, r1
    f476:	59 f0       	breq	.+22     	; 0xf48e <_Z13voice_numericihh+0xac>
    f478:	98 01       	movw	r18, r16
    f47a:	11 e0       	ldi	r17, 0x01	; 1
		{
			putVoiceQueue( qr.quot + 100 ) ;
    f47c:	82 2f       	mov	r24, r18
    f47e:	8c 59       	subi	r24, 0x9C	; 156
    f480:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z13putVoiceQueueh>
		}
		if ( flag == 0 )
    f484:	11 23       	and	r17, r17
    f486:	19 f4       	brne	.+6      	; 0xf48e <_Z13voice_numericihh+0xac>
		{
			if ( qr.rem )
    f488:	20 97       	sbiw	r28, 0x00	; 0
    f48a:	59 f1       	breq	.+86     	; 0xf4e2 <_Z13voice_numericihh+0x100>
    f48c:	09 c0       	rjmp	.+18     	; 0xf4a0 <_Z13voice_numericihh+0xbe>
				putVoiceQueueUpper( qr.rem + 140 ) ;
			}
		}
		else
		{
			if ( qr.rem )
    f48e:	20 97       	sbiw	r28, 0x00	; 0
    f490:	41 f1       	breq	.+80     	; 0xf4e2 <_Z13voice_numericihh+0x100>
			{
				qr.rem -= qr.rem % 10 ;
				putVoiceQueueUpper( qr.rem + 140 ) ;
    f492:	ce 01       	movw	r24, r28
    f494:	6a e0       	ldi	r22, 0x0A	; 10
    f496:	70 e0       	ldi	r23, 0x00	; 0
    f498:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    f49c:	c8 1b       	sub	r28, r24
    f49e:	d9 0b       	sbc	r29, r25
    f4a0:	9e 01       	movw	r18, r28
    f4a2:	24 57       	subi	r18, 0x74	; 116
    f4a4:	82 2f       	mov	r24, r18
    f4a6:	16 c0       	rjmp	.+44     	; 0xf4d4 <_Z13voice_numericihh+0xf2>
			}
		}
	}
	else
	{
		putVoiceQueueUpper( qr.rem + 140 ) ;
    f4a8:	9c 01       	movw	r18, r24
    f4aa:	24 57       	subi	r18, 0x74	; 116
    f4ac:	82 2f       	mov	r24, r18
    f4ae:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_Z18putVoiceQueueUpperh>
	}

	if ( num_decimals )
    f4b2:	11 23       	and	r17, r17
    f4b4:	b1 f0       	breq	.+44     	; 0xf4e2 <_Z13voice_numericihh+0x100>
	{
		if ( num_decimals == 2 )
    f4b6:	12 30       	cpi	r17, 0x02	; 2
    f4b8:	81 f4       	brne	.+32     	; 0xf4da <_Z13voice_numericihh+0xf8>
		{
			qr = div( decimals, 10 ) ;
    f4ba:	80 2f       	mov	r24, r16
    f4bc:	90 e0       	ldi	r25, 0x00	; 0
    f4be:	6a e0       	ldi	r22, 0x0A	; 10
    f4c0:	70 e0       	ldi	r23, 0x00	; 0
    f4c2:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    f4c6:	18 2f       	mov	r17, r24
			putVoiceQueue( qr.quot + 6 ) ;		// Point x
    f4c8:	86 2f       	mov	r24, r22
    f4ca:	8a 5f       	subi	r24, 0xFA	; 250
    f4cc:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z13putVoiceQueueh>
			putVoiceQueueUpper( qr.rem + 140 ) ;
    f4d0:	81 2f       	mov	r24, r17
    f4d2:	84 57       	subi	r24, 0x74	; 116
    f4d4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_Z18putVoiceQueueUpperh>
    f4d8:	04 c0       	rjmp	.+8      	; 0xf4e2 <_Z13voice_numericihh+0x100>
		}
		else
		{
			putVoiceQueue( decimals + 6 ) ;		// Point x
    f4da:	80 2f       	mov	r24, r16
    f4dc:	8a 5f       	subi	r24, 0xFA	; 250
    f4de:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z13putVoiceQueueh>
		}
	}
		 
	if ( units_index && ( units_index < 128 ) )
    f4e2:	1f 14       	cp	r1, r15
    f4e4:	1c f4       	brge	.+6      	; 0xf4ec <_Z13voice_numericihh+0x10a>
	{
		putVoiceQueue( units_index ) ;
    f4e6:	8f 2d       	mov	r24, r15
    f4e8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z13putVoiceQueueh>
	}
	asm("") ;
}
    f4ec:	df 91       	pop	r29
    f4ee:	cf 91       	pop	r28
    f4f0:	1f 91       	pop	r17
    f4f2:	0f 91       	pop	r16
    f4f4:	ff 90       	pop	r15
    f4f6:	08 95       	ret

0000f4f8 <_ZL5CS_HIv>:

static void  CS_HI()
{
	//We need to set the multimodule CSN even if we don't use it
	//for this protocol so that it doesn't interpret commands
	BitSet(CS_PORT, CS_PIN);
    f4f8:	af 9a       	sbi	0x15, 7	; 21
    f4fa:	80 e0       	ldi	r24, 0x00	; 0
    f4fc:	90 e0       	ldi	r25, 0x00	; 0

	for(int i = 0; i < 20; i++)
		_NOP();
    f4fe:	00 00       	nop
{
	//We need to set the multimodule CSN even if we don't use it
	//for this protocol so that it doesn't interpret commands
	BitSet(CS_PORT, CS_PIN);

	for(int i = 0; i < 20; i++)
    f500:	01 96       	adiw	r24, 0x01	; 1
    f502:	84 31       	cpi	r24, 0x14	; 20
    f504:	91 05       	cpc	r25, r1
    f506:	d9 f7       	brne	.-10     	; 0xf4fe <_ZL5CS_HIv+0x6>
		_NOP();

	return;
}
    f508:	08 95       	ret

0000f50a <_ZL5CS_LOv>:

static void CS_LO()
{
	//We need to set the multimodule CSN even if we don't use it
	//for this protocol so that it doesn't interpret commands
	BitReset(CS_PORT, CS_PIN);
    f50a:	af 98       	cbi	0x15, 7	; 21
    f50c:	80 e0       	ldi	r24, 0x00	; 0
    f50e:	90 e0       	ldi	r25, 0x00	; 0

	for(int i = 0; i < 20; i++)
		_NOP();
    f510:	00 00       	nop
{
	//We need to set the multimodule CSN even if we don't use it
	//for this protocol so that it doesn't interpret commands
	BitReset(CS_PORT, CS_PIN);

	for(int i = 0; i < 20; i++)
    f512:	01 96       	adiw	r24, 0x01	; 1
    f514:	84 31       	cpi	r24, 0x14	; 20
    f516:	91 05       	cpc	r25, r1
    f518:	d9 f7       	brne	.-10     	; 0xf510 <_ZL5CS_LOv+0x6>
		_NOP();

	return;
}
    f51a:	08 95       	ret

0000f51c <_Z19NRF24L01_Initializev>:

void NRF24L01_Initialize()
{
    rf_setup = 0x0F;
    f51c:	8f e0       	ldi	r24, 0x0F	; 15
    f51e:	80 93 45 0e 	sts	0x0E45, r24
}    
    f522:	08 95       	ret

0000f524 <_ZL6Strobeh>:
    }
    CS_HI();
    return res;
}

static u8 Strobe(u8 state)
    f524:	1f 93       	push	r17
    f526:	18 2f       	mov	r17, r24
{
    CS_LO();
    f528:	0e 94 85 7a 	call	0xf50a	; 0xf50a <_ZL5CS_LOv>
    u8 res = SPI_Send(state);
    f52c:	81 2f       	mov	r24, r17
    f52e:	90 e0       	ldi	r25, 0x00	; 0
    f530:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f534:	18 2f       	mov	r17, r24
    CS_HI();
    f536:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <_ZL5CS_HIv>
    return res;
}
    f53a:	81 2f       	mov	r24, r17
    f53c:	1f 91       	pop	r17
    f53e:	08 95       	ret

0000f540 <_Z16NRF24L01_FlushRxv>:
    return Strobe(FLUSH_TX);
}

u8 NRF24L01_FlushRx()
{
    return Strobe(FLUSH_RX);
    f540:	82 ee       	ldi	r24, 0xE2	; 226
    f542:	0e 94 92 7a 	call	0xf524	; 0xf524 <_ZL6Strobeh>
}
    f546:	08 95       	ret

0000f548 <_Z16NRF24L01_FlushTxv>:
    return res;
}

u8 NRF24L01_FlushTx()
{
    return Strobe(FLUSH_TX);
    f548:	81 ee       	ldi	r24, 0xE1	; 225
    f54a:	0e 94 92 7a 	call	0xf524	; 0xf524 <_ZL6Strobeh>
}
    f54e:	08 95       	ret

0000f550 <_Z17NRF24L01_Activateh>:
u8 NRF24L01_FlushRx()
{
    return Strobe(FLUSH_RX);
}

u8 NRF24L01_Activate(u8 code)
    f550:	0f 93       	push	r16
    f552:	1f 93       	push	r17
    f554:	18 2f       	mov	r17, r24
{
    CS_LO();
    f556:	0e 94 85 7a 	call	0xf50a	; 0xf50a <_ZL5CS_LOv>
    u8 res = SPI_Send(ACTIVATE);
    f55a:	80 e5       	ldi	r24, 0x50	; 80
    f55c:	90 e0       	ldi	r25, 0x00	; 0
    f55e:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f562:	08 2f       	mov	r16, r24
    SPI_Send(code);
    f564:	81 2f       	mov	r24, r17
    f566:	90 e0       	ldi	r25, 0x00	; 0
    f568:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    CS_HI();
    f56c:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <_ZL5CS_HIv>
    return res;
}
    f570:	80 2f       	mov	r24, r16
    f572:	1f 91       	pop	r17
    f574:	0f 91       	pop	r16
    f576:	08 95       	ret

0000f578 <_Z20NRF24L01_ReadPayloadPhh>:
    }
    CS_HI();
    return res;
}

u8 NRF24L01_ReadPayload(u8 *data, u8 length)
    f578:	ef 92       	push	r14
    f57a:	ff 92       	push	r15
    f57c:	0f 93       	push	r16
    f57e:	1f 93       	push	r17
    f580:	cf 93       	push	r28
    f582:	df 93       	push	r29
    f584:	18 2f       	mov	r17, r24
    f586:	09 2f       	mov	r16, r25
    f588:	e6 2e       	mov	r14, r22
{
    CS_LO();
    f58a:	0e 94 85 7a 	call	0xf50a	; 0xf50a <_ZL5CS_LOv>
    u8 res = SPI_Send(R_RX_PAYLOAD);
    f58e:	81 e6       	ldi	r24, 0x61	; 97
    f590:	90 e0       	ldi	r25, 0x00	; 0
    f592:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f596:	f8 2e       	mov	r15, r24
    f598:	21 2f       	mov	r18, r17
    f59a:	30 2f       	mov	r19, r16
    f59c:	c9 01       	movw	r24, r18
    f59e:	ec 01       	movw	r28, r24
    f5a0:	10 e0       	ldi	r17, 0x00	; 0
    f5a2:	06 c0       	rjmp	.+12     	; 0xf5b0 <_Z20NRF24L01_ReadPayloadPhh+0x38>
    for(u8 i = 0; i < length; i++)
    {
        data[i] = SPI_Send(0xFF);
    f5a4:	8f ef       	ldi	r24, 0xFF	; 255
    f5a6:	90 e0       	ldi	r25, 0x00	; 0
    f5a8:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f5ac:	89 93       	st	Y+, r24

u8 NRF24L01_ReadPayload(u8 *data, u8 length)
{
    CS_LO();
    u8 res = SPI_Send(R_RX_PAYLOAD);
    for(u8 i = 0; i < length; i++)
    f5ae:	1f 5f       	subi	r17, 0xFF	; 255
    f5b0:	1e 15       	cp	r17, r14
    f5b2:	c0 f3       	brcs	.-16     	; 0xf5a4 <_Z20NRF24L01_ReadPayloadPhh+0x2c>
    {
        data[i] = SPI_Send(0xFF);
    }
    CS_HI();
    f5b4:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <_ZL5CS_HIv>
    return res;
}
    f5b8:	8f 2d       	mov	r24, r15
    f5ba:	df 91       	pop	r29
    f5bc:	cf 91       	pop	r28
    f5be:	1f 91       	pop	r17
    f5c0:	0f 91       	pop	r16
    f5c2:	ff 90       	pop	r15
    f5c4:	ef 90       	pop	r14
    f5c6:	08 95       	ret

0000f5c8 <_Z26NRF24L01_ReadRegisterMultihPhh>:
    u8 data = SPI_Send(0xFF);
    CS_HI();
    return data;
}

u8 NRF24L01_ReadRegisterMulti(u8 reg, u8 data[], u8 length)
    f5c8:	df 92       	push	r13
    f5ca:	ef 92       	push	r14
    f5cc:	ff 92       	push	r15
    f5ce:	0f 93       	push	r16
    f5d0:	1f 93       	push	r17
    f5d2:	cf 93       	push	r28
    f5d4:	df 93       	push	r29
    f5d6:	08 2f       	mov	r16, r24
    f5d8:	f6 2e       	mov	r15, r22
    f5da:	e7 2e       	mov	r14, r23
    f5dc:	d4 2e       	mov	r13, r20
{
    CS_LO();
    f5de:	0e 94 85 7a 	call	0xf50a	; 0xf50a <_ZL5CS_LOv>
    u8 res = SPI_Send(R_REGISTER | (REGISTER_MASK & reg));
    f5e2:	10 e0       	ldi	r17, 0x00	; 0
    f5e4:	c8 01       	movw	r24, r16
    f5e6:	8f 71       	andi	r24, 0x1F	; 31
    f5e8:	90 70       	andi	r25, 0x00	; 0
    f5ea:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f5ee:	18 2f       	mov	r17, r24
    f5f0:	2f 2d       	mov	r18, r15
    f5f2:	3e 2d       	mov	r19, r14
    f5f4:	c9 01       	movw	r24, r18
    f5f6:	ec 01       	movw	r28, r24
    f5f8:	00 e0       	ldi	r16, 0x00	; 0
    f5fa:	06 c0       	rjmp	.+12     	; 0xf608 <_Z26NRF24L01_ReadRegisterMultihPhh+0x40>
    for(u8 i = 0; i < length; i++)
    {
        data[i] = SPI_Send(0xFF);
    f5fc:	8f ef       	ldi	r24, 0xFF	; 255
    f5fe:	90 e0       	ldi	r25, 0x00	; 0
    f600:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f604:	89 93       	st	Y+, r24

u8 NRF24L01_ReadRegisterMulti(u8 reg, u8 data[], u8 length)
{
    CS_LO();
    u8 res = SPI_Send(R_REGISTER | (REGISTER_MASK & reg));
    for(u8 i = 0; i < length; i++)
    f606:	0f 5f       	subi	r16, 0xFF	; 255
    f608:	0d 15       	cp	r16, r13
    f60a:	c0 f3       	brcs	.-16     	; 0xf5fc <_Z26NRF24L01_ReadRegisterMultihPhh+0x34>
    {
        data[i] = SPI_Send(0xFF);
    }
    CS_HI();
    f60c:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <_ZL5CS_HIv>
    return res;
}
    f610:	81 2f       	mov	r24, r17
    f612:	df 91       	pop	r29
    f614:	cf 91       	pop	r28
    f616:	1f 91       	pop	r17
    f618:	0f 91       	pop	r16
    f61a:	ff 90       	pop	r15
    f61c:	ef 90       	pop	r14
    f61e:	df 90       	pop	r13
    f620:	08 95       	ret

0000f622 <_Z16NRF24L01_ReadRegh>:
    }
    CS_HI();
    return res;
}

u8 NRF24L01_ReadReg(u8 reg)
    f622:	0f 93       	push	r16
    f624:	1f 93       	push	r17
    f626:	08 2f       	mov	r16, r24
{
    CS_LO();
    f628:	0e 94 85 7a 	call	0xf50a	; 0xf50a <_ZL5CS_LOv>
    SPI_Send(R_REGISTER | (REGISTER_MASK & reg));
    f62c:	10 e0       	ldi	r17, 0x00	; 0
    f62e:	c8 01       	movw	r24, r16
    f630:	8f 71       	andi	r24, 0x1F	; 31
    f632:	90 70       	andi	r25, 0x00	; 0
    f634:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    u8 data = SPI_Send(0xFF);
    f638:	8f ef       	ldi	r24, 0xFF	; 255
    f63a:	90 e0       	ldi	r25, 0x00	; 0
    f63c:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f640:	18 2f       	mov	r17, r24
    CS_HI();
    f642:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <_ZL5CS_HIv>
    return data;
}
    f646:	81 2f       	mov	r24, r17
    f648:	1f 91       	pop	r17
    f64a:	0f 91       	pop	r16
    f64c:	08 95       	ret

0000f64e <_Z21NRF24L01_WritePayloadPhh>:
    }
    CS_HI();
    return res;
}

u8 NRF24L01_WritePayload(u8 *data, u8 length)
    f64e:	ef 92       	push	r14
    f650:	ff 92       	push	r15
    f652:	0f 93       	push	r16
    f654:	1f 93       	push	r17
    f656:	cf 93       	push	r28
    f658:	df 93       	push	r29
    f65a:	18 2f       	mov	r17, r24
    f65c:	09 2f       	mov	r16, r25
    f65e:	e6 2e       	mov	r14, r22
{
    CS_LO();
    f660:	0e 94 85 7a 	call	0xf50a	; 0xf50a <_ZL5CS_LOv>
    u8 res = SPI_Send(W_TX_PAYLOAD);
    f664:	80 ea       	ldi	r24, 0xA0	; 160
    f666:	90 e0       	ldi	r25, 0x00	; 0
    f668:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f66c:	f8 2e       	mov	r15, r24
    f66e:	21 2f       	mov	r18, r17
    f670:	30 2f       	mov	r19, r16
    f672:	c9 01       	movw	r24, r18
    f674:	ec 01       	movw	r28, r24
    f676:	10 e0       	ldi	r17, 0x00	; 0
    f678:	05 c0       	rjmp	.+10     	; 0xf684 <_Z21NRF24L01_WritePayloadPhh+0x36>
    for (u8 i = 0; i < length; i++)
    {
        SPI_Send(data[i]);
    f67a:	89 91       	ld	r24, Y+
    f67c:	90 e0       	ldi	r25, 0x00	; 0
    f67e:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>

u8 NRF24L01_WritePayload(u8 *data, u8 length)
{
    CS_LO();
    u8 res = SPI_Send(W_TX_PAYLOAD);
    for (u8 i = 0; i < length; i++)
    f682:	1f 5f       	subi	r17, 0xFF	; 255
    f684:	1e 15       	cp	r17, r14
    f686:	c8 f3       	brcs	.-14     	; 0xf67a <_Z21NRF24L01_WritePayloadPhh+0x2c>
    {
        SPI_Send(data[i]);
    }
    CS_HI();
    f688:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <_ZL5CS_HIv>
    return res;
}
    f68c:	8f 2d       	mov	r24, r15
    f68e:	df 91       	pop	r29
    f690:	cf 91       	pop	r28
    f692:	1f 91       	pop	r17
    f694:	0f 91       	pop	r16
    f696:	ff 90       	pop	r15
    f698:	ef 90       	pop	r14
    f69a:	08 95       	ret

0000f69c <_Z27NRF24L01_WriteRegisterMultihPKhh>:
    SPI_Send(data);
    CS_HI();
    return res;
}

u8 NRF24L01_WriteRegisterMulti(u8 reg, const u8 data[], u8 length)
    f69c:	df 92       	push	r13
    f69e:	ef 92       	push	r14
    f6a0:	ff 92       	push	r15
    f6a2:	0f 93       	push	r16
    f6a4:	1f 93       	push	r17
    f6a6:	cf 93       	push	r28
    f6a8:	df 93       	push	r29
    f6aa:	08 2f       	mov	r16, r24
    f6ac:	f6 2e       	mov	r15, r22
    f6ae:	e7 2e       	mov	r14, r23
    f6b0:	d4 2e       	mov	r13, r20
{
    CS_LO();
    f6b2:	0e 94 85 7a 	call	0xf50a	; 0xf50a <_ZL5CS_LOv>
    u8 res = SPI_Send(W_REGISTER | ( REGISTER_MASK & reg));
    f6b6:	10 e0       	ldi	r17, 0x00	; 0
    f6b8:	0f 71       	andi	r16, 0x1F	; 31
    f6ba:	10 70       	andi	r17, 0x00	; 0
    f6bc:	c8 01       	movw	r24, r16
    f6be:	80 62       	ori	r24, 0x20	; 32
    f6c0:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f6c4:	18 2f       	mov	r17, r24
    f6c6:	2f 2d       	mov	r18, r15
    f6c8:	3e 2d       	mov	r19, r14
    f6ca:	c9 01       	movw	r24, r18
    f6cc:	ec 01       	movw	r28, r24
    f6ce:	00 e0       	ldi	r16, 0x00	; 0
    f6d0:	05 c0       	rjmp	.+10     	; 0xf6dc <_Z27NRF24L01_WriteRegisterMultihPKhh+0x40>
    for (u8 i = 0; i < length; i++)
    {
        SPI_Send(data[i]);
    f6d2:	89 91       	ld	r24, Y+
    f6d4:	90 e0       	ldi	r25, 0x00	; 0
    f6d6:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>

u8 NRF24L01_WriteRegisterMulti(u8 reg, const u8 data[], u8 length)
{
    CS_LO();
    u8 res = SPI_Send(W_REGISTER | ( REGISTER_MASK & reg));
    for (u8 i = 0; i < length; i++)
    f6da:	0f 5f       	subi	r16, 0xFF	; 255
    f6dc:	0d 15       	cp	r16, r13
    f6de:	c8 f3       	brcs	.-14     	; 0xf6d2 <_Z27NRF24L01_WriteRegisterMultihPKhh+0x36>
    {
        SPI_Send(data[i]);
    }
    CS_HI();
    f6e0:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <_ZL5CS_HIv>
    return res;
}
    f6e4:	81 2f       	mov	r24, r17
    f6e6:	df 91       	pop	r29
    f6e8:	cf 91       	pop	r28
    f6ea:	1f 91       	pop	r17
    f6ec:	0f 91       	pop	r16
    f6ee:	ff 90       	pop	r15
    f6f0:	ef 90       	pop	r14
    f6f2:	df 90       	pop	r13
    f6f4:	08 95       	ret

0000f6f6 <_Z17NRF24L01_WriteReghh>:
void NRF24L01_Initialize()
{
    rf_setup = 0x0F;
}    

u8 NRF24L01_WriteReg(u8 reg, u8 data)
    f6f6:	ff 92       	push	r15
    f6f8:	0f 93       	push	r16
    f6fa:	1f 93       	push	r17
    f6fc:	08 2f       	mov	r16, r24
    f6fe:	f6 2e       	mov	r15, r22
{
    CS_LO();
    f700:	0e 94 85 7a 	call	0xf50a	; 0xf50a <_ZL5CS_LOv>
    u8 res = SPI_Send(W_REGISTER | (REGISTER_MASK & reg));
    f704:	10 e0       	ldi	r17, 0x00	; 0
    f706:	0f 71       	andi	r16, 0x1F	; 31
    f708:	10 70       	andi	r17, 0x00	; 0
    f70a:	c8 01       	movw	r24, r16
    f70c:	80 62       	ori	r24, 0x20	; 32
    f70e:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    f712:	18 2f       	mov	r17, r24
    SPI_Send(data);
    f714:	8f 2d       	mov	r24, r15
    f716:	90 e0       	ldi	r25, 0x00	; 0
    f718:	0e 94 3e 7e 	call	0xfc7c	; 0xfc7c <_Z8SPI_Sendj>
    CS_HI();
    f71c:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <_ZL5CS_HIv>
    return res;
}
    f720:	81 2f       	mov	r24, r17
    f722:	1f 91       	pop	r17
    f724:	0f 91       	pop	r16
    f726:	ff 90       	pop	r15
    f728:	08 95       	ret

0000f72a <_Z20NRF24L01_SetTxRxMode10TXRX_State>:
	BitSet(CE_PORT, CE_PIN);
}

void NRF24L01_SetTxRxMode(enum TXRX_State mode)
{
    if(mode == TX_EN) {
    f72a:	81 30       	cpi	r24, 0x01	; 1
    f72c:	91 05       	cpc	r25, r1
    f72e:	41 f4       	brne	.+16     	; 0xf740 <_Z20NRF24L01_SetTxRxMode10TXRX_State+0x16>
    rf_setup = (rf_setup & 0xF9) | ((nrf_power & 0x03) << 1);
    return NRF24L01_WriteReg(NRF24L01_06_RF_SETUP, rf_setup);
}
static void CE_lo()
{
	BitReset(CE_PORT, CE_PIN);
    f730:	ae 98       	cbi	0x15, 6	; 21
{
    if(mode == TX_EN) {
        CE_lo();
        NRF24L01_WriteReg(NRF24L01_07_STATUS, (1 << NRF24L01_07_RX_DR)    //reset the flag(s)
                                            | (1 << NRF24L01_07_TX_DS)
                                            | (1 << NRF24L01_07_MAX_RT));
    f732:	87 e0       	ldi	r24, 0x07	; 7
    f734:	60 e7       	ldi	r22, 0x70	; 112
    f736:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
        NRF24L01_WriteReg(NRF24L01_00_CONFIG, (1 << NRF24L01_00_EN_CRC)   // switch to TX mode
                                            | (1 << NRF24L01_00_CRCO)
                                            | (1 << NRF24L01_00_PWR_UP));
    f73a:	80 e0       	ldi	r24, 0x00	; 0
    f73c:	6e e0       	ldi	r22, 0x0E	; 14
    f73e:	11 c0       	rjmp	.+34     	; 0xf762 <_Z20NRF24L01_SetTxRxMode10TXRX_State+0x38>
        usleep(130);
        CE_hi();
    } else if (mode == RX_EN) {
    f740:	02 97       	sbiw	r24, 0x02	; 2
    f742:	b9 f4       	brne	.+46     	; 0xf772 <_Z20NRF24L01_SetTxRxMode10TXRX_State+0x48>
    rf_setup = (rf_setup & 0xF9) | ((nrf_power & 0x03) << 1);
    return NRF24L01_WriteReg(NRF24L01_06_RF_SETUP, rf_setup);
}
static void CE_lo()
{
	BitReset(CE_PORT, CE_PIN);
    f744:	ae 98       	cbi	0x15, 6	; 21
                                            | (1 << NRF24L01_00_PWR_UP));
        usleep(130);
        CE_hi();
    } else if (mode == RX_EN) {
        CE_lo();
        NRF24L01_WriteReg(NRF24L01_07_STATUS, 0x70);        // reset the flag(s)
    f746:	87 e0       	ldi	r24, 0x07	; 7
    f748:	60 e7       	ldi	r22, 0x70	; 112
    f74a:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
        NRF24L01_WriteReg(NRF24L01_00_CONFIG, 0x0F);        // switch to RX mode
    f74e:	80 e0       	ldi	r24, 0x00	; 0
    f750:	6f e0       	ldi	r22, 0x0F	; 15
    f752:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
        NRF24L01_WriteReg(NRF24L01_07_STATUS, (1 << NRF24L01_07_RX_DR)    //reset the flag(s)
                                            | (1 << NRF24L01_07_TX_DS)
                                            | (1 << NRF24L01_07_MAX_RT));
    f756:	87 e0       	ldi	r24, 0x07	; 7
    f758:	60 e7       	ldi	r22, 0x70	; 112
    f75a:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
        NRF24L01_WriteReg(NRF24L01_00_CONFIG, (1 << NRF24L01_00_EN_CRC)   // switch to RX mode
                                            | (1 << NRF24L01_00_CRCO)
                                            | (1 << NRF24L01_00_PWR_UP)
                                            | (1 << NRF24L01_00_PRIM_RX));
    f75e:	80 e0       	ldi	r24, 0x00	; 0
    f760:	6f e0       	ldi	r22, 0x0F	; 15
    f762:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    f766:	88 e0       	ldi	r24, 0x08	; 8
    f768:	92 e0       	ldi	r25, 0x02	; 2
    f76a:	01 97       	sbiw	r24, 0x01	; 1
    f76c:	f1 f7       	brne	.-4      	; 0xf76a <_Z20NRF24L01_SetTxRxMode10TXRX_State+0x40>
	BitReset(CE_PORT, CE_PIN);
}

static void CE_hi()
{
	BitSet(CE_PORT, CE_PIN);
    f76e:	ae 9a       	sbi	0x15, 6	; 21
    f770:	08 95       	ret
                                            | (1 << NRF24L01_00_PWR_UP)
                                            | (1 << NRF24L01_00_PRIM_RX));
        usleep(130);
        CE_hi();
    } else {
        NRF24L01_WriteReg(NRF24L01_00_CONFIG, (1 << NRF24L01_00_EN_CRC)); //PowerDown
    f772:	80 e0       	ldi	r24, 0x00	; 0
    f774:	68 e0       	ldi	r22, 0x08	; 8
    f776:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    rf_setup = (rf_setup & 0xF9) | ((nrf_power & 0x03) << 1);
    return NRF24L01_WriteReg(NRF24L01_06_RF_SETUP, rf_setup);
}
static void CE_lo()
{
	BitReset(CE_PORT, CE_PIN);
    f77a:	ae 98       	cbi	0x15, 6	; 21
    f77c:	08 95       	ret

0000f77e <_Z14NRF24L01_Resetv>:
        NRF24L01_WriteReg(NRF24L01_00_CONFIG, (1 << NRF24L01_00_EN_CRC)); //PowerDown
        CE_lo();
    }
}

int NRF24L01_Reset()
    f77e:	0f 93       	push	r16
    f780:	1f 93       	push	r17
{
    NRF24L01_FlushTx();
    f782:	0e 94 a4 7a 	call	0xf548	; 0xf548 <_Z16NRF24L01_FlushTxv>
    NRF24L01_FlushRx();
    f786:	0e 94 a0 7a 	call	0xf540	; 0xf540 <_Z16NRF24L01_FlushRxv>
    u8 status1 = Strobe(NOP);
    f78a:	8f ef       	ldi	r24, 0xFF	; 255
    f78c:	0e 94 92 7a 	call	0xf524	; 0xf524 <_ZL6Strobeh>
    f790:	08 2f       	mov	r16, r24
    u8 status2 = NRF24L01_ReadReg(0x07);
    f792:	87 e0       	ldi	r24, 0x07	; 7
    f794:	0e 94 11 7b 	call	0xf622	; 0xf622 <_Z16NRF24L01_ReadRegh>
    f798:	18 2f       	mov	r17, r24
    NRF24L01_SetTxRxMode(TXRX_OFF);
    f79a:	80 e0       	ldi	r24, 0x00	; 0
    f79c:	90 e0       	ldi	r25, 0x00	; 0
    f79e:	0e 94 95 7b 	call	0xf72a	; 0xf72a <_Z20NRF24L01_SetTxRxMode10TXRX_State>
    return (status1 == status2 && (status1 & 0x0f) == 0x0e);
    f7a2:	01 17       	cp	r16, r17
    f7a4:	11 f0       	breq	.+4      	; 0xf7aa <_Z14NRF24L01_Resetv+0x2c>
    f7a6:	80 e0       	ldi	r24, 0x00	; 0
    f7a8:	05 c0       	rjmp	.+10     	; 0xf7b4 <_Z14NRF24L01_Resetv+0x36>
    f7aa:	80 e0       	ldi	r24, 0x00	; 0
    f7ac:	0f 70       	andi	r16, 0x0F	; 15
    f7ae:	0e 30       	cpi	r16, 0x0E	; 14
    f7b0:	09 f4       	brne	.+2      	; 0xf7b4 <_Z14NRF24L01_Resetv+0x36>
    f7b2:	81 e0       	ldi	r24, 0x01	; 1
}
    f7b4:	90 e0       	ldi	r25, 0x00	; 0
    f7b6:	1f 91       	pop	r17
    f7b8:	0f 91       	pop	r16
    f7ba:	08 95       	ret

0000f7bc <_Z17NRF24L01_SetPowerh>:
*/

u8 NRF24L01_SetPower(u8 power)
{
    u8 nrf_power = 0;
    switch(power) {
    f7bc:	85 30       	cpi	r24, 0x05	; 5
    f7be:	61 f0       	breq	.+24     	; 0xf7d8 <_Z17NRF24L01_SetPowerh+0x1c>
    f7c0:	86 30       	cpi	r24, 0x06	; 6
    f7c2:	18 f4       	brcc	.+6      	; 0xf7ca <_Z17NRF24L01_SetPowerh+0xe>
    f7c4:	83 30       	cpi	r24, 0x03	; 3
    f7c6:	30 f0       	brcs	.+12     	; 0xf7d4 <_Z17NRF24L01_SetPowerh+0x18>
    f7c8:	03 c0       	rjmp	.+6      	; 0xf7d0 <_Z17NRF24L01_SetPowerh+0x14>
    f7ca:	88 30       	cpi	r24, 0x08	; 8
    f7cc:	18 f4       	brcc	.+6      	; 0xf7d4 <_Z17NRF24L01_SetPowerh+0x18>
    f7ce:	06 c0       	rjmp	.+12     	; 0xf7dc <_Z17NRF24L01_SetPowerh+0x20>
    f7d0:	61 e0       	ldi	r22, 0x01	; 1
    f7d2:	05 c0       	rjmp	.+10     	; 0xf7de <_Z17NRF24L01_SetPowerh+0x22>
    f7d4:	60 e0       	ldi	r22, 0x00	; 0
    f7d6:	03 c0       	rjmp	.+6      	; 0xf7de <_Z17NRF24L01_SetPowerh+0x22>
    f7d8:	62 e0       	ldi	r22, 0x02	; 2
    f7da:	01 c0       	rjmp	.+2      	; 0xf7de <_Z17NRF24L01_SetPowerh+0x22>
        case TXPOWER_100uW: nrf_power = 0; break;
        case TXPOWER_300uW: nrf_power = 0; break;
        case TXPOWER_1mW:   nrf_power = 0; break;
        case TXPOWER_3mW:   nrf_power = 1; break;
        case TXPOWER_10mW:  nrf_power = 1; break;
        case TXPOWER_30mW:  nrf_power = 2; break;
    f7dc:	63 e0       	ldi	r22, 0x03	; 3
        case TXPOWER_100mW: nrf_power = 3; break;
        case TXPOWER_150mW: nrf_power = 3; break;
        default:            nrf_power = 0; break;
    };
    // Power is in range 0..3 for nRF24L01
    rf_setup = (rf_setup & 0xF9) | ((nrf_power & 0x03) << 1);
    f7de:	66 0f       	add	r22, r22
    f7e0:	80 91 45 0e 	lds	r24, 0x0E45
    f7e4:	89 7f       	andi	r24, 0xF9	; 249
    f7e6:	68 2b       	or	r22, r24
    f7e8:	60 93 45 0e 	sts	0x0E45, r22
    return NRF24L01_WriteReg(NRF24L01_06_RF_SETUP, rf_setup);
    f7ec:	86 e0       	ldi	r24, 0x06	; 6
    f7ee:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
}
    f7f2:	08 95       	ret

0000f7f4 <_Z19NRF24L01_SetBitrateh>:
    // for nRF24L01+. There is no way to programmatically tell it from
    // older version, nRF24L01, but the older is practically phased out
    // by Nordic, so we assume that we deal with with modern version.

    // Bit 0 goes to RF_DR_HIGH, bit 1 - to RF_DR_LOW
    rf_setup = (rf_setup & 0xD7) | ((bitrate & 0x02) << 4) | ((bitrate & 0x01) << 3);
    f7f4:	90 e0       	ldi	r25, 0x00	; 0
    f7f6:	bc 01       	movw	r22, r24
    f7f8:	62 70       	andi	r22, 0x02	; 2
    f7fa:	70 70       	andi	r23, 0x00	; 0
    f7fc:	34 e0       	ldi	r19, 0x04	; 4
    f7fe:	66 0f       	add	r22, r22
    f800:	77 1f       	adc	r23, r23
    f802:	3a 95       	dec	r19
    f804:	e1 f7       	brne	.-8      	; 0xf7fe <_Z19NRF24L01_SetBitrateh+0xa>
    f806:	81 70       	andi	r24, 0x01	; 1
    f808:	90 70       	andi	r25, 0x00	; 0
    f80a:	23 e0       	ldi	r18, 0x03	; 3
    f80c:	88 0f       	add	r24, r24
    f80e:	99 1f       	adc	r25, r25
    f810:	2a 95       	dec	r18
    f812:	e1 f7       	brne	.-8      	; 0xf80c <_Z19NRF24L01_SetBitrateh+0x18>
    f814:	68 2b       	or	r22, r24
    f816:	80 91 45 0e 	lds	r24, 0x0E45
    f81a:	87 7d       	andi	r24, 0xD7	; 215
    f81c:	68 2b       	or	r22, r24
    f81e:	60 93 45 0e 	sts	0x0E45, r22
    return NRF24L01_WriteReg(NRF24L01_06_RF_SETUP, rf_setup);
    f822:	86 e0       	ldi	r24, 0x06	; 6
    f824:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
}
    f828:	08 95       	ret

0000f82a <_ZL10packet_ackv>:
    PKT_TIMEOUT
};

static u8 packet_ack()
{
    switch (NRF24L01_ReadReg(NRF24L01_07_STATUS) & (BV(NRF24L01_07_TX_DS) | BV(NRF24L01_07_MAX_RT))) {
    f82a:	87 e0       	ldi	r24, 0x07	; 7
    f82c:	0e 94 11 7b 	call	0xf622	; 0xf622 <_Z16NRF24L01_ReadRegh>
    f830:	90 e0       	ldi	r25, 0x00	; 0
    f832:	80 73       	andi	r24, 0x30	; 48
    f834:	90 70       	andi	r25, 0x00	; 0
    f836:	80 31       	cpi	r24, 0x10	; 16
    f838:	91 05       	cpc	r25, r1
    f83a:	19 f0       	breq	.+6      	; 0xf842 <_ZL10packet_ackv+0x18>
    f83c:	80 97       	sbiw	r24, 0x20	; 32
    f83e:	29 f4       	brne	.+10     	; 0xf84a <_ZL10packet_ackv+0x20>
    f840:	02 c0       	rjmp	.+4      	; 0xf846 <_ZL10packet_ackv+0x1c>
    f842:	82 e0       	ldi	r24, 0x02	; 2
    f844:	08 95       	ret
    f846:	81 e0       	ldi	r24, 0x01	; 1
    f848:	08 95       	ret
    f84a:	80 e0       	ldi	r24, 0x00	; 0
        return PKT_ACKED;
    case BV(NRF24L01_07_MAX_RT):
        return PKT_TIMEOUT;
    }
    return PKT_PENDING;
}
    f84c:	08 95       	ret

0000f84e <_ZL11send_packeth>:
#define RF_CHANNEL_SHIFT 2

static void send_packet(u8 bind)
{
    static u8 rf_ch;
    if (bind) {
    f84e:	88 23       	and	r24, r24
    f850:	81 f1       	breq	.+96     	; 0xf8b2 <_ZL11send_packeth+0x64>
        rf_ch = 83;
    f852:	83 e5       	ldi	r24, 0x53	; 83
    f854:	80 93 65 0e 	sts	0x0E65, r24
        packet[0]  = 'K';
    f858:	8b e4       	ldi	r24, 0x4B	; 75
    f85a:	80 93 4b 0e 	sts	0x0E4B, r24
        packet[1]  = 'N';
    f85e:	8e e4       	ldi	r24, 0x4E	; 78
    f860:	80 93 4c 0e 	sts	0x0E4C, r24
        packet[2]  = 'D';
    f864:	84 e4       	ldi	r24, 0x44	; 68
    f866:	80 93 4d 0e 	sts	0x0E4D, r24
        packet[3]  = 'Z';
    f86a:	8a e5       	ldi	r24, 0x5A	; 90
    f86c:	80 93 4e 0e 	sts	0x0E4E, r24
        packet[4]  = tx_id[0];
    f870:	10 92 4f 0e 	sts	0x0E4F, r1
        packet[5]  = tx_id[1];
    f874:	87 e0       	ldi	r24, 0x07	; 7
    f876:	80 93 50 0e 	sts	0x0E50, r24
        packet[6]  = tx_id[2];
    f87a:	85 e0       	ldi	r24, 0x05	; 5
    f87c:	80 93 51 0e 	sts	0x0E51, r24
        packet[7]  = tx_id[3];
    f880:	84 e0       	ldi	r24, 0x04	; 4
    f882:	80 93 52 0e 	sts	0x0E52, r24
        packet[8]  = hopping_frequency[0];
    f886:	88 e0       	ldi	r24, 0x08	; 8
    f888:	80 93 53 0e 	sts	0x0E53, r24
        packet[9]  = hopping_frequency[1];
    f88c:	88 e1       	ldi	r24, 0x18	; 24
    f88e:	80 93 54 0e 	sts	0x0E54, r24
        packet[10] = hopping_frequency[2];
    f892:	8d e2       	ldi	r24, 0x2D	; 45
    f894:	80 93 55 0e 	sts	0x0E55, r24
        packet[11] = hopping_frequency[3];
    f898:	81 e4       	ldi	r24, 0x41	; 65
    f89a:	80 93 56 0e 	sts	0x0E56, r24
        packet[12] = 0x00;
    f89e:	10 92 57 0e 	sts	0x0E57, r1
        packet[13] = 0x00;
    f8a2:	10 92 58 0e 	sts	0x0E58, r1
        packet[14] = 0x00;
    f8a6:	10 92 59 0e 	sts	0x0E59, r1
#ifdef USING_1MBPS
        packet[15] = 0x01;
    f8aa:	81 e0       	ldi	r24, 0x01	; 1
    f8ac:	80 93 5a 0e 	sts	0x0E5A, r24
    f8b0:	df c0       	rjmp	.+446    	; 0xfa70 <_ZL11send_packeth+0x222>
#else
        packet[15] = 0x00;
#endif
    } else {

    	rf_ch = hopping_frequency[rf_ch_num];
    f8b2:	90 91 4a 0e 	lds	r25, 0x0E4A
    f8b6:	e9 2f       	mov	r30, r25
    f8b8:	f0 e0       	ldi	r31, 0x00	; 0
    f8ba:	e8 5d       	subi	r30, 0xD8	; 216
    f8bc:	fe 4f       	sbci	r31, 0xFE	; 254
    f8be:	80 81       	ld	r24, Z
    f8c0:	80 93 65 0e 	sts	0x0E65, r24
        // received it does not matter that the packet is
        // not the same one repeated twice - nobody checks this

        // NB! packet_count overflow is handled and used in
        // callback.
        if (++packet_count == 4)
    f8c4:	80 91 49 0e 	lds	r24, 0x0E49
    f8c8:	8f 5f       	subi	r24, 0xFF	; 255
    f8ca:	80 93 49 0e 	sts	0x0E49, r24
    f8ce:	84 30       	cpi	r24, 0x04	; 4
    f8d0:	21 f4       	brne	.+8      	; 0xf8da <_ZL11send_packeth+0x8c>
            rf_ch_num = (rf_ch_num + 1) & 0x03;
    f8d2:	9f 5f       	subi	r25, 0xFF	; 255
    f8d4:	93 70       	andi	r25, 0x03	; 3
    f8d6:	90 93 4a 0e 	sts	0x0E4A, r25

       // read_controls(&throttle, &aileron, &elevator, &rudder, &flags);
        throttle = (g_chans512[2]+1023)>>1;
    f8da:	a0 91 f0 06 	lds	r26, 0x06F0
    f8de:	b0 91 f1 06 	lds	r27, 0x06F1
    f8e2:	a1 50       	subi	r26, 0x01	; 1
    f8e4:	bc 4f       	sbci	r27, 0xFC	; 252
    f8e6:	b5 95       	asr	r27
    f8e8:	a7 95       	ror	r26
    f8ea:	b0 93 5c 0e 	sts	0x0E5C, r27
    f8ee:	a0 93 5b 0e 	sts	0x0E5B, r26
        aileron = (g_chans512[3]+1023)>>1;
    f8f2:	e0 91 f2 06 	lds	r30, 0x06F2
    f8f6:	f0 91 f3 06 	lds	r31, 0x06F3
    f8fa:	e1 50       	subi	r30, 0x01	; 1
    f8fc:	fc 4f       	sbci	r31, 0xFC	; 252
    f8fe:	f5 95       	asr	r31
    f900:	e7 95       	ror	r30
    f902:	f0 93 5e 0e 	sts	0x0E5E, r31
    f906:	e0 93 5d 0e 	sts	0x0E5D, r30
        elevator = (g_chans512[1]+1023)>>1;
    f90a:	60 91 ee 06 	lds	r22, 0x06EE
    f90e:	70 91 ef 06 	lds	r23, 0x06EF
    f912:	61 50       	subi	r22, 0x01	; 1
    f914:	7c 4f       	sbci	r23, 0xFC	; 252
    f916:	75 95       	asr	r23
    f918:	67 95       	ror	r22
    f91a:	70 93 60 0e 	sts	0x0E60, r23
    f91e:	60 93 5f 0e 	sts	0x0E5F, r22
        rudder = (g_chans512[0]+1023)>>1;
    f922:	40 91 ec 06 	lds	r20, 0x06EC
    f926:	50 91 ed 06 	lds	r21, 0x06ED
    f92a:	41 50       	subi	r20, 0x01	; 1
    f92c:	5c 4f       	sbci	r21, 0xFC	; 252
    f92e:	55 95       	asr	r21
    f930:	47 95       	ror	r20
    f932:	50 93 62 0e 	sts	0x0E62, r21
    f936:	40 93 61 0e 	sts	0x0E61, r20

        flags = 0;
		if (g_chans512[4] <= 100) flags &= ~FLAG_DR;
    f93a:	80 91 f4 06 	lds	r24, 0x06F4
    f93e:	90 91 f5 06 	lds	r25, 0x06F5
    f942:	85 36       	cpi	r24, 0x65	; 101
    f944:	91 05       	cpc	r25, r1
    f946:	1c f4       	brge	.+6      	; 0xf94e <_ZL11send_packeth+0x100>
    f948:	10 92 63 0e 	sts	0x0E63, r1
    f94c:	03 c0       	rjmp	.+6      	; 0xf954 <_ZL11send_packeth+0x106>
		else flags |= FLAG_DR;
    f94e:	81 e0       	ldi	r24, 0x01	; 1
    f950:	80 93 63 0e 	sts	0x0E63, r24

		if (g_chans512[5] <= 100) flags &= ~FLAG_TH;
    f954:	80 91 f6 06 	lds	r24, 0x06F6
    f958:	90 91 f7 06 	lds	r25, 0x06F7
    f95c:	20 91 63 0e 	lds	r18, 0x0E63
    f960:	85 36       	cpi	r24, 0x65	; 101
    f962:	91 05       	cpc	r25, r1
    f964:	14 f4       	brge	.+4      	; 0xf96a <_ZL11send_packeth+0x11c>
    f966:	2d 7f       	andi	r18, 0xFD	; 253
    f968:	01 c0       	rjmp	.+2      	; 0xf96c <_ZL11send_packeth+0x11e>
		else flags |= FLAG_TH;
    f96a:	22 60       	ori	r18, 0x02	; 2
    f96c:	20 93 63 0e 	sts	0x0E63, r18

		if (g_chans512[6] <= 100) flags &= ~FLAG_IDLEUP;
    f970:	80 91 f8 06 	lds	r24, 0x06F8
    f974:	90 91 f9 06 	lds	r25, 0x06F9
    f978:	20 91 63 0e 	lds	r18, 0x0E63
    f97c:	85 36       	cpi	r24, 0x65	; 101
    f97e:	91 05       	cpc	r25, r1
    f980:	14 f4       	brge	.+4      	; 0xf986 <_ZL11send_packeth+0x138>
    f982:	2b 7f       	andi	r18, 0xFB	; 251
    f984:	01 c0       	rjmp	.+2      	; 0xf988 <_ZL11send_packeth+0x13a>
		else flags |= FLAG_IDLEUP;
    f986:	24 60       	ori	r18, 0x04	; 4
    f988:	20 93 63 0e 	sts	0x0E63, r18

		if (g_chans512[7] <= 100) flags &= ~FLAG_GYRO3;
    f98c:	80 91 fa 06 	lds	r24, 0x06FA
    f990:	90 91 fb 06 	lds	r25, 0x06FB
    f994:	20 91 63 0e 	lds	r18, 0x0E63
    f998:	85 36       	cpi	r24, 0x65	; 101
    f99a:	91 05       	cpc	r25, r1
    f99c:	14 f4       	brge	.+4      	; 0xf9a2 <_ZL11send_packeth+0x154>
    f99e:	2f 7b       	andi	r18, 0xBF	; 191
    f9a0:	01 c0       	rjmp	.+2      	; 0xf9a4 <_ZL11send_packeth+0x156>
		else flags |= FLAG_GYRO3;
    f9a2:	20 64       	ori	r18, 0x40	; 64
    f9a4:	20 93 63 0e 	sts	0x0E63, r18
		 * 2 - thr
		 * 3 - ail
		 * (getTrimValue(CurrentPhase, 0)<<2)/5+100
		 */

        packet[0]  = (throttle >> 8) & 0xFF;
    f9a8:	b0 93 4b 0e 	sts	0x0E4B, r27
        packet[1]  = throttle & 0xFF;
    f9ac:	a0 93 4c 0e 	sts	0x0E4C, r26
        packet[2]  = (aileron >> 8) & 0xFF;
    f9b0:	f0 93 4d 0e 	sts	0x0E4D, r31
        packet[3]  = aileron  & 0xFF;
    f9b4:	e0 93 4e 0e 	sts	0x0E4E, r30
        packet[4]  = (elevator >> 8) & 0xFF;
    f9b8:	70 93 4f 0e 	sts	0x0E4F, r23
        packet[5]  = elevator & 0xFF;
    f9bc:	60 93 50 0e 	sts	0x0E50, r22
        packet[6]  = (rudder >> 8) & 0xFF;
    f9c0:	50 93 51 0e 	sts	0x0E51, r21
        packet[7]  = rudder & 0xFF;
    f9c4:	40 93 52 0e 	sts	0x0E52, r20
        // Trims, middle is 0x64 (100) 0-200
        packet[8]  = (getTrimValue(CurrentPhase, 2)<<2)/5+100; // T
    f9c8:	80 91 70 08 	lds	r24, 0x0870
    f9cc:	62 e0       	ldi	r22, 0x02	; 2
    f9ce:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    f9d2:	88 0f       	add	r24, r24
    f9d4:	99 1f       	adc	r25, r25
    f9d6:	88 0f       	add	r24, r24
    f9d8:	99 1f       	adc	r25, r25
    f9da:	65 e0       	ldi	r22, 0x05	; 5
    f9dc:	70 e0       	ldi	r23, 0x00	; 0
    f9de:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    f9e2:	6c 59       	subi	r22, 0x9C	; 156
    f9e4:	60 93 53 0e 	sts	0x0E53, r22
        packet[9]  = (getTrimValue(CurrentPhase, 3)<<2)/5+100; // A
    f9e8:	80 91 70 08 	lds	r24, 0x0870
    f9ec:	63 e0       	ldi	r22, 0x03	; 3
    f9ee:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    f9f2:	88 0f       	add	r24, r24
    f9f4:	99 1f       	adc	r25, r25
    f9f6:	88 0f       	add	r24, r24
    f9f8:	99 1f       	adc	r25, r25
    f9fa:	65 e0       	ldi	r22, 0x05	; 5
    f9fc:	70 e0       	ldi	r23, 0x00	; 0
    f9fe:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    fa02:	6c 59       	subi	r22, 0x9C	; 156
    fa04:	60 93 54 0e 	sts	0x0E54, r22
        packet[10] = (getTrimValue(CurrentPhase, 1)<<2)/5+100; // E
    fa08:	80 91 70 08 	lds	r24, 0x0870
    fa0c:	61 e0       	ldi	r22, 0x01	; 1
    fa0e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    fa12:	88 0f       	add	r24, r24
    fa14:	99 1f       	adc	r25, r25
    fa16:	88 0f       	add	r24, r24
    fa18:	99 1f       	adc	r25, r25
    fa1a:	65 e0       	ldi	r22, 0x05	; 5
    fa1c:	70 e0       	ldi	r23, 0x00	; 0
    fa1e:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    fa22:	6c 59       	subi	r22, 0x9C	; 156
    fa24:	60 93 55 0e 	sts	0x0E55, r22
        packet[11] = (getTrimValue(CurrentPhase, 0)<<2)/5+100; // R
    fa28:	80 91 70 08 	lds	r24, 0x0870
    fa2c:	60 e0       	ldi	r22, 0x00	; 0
    fa2e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z12getTrimValuehh>
    fa32:	88 0f       	add	r24, r24
    fa34:	99 1f       	adc	r25, r25
    fa36:	88 0f       	add	r24, r24
    fa38:	99 1f       	adc	r25, r25
    fa3a:	65 e0       	ldi	r22, 0x05	; 5
    fa3c:	70 e0       	ldi	r23, 0x00	; 0
    fa3e:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__divmodhi4>
    fa42:	6c 59       	subi	r22, 0x9C	; 156
    fa44:	60 93 56 0e 	sts	0x0E56, r22
        packet[12] = flags;
    fa48:	80 91 63 0e 	lds	r24, 0x0E63
    fa4c:	80 93 57 0e 	sts	0x0E57, r24
        packet[13] = (packet_count << PACKET_COUNT_SHIFT) | (rf_ch_num << RF_CHANNEL_SHIFT);
    fa50:	90 91 4a 0e 	lds	r25, 0x0E4A
    fa54:	99 0f       	add	r25, r25
    fa56:	99 0f       	add	r25, r25
    fa58:	80 91 49 0e 	lds	r24, 0x0E49
    fa5c:	82 95       	swap	r24
    fa5e:	88 0f       	add	r24, r24
    fa60:	80 7e       	andi	r24, 0xE0	; 224
    fa62:	89 2b       	or	r24, r25
    fa64:	80 93 58 0e 	sts	0x0E58, r24
        packet[14] = packet[15] = 0x00;
    fa68:	10 92 5a 0e 	sts	0x0E5A, r1
    fa6c:	10 92 59 0e 	sts	0x0E59, r1
    }

    packet_sent = 0;
    fa70:	10 92 48 0e 	sts	0x0E48, r1
    NRF24L01_WriteReg(NRF24L01_05_RF_CH, rf_ch);
    fa74:	85 e0       	ldi	r24, 0x05	; 5
    fa76:	60 91 65 0e 	lds	r22, 0x0E65
    fa7a:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    NRF24L01_FlushTx();
    fa7e:	0e 94 a4 7a 	call	0xf548	; 0xf548 <_Z16NRF24L01_FlushTxv>
    NRF24L01_WritePayload(packet, sizeof(packet));
    fa82:	8b e4       	ldi	r24, 0x4B	; 75
    fa84:	9e e0       	ldi	r25, 0x0E	; 14
    fa86:	60 e1       	ldi	r22, 0x10	; 16
    fa88:	0e 94 27 7b 	call	0xf64e	; 0xf64e <_Z21NRF24L01_WritePayloadPhh>

    packet_sent = 1;
    fa8c:	81 e0       	ldi	r24, 0x01	; 1
    fa8e:	80 93 48 0e 	sts	0x0E48, r24

    // Check and adjust transmission power. We do this after
    // transmission to not bother with timeout after power
    // settings change -  we have plenty of time until next
    // packet.
    if (! rf_ch_num && tx_power != TX_POWER) {
    fa92:	80 91 4a 0e 	lds	r24, 0x0E4A
    fa96:	88 23       	and	r24, r24
    fa98:	49 f4       	brne	.+18     	; 0xfaac <_ZL11send_packeth+0x25e>
    fa9a:	80 91 64 0e 	lds	r24, 0x0E64
    fa9e:	87 30       	cpi	r24, 0x07	; 7
    faa0:	29 f0       	breq	.+10     	; 0xfaac <_ZL11send_packeth+0x25e>
        //Keep transmit power updated
        tx_power = TX_POWER;
    faa2:	87 e0       	ldi	r24, 0x07	; 7
    faa4:	80 93 64 0e 	sts	0x0E64, r24
        NRF24L01_SetPower(tx_power);
    faa8:	0e 94 de 7b 	call	0xf7bc	; 0xf7bc <_Z17NRF24L01_SetPowerh>
    faac:	08 95       	ret

0000faae <_Z11kn_callbackv>:
	}

	BitSet(spiIsInited, 0);
}

void kn_callback()
    faae:	df 93       	push	r29
    fab0:	cf 93       	push	r28
    fab2:	00 d0       	rcall	.+0      	; 0xfab4 <_Z11kn_callbackv+0x6>
    fab4:	00 d0       	rcall	.+0      	; 0xfab6 <_Z11kn_callbackv+0x8>
    fab6:	0f 92       	push	r0
    fab8:	cd b7       	in	r28, 0x3d	; 61
    faba:	de b7       	in	r29, 0x3e	; 62
{
	heartbeat |= HEART_TIMER2Mhz;
    fabc:	80 91 0b 0e 	lds	r24, 0x0E0B
    fac0:	81 60       	ori	r24, 0x01	; 1
    fac2:	80 93 0b 0e 	sts	0x0E0B, r24
	if(!spiIsInited) return;
    fac6:	80 91 46 0e 	lds	r24, 0x0E46
    faca:	88 23       	and	r24, r24
    facc:	09 f4       	brne	.+2      	; 0xfad0 <_Z11kn_callbackv+0x22>
    face:	7c c0       	rjmp	.+248    	; 0xfbc8 <_Z11kn_callbackv+0x11a>

	// T, R, E, A, DR, TH, IDLEUP, GYRO3
	DDRB |= (1<<1)|(1<<2);
    fad0:	87 b3       	in	r24, 0x17	; 23
    fad2:	86 60       	ori	r24, 0x06	; 6
    fad4:	87 bb       	out	0x17, r24	; 23

	switch (phase)
    fad6:	80 91 47 0e 	lds	r24, 0x0E47
    fada:	82 30       	cpi	r24, 0x02	; 2
    fadc:	61 f1       	breq	.+88     	; 0xfb36 <_Z11kn_callbackv+0x88>
    fade:	83 30       	cpi	r24, 0x03	; 3
    fae0:	09 f4       	brne	.+2      	; 0xfae4 <_Z11kn_callbackv+0x36>
    fae2:	49 c0       	rjmp	.+146    	; 0xfb76 <_Z11kn_callbackv+0xc8>
    fae4:	88 23       	and	r24, r24
    fae6:	09 f0       	breq	.+2      	; 0xfaea <_Z11kn_callbackv+0x3c>
    fae8:	55 c0       	rjmp	.+170    	; 0xfb94 <_Z11kn_callbackv+0xe6>
	{
	    case KN_INIT2:
	        bind_counter = BIND_COUNT;
    faea:	82 e3       	ldi	r24, 0x32	; 50
    faec:	90 e0       	ldi	r25, 0x00	; 0
    faee:	90 93 27 01 	sts	0x0127, r25
    faf2:	80 93 26 01 	sts	0x0126, r24
}


static void kn_init2()
{
    NRF24L01_FlushTx();
    faf6:	0e 94 a4 7a 	call	0xf548	; 0xf548 <_Z16NRF24L01_FlushTxv>
    NRF24L01_FlushRx();
    fafa:	0e 94 a0 7a 	call	0xf540	; 0xf540 <_Z16NRF24L01_FlushRxv>
    packet_sent = 0;
    fafe:	10 92 48 0e 	sts	0x0E48, r1
    packet_count = 0;
    fb02:	10 92 49 0e 	sts	0x0E49, r1
    rf_ch_num = 0;
    fb06:	10 92 4a 0e 	sts	0x0E4A, r1

    // Turn radio power on
    NRF24L01_WriteReg(NRF24L01_00_CONFIG, CRC_CONFIG | BV(NRF24L01_00_PWR_UP));
    fb0a:	80 e0       	ldi	r24, 0x00	; 0
    fb0c:	6e e0       	ldi	r22, 0x0E	; 14
    fb0e:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    // delayMicroseconds(150);

    NRF24L01_SetTxRxMode(TX_EN);
    fb12:	81 e0       	ldi	r24, 0x01	; 1
    fb14:	90 e0       	ldi	r25, 0x00	; 0
    fb16:	0e 94 95 7b 	call	0xf72a	; 0xf72a <_Z20NRF24L01_SetTxRxMode10TXRX_State>
	switch (phase)
	{
	    case KN_INIT2:
	        bind_counter = BIND_COUNT;
	        kn_init2();
	        phase = KN_BIND;
    fb1a:	82 e0       	ldi	r24, 0x02	; 2
    fb1c:	80 93 47 0e 	sts	0x0E47, r24
}


static void set_tx_for_bind()
{
    NRF24L01_WriteReg(NRF24L01_05_RF_CH, 83);
    fb20:	85 e0       	ldi	r24, 0x05	; 5
    fb22:	63 e5       	ldi	r22, 0x53	; 83
    fb24:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    NRF24L01_SetBitrate(NRF24L01_BR_1M); // 1Mbps for binding
    fb28:	80 e0       	ldi	r24, 0x00	; 0
    fb2a:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <_Z19NRF24L01_SetBitrateh>
    NRF24L01_WriteRegisterMulti(NRF24L01_10_TX_ADDR, (u8 *) "KNDZK", 5);
    fb2e:	80 e1       	ldi	r24, 0x10	; 16
    fb30:	60 e2       	ldi	r22, 0x20	; 32
    fb32:	71 e0       	ldi	r23, 0x01	; 1
    fb34:	1c c0       	rjmp	.+56     	; 0xfb6e <_Z11kn_callbackv+0xc0>
	        phase = KN_BIND;
	        set_tx_for_bind();
	        break;

	    case KN_BIND:
	        if (packet_sent && packet_ack() != PKT_ACKED)
    fb36:	80 91 48 0e 	lds	r24, 0x0E48
    fb3a:	88 23       	and	r24, r24
    fb3c:	91 f1       	breq	.+100    	; 0xfba2 <_Z11kn_callbackv+0xf4>
    fb3e:	0e 94 15 7c 	call	0xf82a	; 0xf82a <_ZL10packet_ackv>
    fb42:	81 30       	cpi	r24, 0x01	; 1
    fb44:	39 f5       	brne	.+78     	; 0xfb94 <_Z11kn_callbackv+0xe6>
    fb46:	2d c0       	rjmp	.+90     	; 0xfba2 <_Z11kn_callbackv+0xf4>
	            break;
	        send_packet(1);
	        if (--bind_counter == 0)
	        {
	            phase = KN_DATA;
    fb48:	83 e0       	ldi	r24, 0x03	; 3
    fb4a:	80 93 47 0e 	sts	0x0E47, r24

static void set_tx_for_data()
{
    u8 tx_addr[5];
    for (int i = 0; i < TXID_SIZE; ++i)
        tx_addr[i] = tx_id[i];
    fb4e:	19 82       	std	Y+1, r1	; 0x01
    fb50:	87 e0       	ldi	r24, 0x07	; 7
    fb52:	8a 83       	std	Y+2, r24	; 0x02
    fb54:	85 e0       	ldi	r24, 0x05	; 5
    fb56:	8b 83       	std	Y+3, r24	; 0x03
    fb58:	84 e0       	ldi	r24, 0x04	; 4
    fb5a:	8c 83       	std	Y+4, r24	; 0x04
    tx_addr[4] = 'K';
    fb5c:	8b e4       	ldi	r24, 0x4B	; 75
    fb5e:	8d 83       	std	Y+5, r24	; 0x05

#ifdef USING_1MBPS
    NRF24L01_SetBitrate(NRF24L01_BR_1M);
    fb60:	80 e0       	ldi	r24, 0x00	; 0
    fb62:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <_Z19NRF24L01_SetBitrateh>
#else
    NRF24L01_SetBitrate(NRF24L01_BR_250K);
#endif

    NRF24L01_WriteRegisterMulti(NRF24L01_10_TX_ADDR, tx_addr, 5);
    fb66:	80 e1       	ldi	r24, 0x10	; 16
    fb68:	be 01       	movw	r22, r28
    fb6a:	6f 5f       	subi	r22, 0xFF	; 255
    fb6c:	7f 4f       	sbci	r23, 0xFF	; 255
    fb6e:	45 e0       	ldi	r20, 0x05	; 5
    fb70:	0e 94 4e 7b 	call	0xf69c	; 0xf69c <_Z27NRF24L01_WriteRegisterMultihPKhh>
    fb74:	0f c0       	rjmp	.+30     	; 0xfb94 <_Z11kn_callbackv+0xe6>
	            set_tx_for_data();
	        }
	        break;

	    case KN_DATA:
	        if (packet_count >= 4)
    fb76:	80 91 49 0e 	lds	r24, 0x0E49
    fb7a:	84 30       	cpi	r24, 0x04	; 4
    fb7c:	18 f0       	brcs	.+6      	; 0xfb84 <_Z11kn_callbackv+0xd6>
	            packet_count = 0;
    fb7e:	10 92 49 0e 	sts	0x0E49, r1
    fb82:	08 c0       	rjmp	.+16     	; 0xfb94 <_Z11kn_callbackv+0xe6>
	        else
	        {
	            if (packet_sent && packet_ack() != PKT_ACKED)
    fb84:	80 91 48 0e 	lds	r24, 0x0E48
    fb88:	88 23       	and	r24, r24
    fb8a:	d1 f0       	breq	.+52     	; 0xfbc0 <_Z11kn_callbackv+0x112>
    fb8c:	0e 94 15 7c 	call	0xf82a	; 0xf82a <_ZL10packet_ackv>
    fb90:	81 30       	cpi	r24, 0x01	; 1
    fb92:	b1 f0       	breq	.+44     	; 0xfbc0 <_Z11kn_callbackv+0x112>
	            send_packet(0);
	        }
	        break;
	    }

	PORTB |= (1<<1)|(1<<2);
    fb94:	88 b3       	in	r24, 0x18	; 24
    fb96:	86 60       	ori	r24, 0x06	; 6
    fb98:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~((1<<1)|(1<<2));
    fb9a:	87 b3       	in	r24, 0x17	; 23
    fb9c:	89 7f       	andi	r24, 0xF9	; 249
    fb9e:	87 bb       	out	0x17, r24	; 23
    fba0:	13 c0       	rjmp	.+38     	; 0xfbc8 <_Z11kn_callbackv+0x11a>
	        break;

	    case KN_BIND:
	        if (packet_sent && packet_ack() != PKT_ACKED)
	            break;
	        send_packet(1);
    fba2:	81 e0       	ldi	r24, 0x01	; 1
    fba4:	0e 94 27 7c 	call	0xf84e	; 0xf84e <_ZL11send_packeth>
	        if (--bind_counter == 0)
    fba8:	80 91 26 01 	lds	r24, 0x0126
    fbac:	90 91 27 01 	lds	r25, 0x0127
    fbb0:	01 97       	sbiw	r24, 0x01	; 1
    fbb2:	90 93 27 01 	sts	0x0127, r25
    fbb6:	80 93 26 01 	sts	0x0126, r24
    fbba:	89 2b       	or	r24, r25
    fbbc:	29 f2       	breq	.-118    	; 0xfb48 <_Z11kn_callbackv+0x9a>
    fbbe:	ea cf       	rjmp	.-44     	; 0xfb94 <_Z11kn_callbackv+0xe6>
	            packet_count = 0;
	        else
	        {
	            if (packet_sent && packet_ack() != PKT_ACKED)
	                break;
	            send_packet(0);
    fbc0:	80 e0       	ldi	r24, 0x00	; 0
    fbc2:	0e 94 27 7c 	call	0xf84e	; 0xf84e <_ZL11send_packeth>
    fbc6:	e6 cf       	rjmp	.-52     	; 0xfb94 <_Z11kn_callbackv+0xe6>
	        break;
	    }

	PORTB |= (1<<1)|(1<<2);
	DDRB &= ~((1<<1)|(1<<2));
}
    fbc8:	0f 90       	pop	r0
    fbca:	0f 90       	pop	r0
    fbcc:	0f 90       	pop	r0
    fbce:	0f 90       	pop	r0
    fbd0:	0f 90       	pop	r0
    fbd2:	cf 91       	pop	r28
    fbd4:	df 91       	pop	r29
    fbd6:	08 95       	ret

0000fbd8 <_Z10kn_initAllh>:



void kn_initAll(uint8_t protocol)
{
	BitReset(spiIsInited, 0);
    fbd8:	90 91 46 0e 	lds	r25, 0x0E46
    fbdc:	9e 7f       	andi	r25, 0xFE	; 254
    fbde:	90 93 46 0e 	sts	0x0E46, r25

	if(protocol == PROTO_NRF)
    fbe2:	84 30       	cpi	r24, 0x04	; 4
    fbe4:	d1 f5       	brne	.+116    	; 0xfc5a <_Z10kn_initAllh+0x82>
	{//init
		SPI_Init();
    fbe6:	0e 94 44 7e 	call	0xfc88	; 0xfc88 <_Z8SPI_Initv>
// 2-bytes CRC
#define CRC_CONFIG (BV(NRF24L01_00_EN_CRC) | BV(NRF24L01_00_CRCO))

static void kn_init()
{
    NRF24L01_Initialize();
    fbea:	0e 94 8e 7a 	call	0xf51c	; 0xf51c <_Z19NRF24L01_Initializev>

    NRF24L01_WriteReg(NRF24L01_00_CONFIG, CRC_CONFIG); 
    fbee:	80 e0       	ldi	r24, 0x00	; 0
    fbf0:	6c e0       	ldi	r22, 0x0C	; 12
    fbf2:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    NRF24L01_WriteReg(NRF24L01_01_EN_AA, 0x00);      // No Auto Acknoledgement
    fbf6:	81 e0       	ldi	r24, 0x01	; 1
    fbf8:	60 e0       	ldi	r22, 0x00	; 0
    fbfa:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    NRF24L01_WriteReg(NRF24L01_02_EN_RXADDR, 0x01);  // Enable data pipe 0
    fbfe:	82 e0       	ldi	r24, 0x02	; 2
    fc00:	61 e0       	ldi	r22, 0x01	; 1
    fc02:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    NRF24L01_WriteReg(NRF24L01_03_SETUP_AW, 0x03);   // 5-byte RX/TX address
    fc06:	83 e0       	ldi	r24, 0x03	; 3
    fc08:	63 e0       	ldi	r22, 0x03	; 3
    fc0a:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    NRF24L01_WriteReg(NRF24L01_04_SETUP_RETR, 0);    // Disable retransmit
    fc0e:	84 e0       	ldi	r24, 0x04	; 4
    fc10:	60 e0       	ldi	r22, 0x00	; 0
    fc12:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    NRF24L01_SetPower(TX_POWER);
    fc16:	87 e0       	ldi	r24, 0x07	; 7
    fc18:	0e 94 de 7b 	call	0xf7bc	; 0xf7bc <_Z17NRF24L01_SetPowerh>
    NRF24L01_WriteReg(NRF24L01_07_STATUS, 0x70);     // Clear data ready, data sent, and retransmit
    fc1c:	87 e0       	ldi	r24, 0x07	; 7
    fc1e:	60 e7       	ldi	r22, 0x70	; 112
    fc20:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    NRF24L01_WriteReg(NRF24L01_11_RX_PW_P0, 0x20);   // bytes of data payload for pipe 0
    fc24:	81 e1       	ldi	r24, 0x11	; 17
    fc26:	60 e2       	ldi	r22, 0x20	; 32
    fc28:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>

    NRF24L01_Activate(0x73);
    fc2c:	83 e7       	ldi	r24, 0x73	; 115
    fc2e:	0e 94 a8 7a 	call	0xf550	; 0xf550 <_Z17NRF24L01_Activateh>
    NRF24L01_WriteReg(NRF24L01_1C_DYNPD, 1); // Dynamic payload for data pipe 0
    fc32:	8c e1       	ldi	r24, 0x1C	; 28
    fc34:	61 e0       	ldi	r22, 0x01	; 1
    fc36:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>
    // Enable: Dynamic Payload Length, Payload with ACK , W_TX_PAYLOAD_NOACK
    NRF24L01_WriteReg(NRF24L01_1D_FEATURE, BV(NRF2401_1D_EN_DPL) | BV(NRF2401_1D_EN_ACK_PAY) | BV(NRF2401_1D_EN_DYN_ACK));
    fc3a:	8d e1       	ldi	r24, 0x1D	; 29
    fc3c:	67 e0       	ldi	r22, 0x07	; 7
    fc3e:	0e 94 7b 7b 	call	0xf6f6	; 0xf6f6 <_Z17NRF24L01_WriteReghh>

	if(protocol == PROTO_NRF)
	{//init
		SPI_Init();
		kn_init();
		phase = KN_INIT2;// : KN_INIT2_NO_BIND;
    fc42:	10 92 47 0e 	sts	0x0E47, r1

		PORTB |= (1<<1)|(1<<2);
    fc46:	88 b3       	in	r24, 0x18	; 24
    fc48:	86 60       	ori	r24, 0x06	; 6
    fc4a:	88 bb       	out	0x18, r24	; 24
		DDRB &= ~((1<<1)|(1<<2));
    fc4c:	87 b3       	in	r24, 0x17	; 23
    fc4e:	89 7f       	andi	r24, 0xF9	; 249
    fc50:	87 bb       	out	0x17, r24	; 23
		BitSet(spiIsInited, 1);
    fc52:	80 91 46 0e 	lds	r24, 0x0E46
    fc56:	82 60       	ori	r24, 0x02	; 2
    fc58:	09 c0       	rjmp	.+18     	; 0xfc6c <_Z10kn_initAllh+0x94>
	}
	else
	{//deinit
		if(BitIsSet(spiIsInited, 1))
    fc5a:	91 ff       	sbrs	r25, 1
    fc5c:	02 c0       	rjmp	.+4      	; 0xfc62 <_Z10kn_initAllh+0x8a>
			NRF24L01_Reset();
    fc5e:	0e 94 bf 7b 	call	0xf77e	; 0xf77e <_Z14NRF24L01_Resetv>
		SPI_DeInit();
    fc62:	0e 94 4a 7e 	call	0xfc94	; 0xfc94 <_Z10SPI_DeInitv>
		BitReset(spiIsInited, 1);
    fc66:	80 91 46 0e 	lds	r24, 0x0E46
    fc6a:	8d 7f       	andi	r24, 0xFD	; 253
    fc6c:	80 93 46 0e 	sts	0x0E46, r24
	}

	BitSet(spiIsInited, 0);
    fc70:	80 91 46 0e 	lds	r24, 0x0E46
    fc74:	81 60       	ori	r24, 0x01	; 1
    fc76:	80 93 46 0e 	sts	0x0E46, r24
}
    fc7a:	08 95       	ret

0000fc7c <_Z8SPI_Sendj>:
#include "avr/io.h"
#include <avr/interrupt.h>

uint16_t SPI_Send(uint16_t data)
{
	SPDR = data;
    fc7c:	8f b9       	out	0x0f, r24	; 15

	/* Wait for transfer finished. */
	while(!(SPSR & (1<<SPIF)));
    fc7e:	77 9b       	sbis	0x0e, 7	; 14
    fc80:	fe cf       	rjmp	.-4      	; 0xfc7e <_Z8SPI_Sendj+0x2>

	/* Read the data (8 bits) from DR. */
	return SPDR;
    fc82:	8f b1       	in	r24, 0x0f	; 15
}
    fc84:	90 e0       	ldi	r25, 0x00	; 0
    fc86:	08 95       	ret

0000fc88 <_Z8SPI_Initv>:


void SPI_Init()
{
	DDRB |= /*(1<<0)|*/(1<<1)|(1<<2); //spi pins on port b MOSI SCK,SS outputs
    fc88:	87 b3       	in	r24, 0x17	; 23
    fc8a:	86 60       	ori	r24, 0x06	; 6
    fc8c:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)/*(1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL)|(1<<CPHA)*/;  // SPI enable, Master, f/16
    fc8e:	81 e5       	ldi	r24, 0x51	; 81
    fc90:	8d b9       	out	0x0d, r24	; 13
}
    fc92:	08 95       	ret

0000fc94 <_Z10SPI_DeInitv>:

void SPI_DeInit()
{
	SPCR  &= ~(1<<SPE);  // SPI disable
    fc94:	6e 98       	cbi	0x0d, 6	; 13
}
    fc96:	08 95       	ret

0000fc98 <__mulsi3>:
    fc98:	62 9f       	mul	r22, r18
    fc9a:	d0 01       	movw	r26, r0
    fc9c:	73 9f       	mul	r23, r19
    fc9e:	f0 01       	movw	r30, r0
    fca0:	82 9f       	mul	r24, r18
    fca2:	e0 0d       	add	r30, r0
    fca4:	f1 1d       	adc	r31, r1
    fca6:	64 9f       	mul	r22, r20
    fca8:	e0 0d       	add	r30, r0
    fcaa:	f1 1d       	adc	r31, r1
    fcac:	92 9f       	mul	r25, r18
    fcae:	f0 0d       	add	r31, r0
    fcb0:	83 9f       	mul	r24, r19
    fcb2:	f0 0d       	add	r31, r0
    fcb4:	74 9f       	mul	r23, r20
    fcb6:	f0 0d       	add	r31, r0
    fcb8:	65 9f       	mul	r22, r21
    fcba:	f0 0d       	add	r31, r0
    fcbc:	99 27       	eor	r25, r25
    fcbe:	72 9f       	mul	r23, r18
    fcc0:	b0 0d       	add	r27, r0
    fcc2:	e1 1d       	adc	r30, r1
    fcc4:	f9 1f       	adc	r31, r25
    fcc6:	63 9f       	mul	r22, r19
    fcc8:	b0 0d       	add	r27, r0
    fcca:	e1 1d       	adc	r30, r1
    fccc:	f9 1f       	adc	r31, r25
    fcce:	bd 01       	movw	r22, r26
    fcd0:	cf 01       	movw	r24, r30
    fcd2:	11 24       	eor	r1, r1
    fcd4:	08 95       	ret

0000fcd6 <__udivmodqi4>:
    fcd6:	99 1b       	sub	r25, r25
    fcd8:	79 e0       	ldi	r23, 0x09	; 9
    fcda:	04 c0       	rjmp	.+8      	; 0xfce4 <__udivmodqi4_ep>

0000fcdc <__udivmodqi4_loop>:
    fcdc:	99 1f       	adc	r25, r25
    fcde:	96 17       	cp	r25, r22
    fce0:	08 f0       	brcs	.+2      	; 0xfce4 <__udivmodqi4_ep>
    fce2:	96 1b       	sub	r25, r22

0000fce4 <__udivmodqi4_ep>:
    fce4:	88 1f       	adc	r24, r24
    fce6:	7a 95       	dec	r23
    fce8:	c9 f7       	brne	.-14     	; 0xfcdc <__udivmodqi4_loop>
    fcea:	80 95       	com	r24
    fcec:	08 95       	ret

0000fcee <__divmodqi4>:
    fcee:	87 fb       	bst	r24, 7
    fcf0:	08 2e       	mov	r0, r24
    fcf2:	06 26       	eor	r0, r22
    fcf4:	87 fd       	sbrc	r24, 7
    fcf6:	81 95       	neg	r24
    fcf8:	67 fd       	sbrc	r22, 7
    fcfa:	61 95       	neg	r22
    fcfc:	ec df       	rcall	.-40     	; 0xfcd6 <__udivmodqi4>
    fcfe:	0e f4       	brtc	.+2      	; 0xfd02 <__divmodqi4_1>
    fd00:	91 95       	neg	r25

0000fd02 <__divmodqi4_1>:
    fd02:	07 fc       	sbrc	r0, 7
    fd04:	81 95       	neg	r24

0000fd06 <__divmodqi4_exit>:
    fd06:	08 95       	ret

0000fd08 <__udivmodhi4>:
    fd08:	aa 1b       	sub	r26, r26
    fd0a:	bb 1b       	sub	r27, r27
    fd0c:	51 e1       	ldi	r21, 0x11	; 17
    fd0e:	07 c0       	rjmp	.+14     	; 0xfd1e <__udivmodhi4_ep>

0000fd10 <__udivmodhi4_loop>:
    fd10:	aa 1f       	adc	r26, r26
    fd12:	bb 1f       	adc	r27, r27
    fd14:	a6 17       	cp	r26, r22
    fd16:	b7 07       	cpc	r27, r23
    fd18:	10 f0       	brcs	.+4      	; 0xfd1e <__udivmodhi4_ep>
    fd1a:	a6 1b       	sub	r26, r22
    fd1c:	b7 0b       	sbc	r27, r23

0000fd1e <__udivmodhi4_ep>:
    fd1e:	88 1f       	adc	r24, r24
    fd20:	99 1f       	adc	r25, r25
    fd22:	5a 95       	dec	r21
    fd24:	a9 f7       	brne	.-22     	; 0xfd10 <__udivmodhi4_loop>
    fd26:	80 95       	com	r24
    fd28:	90 95       	com	r25
    fd2a:	bc 01       	movw	r22, r24
    fd2c:	cd 01       	movw	r24, r26
    fd2e:	08 95       	ret

0000fd30 <__divmodhi4>:
    fd30:	97 fb       	bst	r25, 7
    fd32:	09 2e       	mov	r0, r25
    fd34:	07 26       	eor	r0, r23
    fd36:	0a d0       	rcall	.+20     	; 0xfd4c <__divmodhi4_neg1>
    fd38:	77 fd       	sbrc	r23, 7
    fd3a:	04 d0       	rcall	.+8      	; 0xfd44 <__divmodhi4_neg2>
    fd3c:	e5 df       	rcall	.-54     	; 0xfd08 <__udivmodhi4>
    fd3e:	06 d0       	rcall	.+12     	; 0xfd4c <__divmodhi4_neg1>
    fd40:	00 20       	and	r0, r0
    fd42:	1a f4       	brpl	.+6      	; 0xfd4a <__divmodhi4_exit>

0000fd44 <__divmodhi4_neg2>:
    fd44:	70 95       	com	r23
    fd46:	61 95       	neg	r22
    fd48:	7f 4f       	sbci	r23, 0xFF	; 255

0000fd4a <__divmodhi4_exit>:
    fd4a:	08 95       	ret

0000fd4c <__divmodhi4_neg1>:
    fd4c:	f6 f7       	brtc	.-4      	; 0xfd4a <__divmodhi4_exit>
    fd4e:	90 95       	com	r25
    fd50:	81 95       	neg	r24
    fd52:	9f 4f       	sbci	r25, 0xFF	; 255
    fd54:	08 95       	ret

0000fd56 <__udivmodsi4>:
    fd56:	a1 e2       	ldi	r26, 0x21	; 33
    fd58:	1a 2e       	mov	r1, r26
    fd5a:	aa 1b       	sub	r26, r26
    fd5c:	bb 1b       	sub	r27, r27
    fd5e:	fd 01       	movw	r30, r26
    fd60:	0d c0       	rjmp	.+26     	; 0xfd7c <__udivmodsi4_ep>

0000fd62 <__udivmodsi4_loop>:
    fd62:	aa 1f       	adc	r26, r26
    fd64:	bb 1f       	adc	r27, r27
    fd66:	ee 1f       	adc	r30, r30
    fd68:	ff 1f       	adc	r31, r31
    fd6a:	a2 17       	cp	r26, r18
    fd6c:	b3 07       	cpc	r27, r19
    fd6e:	e4 07       	cpc	r30, r20
    fd70:	f5 07       	cpc	r31, r21
    fd72:	20 f0       	brcs	.+8      	; 0xfd7c <__udivmodsi4_ep>
    fd74:	a2 1b       	sub	r26, r18
    fd76:	b3 0b       	sbc	r27, r19
    fd78:	e4 0b       	sbc	r30, r20
    fd7a:	f5 0b       	sbc	r31, r21

0000fd7c <__udivmodsi4_ep>:
    fd7c:	66 1f       	adc	r22, r22
    fd7e:	77 1f       	adc	r23, r23
    fd80:	88 1f       	adc	r24, r24
    fd82:	99 1f       	adc	r25, r25
    fd84:	1a 94       	dec	r1
    fd86:	69 f7       	brne	.-38     	; 0xfd62 <__udivmodsi4_loop>
    fd88:	60 95       	com	r22
    fd8a:	70 95       	com	r23
    fd8c:	80 95       	com	r24
    fd8e:	90 95       	com	r25
    fd90:	9b 01       	movw	r18, r22
    fd92:	ac 01       	movw	r20, r24
    fd94:	bd 01       	movw	r22, r26
    fd96:	cf 01       	movw	r24, r30
    fd98:	08 95       	ret

0000fd9a <__divmodsi4>:
    fd9a:	97 fb       	bst	r25, 7
    fd9c:	09 2e       	mov	r0, r25
    fd9e:	05 26       	eor	r0, r21
    fda0:	0e d0       	rcall	.+28     	; 0xfdbe <__divmodsi4_neg1>
    fda2:	57 fd       	sbrc	r21, 7
    fda4:	04 d0       	rcall	.+8      	; 0xfdae <__divmodsi4_neg2>
    fda6:	d7 df       	rcall	.-82     	; 0xfd56 <__udivmodsi4>
    fda8:	0a d0       	rcall	.+20     	; 0xfdbe <__divmodsi4_neg1>
    fdaa:	00 1c       	adc	r0, r0
    fdac:	38 f4       	brcc	.+14     	; 0xfdbc <__divmodsi4_exit>

0000fdae <__divmodsi4_neg2>:
    fdae:	50 95       	com	r21
    fdb0:	40 95       	com	r20
    fdb2:	30 95       	com	r19
    fdb4:	21 95       	neg	r18
    fdb6:	3f 4f       	sbci	r19, 0xFF	; 255
    fdb8:	4f 4f       	sbci	r20, 0xFF	; 255
    fdba:	5f 4f       	sbci	r21, 0xFF	; 255

0000fdbc <__divmodsi4_exit>:
    fdbc:	08 95       	ret

0000fdbe <__divmodsi4_neg1>:
    fdbe:	f6 f7       	brtc	.-4      	; 0xfdbc <__divmodsi4_exit>
    fdc0:	90 95       	com	r25
    fdc2:	80 95       	com	r24
    fdc4:	70 95       	com	r23
    fdc6:	61 95       	neg	r22
    fdc8:	7f 4f       	sbci	r23, 0xFF	; 255
    fdca:	8f 4f       	sbci	r24, 0xFF	; 255
    fdcc:	9f 4f       	sbci	r25, 0xFF	; 255
    fdce:	08 95       	ret

0000fdd0 <__tablejump2__>:
    fdd0:	ee 0f       	add	r30, r30
    fdd2:	ff 1f       	adc	r31, r31

0000fdd4 <__tablejump__>:
    fdd4:	05 90       	lpm	r0, Z+
    fdd6:	f4 91       	lpm	r31, Z+
    fdd8:	e0 2d       	mov	r30, r0
    fdda:	09 94       	ijmp

0000fddc <memmove>:
    fddc:	68 17       	cp	r22, r24
    fdde:	79 07       	cpc	r23, r25
    fde0:	68 f4       	brcc	.+26     	; 0xfdfc <memmove+0x20>
    fde2:	fb 01       	movw	r30, r22
    fde4:	dc 01       	movw	r26, r24
    fde6:	e4 0f       	add	r30, r20
    fde8:	f5 1f       	adc	r31, r21
    fdea:	a4 0f       	add	r26, r20
    fdec:	b5 1f       	adc	r27, r21
    fdee:	02 c0       	rjmp	.+4      	; 0xfdf4 <memmove+0x18>
    fdf0:	02 90       	ld	r0, -Z
    fdf2:	0e 92       	st	-X, r0
    fdf4:	41 50       	subi	r20, 0x01	; 1
    fdf6:	50 40       	sbci	r21, 0x00	; 0
    fdf8:	d8 f7       	brcc	.-10     	; 0xfdf0 <memmove+0x14>
    fdfa:	08 95       	ret
    fdfc:	0c 94 17 7f 	jmp	0xfe2e	; 0xfe2e <memcpy>

0000fe00 <memset>:
    fe00:	dc 01       	movw	r26, r24
    fe02:	01 c0       	rjmp	.+2      	; 0xfe06 <memset+0x6>
    fe04:	6d 93       	st	X+, r22
    fe06:	41 50       	subi	r20, 0x01	; 1
    fe08:	50 40       	sbci	r21, 0x00	; 0
    fe0a:	e0 f7       	brcc	.-8      	; 0xfe04 <memset+0x4>
    fe0c:	08 95       	ret

0000fe0e <__eerd_block_m64>:
    fe0e:	dc 01       	movw	r26, r24
    fe10:	cb 01       	movw	r24, r22

0000fe12 <__eerd_blraw_m64>:
    fe12:	fc 01       	movw	r30, r24
    fe14:	e1 99       	sbic	0x1c, 1	; 28
    fe16:	fe cf       	rjmp	.-4      	; 0xfe14 <__eerd_blraw_m64+0x2>
    fe18:	06 c0       	rjmp	.+12     	; 0xfe26 <__eerd_blraw_m64+0x14>
    fe1a:	ff bb       	out	0x1f, r31	; 31
    fe1c:	ee bb       	out	0x1e, r30	; 30
    fe1e:	e0 9a       	sbi	0x1c, 0	; 28
    fe20:	31 96       	adiw	r30, 0x01	; 1
    fe22:	0d b2       	in	r0, 0x1d	; 29
    fe24:	0d 92       	st	X+, r0
    fe26:	41 50       	subi	r20, 0x01	; 1
    fe28:	50 40       	sbci	r21, 0x00	; 0
    fe2a:	b8 f7       	brcc	.-18     	; 0xfe1a <__eerd_blraw_m64+0x8>
    fe2c:	08 95       	ret

0000fe2e <memcpy>:
    fe2e:	fb 01       	movw	r30, r22
    fe30:	dc 01       	movw	r26, r24
    fe32:	02 c0       	rjmp	.+4      	; 0xfe38 <memcpy+0xa>
    fe34:	01 90       	ld	r0, Z+
    fe36:	0d 92       	st	X+, r0
    fe38:	41 50       	subi	r20, 0x01	; 1
    fe3a:	50 40       	sbci	r21, 0x00	; 0
    fe3c:	d8 f7       	brcc	.-10     	; 0xfe34 <memcpy+0x6>
    fe3e:	08 95       	ret

0000fe40 <_exit>:
    fe40:	f8 94       	cli

0000fe42 <__stop_program>:
    fe42:	ff cf       	rjmp	.-2      	; 0xfe42 <__stop_program>
