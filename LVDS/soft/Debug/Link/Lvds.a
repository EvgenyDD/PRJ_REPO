;/*
; * LCDS.c
; *
; * Created: 20.01.2016 16:03:18
; * Author: Evgeny
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
  .EQU __sm_standby=0x08
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;#define F_CPU 8000000UL
;
;
;volatile unsigned char value = 0;
;int i;
;int numFlash = 0;
;int interval = 0;
;volatile unsigned int curPotValue;
;
;void MeasureBattery()
; 0000 0015 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0016     ADMUX = 1;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0017     delay_ms(1);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0018 
; 0000 0019     ADCSRA |= (1<<ADSC);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001A     while (ADCSRA & (1<<ADSC))
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001B 
; 0000 001C     value = ADCL;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 1
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001D }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;unsigned char MeasurePot()
; 0000 0020 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0021     ADMUX = 2;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0022     delay_ms(1);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0023 
; 0000 0024     ADCSRA |= (1<<ADSC);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0025     while (ADCSRA & (1<<ADSC))
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0026 
; 0000 0027     return ADCL;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0028 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void main( void )
; 0000 002B {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002C         // Main Clock source: Calibrated Internal 8 MHz Osc.
; 0000 002D     CCP=0xd8;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002E     CLKMSR=(0<<CLKMS1) | (0<<CLKMS0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002F     // Clock Prescaler division factor: 1
; 0000 0030     CCP=0xd8;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0031     CLKPSR=(0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0032     // internal_clk = 8 MHz
; 0000 0033 
; 0000 0034 
; 0000 0035     // pulse period 20mS, lenght 1 - 1.5(middle) - 2mS
; 0000 0036     // 8 /64 timer counter prescaler /187 timer value = 668.44Hz (1.49mS)
; 0000 0037 
; 0000 0038     //WGM3:0 = 0101 -> Fast PWM 8 bit
; 0000 0039     TCCR0A = (1<<COM0A1) | (0<<COM0A0) | (0<<WGM01) | (1<<WGM00);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003A     TCCR0B = (0<<WGM03) | (1<<WGM02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003B 
; 0000 003C      // Enable ADC, presc 1:8 for 125kHz ADC-clock
; 0000 003D     ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003E     ADCSRB = 0;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003F     DIDR0 = (1<<ADC2D) | (1<<ADC1D);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0040 
; 0000 0041 
; 0000 0042     DDRB = 1<<PORTB0;           //timer out
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0043     //PUEB = 1<<PUEB1;
; 0000 0044 
; 0000 0045     //delay_ms(200);
; 0000 0046 
; 0000 0047     for(i=0; i<40; i++) MeasureBattery();
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004A if(value<= 208)                  numFlash = 1;
;PCODE: $0000005C VOL: 1
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004B     else if(value>208 && value<=214) numFlash = 2; //3.55-3.65V
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 1
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 1
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 004C     else if(value>214 && value<=220) numFlash = 3; //3.65-3.75V
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 1
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 1
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 004D     else if(value>220 && value<=226) numFlash = 4; //3.75-3.85V
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 1
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 1
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 004E     else if(value>226 && value<=232) numFlash = 5; //3.85-3.95V
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 1
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 1
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 004F     else if(value>232 && value<=238) numFlash = 6; //3.95-4.05V
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 1
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 1
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0050     else if(value>238 && value<=244) numFlash = 7; //4.05-4.15V
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 1
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 1
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0051     else if(value>244)               numFlash = 8; //>4.15V
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 1
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0052 
; 0000 0053 
; 0000 0054     for(i=0; i<numFlash; i++)
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0055     {
;PCODE: $000000CF VOL: 0
; 0000 0056         OCR0A = 30;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0057         delay_ms(330);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0058         OCR0A = 2;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0059         delay_ms(330);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 005A     }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 005B 
; 0000 005C     for(;;)
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 005D     {
;PCODE: $000000E1 VOL: 0
; 0000 005E         delay_ms(50);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 005F         for(i=0; i<40; i++) MeasurePot();
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0060 curPotValue = 0;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 1
; 0000 0061         for(i=0; i<16; i++) curPotValue += MeasurePot();
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 1
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 1
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0062 OCR0A = curPotValue>>4;
;PCODE: $0000010D VOL: 1
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0063 
; 0000 0064         if(++interval == (15*20))
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0065         {
;PCODE: $00000115 VOL: 0
; 0000 0066             delay_ms(10);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0067             for(i=0; i<80; i++) MeasureBattery();
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0069 if(value < 200 && value > 80)
;PCODE: $0000012A VOL: 1
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 1
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 006A             {
;PCODE: $00000134 VOL: 0
; 0000 006B                 for(i=0; i<3; i++)
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 006C                 {
;PCODE: $0000013F VOL: 0
; 0000 006D                     OCR0A = curPotValue>10?curPotValue:20;
;PCODE: $00000140 VOL: 1
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 1
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 006E                     delay_ms(330);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 006F                     OCR0A = 2;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0070                     delay_ms(330);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0071                 }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0072             }
;PCODE: $00000157 VOL: 0
; 0000 0073 
; 0000 0074             //OCR0A = value;
; 0000 0075             //delay_ms(1000);
; 0000 0076             interval = 0;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0077         }
;PCODE: $0000015B VOL: 0
; 0000 0078     }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0079 }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;
;
;//
;//// Timer 0 overflow interrupt service routine
;//interrupt [TIM0_OVF] void timer0_ovf_isr()
;//{
;//    static unsigned char int_count = 0;     //to make the servo signal
;//    // 1mS =180, 1.5mS=143, 2mS=105, 2.1=100
;//
;//    if(int_count++ >= 5)
;//    {
;//        int_count = 0;
;//        if(timer !=0)
;//        {
;//            magic = 130;
;//        }
;//        else
;//        {
;//            if(makePress == 1)
;//                magic = 10;
;//            else
;//                magic = 130;
;//        }
;//        OCR0A = magic;
;//    }
;//    else
;//    {
;//        OCR0A = 255;            //low level all period (inverse compare out)
;//    }
;//
;//    if(timer) timer--;
;//}
